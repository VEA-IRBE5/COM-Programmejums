
IRBE_5_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800b458  0800b458  0001b458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b914  0800b914  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800b914  0800b914  0001b914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b91c  0800b91c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b91c  0800b91c  0001b91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b920  0800b920  0001b920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800b924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  20000200  0800bb24  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  0800bb24  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b25  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fac  00000000  00000000  00036d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00039d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0003b108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f60  00000000  00000000  0003c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016745  00000000  00000000  00056358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e3c3  00000000  00000000  0006ca9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ae60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f4  00000000  00000000  0010aeb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b440 	.word	0x0800b440

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800b440 	.word	0x0800b440

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

void SX1278_hw_init(SX1278_hw_t * hw) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000f84:	2101      	movs	r1, #1
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f80d 	bl	8000fa6 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6858      	ldr	r0, [r3, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	2201      	movs	r2, #1
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f004 f931 	bl	8005200 <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <SX1278_hw_SetNSS>:

void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6958      	ldr	r0, [r3, #20]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	b299      	uxth	r1, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	bf0c      	ite	eq
 8000fc0:	2301      	moveq	r3, #1
 8000fc2:	2300      	movne	r3, #0
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	f004 f91a 	bl	8005200 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <SX1278_hw_Reset>:

void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000fdc:	2101      	movs	r1, #1
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffe1 	bl	8000fa6 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f004 f905 	bl	8005200 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 f856 	bl	80010a8 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6858      	ldr	r0, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	2201      	movs	r2, #1
 8001008:	4619      	mov	r1, r3
 800100a:	f004 f8f9 	bl	8005200 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800100e:	2064      	movs	r0, #100	; 0x64
 8001010:	f000 f84a 	bl	80010a8 <SX1278_hw_DelayMs>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <SX1278_hw_SPICommand>:

void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8001028:	2100      	movs	r1, #0
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffbb 	bl	8000fa6 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6998      	ldr	r0, [r3, #24]
 8001034:	1cf9      	adds	r1, r7, #3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	2201      	movs	r2, #1
 800103c:	f004 fe33 	bl	8005ca6 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001040:	bf00      	nop
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4618      	mov	r0, r3
 8001048:	f005 f90b 	bl	8006262 <HAL_SPI_GetState>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d1f7      	bne.n	8001042 <SX1278_hw_SPICommand+0x26>
		;
}
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <SX1278_hw_SPIReadByte>:

uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af02      	add	r7, sp, #8
 8001062:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001068:	2300      	movs	r3, #0
 800106a:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 800106c:	2100      	movs	r1, #0
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ff99 	bl	8000fa6 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6998      	ldr	r0, [r3, #24]
 8001078:	f107 020e 	add.w	r2, r7, #14
 800107c:	f107 010f 	add.w	r1, r7, #15
 8001080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	f004 ff49 	bl	8005f1e <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800108c:	bf00      	nop
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4618      	mov	r0, r3
 8001094:	f005 f8e5 	bl	8006262 <HAL_SPI_GetState>
 8001098:	4603      	mov	r3, r0
 800109a:	2b01      	cmp	r3, #1
 800109c:	d1f7      	bne.n	800108e <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 800109e:	7bbb      	ldrb	r3, [r7, #14]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <SX1278_hw_DelayMs>:

void SX1278_hw_DelayMs(uint32_t msec) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f002 fb67 	bl	8003784 <HAL_Delay>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	78fa      	ldrb	r2, [r7, #3]
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffa2 	bl	800101c <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ffbd 	bl	800105c <SX1278_hw_SPIReadByte>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2101      	movs	r1, #1
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5a 	bl	8000fa6 <SX1278_hw_SetNSS>
	return tmp;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
 8001108:	4613      	mov	r3, r2
 800110a:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff47 	bl	8000fa6 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	4610      	mov	r0, r2
 8001128:	f7ff ff78 	bl	800101c <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	78ba      	ldrb	r2, [r7, #2]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff71 	bl	800101c <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2101      	movs	r1, #1
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff30 	bl	8000fa6 <SX1278_hw_SetNSS>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	461a      	mov	r2, r3
 800115a:	460b      	mov	r3, r1
 800115c:	72fb      	strb	r3, [r7, #11]
 800115e:	4613      	mov	r3, r2
 8001160:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001162:	7abb      	ldrb	r3, [r7, #10]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d929      	bls.n	80011bc <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff19 	bl	8000fa6 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	7afb      	ldrb	r3, [r7, #11]
 800117a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4619      	mov	r1, r3
 8001182:	4610      	mov	r0, r2
 8001184:	f7ff ff4a 	bl	800101c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001188:	2300      	movs	r3, #0
 800118a:	75fb      	strb	r3, [r7, #23]
 800118c:	e00b      	b.n	80011a6 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6818      	ldr	r0, [r3, #0]
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff ff3e 	bl	800101c <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	3301      	adds	r3, #1
 80011a4:	75fb      	strb	r3, [r7, #23]
 80011a6:	7dfa      	ldrb	r2, [r7, #23]
 80011a8:	7abb      	ldrb	r3, [r7, #10]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d3ef      	bcc.n	800118e <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2101      	movs	r1, #1
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fef6 	bl	8000fa6 <SX1278_hw_SetNSS>
 80011ba:	e000      	b.n	80011be <SX1278_SPIBurstWrite+0x70>
		return;
 80011bc:	bf00      	nop
	}
}
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7919      	ldrb	r1, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	795a      	ldrb	r2, [r3, #5]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7998      	ldrb	r0, [r3, #6]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	79db      	ldrb	r3, [r3, #7]
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4603      	mov	r3, r0
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f805 	bl	80011f0 <SX1278_config>
			module->LoRa_BW);
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
	uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	4608      	mov	r0, r1
 80011fa:	4611      	mov	r1, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	4603      	mov	r3, r0
 8001200:	70fb      	strb	r3, [r7, #3]
 8001202:	460b      	mov	r3, r1
 8001204:	70bb      	strb	r3, [r7, #2]
 8001206:	4613      	mov	r3, r2
 8001208:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f976 	bl	80014fc <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001210:	200f      	movs	r0, #15
 8001212:	f7ff ff49 	bl	80010a8 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f980 	bl	800151c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
	(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 800121c:	78fa      	ldrb	r2, [r7, #3]
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	4a41      	ldr	r2, [pc, #260]	; (800132c <SX1278_config+0x13c>)
 8001226:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8001228:	2303      	movs	r3, #3
 800122a:	2106      	movs	r1, #6
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff8e 	bl	800114e <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, 0b10000000); //Setting output power parameter
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	2109      	movs	r1, #9
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff60 	bl	80010fc <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800123c:	220b      	movs	r2, #11
 800123e:	210b      	movs	r1, #11
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff5b 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001246:	2223      	movs	r2, #35	; 0x23
 8001248:	210c      	movs	r1, #12
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff56 	bl	80010fc <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8001250:	787b      	ldrb	r3, [r7, #1]
 8001252:	4a37      	ldr	r2, [pc, #220]	; (8001330 <SX1278_config+0x140>)
 8001254:	5cd3      	ldrb	r3, [r2, r3]
 8001256:	2b06      	cmp	r3, #6
 8001258:	d131      	bne.n	80012be <SX1278_config+0xce>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800125a:	7e3b      	ldrb	r3, [r7, #24]
 800125c:	4a35      	ldr	r2, [pc, #212]	; (8001334 <SX1278_config+0x144>)
 800125e:	5cd3      	ldrb	r3, [r2, r3]
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001264:	3303      	adds	r3, #3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	211d      	movs	r1, #29
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff45 	bl	80010fc <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8001272:	787b      	ldrb	r3, [r7, #1]
 8001274:	4a2e      	ldr	r2, [pc, #184]	; (8001330 <SX1278_config+0x140>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800127c:	3307      	adds	r3, #7
 800127e:	b2db      	uxtb	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	211e      	movs	r1, #30
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff39 	bl	80010fc <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 800128a:	2131      	movs	r1, #49	; 0x31
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff16 	bl	80010be <SX1278_SPIRead>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	f023 0307 	bic.w	r3, r3, #7
 800129c:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	f043 0305 	orr.w	r3, r3, #5
 80012a4:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	461a      	mov	r2, r3
 80012aa:	2131      	movs	r1, #49	; 0x31
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff25 	bl	80010fc <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80012b2:	220c      	movs	r2, #12
 80012b4:	2137      	movs	r1, #55	; 0x37
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff20 	bl	80010fc <SX1278_SPIWrite>
 80012bc:	e017      	b.n	80012ee <SX1278_config+0xfe>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80012be:	7e3b      	ldrb	r3, [r7, #24]
 80012c0:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <SX1278_config+0x144>)
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80012c8:	3302      	adds	r3, #2
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	211d      	movs	r1, #29
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff13 	bl	80010fc <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 80012d6:	787b      	ldrb	r3, [r7, #1]
 80012d8:	4a15      	ldr	r2, [pc, #84]	; (8001330 <SX1278_config+0x140>)
 80012da:	5cd3      	ldrb	r3, [r2, r3]
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80012e0:	3307      	adds	r3, #7
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	211e      	movs	r1, #30
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff07 	bl	80010fc <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80012ee:	22ff      	movs	r2, #255	; 0xff
 80012f0:	211f      	movs	r1, #31
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff02 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80012f8:	2200      	movs	r2, #0
 80012fa:	2120      	movs	r1, #32
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fefd 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 8001302:	220c      	movs	r2, #12
 8001304:	2121      	movs	r1, #33	; 0x21
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fef8 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 800130c:	2201      	movs	r2, #1
 800130e:	2141      	movs	r1, #65	; 0x41
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff fef3 	bl	80010fc <SX1278_SPIWrite>
	module->readBytes = 0;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f8dc 	bl	80014dc <SX1278_standby>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	0800b504 	.word	0x0800b504
 8001330:	0800b508 	.word	0x0800b508
 8001334:	0800b510 	.word	0x0800b510

08001338 <SX1278_RTTY_Config>:

void SX1278_RTTY_Config(SX1278_t * module){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	SX1278_FSK_Config(module); // set base parameters
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f895 	bl	8001470 <SX1278_FSK_Config>
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f8d8 	bl	80014fc <SX1278_sleep>

	SX1278_SPIWrite(module, LR_RegPaConfig, 0b11110000);//0x87);	//Normal and RX
 800134c:	22f0      	movs	r2, #240	; 0xf0
 800134e:	2109      	movs	r1, #9
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fed3 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);
 8001356:	2284      	movs	r2, #132	; 0x84
 8001358:	214d      	movs	r1, #77	; 0x4d
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fece 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41);
 8001360:	2241      	movs	r2, #65	; 0x41
 8001362:	2140      	movs	r1, #64	; 0x40
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fec9 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegPayloadLength, 8); //Payload Length 8 bytes
 800136a:	2208      	movs	r2, #8
 800136c:	2132      	movs	r1, #50	; 0x32
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fec4 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegFifoThresh, 8 - 1);     //Fixed length, packetformat = 0
 8001374:	2207      	movs	r2, #7
 8001376:	2135      	movs	r1, #53	; 0x35
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff febf 	bl	80010fc <SX1278_SPIWrite>

	SX1278_SPIWrite(module, RegFdevLsb, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2105      	movs	r1, #5
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff feba 	bl	80010fc <SX1278_SPIWrite>
	SX1278_standby(module); //Entry standby mode
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f8a7 	bl	80014dc <SX1278_standby>
	SX1278_hw_DelayMs(1);
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff fe8a 	bl	80010a8 <SX1278_hw_DelayMs>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <SX1278_RTTY_Stop>:

void SX1278_RTTY_Stop(SX1278_t * module){
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	//SX1278_SPIWrite(module, LR_RegOpMode, 0b1);
	SX1278_standby(module);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f899 	bl	80014dc <SX1278_standby>
	uint8_t ret = 1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 80013ae:	213e      	movs	r1, #62	; 0x3e
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff fe84 	bl	80010be <SX1278_SPIRead>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db00      	blt.n	80013c4 <SX1278_RTTY_Stop+0x28>
		ret = SX1278_SPIRead(module, 0x3e);
 80013c2:	e7f4      	b.n	80013ae <SX1278_RTTY_Stop+0x12>
			break;
 80013c4:	bf00      	nop
		}
	}
}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <SX1278_RTTY_WriteLow>:

void SX1278_RTTY_WriteLow(SX1278_t * module){
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
	SX1278_RTTY_Stop(module);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffe0 	bl	800139c <SX1278_RTTY_Stop>
	SX1278_SPIWrite(module, RegFreqLsb, 0); //  LSB
 80013dc:	2200      	movs	r2, #0
 80013de:	2108      	movs	r1, #8
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fe8b 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1010);
 80013e6:	220a      	movs	r2, #10
 80013e8:	2101      	movs	r1, #1
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fe86 	bl	80010fc <SX1278_SPIWrite>

	uint8_t ret = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 80013f4:	213e      	movs	r1, #62	; 0x3e
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fe61 	bl	80010be <SX1278_SPIRead>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 8001400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db00      	blt.n	800140a <SX1278_RTTY_WriteLow+0x3c>
		ret = SX1278_SPIRead(module, 0x3e);
 8001408:	e7f4      	b.n	80013f4 <SX1278_RTTY_WriteLow+0x26>
			break;
 800140a:	bf00      	nop
		}
	}


	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);
 800140c:	220b      	movs	r2, #11
 800140e:	2101      	movs	r1, #1
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fe73 	bl	80010fc <SX1278_SPIWrite>

}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <SX1278_RTTY_WriteHigh>:

void SX1278_RTTY_WriteHigh(SX1278_t * module){
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
	SX1278_RTTY_Stop(module);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffb8 	bl	800139c <SX1278_RTTY_Stop>
	SX1278_SPIWrite(module, RegFreqLsb, 10); //  HSB
 800142c:	220a      	movs	r2, #10
 800142e:	2108      	movs	r1, #8
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fe63 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1010);
 8001436:	220a      	movs	r2, #10
 8001438:	2101      	movs	r1, #1
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fe5e 	bl	80010fc <SX1278_SPIWrite>

	uint8_t ret = 1;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 8001444:	213e      	movs	r1, #62	; 0x3e
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fe39 	bl	80010be <SX1278_SPIRead>
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 8001450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db00      	blt.n	800145a <SX1278_RTTY_WriteHigh+0x3c>
		ret = SX1278_SPIRead(module, 0x3e);
 8001458:	e7f4      	b.n	8001444 <SX1278_RTTY_WriteHigh+0x26>
			break;
 800145a:	bf00      	nop
		}
	}
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);
 800145c:	220b      	movs	r2, #11
 800145e:	2101      	movs	r1, #1
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fe4b 	bl	80010fc <SX1278_SPIWrite>
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <SX1278_FSK_Config>:

void SX1278_FSK_Config(SX1278_t * module) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f83f 	bl	80014fc <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800147e:	200f      	movs	r0, #15
 8001480:	f7ff fe12 	bl	80010a8 <SX1278_hw_DelayMs>

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8001484:	2303      	movs	r3, #3
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <SX1278_FSK_Config+0x68>)
 8001488:	2106      	movs	r1, #6
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fe5f 	bl	800114e <SX1278_SPIBurstWrite>
	(uint8_t*) SX1278_Frequency[SX1278_433MHZ], 3); //setting  frequency parameter 434 MHz

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, 0b10000000); //Setting output power parameter
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	2109      	movs	r1, #9
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fe31 	bl	80010fc <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800149a:	220b      	movs	r2, #11
 800149c:	210b      	movs	r1, #11
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fe2c 	bl	80010fc <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80014a4:	2223      	movs	r2, #35	; 0x23
 80014a6:	210c      	movs	r1, #12
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fe27 	bl	80010fc <SX1278_SPIWrite>

	//SX1278_SPIWrite(module, 0x1f, 0x00);		//disable preamble detect
	//SX1278_SPIWrite(module, 0x27, 0b10000000);		//disable sync word

	SX1278_SPIWrite(module, 0x30, 0b1000);     //Fixed length, packetformat = 0
 80014ae:	2208      	movs	r2, #8
 80014b0:	2130      	movs	r1, #48	; 0x30
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fe22 	bl	80010fc <SX1278_SPIWrite>
	// set datarate
	//datarate 9c40 = 800bps

	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80014b8:	2201      	movs	r2, #1
 80014ba:	2141      	movs	r1, #65	; 0x41
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fe1d 	bl	80010fc <SX1278_SPIWrite>
	module->readBytes = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f806 	bl	80014dc <SX1278_standby>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	0800b504 	.word	0x0800b504

080014dc <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80014e4:	2209      	movs	r2, #9
 80014e6:	2101      	movs	r1, #1
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fe07 	bl	80010fc <SX1278_SPIWrite>
	module->status = STANDBY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	725a      	strb	r2, [r3, #9]
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001504:	2208      	movs	r2, #8
 8001506:	2101      	movs	r1, #1
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fdf7 	bl	80010fc <SX1278_SPIWrite>
	module->status = SLEEP;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	725a      	strb	r2, [r3, #9]
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001524:	2288      	movs	r2, #136	; 0x88
 8001526:	2101      	movs	r1, #1
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fde7 	bl	80010fc <SX1278_SPIWrite>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800153e:	22ff      	movs	r2, #255	; 0xff
 8001540:	2112      	movs	r1, #18
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fdda 	bl	80010fc <SX1278_SPIWrite>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <SX1278_FSK_EntryRx>:

int SX1278_FSK_EntryRx(SX1278_t * module, uint8_t length) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
	module->packetLength = length;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	78fa      	ldrb	r2, [r7, #3]
 8001560:	721a      	strb	r2, [r3, #8]

	SX1278_FSK_Config(module); // set base parameters
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff84 	bl	8001470 <SX1278_FSK_Config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8001568:	2284      	movs	r2, #132	; 0x84
 800156a:	214d      	movs	r1, #77	; 0x4d
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fdc5 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001572:	2201      	movs	r2, #1
 8001574:	2140      	movs	r1, #64	; 0x40
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fdc0 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x05, 0x52); // 5kHz freq deviation
 800157c:	2252      	movs	r2, #82	; 0x52
 800157e:	2105      	movs	r1, #5
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fdbb 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x32, length); //Payload Length 8 bytes
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	461a      	mov	r2, r3
 800158a:	2132      	movs	r1, #50	; 0x32
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff fdb5 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1101);	//Mode//Low Frequency Mode
 8001592:	220d      	movs	r2, #13
 8001594:	2101      	movs	r1, #1
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fdb0 	bl	80010fc <SX1278_SPIWrite>
	module->readBytes = 0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <SX1278_FSK_EntryTx>:

int SX1278_FSK_EntryTx(SX1278_t * module, uint8_t length) {
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	70fb      	strb	r3, [r7, #3]
	module->packetLength = length;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	78fa      	ldrb	r2, [r7, #3]
 80015be:	721a      	strb	r2, [r3, #8]

	SX1278_FSK_Config(module); // set base parameters
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff55 	bl	8001470 <SX1278_FSK_Config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);//0x87);	//Normal and RX
 80015c6:	2284      	movs	r2, #132	; 0x84
 80015c8:	214d      	movs	r1, #77	; 0x4d
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fd96 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41);
 80015d0:	2241      	movs	r2, #65	; 0x41
 80015d2:	2140      	movs	r1, #64	; 0x40
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fd91 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegFdevLsb, 0x52); // 5kHz freq deviation
 80015da:	2252      	movs	r2, #82	; 0x52
 80015dc:	2105      	movs	r1, #5
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fd8c 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegPayloadLength, length); //Payload Length 8 bytes
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	461a      	mov	r2, r3
 80015e8:	2132      	movs	r1, #50	; 0x32
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fd86 	bl	80010fc <SX1278_SPIWrite>
	//	SX1278_SPIWrite(module, RegBitRateLsb, 0x2B);	// 1200 bps
	//	SX1278_SPIWrite(module, RegBitRateMsb, 0x68);
	SX1278_SPIWrite(module, RegFifoThresh, length - 1);     //Fixed length, packetformat = 0
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	2135      	movs	r1, #53	; 0x35
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fd7e 	bl	80010fc <SX1278_SPIWrite>


	module->readBytes = 0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	SX1278_hw_DelayMs(1);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff fd4d 	bl	80010a8 <SX1278_hw_DelayMs>
	return 1;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	460b      	mov	r3, r1
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	7afa      	ldrb	r2, [r7, #11]
 800162a:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff fdc9 	bl	80011c4 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8001632:	2284      	movs	r2, #132	; 0x84
 8001634:	214d      	movs	r1, #77	; 0x4d
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff fd60 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 800163c:	22ff      	movs	r2, #255	; 0xff
 800163e:	2124      	movs	r1, #36	; 0x24
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fd5b 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001646:	2201      	movs	r2, #1
 8001648:	2140      	movs	r1, #64	; 0x40
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff fd56 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8001650:	223f      	movs	r2, #63	; 0x3f
 8001652:	2111      	movs	r1, #17
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7ff fd51 	bl	80010fc <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff ff6b 	bl	8001536 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8001660:	7afb      	ldrb	r3, [r7, #11]
 8001662:	461a      	mov	r2, r3
 8001664:	2122      	movs	r1, #34	; 0x22
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f7ff fd48 	bl	80010fc <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 800166c:	210f      	movs	r1, #15
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f7ff fd25 	bl	80010be <SX1278_SPIRead>
 8001674:	4603      	mov	r3, r0
 8001676:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	461a      	mov	r2, r3
 800167c:	210d      	movs	r1, #13
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff fd3c 	bl	80010fc <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001684:	228d      	movs	r2, #141	; 0x8d
 8001686:	2101      	movs	r1, #1
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff fd37 	bl	80010fc <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001696:	2118      	movs	r1, #24
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff fd10 	bl	80010be <SX1278_SPIRead>
 800169e:	4603      	mov	r3, r0
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d104      	bne.n	80016b2 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2203      	movs	r2, #3
 80016ac:	725a      	strb	r2, [r3, #9]
			return 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e013      	b.n	80016da <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fc86 	bl	8000fd4 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7ff fd7b 	bl	80011c4 <SX1278_defaultConfig>
			return 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e003      	b.n	80016da <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f7ff fce8 	bl	80010a8 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80016d8:	e7dd      	b.n	8001696 <SX1278_LoRaEntryRx+0x7e>
	}
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <SX1278_FSK_TxPacket>:
			return 0;
		}
	}
}

int SX1278_FSK_TxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length, uint32_t timeout) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71fb      	strb	r3, [r7, #7]
    uint8_t gotResponse = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	77fb      	strb	r3, [r7, #31]
	uint32_t tickstart = HAL_GetTick();
 80016f8:	f002 f838 	bl	800376c <HAL_GetTick>
 80016fc:	6178      	str	r0, [r7, #20]
	uint32_t wait = timeout;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	61bb      	str	r3, [r7, #24]
	uint8_t temp = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	74fb      	strb	r3, [r7, #19]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY){
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d005      	beq.n	800171a <SX1278_FSK_TxPacket+0x36>
		wait += (uint32_t)(uwTickFreq);
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <SX1278_FSK_TxPacket+0x9c>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	4413      	add	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
	}

	SX1278_FSK_EntryTx(module, length);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4619      	mov	r1, r3
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f7ff ff45 	bl	80015ae <SX1278_FSK_EntryTx>

	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	2100      	movs	r1, #0
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7ff fd0f 	bl	800114e <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);	//Mode//Low Frequency Mode
 8001730:	220b      	movs	r2, #11
 8001732:	2101      	movs	r1, #1
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f7ff fce1 	bl	80010fc <SX1278_SPIWrite>

	while(!gotResponse){
 800173a:	e014      	b.n	8001766 <SX1278_FSK_TxPacket+0x82>
	    temp = SX1278_SPIRead(module, RegIrqFlags2); // check if fifo sent is set
 800173c:	213f      	movs	r1, #63	; 0x3f
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff fcbd 	bl	80010be <SX1278_SPIRead>
 8001744:	4603      	mov	r3, r0
 8001746:	74fb      	strb	r3, [r7, #19]
	    if(temp & 0b1000){
 8001748:	7cfb      	ldrb	r3, [r7, #19]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SX1278_FSK_TxPacket+0x72>
	    	gotResponse =  1;
 8001752:	2301      	movs	r3, #1
 8001754:	77fb      	strb	r3, [r7, #31]
	    }
		if((HAL_GetTick() - tickstart) >= wait){
 8001756:	f002 f809 	bl	800376c <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	429a      	cmp	r2, r3
 8001764:	d903      	bls.n	800176e <SX1278_FSK_TxPacket+0x8a>
	while(!gotResponse){
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0e7      	beq.n	800173c <SX1278_FSK_TxPacket+0x58>
 800176c:	e000      	b.n	8001770 <SX1278_FSK_TxPacket+0x8c>
			break;								// timeout happened
 800176e:	bf00      	nop
		}
	}
	SX1278_standby(module);
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff feb3 	bl	80014dc <SX1278_standby>
	return gotResponse;
 8001776:	7ffb      	ldrb	r3, [r7, #31]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000002c 	.word	0x2000002c

08001784 <SX1278_FSK_RxPacket>:

int SX1278_FSK_RxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length, uint32_t timeout) {
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b08b      	sub	sp, #44	; 0x2c
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	71fb      	strb	r3, [r7, #7]
    uint8_t gotResponse = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t tickstart = HAL_GetTick();
 800179a:	f001 ffe7 	bl	800376c <HAL_GetTick>
 800179e:	61b8      	str	r0, [r7, #24]
	uint32_t wait = timeout;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	623b      	str	r3, [r7, #32]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY){
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017aa:	d005      	beq.n	80017b8 <SX1278_FSK_RxPacket+0x34>
		wait += (uint32_t)(uwTickFreq);
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <SX1278_FSK_RxPacket+0xb8>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	4413      	add	r3, r2
 80017b6:	623b      	str	r3, [r7, #32]
	}

	uint8_t temp = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	75fb      	strb	r3, [r7, #23]

	while(!gotResponse){
 80017bc:	e031      	b.n	8001822 <SX1278_FSK_RxPacket+0x9e>
		temp = SX1278_SPIRead(module, 0x3f);
 80017be:	213f      	movs	r1, #63	; 0x3f
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff fc7c 	bl	80010be <SX1278_SPIRead>
 80017c6:	4603      	mov	r3, r0
 80017c8:	75fb      	strb	r3, [r7, #23]

	    if((temp & 0b100) && temp != 255){
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01e      	beq.n	8001812 <SX1278_FSK_RxPacket+0x8e>
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	2bff      	cmp	r3, #255	; 0xff
 80017d8:	d01b      	beq.n	8001812 <SX1278_FSK_RxPacket+0x8e>
	    	gotResponse = 1;
 80017da:	2301      	movs	r3, #1
 80017dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    	for(uint8_t i = 0; i < length; i++){
 80017e0:	2300      	movs	r3, #0
 80017e2:	77fb      	strb	r3, [r7, #31]
 80017e4:	e00b      	b.n	80017fe <SX1278_FSK_RxPacket+0x7a>
	    		txBuffer[i] = SX1278_SPIRead(module, RegFIFO);
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	18d4      	adds	r4, r2, r3
 80017ec:	2100      	movs	r1, #0
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f7ff fc65 	bl	80010be <SX1278_SPIRead>
 80017f4:	4603      	mov	r3, r0
 80017f6:	7023      	strb	r3, [r4, #0]
	    	for(uint8_t i = 0; i < length; i++){
 80017f8:	7ffb      	ldrb	r3, [r7, #31]
 80017fa:	3301      	adds	r3, #1
 80017fc:	77fb      	strb	r3, [r7, #31]
 80017fe:	7ffa      	ldrb	r2, [r7, #31]
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	429a      	cmp	r2, r3
 8001804:	d3ef      	bcc.n	80017e6 <SX1278_FSK_RxPacket+0x62>
	    	}
	    	temp = SX1278_SPIRead(module, RegIrqFlags2);
 8001806:	213f      	movs	r1, #63	; 0x3f
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f7ff fc58 	bl	80010be <SX1278_SPIRead>
 800180e:	4603      	mov	r3, r0
 8001810:	75fb      	strb	r3, [r7, #23]

	    }

		if((HAL_GetTick() - tickstart) >= wait){
 8001812:	f001 ffab 	bl	800376c <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	429a      	cmp	r2, r3
 8001820:	d904      	bls.n	800182c <SX1278_FSK_RxPacket+0xa8>
	while(!gotResponse){
 8001822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0c9      	beq.n	80017be <SX1278_FSK_RxPacket+0x3a>
 800182a:	e000      	b.n	800182e <SX1278_FSK_RxPacket+0xaa>
			break;								// timeout happened
 800182c:	bf00      	nop
		}
	}

	return gotResponse;
 800182e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001832:	4618      	mov	r0, r3
 8001834:	372c      	adds	r7, #44	; 0x2c
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	2000002c 	.word	0x2000002c

08001840 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	4608      	mov	r0, r1
 800184a:	4611      	mov	r1, r2
 800184c:	461a      	mov	r2, r3
 800184e:	4603      	mov	r3, r0
 8001850:	70fb      	strb	r3, [r7, #3]
 8001852:	460b      	mov	r3, r1
 8001854:	70bb      	strb	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fb8c 	bl	8000f7c <SX1278_hw_init>
	module->frequency = frequency;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	711a      	strb	r2, [r3, #4]
	module->power = power;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	78ba      	ldrb	r2, [r7, #2]
 800186e:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	787a      	ldrb	r2, [r7, #1]
 8001874:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7c3a      	ldrb	r2, [r7, #16]
 800187a:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7d3a      	ldrb	r2, [r7, #20]
 8001880:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fc9e 	bl	80011c4 <SX1278_defaultConfig>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <GPS_init_Uart>:
uint8_t isNewData = 0;

UART_HandleTypeDef *GPS_uart;

/* pass UART handle that will communicate with GPS module*/
uint8_t GPS_init_Uart(UART_HandleTypeDef *huart){
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	GPS_uart = huart;
 8001898:	4a08      	ldr	r2, [pc, #32]	; (80018bc <GPS_init_Uart+0x2c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
	if(huart != GPS_uart){
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <GPS_init_Uart+0x2c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <GPS_init_Uart+0x1c>
		return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <GPS_init_Uart+0x1e>
	}else{
		return HAL_OK;
 80018ac:	2300      	movs	r3, #0
	}
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2000024c 	.word	0x2000024c

080018c0 <ChecksumUBLOX>:
	HAL_Delay(1);

}


void ChecksumUBLOX(uint8_t *data){
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	unsigned i, j;
	uint8_t a = 0, b = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	74fb      	strb	r3, [r7, #19]
 80018cc:	2300      	movs	r3, #0
 80018ce:	74bb      	strb	r3, [r7, #18]

	j = ((unsigned)data[4] + ((unsigned)data[5] << 8) + 6);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3304      	adds	r3, #4
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3305      	adds	r3, #5
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	4413      	add	r3, r2
 80018e2:	3306      	adds	r3, #6
 80018e4:	60fb      	str	r3, [r7, #12]

	for(i = 2; i < j; i++){
 80018e6:	2302      	movs	r3, #2
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e00d      	b.n	8001908 <ChecksumUBLOX+0x48>
		a += data[i];
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	4413      	add	r3, r2
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	7cfb      	ldrb	r3, [r7, #19]
 80018f6:	4413      	add	r3, r2
 80018f8:	74fb      	strb	r3, [r7, #19]
		b += a;
 80018fa:	7cba      	ldrb	r2, [r7, #18]
 80018fc:	7cfb      	ldrb	r3, [r7, #19]
 80018fe:	4413      	add	r3, r2
 8001900:	74bb      	strb	r3, [r7, #18]
	for(i = 2; i < j; i++){
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	429a      	cmp	r2, r3
 800190e:	d3ed      	bcc.n	80018ec <ChecksumUBLOX+0x2c>
	}
	data[i] = a;
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	4413      	add	r3, r2
 8001916:	7cfa      	ldrb	r2, [r7, #19]
 8001918:	701a      	strb	r2, [r3, #0]
	data[++i] = b;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	4413      	add	r3, r2
 8001926:	7cba      	ldrb	r2, [r7, #18]
 8001928:	701a      	strb	r2, [r3, #0]
}
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <GPS_GetLat>:

	return GPS_OK;
}

/* Returns latitude of length 12...9*/
void GPS_GetLat(uint8_t *buf){
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <GPS_GetLat+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 8001946:	2301      	movs	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e00a      	b.n	8001962 <GPS_GetLat+0x2a>
		buf[i - 1] = gpsData[i];
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	3b01      	subs	r3, #1
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	440b      	add	r3, r1
 8001956:	4909      	ldr	r1, [pc, #36]	; (800197c <GPS_GetLat+0x44>)
 8001958:	5c8a      	ldrb	r2, [r1, r2]
 800195a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	3301      	adds	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	2b09      	cmp	r3, #9
 8001966:	d9f1      	bls.n	800194c <GPS_GetLat+0x14>
	}
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	2000024a 	.word	0x2000024a
 800197c:	2000021c 	.word	0x2000021c

08001980 <GPS_GetLon>:

/* Returns longitude of length 12...9*/
void GPS_GetLon(uint8_t *buf){
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <GPS_GetLon+0x44>)
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 800198e:	2301      	movs	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	e00c      	b.n	80019ae <GPS_GetLon+0x2e>
		buf[i - 1] = gpsData[i + 12];
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	f103 020c 	add.w	r2, r3, #12
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	3b01      	subs	r3, #1
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	440b      	add	r3, r1
 80019a2:	4909      	ldr	r1, [pc, #36]	; (80019c8 <GPS_GetLon+0x48>)
 80019a4:	5c8a      	ldrb	r2, [r1, r2]
 80019a6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	3301      	adds	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	2b09      	cmp	r3, #9
 80019b2:	d9ef      	bls.n	8001994 <GPS_GetLon+0x14>
	}
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	2000024a 	.word	0x2000024a
 80019c8:	2000021c 	.word	0x2000021c

080019cc <GPS_GetSpe>:

/* Returns speed of length 6*/
void GPS_GetSpe(uint8_t *buf){
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <GPS_GetSpe+0x3c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++){
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	e009      	b.n	80019f4 <GPS_GetSpe+0x28>
		buf[i] = gpsSpeed[i];
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	440b      	add	r3, r1
 80019e8:	4908      	ldr	r1, [pc, #32]	; (8001a0c <GPS_GetSpe+0x40>)
 80019ea:	5c8a      	ldrb	r2, [r1, r2]
 80019ec:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++){
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	3301      	adds	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d9f2      	bls.n	80019e0 <GPS_GetSpe+0x14>
	}
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	2000024a 	.word	0x2000024a
 8001a0c:	2000023c 	.word	0x2000023c

08001a10 <GPS_GetHei>:

/* Returns height of length 8*/
void GPS_GetHei(uint8_t *buf){
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <GPS_GetHei+0x3c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
	for(; i < 8; i++){
 8001a22:	e009      	b.n	8001a38 <GPS_GetHei+0x28>
		buf[i] = gpsHeight[i];
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	440b      	add	r3, r1
 8001a2c:	4908      	ldr	r1, [pc, #32]	; (8001a50 <GPS_GetHei+0x40>)
 8001a2e:	5c8a      	ldrb	r2, [r1, r2]
 8001a30:	701a      	strb	r2, [r3, #0]
	for(; i < 8; i++){
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	3301      	adds	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
 8001a3a:	2b07      	cmp	r3, #7
 8001a3c:	d9f2      	bls.n	8001a24 <GPS_GetHei+0x14>
	}
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	2000024a 	.word	0x2000024a
 8001a50:	20000234 	.word	0x20000234

08001a54 <GPS_GetTime>:

/* Returns time of length 9 in format "hh:mm:ss.msms" */
void GPS_GetTime(uint8_t *buf){
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <GPS_GetTime+0x70>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
	buf[2] = ':';
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3302      	adds	r3, #2
 8001a66:	223a      	movs	r2, #58	; 0x3a
 8001a68:	701a      	strb	r2, [r3, #0]
	buf[5] = ':';
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3305      	adds	r3, #5
 8001a6e:	223a      	movs	r2, #58	; 0x3a
 8001a70:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++){
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e01b      	b.n	8001ab0 <GPS_GetTime+0x5c>
		buf[i] = gpsTime[i];
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	440b      	add	r3, r1
 8001a80:	4911      	ldr	r1, [pc, #68]	; (8001ac8 <GPS_GetTime+0x74>)
 8001a82:	5c8a      	ldrb	r2, [r1, r2]
 8001a84:	701a      	strb	r2, [r3, #0]
		buf[i + 3] = gpsTime[i + 2];
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	1c9a      	adds	r2, r3, #2
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	3303      	adds	r3, #3
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	440b      	add	r3, r1
 8001a92:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <GPS_GetTime+0x74>)
 8001a94:	5c8a      	ldrb	r2, [r1, r2]
 8001a96:	701a      	strb	r2, [r3, #0]
		buf[i + 6] = gpsTime[i + 4];
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	1d1a      	adds	r2, r3, #4
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	3306      	adds	r3, #6
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	440b      	add	r3, r1
 8001aa4:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <GPS_GetTime+0x74>)
 8001aa6:	5c8a      	ldrb	r2, [r1, r2]
 8001aa8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++){
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	3301      	adds	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d9e0      	bls.n	8001a78 <GPS_GetTime+0x24>
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	2000024a 	.word	0x2000024a
 8001ac8:	20000244 	.word	0x20000244

08001acc <GSM_InitUart>:
#define GSM_MSG_SEND										26				//CTRL + Z
//#define GSM_MSG_SPACE										32				//SPACE


/* pass UART handle that will communicate with GSM module*/
uint8_t GSM_InitUart(UART_HandleTypeDef *huart){
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	uart = huart;
 8001ad4:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <GSM_InitUart+0x2c>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6013      	str	r3, [r2, #0]
	if(huart != uart){
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <GSM_InitUart+0x2c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <GSM_InitUart+0x1c>
		return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <GSM_InitUart+0x1e>
	}else{
		return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
	}
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000250 	.word	0x20000250

08001afc <GSM_On>:
	}

	return 0;
}

void GSM_On(){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_SET);
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b06:	480b      	ldr	r0, [pc, #44]	; (8001b34 <GSM_On+0x38>)
 8001b08:	f003 fb7a 	bl	8005200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RST_GPIO_Port, GSM_RST_Pin ,GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b12:	4809      	ldr	r0, [pc, #36]	; (8001b38 <GSM_On+0x3c>)
 8001b14:	f003 fb74 	bl	8005200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b1e:	4806      	ldr	r0, [pc, #24]	; (8001b38 <GSM_On+0x3c>)
 8001b20:	f003 fb6e 	bl	8005200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b2a:	4802      	ldr	r0, [pc, #8]	; (8001b34 <GSM_On+0x38>)
 8001b2c:	f003 fb68 	bl	8005200 <HAL_GPIO_WritePin>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020400 	.word	0x40020400

08001b3c <GSM_Off>:

void GSM_Off(){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b46:	480b      	ldr	r0, [pc, #44]	; (8001b74 <GSM_Off+0x38>)
 8001b48:	f003 fb5a 	bl	8005200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RST_GPIO_Port, GSM_RST_Pin ,GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b52:	4809      	ldr	r0, [pc, #36]	; (8001b78 <GSM_Off+0x3c>)
 8001b54:	f003 fb54 	bl	8005200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b5e:	4806      	ldr	r0, [pc, #24]	; (8001b78 <GSM_Off+0x3c>)
 8001b60:	f003 fb4e 	bl	8005200 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6a:	4802      	ldr	r0, [pc, #8]	; (8001b74 <GSM_Off+0x38>)
 8001b6c:	f003 fb48 	bl	8005200 <HAL_GPIO_WritePin>
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40020800 	.word	0x40020800
 8001b78:	40020400 	.word	0x40020400

08001b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b7c:	b5b0      	push	{r4, r5, r7, lr}
 8001b7e:	b0e0      	sub	sp, #384	; 0x180
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b82:	f001 fd8d 	bl	80036a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b86:	f000 fa81 	bl	800208c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b8a:	f000 fd5b 	bl	8002644 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b8e:	f000 fcbb 	bl	8002508 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b92:	f000 fce3 	bl	800255c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001b96:	f000 fd0b 	bl	80025b0 <MX_USART6_UART_Init>
  MX_DMA_Init();
 8001b9a:	f000 fd33 	bl	8002604 <MX_DMA_Init>
  MX_SPI1_Init();
 8001b9e:	f000 fb45 	bl	800222c <MX_SPI1_Init>
  MX_TIM2_Init();
 8001ba2:	f000 fb79 	bl	8002298 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ba6:	f000 fbc5 	bl	8002334 <MX_TIM3_Init>
  MX_CRC_Init();
 8001baa:	f000 fb2b 	bl	8002204 <MX_CRC_Init>
  MX_TIM4_Init();
 8001bae:	f000 fc0d 	bl	80023cc <MX_TIM4_Init>
  MX_TIM5_Init();
 8001bb2:	f000 fc59 	bl	8002468 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001bb6:	f000 fad3 	bl	8002160 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim5);
 8001bba:	48ac      	ldr	r0, [pc, #688]	; (8001e6c <main+0x2f0>)
 8001bbc:	f004 fc7a 	bl	80064b4 <HAL_TIM_Base_Start_IT>

  SX1278_hw_t SX1278_hw;
  SX1278_t SX1278;

 //initialize LoRa module
 SX1278_hw.dio0.port = RF_DIO0_GPIO_Port;
 8001bc0:	4bab      	ldr	r3, [pc, #684]	; (8001e70 <main+0x2f4>)
 8001bc2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 SX1278_hw.dio0.pin = RF_DIO0_Pin;
 8001bc6:	2320      	movs	r3, #32
 8001bc8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 SX1278_hw.nss.port = RF_NSS_GPIO_Port;
 8001bcc:	4ba9      	ldr	r3, [pc, #676]	; (8001e74 <main+0x2f8>)
 8001bce:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 SX1278_hw.nss.pin = RF_NSS_Pin;
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 SX1278_hw.reset.port = RF_RST_GPIO_Port;
 8001bd8:	4ba5      	ldr	r3, [pc, #660]	; (8001e70 <main+0x2f4>)
 8001bda:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 SX1278_hw.reset.pin = RF_RST_Pin;
 8001bde:	2340      	movs	r3, #64	; 0x40
 8001be0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 SX1278_hw.spi = &hspi1;
 8001be4:	4ba4      	ldr	r3, [pc, #656]	; (8001e78 <main+0x2fc>)
 8001be6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 SX1278.hw = &SX1278_hw;
 8001bea:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bf2:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8001bf6:	601a      	str	r2, [r3, #0]
 //while(HAL_GPIO_ReadPin(RX_GPIO_Port, RX_Pin) == 0);
 //HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);

 //HAL_UART_Receive_IT(&huart2, UART6_RxBuf, 2);

 HAL_GPIO_WritePin(RF_RST_GPIO_Port, RF_RST_Pin, GPIO_PIN_SET); // very important.
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	2140      	movs	r1, #64	; 0x40
 8001bfc:	489c      	ldr	r0, [pc, #624]	; (8001e70 <main+0x2f4>)
 8001bfe:	f003 faff 	bl	8005200 <HAL_GPIO_WritePin>

 SX1278_hw_Reset(&SX1278_hw);
 8001c02:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f9e4 	bl	8000fd4 <SX1278_hw_Reset>
//      SX1278_begin(&SX1278, SX1278_433MHZ, MIN_POWER, SX1278_LORA_SF_8, // air time ~ 495ms
//      SX1278_LORA_BW_20_8KHZ, 10);

  	//uint8_t GSM_STATE = 0;

  	GSM_Off();
 8001c0c:	f7ff ff96 	bl	8001b3c <GSM_Off>

  	if(GSM_InitUart(&huart2)){ // if failed, then gg
 8001c10:	489a      	ldr	r0, [pc, #616]	; (8001e7c <main+0x300>)
 8001c12:	f7ff ff5b 	bl	8001acc <GSM_InitUart>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <main+0xa4>
  		return 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e20d      	b.n	800203c <main+0x4c0>
  	}

	MODE_Set(&SX1278, mode);
 8001c20:	4b97      	ldr	r3, [pc, #604]	; (8001e80 <main+0x304>)
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fec2 	bl	80029b4 <MODE_Set>
	if(mode == 0){
 8001c30:	4b93      	ldr	r3, [pc, #588]	; (8001e80 <main+0x304>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10c      	bne.n	8001c52 <main+0xd6>
		ret = SX1278_LoRaEntryRx(&SX1278, MIN_PACKETLENGTH, 2000);
 8001c38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c3c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c40:	2108      	movs	r1, #8
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fce8 	bl	8001618 <SX1278_LoRaEntryRx>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b8d      	ldr	r3, [pc, #564]	; (8001e84 <main+0x308>)
 8001c4e:	701a      	strb	r2, [r3, #0]
 8001c50:	e009      	b.n	8001c66 <main+0xea>
	}else{
		ret = SX1278_FSK_EntryRx(&SX1278, 8);
 8001c52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c56:	2108      	movs	r1, #8
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fc79 	bl	8001550 <SX1278_FSK_EntryRx>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4b88      	ldr	r3, [pc, #544]	; (8001e84 <main+0x308>)
 8001c64:	701a      	strb	r2, [r3, #0]
	 //HAL_UART_Receive_DMA(&huart6, &cmd_rx_buffer, cmd_rx_buffer_size);
	//	uint8_t check_sum;
	//	uint8_t check_sum_arr[4] = {0, 0, 0, 0};


	memset(tel_dataBuf, 0, sizeof(tel_dataBuf));
 8001c66:	226e      	movs	r2, #110	; 0x6e
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4887      	ldr	r0, [pc, #540]	; (8001e88 <main+0x30c>)
 8001c6c:	f006 fcd6 	bl	800861c <memset>
//	uint8_t date[2];
	uint8_t time[9];
//	GPS_GetYear(year);
//	GPS_GetMonth(month);
//	GPS_GetDate(date);
	GPS_GetTime(time);
 8001c70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff feed 	bl	8001a54 <GPS_GetTime>
	UART6_TxBuf[0] = 0x02;
 8001c7a:	4b84      	ldr	r3, [pc, #528]	; (8001e8c <main+0x310>)
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	701a      	strb	r2, [r3, #0]
	UART6_TxBuf[1] = 5;
 8001c80:	4b82      	ldr	r3, [pc, #520]	; (8001e8c <main+0x310>)
 8001c82:	2205      	movs	r2, #5
 8001c84:	705a      	strb	r2, [r3, #1]
	UART6_TxBuf[2] = '*';
 8001c86:	4b81      	ldr	r3, [pc, #516]	; (8001e8c <main+0x310>)
 8001c88:	222a      	movs	r2, #42	; 0x2a
 8001c8a:	709a      	strb	r2, [r3, #2]
	UART6_TxBuf[3] = get_check_sum((char *)UART6_TxBuf);
 8001c8c:	487f      	ldr	r0, [pc, #508]	; (8001e8c <main+0x310>)
 8001c8e:	f000 ff6e 	bl	8002b6e <get_check_sum>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b7d      	ldr	r3, [pc, #500]	; (8001e8c <main+0x310>)
 8001c98:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 4);
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	497b      	ldr	r1, [pc, #492]	; (8001e8c <main+0x310>)
 8001c9e:	487c      	ldr	r0, [pc, #496]	; (8001e90 <main+0x314>)
 8001ca0:	f005 f93a 	bl	8006f18 <HAL_UART_Transmit_IT>
	memset(UART6_TxBuf, 0, sizeof(UART6_TxBuf));
 8001ca4:	2232      	movs	r2, #50	; 0x32
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4878      	ldr	r0, [pc, #480]	; (8001e8c <main+0x310>)
 8001caa:	f006 fcb7 	bl	800861c <memset>
	UART6_TxBuf[0] = charToInt((char *)&(time[6]));
 8001cae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cb2:	3306      	adds	r3, #6
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 f8a7 	bl	8002e08 <charToInt>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <main+0x310>)
 8001cc0:	701a      	strb	r2, [r3, #0]
	UART6_TxBuf[1] = charToInt((char *)&(time[3]));
 8001cc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f001 f89d 	bl	8002e08 <charToInt>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b6e      	ldr	r3, [pc, #440]	; (8001e8c <main+0x310>)
 8001cd4:	705a      	strb	r2, [r3, #1]
	UART6_TxBuf[2] = charToInt((char *)&(time[0]));
 8001cd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 f894 	bl	8002e08 <charToInt>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b69      	ldr	r3, [pc, #420]	; (8001e8c <main+0x310>)
 8001ce6:	709a      	strb	r2, [r3, #2]
	UART6_TxBuf[3] = '*';
 8001ce8:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <main+0x310>)
 8001cea:	222a      	movs	r2, #42	; 0x2a
 8001cec:	70da      	strb	r2, [r3, #3]
	UART6_TxBuf[4] = get_check_sum((char *)UART6_TxBuf);
 8001cee:	4867      	ldr	r0, [pc, #412]	; (8001e8c <main+0x310>)
 8001cf0:	f000 ff3d 	bl	8002b6e <get_check_sum>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <main+0x310>)
 8001cfa:	711a      	strb	r2, [r3, #4]
	//snprintf(UART6_TxBuf, sizeof(UART6_TxBuf), "*%s%s%s", charToInt(&(time[6])), charToInt(&(time[3])), charToInt(&(time[0]))/*, charToInt(date), charToInt(month), charToInt(year)*/);
	//snprintf(UART6_TxBuf + strlen((char *) UART6_TxBuf), sizeof(UART6_TxBuf) - strlen((char *) UART6_TxBuf), "*%s", get_check_sum(UART6_TxBuf));
	HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, strlen((char *)UART6_TxBuf));
 8001cfc:	4863      	ldr	r0, [pc, #396]	; (8001e8c <main+0x310>)
 8001cfe:	f7fe fa79 	bl	80001f4 <strlen>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	4960      	ldr	r1, [pc, #384]	; (8001e8c <main+0x310>)
 8001d0a:	4861      	ldr	r0, [pc, #388]	; (8001e90 <main+0x314>)
 8001d0c:	f005 f904 	bl	8006f18 <HAL_UART_Transmit_IT>
	memset(UART6_TxBuf, 0, sizeof(UART6_TxBuf));
 8001d10:	2232      	movs	r2, #50	; 0x32
 8001d12:	2100      	movs	r1, #0
 8001d14:	485d      	ldr	r0, [pc, #372]	; (8001e8c <main+0x310>)
 8001d16:	f006 fc81 	bl	800861c <memset>
	UART6_TxBuf[0] = 0x42;
 8001d1a:	4b5c      	ldr	r3, [pc, #368]	; (8001e8c <main+0x310>)
 8001d1c:	2242      	movs	r2, #66	; 0x42
 8001d1e:	701a      	strb	r2, [r3, #0]
	UART6_TxBuf[1] = 0x88;
 8001d20:	4b5a      	ldr	r3, [pc, #360]	; (8001e8c <main+0x310>)
 8001d22:	2288      	movs	r2, #136	; 0x88
 8001d24:	705a      	strb	r2, [r3, #1]
	UART6_TxBuf[2] = '*';
 8001d26:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <main+0x310>)
 8001d28:	222a      	movs	r2, #42	; 0x2a
 8001d2a:	709a      	strb	r2, [r3, #2]
	UART6_TxBuf[3] = get_check_sum((char *)UART6_TxBuf);
 8001d2c:	4857      	ldr	r0, [pc, #348]	; (8001e8c <main+0x310>)
 8001d2e:	f000 ff1e 	bl	8002b6e <get_check_sum>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b55      	ldr	r3, [pc, #340]	; (8001e8c <main+0x310>)
 8001d38:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, strlen((char *)UART6_TxBuf));
 8001d3a:	4854      	ldr	r0, [pc, #336]	; (8001e8c <main+0x310>)
 8001d3c:	f7fe fa5a 	bl	80001f4 <strlen>
 8001d40:	4603      	mov	r3, r0
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	4951      	ldr	r1, [pc, #324]	; (8001e8c <main+0x310>)
 8001d48:	4851      	ldr	r0, [pc, #324]	; (8001e90 <main+0x314>)
 8001d4a:	f005 f8e5 	bl	8006f18 <HAL_UART_Transmit_IT>
	memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 8001d4e:	2232      	movs	r2, #50	; 0x32
 8001d50:	2100      	movs	r1, #0
 8001d52:	4850      	ldr	r0, [pc, #320]	; (8001e94 <main+0x318>)
 8001d54:	f006 fc62 	bl	800861c <memset>
	HAL_ADC_MspInit(&hadc1);
 8001d58:	484f      	ldr	r0, [pc, #316]	; (8001e98 <main+0x31c>)
 8001d5a:	f001 f8b3 	bl	8002ec4 <HAL_ADC_MspInit>
	if (HAL_ADC_Start(&hadc1) != HAL_OK){
 8001d5e:	484e      	ldr	r0, [pc, #312]	; (8001e98 <main+0x31c>)
 8001d60:	f001 fd78 	bl	8003854 <HAL_ADC_Start>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <main+0x1f2>
		return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e166      	b.n	800203c <main+0x4c0>
	}
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 8001d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d72:	4849      	ldr	r0, [pc, #292]	; (8001e98 <main+0x31c>)
 8001d74:	f001 fe22 	bl	80039bc <HAL_ADC_PollForConversion>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <main+0x206>
		return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e15c      	b.n	800203c <main+0x4c0>
	}
	if((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_REG_EOC) !=  HAL_ADC_STATE_REG_EOC){
 8001d82:	4845      	ldr	r0, [pc, #276]	; (8001e98 <main+0x31c>)
 8001d84:	f002 f902 	bl	8003f8c <HAL_ADC_GetState>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d92:	d001      	beq.n	8001d98 <main+0x21c>
		return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e151      	b.n	800203c <main+0x4c0>
	}
	if(GPS_init_Uart(&huart1)){
 8001d98:	4840      	ldr	r0, [pc, #256]	; (8001e9c <main+0x320>)
 8001d9a:	f7ff fd79 	bl	8001890 <GPS_init_Uart>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <main+0x22c>
		return 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e149      	b.n	800203c <main+0x4c0>
	/* TODO with COM PCB
	* - FIX UART connection between MCU and GPS module (wrongly connected RX - RX and TX - TX)
	* - Find different MCU (more available and not as powerful)
	*/

	uint8_t ubx_baud_set[28] = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01,
 8001da8:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001dac:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001db0:	4a3b      	ldr	r2, [pc, #236]	; (8001ea0 <main+0x324>)
 8001db2:	461c      	mov	r4, r3
 8001db4:	4615      	mov	r5, r2
 8001db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00}; // UBX COMMAND TO SET GPS BAUDRATE FROM 9600 TO 115200 <- WORKS perfectly.

	ChecksumUBLOX(ubx_baud_set);
 8001dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fd7a 	bl	80018c0 <ChecksumUBLOX>
	HAL_UART_Transmit(&huart1, ubx_baud_set, 28, 1000);
 8001dcc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd4:	221c      	movs	r2, #28
 8001dd6:	4831      	ldr	r0, [pc, #196]	; (8001e9c <main+0x320>)
 8001dd8:	f005 f80c 	bl	8006df4 <HAL_UART_Transmit>

	/* change baud rate for UART1 to 115200 */
	HAL_UART_Abort_IT(&huart1);
 8001ddc:	482f      	ldr	r0, [pc, #188]	; (8001e9c <main+0x320>)
 8001dde:	f005 f941 	bl	8007064 <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&huart1);
 8001de2:	482e      	ldr	r0, [pc, #184]	; (8001e9c <main+0x320>)
 8001de4:	f004 ffd7 	bl	8006d96 <HAL_UART_DeInit>
	huart1.Init.BaudRate = 115200;
 8001de8:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <main+0x320>)
 8001dea:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dee:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001df0:	482a      	ldr	r0, [pc, #168]	; (8001e9c <main+0x320>)
 8001df2:	f004 ff83 	bl	8006cfc <HAL_UART_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <main+0x284>
	    Error_Handler();
 8001dfc:	f001 f835 	bl	8002e6a <Error_Handler>
	}

	uint8_t ubx_cfg_nav5[] = {
 8001e00:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001e04:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001e08:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <main+0x328>)
 8001e0a:	461c      	mov	r4, r3
 8001e0c:	4615      	mov	r5, r2
 8001e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	0x01,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00, 0x00}; //changes to airborne -- won't turn of after 13 km....
	ChecksumUBLOX(ubx_cfg_nav5);
 8001e1e:	463b      	mov	r3, r7
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fd4d 	bl	80018c0 <ChecksumUBLOX>
	HAL_UART_Transmit(&huart1, ubx_cfg_nav5, sizeof(ubx_cfg_nav5), 1000);
 8001e26:	4639      	mov	r1, r7
 8001e28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2c:	222c      	movs	r2, #44	; 0x2c
 8001e2e:	481b      	ldr	r0, [pc, #108]	; (8001e9c <main+0x320>)
 8001e30:	f004 ffe0 	bl	8006df4 <HAL_UART_Transmit>

	if (HAL_UART_Receive_DMA(&huart1, hallo, 255) != HAL_OK) {
 8001e34:	22ff      	movs	r2, #255	; 0xff
 8001e36:	491c      	ldr	r1, [pc, #112]	; (8001ea8 <main+0x32c>)
 8001e38:	4818      	ldr	r0, [pc, #96]	; (8001e9c <main+0x320>)
 8001e3a:	f005 f8e2 	bl	8007002 <HAL_UART_Receive_DMA>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <main+0x2cc>
	    Error_Handler();
 8001e44:	f001 f811 	bl	8002e6a <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(gsmRec){
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <main+0x330>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d004      	beq.n	8001e5a <main+0x2de>
//		make_string_gsm((char *)gsm_dataBuf, sizeof(gsm_dataBuf));
//		if(GSM_Check_Signal()){
//			GSM_Message_Send(gsm_dataBuf, strlen((char *)gsm_dataBuf), 28654641);
//		}

		GSM_Off();
 8001e50:	f7ff fe74 	bl	8001b3c <GSM_Off>

		gsmRec = 0;
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <main+0x330>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
		//HAL_TIM_Base_Start_IT(&htim5);
	}
	if(do_send_tm){ // its time to send gps coordinates
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <main+0x334>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d07b      	beq.n	8001f5a <main+0x3de>
		 for(uint8_t tries = 0; tries < 5; tries++){
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8001e68:	e06a      	b.n	8001f40 <main+0x3c4>
 8001e6a:	bf00      	nop
 8001e6c:	200003d4 	.word	0x200003d4
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40020000 	.word	0x40020000
 8001e78:	200002a4 	.word	0x200002a4
 8001e7c:	20000460 	.word	0x20000460
 8001e80:	20000020 	.word	0x20000020
 8001e84:	200005bc 	.word	0x200005bc
 8001e88:	20000548 	.word	0x20000548
 8001e8c:	200005d4 	.word	0x200005d4
 8001e90:	200004a4 	.word	0x200004a4
 8001e94:	2000063c 	.word	0x2000063c
 8001e98:	20000254 	.word	0x20000254
 8001e9c:	2000041c 	.word	0x2000041c
 8001ea0:	0800b464 	.word	0x0800b464
 8001ea4:	0800b480 	.word	0x0800b480
 8001ea8:	20000670 	.word	0x20000670
 8001eac:	200005d0 	.word	0x200005d0
 8001eb0:	20000021 	.word	0x20000021
			 UART6_RxBytes = 4;
 8001eb4:	4b64      	ldr	r3, [pc, #400]	; (8002048 <main+0x4cc>)
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	701a      	strb	r2, [r3, #0]
			 HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <main+0x4cc>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4962      	ldr	r1, [pc, #392]	; (800204c <main+0x4d0>)
 8001ec4:	4862      	ldr	r0, [pc, #392]	; (8002050 <main+0x4d4>)
 8001ec6:	f005 f86c 	bl	8006fa2 <HAL_UART_Receive_IT>
			 memset(UART6_TxBuf, 0, sizeof(UART6_TxBuf));
 8001eca:	2232      	movs	r2, #50	; 0x32
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4861      	ldr	r0, [pc, #388]	; (8002054 <main+0x4d8>)
 8001ed0:	f006 fba4 	bl	800861c <memset>
			 UART6_TxBuf[0] = 0x03;
 8001ed4:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <main+0x4d8>)
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	701a      	strb	r2, [r3, #0]
			 UART6_TxBuf[1] = 0x99;
 8001eda:	4b5e      	ldr	r3, [pc, #376]	; (8002054 <main+0x4d8>)
 8001edc:	2299      	movs	r2, #153	; 0x99
 8001ede:	705a      	strb	r2, [r3, #1]
			 UART6_TxBuf[2] = '*';
 8001ee0:	4b5c      	ldr	r3, [pc, #368]	; (8002054 <main+0x4d8>)
 8001ee2:	222a      	movs	r2, #42	; 0x2a
 8001ee4:	709a      	strb	r2, [r3, #2]
			 UART6_TxBuf[3] = crc_xor((char *)UART6_TxBuf);
 8001ee6:	485b      	ldr	r0, [pc, #364]	; (8002054 <main+0x4d8>)
 8001ee8:	f000 fe60 	bl	8002bac <crc_xor>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b58      	ldr	r3, [pc, #352]	; (8002054 <main+0x4d8>)
 8001ef2:	70da      	strb	r2, [r3, #3]
			 HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, UART6_RxBytes);
 8001ef4:	4b54      	ldr	r3, [pc, #336]	; (8002048 <main+0x4cc>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	4955      	ldr	r1, [pc, #340]	; (8002054 <main+0x4d8>)
 8001efe:	4854      	ldr	r0, [pc, #336]	; (8002050 <main+0x4d4>)
 8001f00:	f005 f80a 	bl	8006f18 <HAL_UART_Transmit_IT>
			 //snprintf(UART6_TxBuf + strlen((char *) UART6_TxBuf), sizeof(UART6_TxBuf) - strlen((char *) UART6_TxBuf), "*%d", crc_xor(UART6_TxBuf));
			 HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8001f04:	2201      	movs	r2, #1
 8001f06:	2101      	movs	r1, #1
 8001f08:	4853      	ldr	r0, [pc, #332]	; (8002058 <main+0x4dc>)
 8001f0a:	f003 f979 	bl	8005200 <HAL_GPIO_WritePin>
			 make_string((char *)tel_dataBuf, sizeof(tel_dataBuf));
 8001f0e:	216e      	movs	r1, #110	; 0x6e
 8001f10:	4852      	ldr	r0, [pc, #328]	; (800205c <main+0x4e0>)
 8001f12:	f000 fe71 	bl	8002bf8 <make_string>
			 RTTY_Send(&SX1278, tel_dataBuf, strlen((char *)tel_dataBuf));
 8001f16:	4851      	ldr	r0, [pc, #324]	; (800205c <main+0x4e0>)
 8001f18:	f7fe f96c 	bl	80001f4 <strlen>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f24:	494d      	ldr	r1, [pc, #308]	; (800205c <main+0x4e0>)
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fdc0 	bl	8002aac <RTTY_Send>
			 HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4849      	ldr	r0, [pc, #292]	; (8002058 <main+0x4dc>)
 8001f32:	f003 f965 	bl	8005200 <HAL_GPIO_WritePin>
		 for(uint8_t tries = 0; tries < 5; tries++){
 8001f36:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8001f40:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d9b5      	bls.n	8001eb4 <main+0x338>
		 }
		 do_send_tm = 0;
 8001f48:	4b45      	ldr	r3, [pc, #276]	; (8002060 <main+0x4e4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
		 receive_data = 1;
 8001f4e:	4b45      	ldr	r3, [pc, #276]	; (8002064 <main+0x4e8>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Start_IT(&htim2);
 8001f54:	4844      	ldr	r0, [pc, #272]	; (8002068 <main+0x4ec>)
 8001f56:	f004 faad 	bl	80064b4 <HAL_TIM_Base_Start_IT>
	}
	if(receive_data){
 8001f5a:	4b42      	ldr	r3, [pc, #264]	; (8002064 <main+0x4e8>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f43f af72 	beq.w	8001e48 <main+0x2cc>
		if(sec_gps == 0){
 8001f64:	4b41      	ldr	r3, [pc, #260]	; (800206c <main+0x4f0>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d113      	bne.n	8001f94 <main+0x418>
			SX1278_FSK_TxPacket(&SX1278, ready_to_receive, 8, 100);
 8001f6c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001f70:	2364      	movs	r3, #100	; 0x64
 8001f72:	2208      	movs	r2, #8
 8001f74:	493e      	ldr	r1, [pc, #248]	; (8002070 <main+0x4f4>)
 8001f76:	f7ff fbb5 	bl	80016e4 <SX1278_FSK_TxPacket>
			SX1278_FSK_EntryRx(&SX1278, 8);
 8001f7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f7e:	2108      	movs	r1, #8
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fae5 	bl	8001550 <SX1278_FSK_EntryRx>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001f86:	2201      	movs	r2, #1
 8001f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f8c:	4832      	ldr	r0, [pc, #200]	; (8002058 <main+0x4dc>)
 8001f8e:	f003 f937 	bl	8005200 <HAL_GPIO_WritePin>
 8001f92:	e01c      	b.n	8001fce <main+0x452>
		}else if(sec_gps >= 5){
 8001f94:	4b35      	ldr	r3, [pc, #212]	; (800206c <main+0x4f0>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d918      	bls.n	8001fce <main+0x452>
			do_send_tm = 1;		// should send TM data
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <main+0x4e4>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
			receive_data = 0;
 8001fa2:	4b30      	ldr	r3, [pc, #192]	; (8002064 <main+0x4e8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
			sec_gps = 0;
 8001fa8:	4b30      	ldr	r3, [pc, #192]	; (800206c <main+0x4f0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb4:	4828      	ldr	r0, [pc, #160]	; (8002058 <main+0x4dc>)
 8001fb6:	f003 f923 	bl	8005200 <HAL_GPIO_WritePin>
			SX1278_FSK_TxPacket(&SX1278, not_to_receive, 8, 100);
 8001fba:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001fbe:	2364      	movs	r3, #100	; 0x64
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	492c      	ldr	r1, [pc, #176]	; (8002074 <main+0x4f8>)
 8001fc4:	f7ff fb8e 	bl	80016e4 <SX1278_FSK_TxPacket>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001fc8:	4827      	ldr	r0, [pc, #156]	; (8002068 <main+0x4ec>)
 8001fca:	f004 fad5 	bl	8006578 <HAL_TIM_Base_Stop_IT>
		}
		if(loraModuleIrq){
 8001fce:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <main+0x4fc>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f43f af38 	beq.w	8001e48 <main+0x2cc>
			SX1278_FSK_RxPacket(&SX1278, loraBuf, 8, 1000);
 8001fd8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	4926      	ldr	r1, [pc, #152]	; (800207c <main+0x500>)
 8001fe4:	f7ff fbce 	bl	8001784 <SX1278_FSK_RxPacket>
			if(strcmp((char *)loraBuf, "cutropeN") == 0){
 8001fe8:	4925      	ldr	r1, [pc, #148]	; (8002080 <main+0x504>)
 8001fea:	4824      	ldr	r0, [pc, #144]	; (800207c <main+0x500>)
 8001fec:	f7fe f8f8 	bl	80001e0 <strcmp>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d117      	bne.n	8002026 <main+0x4aa>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	4817      	ldr	r0, [pc, #92]	; (8002058 <main+0x4dc>)
 8001ffc:	f003 f900 	bl	8005200 <HAL_GPIO_WritePin>

				// SENDING COMMAND TO MCU TO CUT THE ROPE
				UART6_TxBuf[0] = 0x4f;
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <main+0x4d8>)
 8002002:	224f      	movs	r2, #79	; 0x4f
 8002004:	701a      	strb	r2, [r3, #0]
				UART6_TxBuf[1] = 0xcc;
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <main+0x4d8>)
 8002008:	22cc      	movs	r2, #204	; 0xcc
 800200a:	705a      	strb	r2, [r3, #1]
				HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);
 800200c:	2202      	movs	r2, #2
 800200e:	4911      	ldr	r1, [pc, #68]	; (8002054 <main+0x4d8>)
 8002010:	480f      	ldr	r0, [pc, #60]	; (8002050 <main+0x4d4>)
 8002012:	f004 ff81 	bl	8006f18 <HAL_UART_Transmit_IT>
				// SENDING COMMAND TO MCU TO CUT THE ROPE

				SX1278_FSK_TxPacket(&SX1278, ok_ack_message, 8, 100);
 8002016:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800201a:	2364      	movs	r3, #100	; 0x64
 800201c:	2208      	movs	r2, #8
 800201e:	4919      	ldr	r1, [pc, #100]	; (8002084 <main+0x508>)
 8002020:	f7ff fb60 	bl	80016e4 <SX1278_FSK_TxPacket>
 8002024:	e006      	b.n	8002034 <main+0x4b8>
			}else{
				SX1278_FSK_TxPacket(&SX1278, nok_ack_message, 8, 100);
 8002026:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800202a:	2364      	movs	r3, #100	; 0x64
 800202c:	2208      	movs	r2, #8
 800202e:	4916      	ldr	r1, [pc, #88]	; (8002088 <main+0x50c>)
 8002030:	f7ff fb58 	bl	80016e4 <SX1278_FSK_TxPacket>
			}
			loraModuleIrq = 0;
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <main+0x4fc>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
	if(gsmRec){
 800203a:	e705      	b.n	8001e48 <main+0x2cc>
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800203c:	4618      	mov	r0, r3
 800203e:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 8002042:	46bd      	mov	sp, r7
 8002044:	bdb0      	pop	{r4, r5, r7, pc}
 8002046:	bf00      	nop
 8002048:	20000022 	.word	0x20000022
 800204c:	2000063c 	.word	0x2000063c
 8002050:	200004a4 	.word	0x200004a4
 8002054:	200005d4 	.word	0x200005d4
 8002058:	40020400 	.word	0x40020400
 800205c:	20000548 	.word	0x20000548
 8002060:	20000021 	.word	0x20000021
 8002064:	200005d1 	.word	0x200005d1
 8002068:	200002fc 	.word	0x200002fc
 800206c:	200005d2 	.word	0x200005d2
 8002070:	20000000 	.word	0x20000000
 8002074:	20000008 	.word	0x20000008
 8002078:	200005ca 	.word	0x200005ca
 800207c:	200005c0 	.word	0x200005c0
 8002080:	0800b458 	.word	0x0800b458
 8002084:	20000010 	.word	0x20000010
 8002088:	20000018 	.word	0x20000018

0800208c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b094      	sub	sp, #80	; 0x50
 8002090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002092:	f107 0320 	add.w	r3, r7, #32
 8002096:	2230      	movs	r2, #48	; 0x30
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f006 fabe 	bl	800861c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <SystemClock_Config+0xcc>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <SystemClock_Config+0xcc>)
 80020ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020be:	6413      	str	r3, [r2, #64]	; 0x40
 80020c0:	4b25      	ldr	r3, [pc, #148]	; (8002158 <SystemClock_Config+0xcc>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	4b22      	ldr	r3, [pc, #136]	; (800215c <SystemClock_Config+0xd0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020d8:	4a20      	ldr	r2, [pc, #128]	; (800215c <SystemClock_Config+0xd0>)
 80020da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <SystemClock_Config+0xd0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020ec:	2301      	movs	r3, #1
 80020ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020f6:	2302      	movs	r3, #2
 80020f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002100:	2304      	movs	r3, #4
 8002102:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002104:	2354      	movs	r3, #84	; 0x54
 8002106:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002108:	2302      	movs	r3, #2
 800210a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800210c:	2304      	movs	r3, #4
 800210e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002110:	f107 0320 	add.w	r3, r7, #32
 8002114:	4618      	mov	r0, r3
 8002116:	f003 f8a5 	bl	8005264 <HAL_RCC_OscConfig>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002120:	f000 fea3 	bl	8002e6a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002124:	230f      	movs	r3, #15
 8002126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002128:	2302      	movs	r3, #2
 800212a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002134:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	2102      	movs	r1, #2
 8002140:	4618      	mov	r0, r3
 8002142:	f003 fb07 	bl	8005754 <HAL_RCC_ClockConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800214c:	f000 fe8d 	bl	8002e6a <Error_Handler>
  }
}
 8002150:	bf00      	nop
 8002152:	3750      	adds	r7, #80	; 0x50
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	40007000 	.word	0x40007000

08002160 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002166:	463b      	mov	r3, r7
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002172:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <MX_ADC1_Init+0x98>)
 8002174:	4a21      	ldr	r2, [pc, #132]	; (80021fc <MX_ADC1_Init+0x9c>)
 8002176:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <MX_ADC1_Init+0x98>)
 800217a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800217e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <MX_ADC1_Init+0x98>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <MX_ADC1_Init+0x98>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <MX_ADC1_Init+0x98>)
 800218e:	2200      	movs	r2, #0
 8002190:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <MX_ADC1_Init+0x98>)
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <MX_ADC1_Init+0x98>)
 800219c:	2200      	movs	r2, #0
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <MX_ADC1_Init+0x98>)
 80021a2:	4a17      	ldr	r2, [pc, #92]	; (8002200 <MX_ADC1_Init+0xa0>)
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <MX_ADC1_Init+0x98>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <MX_ADC1_Init+0x98>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_ADC1_Init+0x98>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <MX_ADC1_Init+0x98>)
 80021bc:	2201      	movs	r2, #1
 80021be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <MX_ADC1_Init+0x98>)
 80021c2:	f001 fb03 	bl	80037cc <HAL_ADC_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80021cc:	f000 fe4d 	bl	8002e6a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80021d0:	2310      	movs	r3, #16
 80021d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021d4:	2301      	movs	r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021dc:	463b      	mov	r3, r7
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_ADC1_Init+0x98>)
 80021e2:	f001 fdb1 	bl	8003d48 <HAL_ADC_ConfigChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80021ec:	f000 fe3d 	bl	8002e6a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000254 	.word	0x20000254
 80021fc:	40012000 	.word	0x40012000
 8002200:	0f000001 	.word	0x0f000001

08002204 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_CRC_Init+0x20>)
 800220a:	4a07      	ldr	r2, [pc, #28]	; (8002228 <MX_CRC_Init+0x24>)
 800220c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_CRC_Init+0x20>)
 8002210:	f002 f911 	bl	8004436 <HAL_CRC_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800221a:	f000 fe26 	bl	8002e6a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	2000029c 	.word	0x2000029c
 8002228:	40023000 	.word	0x40023000

0800222c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002230:	4b17      	ldr	r3, [pc, #92]	; (8002290 <MX_SPI1_Init+0x64>)
 8002232:	4a18      	ldr	r2, [pc, #96]	; (8002294 <MX_SPI1_Init+0x68>)
 8002234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002236:	4b16      	ldr	r3, [pc, #88]	; (8002290 <MX_SPI1_Init+0x64>)
 8002238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800223c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <MX_SPI1_Init+0x64>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <MX_SPI1_Init+0x64>)
 8002246:	2200      	movs	r2, #0
 8002248:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800224a:	4b11      	ldr	r3, [pc, #68]	; (8002290 <MX_SPI1_Init+0x64>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <MX_SPI1_Init+0x64>)
 8002252:	2200      	movs	r2, #0
 8002254:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002256:	4b0e      	ldr	r3, [pc, #56]	; (8002290 <MX_SPI1_Init+0x64>)
 8002258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800225c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <MX_SPI1_Init+0x64>)
 8002260:	2220      	movs	r2, #32
 8002262:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <MX_SPI1_Init+0x64>)
 8002266:	2200      	movs	r2, #0
 8002268:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <MX_SPI1_Init+0x64>)
 800226c:	2200      	movs	r2, #0
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <MX_SPI1_Init+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <MX_SPI1_Init+0x64>)
 8002278:	220a      	movs	r2, #10
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800227c:	4804      	ldr	r0, [pc, #16]	; (8002290 <MX_SPI1_Init+0x64>)
 800227e:	f003 fc89 	bl	8005b94 <HAL_SPI_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002288:	f000 fdef 	bl	8002e6a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200002a4 	.word	0x200002a4
 8002294:	40013000 	.word	0x40013000

08002298 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	463b      	mov	r3, r7
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b4:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <MX_TIM2_Init+0x98>)
 80022b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <MX_TIM2_Init+0x98>)
 80022be:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80022c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <MX_TIM2_Init+0x98>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2625;
 80022ca:	4b19      	ldr	r3, [pc, #100]	; (8002330 <MX_TIM2_Init+0x98>)
 80022cc:	f640 2241 	movw	r2, #2625	; 0xa41
 80022d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d2:	4b17      	ldr	r3, [pc, #92]	; (8002330 <MX_TIM2_Init+0x98>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <MX_TIM2_Init+0x98>)
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022de:	4814      	ldr	r0, [pc, #80]	; (8002330 <MX_TIM2_Init+0x98>)
 80022e0:	f004 f898 	bl	8006414 <HAL_TIM_Base_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80022ea:	f000 fdbe 	bl	8002e6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	4619      	mov	r1, r3
 80022fa:	480d      	ldr	r0, [pc, #52]	; (8002330 <MX_TIM2_Init+0x98>)
 80022fc:	f004 fa73 	bl	80067e6 <HAL_TIM_ConfigClockSource>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002306:	f000 fdb0 	bl	8002e6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002312:	463b      	mov	r3, r7
 8002314:	4619      	mov	r1, r3
 8002316:	4806      	ldr	r0, [pc, #24]	; (8002330 <MX_TIM2_Init+0x98>)
 8002318:	f004 fc6e 	bl	8006bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002322:	f000 fda2 	bl	8002e6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200002fc 	.word	0x200002fc

08002334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002348:	463b      	mov	r3, r7
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002350:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <MX_TIM3_Init+0x90>)
 8002352:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <MX_TIM3_Init+0x94>)
 8002354:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <MX_TIM3_Init+0x90>)
 8002358:	2254      	movs	r2, #84	; 0x54
 800235a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MX_TIM3_Init+0x90>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <MX_TIM3_Init+0x90>)
 8002364:	2201      	movs	r2, #1
 8002366:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <MX_TIM3_Init+0x90>)
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <MX_TIM3_Init+0x90>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002374:	4813      	ldr	r0, [pc, #76]	; (80023c4 <MX_TIM3_Init+0x90>)
 8002376:	f004 f84d 	bl	8006414 <HAL_TIM_Base_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002380:	f000 fd73 	bl	8002e6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002388:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	4619      	mov	r1, r3
 8002390:	480c      	ldr	r0, [pc, #48]	; (80023c4 <MX_TIM3_Init+0x90>)
 8002392:	f004 fa28 	bl	80067e6 <HAL_TIM_ConfigClockSource>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800239c:	f000 fd65 	bl	8002e6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023a8:	463b      	mov	r3, r7
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_TIM3_Init+0x90>)
 80023ae:	f004 fc23 	bl	8006bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80023b8:	f000 fd57 	bl	8002e6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023bc:	bf00      	nop
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000344 	.word	0x20000344
 80023c8:	40000400 	.word	0x40000400

080023cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023d2:	f107 0308 	add.w	r3, r7, #8
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e0:	463b      	mov	r3, r7
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <MX_TIM4_Init+0x94>)
 80023ea:	4a1e      	ldr	r2, [pc, #120]	; (8002464 <MX_TIM4_Init+0x98>)
 80023ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000;
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <MX_TIM4_Init+0x94>)
 80023f0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80023f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <MX_TIM4_Init+0x94>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7875;
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <MX_TIM4_Init+0x94>)
 80023fe:	f641 62c3 	movw	r2, #7875	; 0x1ec3
 8002402:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002404:	4b16      	ldr	r3, [pc, #88]	; (8002460 <MX_TIM4_Init+0x94>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <MX_TIM4_Init+0x94>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002410:	4813      	ldr	r0, [pc, #76]	; (8002460 <MX_TIM4_Init+0x94>)
 8002412:	f003 ffff 	bl	8006414 <HAL_TIM_Base_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800241c:	f000 fd25 	bl	8002e6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002424:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002426:	f107 0308 	add.w	r3, r7, #8
 800242a:	4619      	mov	r1, r3
 800242c:	480c      	ldr	r0, [pc, #48]	; (8002460 <MX_TIM4_Init+0x94>)
 800242e:	f004 f9da 	bl	80067e6 <HAL_TIM_ConfigClockSource>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002438:	f000 fd17 	bl	8002e6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002444:	463b      	mov	r3, r7
 8002446:	4619      	mov	r1, r3
 8002448:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_TIM4_Init+0x94>)
 800244a:	f004 fbd5 	bl	8006bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002454:	f000 fd09 	bl	8002e6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	2000038c 	.word	0x2000038c
 8002464:	40000800 	.word	0x40000800

08002468 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246e:	f107 0308 	add.w	r3, r7, #8
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247c:	463b      	mov	r3, r7
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <MX_TIM5_Init+0x94>)
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <MX_TIM5_Init+0x98>)
 8002488:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <MX_TIM5_Init+0x94>)
 800248c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002490:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <MX_TIM5_Init+0x94>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 384300;
 8002498:	4b18      	ldr	r3, [pc, #96]	; (80024fc <MX_TIM5_Init+0x94>)
 800249a:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <MX_TIM5_Init+0x9c>)
 800249c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249e:	4b17      	ldr	r3, [pc, #92]	; (80024fc <MX_TIM5_Init+0x94>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a4:	4b15      	ldr	r3, [pc, #84]	; (80024fc <MX_TIM5_Init+0x94>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024aa:	4814      	ldr	r0, [pc, #80]	; (80024fc <MX_TIM5_Init+0x94>)
 80024ac:	f003 ffb2 	bl	8006414 <HAL_TIM_Base_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80024b6:	f000 fcd8 	bl	8002e6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024c0:	f107 0308 	add.w	r3, r7, #8
 80024c4:	4619      	mov	r1, r3
 80024c6:	480d      	ldr	r0, [pc, #52]	; (80024fc <MX_TIM5_Init+0x94>)
 80024c8:	f004 f98d 	bl	80067e6 <HAL_TIM_ConfigClockSource>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80024d2:	f000 fcca 	bl	8002e6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024de:	463b      	mov	r3, r7
 80024e0:	4619      	mov	r1, r3
 80024e2:	4806      	ldr	r0, [pc, #24]	; (80024fc <MX_TIM5_Init+0x94>)
 80024e4:	f004 fb88 	bl	8006bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80024ee:	f000 fcbc 	bl	8002e6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024f2:	bf00      	nop
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200003d4 	.word	0x200003d4
 8002500:	40000c00 	.word	0x40000c00
 8002504:	0005dd2c 	.word	0x0005dd2c

08002508 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_USART1_UART_Init+0x4c>)
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <MX_USART1_UART_Init+0x50>)
 8002510:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <MX_USART1_UART_Init+0x4c>)
 8002514:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002518:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_USART1_UART_Init+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_USART1_UART_Init+0x4c>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <MX_USART1_UART_Init+0x4c>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_USART1_UART_Init+0x4c>)
 800252e:	220c      	movs	r2, #12
 8002530:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <MX_USART1_UART_Init+0x4c>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_USART1_UART_Init+0x4c>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_USART1_UART_Init+0x4c>)
 8002540:	f004 fbdc 	bl	8006cfc <HAL_UART_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800254a:	f000 fc8e 	bl	8002e6a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000041c 	.word	0x2000041c
 8002558:	40011000 	.word	0x40011000

0800255c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <MX_USART2_UART_Init+0x50>)
 8002564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800256c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002582:	220c      	movs	r2, #12
 8002584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <MX_USART2_UART_Init+0x4c>)
 8002594:	f004 fbb2 	bl	8006cfc <HAL_UART_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800259e:	f000 fc64 	bl	8002e6a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000460 	.word	0x20000460
 80025ac:	40004400 	.word	0x40004400

080025b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <MX_USART6_UART_Init+0x4c>)
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <MX_USART6_UART_Init+0x50>)
 80025b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <MX_USART6_UART_Init+0x4c>)
 80025bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <MX_USART6_UART_Init+0x4c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <MX_USART6_UART_Init+0x4c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <MX_USART6_UART_Init+0x4c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <MX_USART6_UART_Init+0x4c>)
 80025d6:	220c      	movs	r2, #12
 80025d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <MX_USART6_UART_Init+0x4c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <MX_USART6_UART_Init+0x4c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80025e6:	4805      	ldr	r0, [pc, #20]	; (80025fc <MX_USART6_UART_Init+0x4c>)
 80025e8:	f004 fb88 	bl	8006cfc <HAL_UART_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80025f2:	f000 fc3a 	bl	8002e6a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200004a4 	.word	0x200004a4
 8002600:	40011400 	.word	0x40011400

08002604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_DMA_Init+0x3c>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <MX_DMA_Init+0x3c>)
 8002614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_DMA_Init+0x3c>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	203a      	movs	r0, #58	; 0x3a
 800262c:	f001 febf 	bl	80043ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002630:	203a      	movs	r0, #58	; 0x3a
 8002632:	f001 fed8 	bl	80043e6 <HAL_NVIC_EnableIRQ>

}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800

08002644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	4b5d      	ldr	r3, [pc, #372]	; (80027d4 <MX_GPIO_Init+0x190>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a5c      	ldr	r2, [pc, #368]	; (80027d4 <MX_GPIO_Init+0x190>)
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <MX_GPIO_Init+0x190>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b56      	ldr	r3, [pc, #344]	; (80027d4 <MX_GPIO_Init+0x190>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a55      	ldr	r2, [pc, #340]	; (80027d4 <MX_GPIO_Init+0x190>)
 8002680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <MX_GPIO_Init+0x190>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	4b4f      	ldr	r3, [pc, #316]	; (80027d4 <MX_GPIO_Init+0x190>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <MX_GPIO_Init+0x190>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b4c      	ldr	r3, [pc, #304]	; (80027d4 <MX_GPIO_Init+0x190>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	4b48      	ldr	r3, [pc, #288]	; (80027d4 <MX_GPIO_Init+0x190>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a47      	ldr	r2, [pc, #284]	; (80027d4 <MX_GPIO_Init+0x190>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b45      	ldr	r3, [pc, #276]	; (80027d4 <MX_GPIO_Init+0x190>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
 80026ca:	2201      	movs	r2, #1
 80026cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026d0:	4841      	ldr	r0, [pc, #260]	; (80027d8 <MX_GPIO_Init+0x194>)
 80026d2:	f002 fd95 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 80026d6:	2200      	movs	r2, #0
 80026d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026dc:	483e      	ldr	r0, [pc, #248]	; (80027d8 <MX_GPIO_Init+0x194>)
 80026de:	f002 fd8f 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NSS_GPIO_Port, RF_NSS_Pin, GPIO_PIN_RESET);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2110      	movs	r1, #16
 80026e6:	483d      	ldr	r0, [pc, #244]	; (80027dc <MX_GPIO_Init+0x198>)
 80026e8:	f002 fd8a 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 80026ec:	2200      	movs	r2, #0
 80026ee:	f240 7117 	movw	r1, #1815	; 0x717
 80026f2:	483b      	ldr	r0, [pc, #236]	; (80027e0 <MX_GPIO_Init+0x19c>)
 80026f4:	f002 fd84 	bl	8005200 <HAL_GPIO_WritePin>
                          |RF_DIO1_Pin|GSM_RST_Pin|GSM_RTS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GSM_CTS_Pin GSM_PWR_Pin */
  GPIO_InitStruct.Pin = GSM_CTS_Pin|GSM_PWR_Pin;
 80026f8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80026fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fe:	2301      	movs	r3, #1
 8002700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	4831      	ldr	r0, [pc, #196]	; (80027d8 <MX_GPIO_Init+0x194>)
 8002712:	f002 fb0d 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_GPIO1INT_Pin */
  GPIO_InitStruct.Pin = GSM_GPIO1INT_Pin;
 8002716:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800271a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GSM_GPIO1INT_GPIO_Port, &GPIO_InitStruct);
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	4619      	mov	r1, r3
 800272a:	482b      	ldr	r0, [pc, #172]	; (80027d8 <MX_GPIO_Init+0x194>)
 800272c:	f002 fb00 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NSS_Pin */
  GPIO_InitStruct.Pin = RF_NSS_Pin;
 8002730:	2310      	movs	r3, #16
 8002732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273c:	2300      	movs	r3, #0
 800273e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_NSS_GPIO_Port, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	4825      	ldr	r0, [pc, #148]	; (80027dc <MX_GPIO_Init+0x198>)
 8002748:	f002 faf2 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin
                           RF_DIO1_Pin GSM_RTS_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 800274c:	f240 6317 	movw	r3, #1559	; 0x617
 8002750:	617b      	str	r3, [r7, #20]
                          |RF_DIO1_Pin|GSM_RTS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002752:	2301      	movs	r3, #1
 8002754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	4619      	mov	r1, r3
 8002764:	481e      	ldr	r0, [pc, #120]	; (80027e0 <MX_GPIO_Init+0x19c>)
 8002766:	f002 fae3 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DIO0_Pin */
  GPIO_InitStruct.Pin = RF_DIO0_Pin;
 800276a:	2320      	movs	r3, #32
 800276c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800276e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	4818      	ldr	r0, [pc, #96]	; (80027e0 <MX_GPIO_Init+0x19c>)
 8002780:	f002 fad6 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_RST_Pin */
  GPIO_InitStruct.Pin = RF_RST_Pin;
 8002784:	2340      	movs	r3, #64	; 0x40
 8002786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_RST_GPIO_Port, &GPIO_InitStruct);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	4812      	ldr	r0, [pc, #72]	; (80027e0 <MX_GPIO_Init+0x19c>)
 8002798:	f002 faca 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_RST_Pin */
  GPIO_InitStruct.Pin = GSM_RST_Pin;
 800279c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GSM_RST_GPIO_Port, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	480a      	ldr	r0, [pc, #40]	; (80027e0 <MX_GPIO_Init+0x19c>)
 80027b6:	f002 fabb 	bl	8004d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	2017      	movs	r0, #23
 80027c0:	f001 fdf5 	bl	80043ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027c4:	2017      	movs	r0, #23
 80027c6:	f001 fe0e 	bl	80043e6 <HAL_NVIC_EnableIRQ>

}
 80027ca:	bf00      	nop
 80027cc:	3728      	adds	r7, #40	; 0x28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020800 	.word	0x40020800
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40020400 	.word	0x40020400

080027e4 <HAL_UART_RxCpltCallback>:
	}else{
		return CMD_ERROR;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a53      	ldr	r2, [pc, #332]	; (800293c <HAL_UART_RxCpltCallback+0x158>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d104      	bne.n	80027fe <HAL_UART_RxCpltCallback+0x1a>
		//HAL_UART_Receive_IT(&huart1, &rxBuf, 1);
		HAL_UART_Receive_DMA(&huart1, hallo, 255);
 80027f4:	22ff      	movs	r2, #255	; 0xff
 80027f6:	4952      	ldr	r1, [pc, #328]	; (8002940 <HAL_UART_RxCpltCallback+0x15c>)
 80027f8:	4850      	ldr	r0, [pc, #320]	; (800293c <HAL_UART_RxCpltCallback+0x158>)
 80027fa:	f004 fc02 	bl	8007002 <HAL_UART_Receive_DMA>
		//GPS_Receive(hallo);
		//GPS_Receive(rxBuf);
		//HAL_UART_Receive_DMA(&huart1, &rxBuf, 1);
	}

	if(huart == &huart6){
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a50      	ldr	r2, [pc, #320]	; (8002944 <HAL_UART_RxCpltCallback+0x160>)
 8002802:	4293      	cmp	r3, r2
 8002804:	f040 8095 	bne.w	8002932 <HAL_UART_RxCpltCallback+0x14e>
			uint8_t Command = UART6_RxBuf[0];
 8002808:	4b4f      	ldr	r3, [pc, #316]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	73bb      	strb	r3, [r7, #14]
			uint8_t Parameter = UART6_RxBuf[1];
 800280e:	4b4e      	ldr	r3, [pc, #312]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 8002810:	785b      	ldrb	r3, [r3, #1]
 8002812:	737b      	strb	r3, [r7, #13]

			if (UART6_RxIsData == 1){
 8002814:	4b4d      	ldr	r3, [pc, #308]	; (800294c <HAL_UART_RxCpltCallback+0x168>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d131      	bne.n	8002880 <HAL_UART_RxCpltCallback+0x9c>
				UART6_RxIsData = 0;
 800281c:	4b4b      	ldr	r3, [pc, #300]	; (800294c <HAL_UART_RxCpltCallback+0x168>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
				UART6_RxIsData = 0;
 8002822:	4b4a      	ldr	r3, [pc, #296]	; (800294c <HAL_UART_RxCpltCallback+0x168>)
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
				UART6_RxBytes = 4;
 8002828:	4b49      	ldr	r3, [pc, #292]	; (8002950 <HAL_UART_RxCpltCallback+0x16c>)
 800282a:	2204      	movs	r2, #4
 800282c:	701a      	strb	r2, [r3, #0]
				uint8_t msg_len = strlen((char *)UART6_RxBuf);
 800282e:	4846      	ldr	r0, [pc, #280]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 8002830:	f7fd fce0 	bl	80001f4 <strlen>
 8002834:	4603      	mov	r3, r0
 8002836:	733b      	strb	r3, [r7, #12]

				if(UART6_RxBuf[msg_len-1] == crc_xor((char *)UART6_RxBuf))
 8002838:	7b3b      	ldrb	r3, [r7, #12]
 800283a:	3b01      	subs	r3, #1
 800283c:	4a42      	ldr	r2, [pc, #264]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 800283e:	5cd4      	ldrb	r4, [r2, r3]
 8002840:	4841      	ldr	r0, [pc, #260]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 8002842:	f000 f9b3 	bl	8002bac <crc_xor>
 8002846:	4603      	mov	r3, r0
 8002848:	429c      	cmp	r4, r3
 800284a:	d110      	bne.n	800286e <HAL_UART_RxCpltCallback+0x8a>
						for (uint8_t i = 0; i < (msg_len-2); i++)
 800284c:	2300      	movs	r3, #0
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	e008      	b.n	8002864 <HAL_UART_RxCpltCallback+0x80>
							UART6_DataBuf[i] = UART6_RxBuf[i];
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	493c      	ldr	r1, [pc, #240]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 8002858:	5c89      	ldrb	r1, [r1, r2]
 800285a:	4a3e      	ldr	r2, [pc, #248]	; (8002954 <HAL_UART_RxCpltCallback+0x170>)
 800285c:	54d1      	strb	r1, [r2, r3]
						for (uint8_t i = 0; i < (msg_len-2); i++)
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	3301      	adds	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
 8002864:	7bfa      	ldrb	r2, [r7, #15]
 8002866:	7b3b      	ldrb	r3, [r7, #12]
 8002868:	3b02      	subs	r3, #2
 800286a:	429a      	cmp	r2, r3
 800286c:	dbf1      	blt.n	8002852 <HAL_UART_RxCpltCallback+0x6e>

				//memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
				HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 800286e:	4b38      	ldr	r3, [pc, #224]	; (8002950 <HAL_UART_RxCpltCallback+0x16c>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	4934      	ldr	r1, [pc, #208]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 8002878:	4832      	ldr	r0, [pc, #200]	; (8002944 <HAL_UART_RxCpltCallback+0x160>)
 800287a:	f004 fb92 	bl	8006fa2 <HAL_UART_Receive_IT>
 800287e:	e045      	b.n	800290c <HAL_UART_RxCpltCallback+0x128>


			}else{
				switch(Command){
 8002880:	7bbb      	ldrb	r3, [r7, #14]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d038      	beq.n	80028f8 <HAL_UART_RxCpltCallback+0x114>
 8002886:	2b03      	cmp	r3, #3
 8002888:	dc3d      	bgt.n	8002906 <HAL_UART_RxCpltCallback+0x122>
 800288a:	2b00      	cmp	r3, #0
 800288c:	d03d      	beq.n	800290a <HAL_UART_RxCpltCallback+0x126>
 800288e:	2b02      	cmp	r3, #2
 8002890:	d000      	beq.n	8002894 <HAL_UART_RxCpltCallback+0xb0>
						UART6_TxBuf[1] = Parameter;
					break;
					default:
						//nothing happens
						//HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
					break;
 8002892:	e038      	b.n	8002906 <HAL_UART_RxCpltCallback+0x122>
						if(crc_xor((char *)UART6_RxBuf) == UART6_RxBuf[3]){
 8002894:	482c      	ldr	r0, [pc, #176]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 8002896:	f000 f989 	bl	8002bac <crc_xor>
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 80028a0:	78db      	ldrb	r3, [r3, #3]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d107      	bne.n	80028b6 <HAL_UART_RxCpltCallback+0xd2>
							UART6_RxIsData = 1;
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <HAL_UART_RxCpltCallback+0x168>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
							UART6_RxBytes = UART6_RxBuf[1];
 80028ac:	4b26      	ldr	r3, [pc, #152]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 80028ae:	785a      	ldrb	r2, [r3, #1]
 80028b0:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_UART_RxCpltCallback+0x16c>)
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	e017      	b.n	80028e6 <HAL_UART_RxCpltCallback+0x102>
							UART6_RxBytes = 4;
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_UART_RxCpltCallback+0x16c>)
 80028b8:	2204      	movs	r2, #4
 80028ba:	701a      	strb	r2, [r3, #0]
							 UART6_TxBuf[0] = 0x03;
 80028bc:	4b26      	ldr	r3, [pc, #152]	; (8002958 <HAL_UART_RxCpltCallback+0x174>)
 80028be:	2203      	movs	r2, #3
 80028c0:	701a      	strb	r2, [r3, #0]
							 UART6_TxBuf[1] = 0x99;
 80028c2:	4b25      	ldr	r3, [pc, #148]	; (8002958 <HAL_UART_RxCpltCallback+0x174>)
 80028c4:	2299      	movs	r2, #153	; 0x99
 80028c6:	705a      	strb	r2, [r3, #1]
							 UART6_TxBuf[2] = '*';
 80028c8:	4b23      	ldr	r3, [pc, #140]	; (8002958 <HAL_UART_RxCpltCallback+0x174>)
 80028ca:	222a      	movs	r2, #42	; 0x2a
 80028cc:	709a      	strb	r2, [r3, #2]
							 UART6_TxBuf[3] = crc_xor((char *)UART6_TxBuf);
 80028ce:	4822      	ldr	r0, [pc, #136]	; (8002958 <HAL_UART_RxCpltCallback+0x174>)
 80028d0:	f000 f96c 	bl	8002bac <crc_xor>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <HAL_UART_RxCpltCallback+0x174>)
 80028da:	70da      	strb	r2, [r3, #3]
							HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 4);
 80028dc:	2204      	movs	r2, #4
 80028de:	491e      	ldr	r1, [pc, #120]	; (8002958 <HAL_UART_RxCpltCallback+0x174>)
 80028e0:	4818      	ldr	r0, [pc, #96]	; (8002944 <HAL_UART_RxCpltCallback+0x160>)
 80028e2:	f004 fb19 	bl	8006f18 <HAL_UART_Transmit_IT>
						HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_UART_RxCpltCallback+0x16c>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	4916      	ldr	r1, [pc, #88]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 80028f0:	4814      	ldr	r0, [pc, #80]	; (8002944 <HAL_UART_RxCpltCallback+0x160>)
 80028f2:	f004 fb56 	bl	8006fa2 <HAL_UART_Receive_IT>
					break;
 80028f6:	e009      	b.n	800290c <HAL_UART_RxCpltCallback+0x128>
						UART6_TxBuf[0] = 0x02;
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <HAL_UART_RxCpltCallback+0x174>)
 80028fa:	2202      	movs	r2, #2
 80028fc:	701a      	strb	r2, [r3, #0]
						UART6_TxBuf[1] = Parameter;
 80028fe:	4a16      	ldr	r2, [pc, #88]	; (8002958 <HAL_UART_RxCpltCallback+0x174>)
 8002900:	7b7b      	ldrb	r3, [r7, #13]
 8002902:	7053      	strb	r3, [r2, #1]
					break;
 8002904:	e002      	b.n	800290c <HAL_UART_RxCpltCallback+0x128>
					break;
 8002906:	bf00      	nop
 8002908:	e000      	b.n	800290c <HAL_UART_RxCpltCallback+0x128>
					break;
 800290a:	bf00      	nop
				}
			}
			if(Command != 0x02){
 800290c:	7bbb      	ldrb	r3, [r7, #14]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d00a      	beq.n	8002928 <HAL_UART_RxCpltCallback+0x144>
				UART6_RxBytes = 4;
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <HAL_UART_RxCpltCallback+0x16c>)
 8002914:	2204      	movs	r2, #4
 8002916:	701a      	strb	r2, [r3, #0]
				//memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
				HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_UART_RxCpltCallback+0x16c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	4909      	ldr	r1, [pc, #36]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 8002922:	4808      	ldr	r0, [pc, #32]	; (8002944 <HAL_UART_RxCpltCallback+0x160>)
 8002924:	f004 fb3d 	bl	8006fa2 <HAL_UART_Receive_IT>
			}
			 memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 8002928:	2232      	movs	r2, #50	; 0x32
 800292a:	2100      	movs	r1, #0
 800292c:	4806      	ldr	r0, [pc, #24]	; (8002948 <HAL_UART_RxCpltCallback+0x164>)
 800292e:	f005 fe75 	bl	800861c <memset>
	}
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bd90      	pop	{r4, r7, pc}
 800293a:	bf00      	nop
 800293c:	2000041c 	.word	0x2000041c
 8002940:	20000670 	.word	0x20000670
 8002944:	200004a4 	.word	0x200004a4
 8002948:	2000063c 	.word	0x2000063c
 800294c:	200005d3 	.word	0x200005d3
 8002950:	20000022 	.word	0x20000022
 8002954:	20000608 	.word	0x20000608
 8002958:	200005d4 	.word	0x200005d4

0800295c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart1, &rxBuf, 1); doesn't work for some reason...
	if(huart == &huart1){
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <HAL_UART_ErrorCallback+0x44>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d104      	bne.n	8002976 <HAL_UART_ErrorCallback+0x1a>
		//HAL_UART_Receive_IT(&huart1, &rxBuf, 1);
		HAL_UART_Receive_DMA(&huart1, hallo, 255);
 800296c:	22ff      	movs	r2, #255	; 0xff
 800296e:	490d      	ldr	r1, [pc, #52]	; (80029a4 <HAL_UART_ErrorCallback+0x48>)
 8002970:	480b      	ldr	r0, [pc, #44]	; (80029a0 <HAL_UART_ErrorCallback+0x44>)
 8002972:	f004 fb46 	bl	8007002 <HAL_UART_Receive_DMA>
	}
	if(huart == &huart6){
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <HAL_UART_ErrorCallback+0x4c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10c      	bne.n	8002998 <HAL_UART_ErrorCallback+0x3c>
		memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 800297e:	2232      	movs	r2, #50	; 0x32
 8002980:	2100      	movs	r1, #0
 8002982:	480a      	ldr	r0, [pc, #40]	; (80029ac <HAL_UART_ErrorCallback+0x50>)
 8002984:	f005 fe4a 	bl	800861c <memset>
		HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_UART_ErrorCallback+0x54>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	4906      	ldr	r1, [pc, #24]	; (80029ac <HAL_UART_ErrorCallback+0x50>)
 8002992:	4805      	ldr	r0, [pc, #20]	; (80029a8 <HAL_UART_ErrorCallback+0x4c>)
 8002994:	f004 fb05 	bl	8006fa2 <HAL_UART_Receive_IT>
	}
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2000041c 	.word	0x2000041c
 80029a4:	20000670 	.word	0x20000670
 80029a8:	200004a4 	.word	0x200004a4
 80029ac:	2000063c 	.word	0x2000063c
 80029b0:	20000022 	.word	0x20000022

080029b4 <MODE_Set>:

void MODE_Set(SX1278_t * module, uint8_t mode){
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
	  switch(mode){
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d015      	beq.n	80029f2 <MODE_Set+0x3e>
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	dc17      	bgt.n	80029fa <MODE_Set+0x46>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <MODE_Set+0x20>
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d00b      	beq.n	80029ea <MODE_Set+0x36>
		  case 2: // RTTY config
			  SX1278_RTTY_Config(module);
		  break;

		  default: // lets ignore that one
		  break;
 80029d2:	e012      	b.n	80029fa <MODE_Set+0x46>
			  SX1278_begin(module, SX1278_433MHZ, MIN_POWER, SX1278_LORA_SF_8, // air time ~ 495ms
 80029d4:	2308      	movs	r3, #8
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	2303      	movs	r3, #3
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2302      	movs	r3, #2
 80029de:	2203      	movs	r2, #3
 80029e0:	2100      	movs	r1, #0
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fe ff2c 	bl	8001840 <SX1278_begin>
		  break;
 80029e8:	e008      	b.n	80029fc <MODE_Set+0x48>
			  SX1278_FSK_Config(module);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fd40 	bl	8001470 <SX1278_FSK_Config>
		  break;
 80029f0:	e004      	b.n	80029fc <MODE_Set+0x48>
			  SX1278_RTTY_Config(module);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe fca0 	bl	8001338 <SX1278_RTTY_Config>
		  break;
 80029f8:	e000      	b.n	80029fc <MODE_Set+0x48>
		  break;
 80029fa:	bf00      	nop
	  }
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a14:	d105      	bne.n	8002a22 <HAL_TIM_PeriodElapsedCallback+0x1e>
		sec_gps++;
 8002a16:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002a20:	701a      	strb	r2, [r3, #0]
	}

	if(htim->Instance == TIM3){
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d102      	bne.n	8002a32 <HAL_TIM_PeriodElapsedCallback+0x2e>
		u_sec_delay = 1;
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM4){
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d105      	bne.n	8002a48 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_TIM_Base_Stop_IT(&htim4);
 8002a3c:	480f      	ldr	r0, [pc, #60]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002a3e:	f003 fd9b 	bl	8006578 <HAL_TIM_Base_Stop_IT>
		gsmRec = 1;
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == TIM5){
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d107      	bne.n	8002a62 <HAL_TIM_PeriodElapsedCallback+0x5e>
		HAL_TIM_Base_Stop_IT(&htim5);
 8002a52:	480d      	ldr	r0, [pc, #52]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002a54:	f003 fd90 	bl	8006578 <HAL_TIM_Base_Stop_IT>
		GSM_On();
 8002a58:	f7ff f850 	bl	8001afc <GSM_On>
		HAL_TIM_Base_Start_IT(&htim4);
 8002a5c:	4807      	ldr	r0, [pc, #28]	; (8002a7c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002a5e:	f003 fd29 	bl	80064b4 <HAL_TIM_Base_Start_IT>
	}
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200005d2 	.word	0x200005d2
 8002a70:	40000400 	.word	0x40000400
 8002a74:	200005cc 	.word	0x200005cc
 8002a78:	40000800 	.word	0x40000800
 8002a7c:	2000038c 	.word	0x2000038c
 8002a80:	200005d0 	.word	0x200005d0
 8002a84:	40000c00 	.word	0x40000c00
 8002a88:	200003d4 	.word	0x200003d4

08002a8c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin){
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	80fb      	strh	r3, [r7, #6]
	loraModuleIrq = 1;
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	200005ca 	.word	0x200005ca

08002aac <RTTY_Send>:

void RTTY_Send(SX1278_t * module, uint8_t *buf, uint8_t len){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	71fb      	strb	r3, [r7, #7]
	uint16_t baudTimeout = 20;
 8002aba:	2314      	movs	r3, #20
 8002abc:	82bb      	strh	r3, [r7, #20]
	uint8_t i;
	uint8_t curChar = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	74fb      	strb	r3, [r7, #19]

	SX1278_RTTY_Config(module);
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7fe fc38 	bl	8001338 <SX1278_RTTY_Config>

	for(i = 0; i < len; i++){
 8002ac8:	2300      	movs	r3, #0
 8002aca:	75fb      	strb	r3, [r7, #23]
 8002acc:	e00e      	b.n	8002aec <RTTY_Send+0x40>
		curChar = buf[i];
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	74fb      	strb	r3, [r7, #19]
		RTTY_SendSingle(module, curChar, baudTimeout);
 8002ad8:	8abb      	ldrh	r3, [r7, #20]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f80c 	bl	8002afe <RTTY_SendSingle>
	for(i = 0; i < len; i++){
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	75fb      	strb	r3, [r7, #23]
 8002aec:	7dfa      	ldrb	r2, [r7, #23]
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d3ec      	bcc.n	8002ace <RTTY_Send+0x22>
	}
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <RTTY_SendSingle>:

void RTTY_SendSingle(SX1278_t * module, uint8_t buf, uint8_t timeout){
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	460b      	mov	r3, r1
 8002b08:	70fb      	strb	r3, [r7, #3]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	70bb      	strb	r3, [r7, #2]
	SX1278_RTTY_WriteLow(module); //start bit
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fc5d 	bl	80013ce <SX1278_RTTY_WriteLow>
	HAL_Delay(timeout);
 8002b14:	78bb      	ldrb	r3, [r7, #2]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fe34 	bl	8003784 <HAL_Delay>
	for(uint8_t j = 0; j < 8; j++){
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	e015      	b.n	8002b4e <RTTY_SendSingle+0x50>
		if(bit_set(buf, j)){
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	fa42 f303 	asr.w	r3, r2, r3
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <RTTY_SendSingle+0x3c>
			SX1278_RTTY_WriteHigh(module);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe fc73 	bl	800141e <SX1278_RTTY_WriteHigh>
 8002b38:	e002      	b.n	8002b40 <RTTY_SendSingle+0x42>
		}else{
			SX1278_RTTY_WriteLow(module);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fe fc47 	bl	80013ce <SX1278_RTTY_WriteLow>
		}
		HAL_Delay(timeout);
 8002b40:	78bb      	ldrb	r3, [r7, #2]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fe1e 	bl	8003784 <HAL_Delay>
	for(uint8_t j = 0; j < 8; j++){
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	2b07      	cmp	r3, #7
 8002b52:	d9e6      	bls.n	8002b22 <RTTY_SendSingle+0x24>
	}
	SX1278_RTTY_WriteHigh(module); // stop bit
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7fe fc62 	bl	800141e <SX1278_RTTY_WriteHigh>
	HAL_Delay(30);
 8002b5a:	201e      	movs	r0, #30
 8002b5c:	f000 fe12 	bl	8003784 <HAL_Delay>
	SX1278_RTTY_Stop(module);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7fe fc1b 	bl	800139c <SX1278_RTTY_Stop>
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <get_check_sum>:

uint8_t get_check_sum(char *string){
 8002b6e:	b590      	push	{r4, r7, lr}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
	uint8_t XOR = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 1; i < strlen(string); i++) {
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73bb      	strb	r3, [r7, #14]
 8002b7e:	e009      	b.n	8002b94 <get_check_sum+0x26>
		XOR = XOR ^ string[i];
 8002b80:	7bbb      	ldrb	r3, [r7, #14]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	781a      	ldrb	r2, [r3, #0]
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	4053      	eors	r3, r2
 8002b8c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 1; i < strlen(string); i++) {
 8002b8e:	7bbb      	ldrb	r3, [r7, #14]
 8002b90:	3301      	adds	r3, #1
 8002b92:	73bb      	strb	r3, [r7, #14]
 8002b94:	7bbc      	ldrb	r4, [r7, #14]
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fd fb2c 	bl	80001f4 <strlen>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	429c      	cmp	r4, r3
 8002ba0:	d3ee      	bcc.n	8002b80 <get_check_sum+0x12>
	}
	return XOR;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}

08002bac <crc_xor>:
uint8_t crc_xor(char *string){
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	uint8_t XOR = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; string[i] != '*' && i < strlen(string); i++){
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73bb      	strb	r3, [r7, #14]
 8002bbc:	e009      	b.n	8002bd2 <crc_xor+0x26>
		XOR = XOR ^ string[i];
 8002bbe:	7bbb      	ldrb	r3, [r7, #14]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	781a      	ldrb	r2, [r3, #0]
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	4053      	eors	r3, r2
 8002bca:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; string[i] != '*' && i < strlen(string); i++){
 8002bcc:	7bbb      	ldrb	r3, [r7, #14]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	73bb      	strb	r3, [r7, #14]
 8002bd2:	7bbb      	ldrb	r3, [r7, #14]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b2a      	cmp	r3, #42	; 0x2a
 8002bdc:	d006      	beq.n	8002bec <crc_xor+0x40>
 8002bde:	7bbc      	ldrb	r4, [r7, #14]
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fd fb07 	bl	80001f4 <strlen>
 8002be6:	4603      	mov	r3, r0
 8002be8:	429c      	cmp	r4, r3
 8002bea:	d3e8      	bcc.n	8002bbe <crc_xor+0x12>
	}
	return XOR;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd90      	pop	{r4, r7, pc}
	...

08002bf8 <make_string>:

void make_string(char *s, uint8_t size){
 8002bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bfa:	b09b      	sub	sp, #108	; 0x6c
 8002bfc:	af08      	add	r7, sp, #32
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
	uint8_t lon[10];
	uint8_t hei[9];
	uint8_t spe[7];

	//CLEAR TEMP BUFFERS (SOMETIMES IT HAS INFORMATION IN IT, BECAUSE IT USES MEMORY LOCATION THAT WERE TEMP USED FOR OTHER STUFF) ONLY WHEN THERE IS +1 elemt in array
	memset(time, 0, sizeof(time));
 8002c04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c08:	220b      	movs	r2, #11
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f005 fd05 	bl	800861c <memset>
	memset(lat, 0, sizeof(lat));
 8002c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c16:	220a      	movs	r2, #10
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f005 fcfe 	bl	800861c <memset>
	memset(lon, 0, sizeof(lon));
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	220a      	movs	r2, #10
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f005 fcf7 	bl	800861c <memset>
	memset(hei, 0, sizeof(hei));
 8002c2e:	f107 0310 	add.w	r3, r7, #16
 8002c32:	2209      	movs	r2, #9
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f005 fcf0 	bl	800861c <memset>
	memset(spe, 0, sizeof(spe));
 8002c3c:	f107 0308 	add.w	r3, r7, #8
 8002c40:	2207      	movs	r2, #7
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f005 fce9 	bl	800861c <memset>

	//Get all params from satalites data
	GPS_GetTime(time);
 8002c4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe ff00 	bl	8001a54 <GPS_GetTime>
	GPS_GetLat(lat);
 8002c54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe fe6d 	bl	8001938 <GPS_GetLat>
	GPS_GetLon(lon);
 8002c5e:	f107 031c 	add.w	r3, r7, #28
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fe8c 	bl	8001980 <GPS_GetLon>
	GPS_GetHei(hei);
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe fecf 	bl	8001a10 <GPS_GetHei>
	GPS_GetSpe(spe);
 8002c72:	f107 0308 	add.w	r3, r7, #8
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe fea8 	bl	80019cc <GPS_GetSpe>

	snprintf(s, size, "\r\n$$IRBE5,%li,%s,%s,%s,%s,%s,%s,%.2f", ++num, time, lat, lon, hei, spe, UART6_DataBuf, temp_mcu());
 8002c7c:	78fc      	ldrb	r4, [r7, #3]
 8002c7e:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <make_string+0x120>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <make_string+0x120>)
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <make_string+0x120>)
 8002c8a:	681d      	ldr	r5, [r3, #0]
 8002c8c:	f000 f84c 	bl	8002d28 <temp_mcu>
 8002c90:	ee10 3a10 	vmov	r3, s0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc6f 	bl	8000578 <__aeabi_f2d>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <make_string+0x124>)
 8002ca4:	9305      	str	r3, [sp, #20]
 8002ca6:	f107 0308 	add.w	r3, r7, #8
 8002caa:	9304      	str	r3, [sp, #16]
 8002cac:	f107 0310 	add.w	r3, r7, #16
 8002cb0:	9303      	str	r3, [sp, #12]
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	9302      	str	r3, [sp, #8]
 8002cb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	462b      	mov	r3, r5
 8002cc6:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <make_string+0x128>)
 8002cc8:	4621      	mov	r1, r4
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f006 f918 	bl	8008f00 <sniprintf>
	uint8_t l = strlen((char *)s);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7fd fa8f 	bl	80001f4 <strlen>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char *ptr = strrchr(s, '$');
 8002cdc:	2124      	movs	r1, #36	; 0x24
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f006 f94f 	bl	8008f82 <strrchr>
 8002ce4:	6438      	str	r0, [r7, #64]	; 0x40
	if(snprintf(s + l, size - l, "*%02x\r\n", get_check_sum(ptr))  > size - 4 - 1){
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	1f1c      	subs	r4, r3, #4
 8002cea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	18d5      	adds	r5, r2, r3
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	461e      	mov	r6, r3
 8002cfc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002cfe:	f7ff ff36 	bl	8002b6e <get_check_sum>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <make_string+0x12c>)
 8002d06:	4631      	mov	r1, r6
 8002d08:	4628      	mov	r0, r5
 8002d0a:	f006 f8f9 	bl	8008f00 <sniprintf>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	429c      	cmp	r4, r3
		//buffer overflow
		return;
	}
}
 8002d12:	374c      	adds	r7, #76	; 0x4c
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d18:	200005b8 	.word	0x200005b8
 8002d1c:	20000608 	.word	0x20000608
 8002d20:	0800b4ac 	.word	0x0800b4ac
 8002d24:	0800b4d4 	.word	0x0800b4d4

08002d28 <temp_mcu>:
	GPS_GetHei(hei);

	snprintf(s, size, "Latitude:%s\nLongitude:%s\nHeight ASL:%s",lat, lon, hei);
}

float temp_mcu(void){
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
	  float TemperatureValue = 0;
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	607b      	str	r3, [r7, #4]
	  uint16_t value = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	807b      	strh	r3, [r7, #2]
	  value = HAL_ADC_GetValue(&hadc1);
 8002d38:	482f      	ldr	r0, [pc, #188]	; (8002df8 <temp_mcu+0xd0>)
 8002d3a:	f000 ffda 	bl	8003cf2 <HAL_ADC_GetValue>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	807b      	strh	r3, [r7, #2]
	  TemperatureValue = value & 0x0fff;// 12 bit result
 8002d42:	887b      	ldrh	r3, [r7, #2]
 8002d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d48:	ee07 3a90 	vmov	s15, r3
 8002d4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d50:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue *= 3300;
 8002d54:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d58:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002dfc <temp_mcu+0xd4>
 8002d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d60:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue /= 0xfff; //Reading in mV
 8002d64:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d68:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002e00 <temp_mcu+0xd8>
 8002d6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d70:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue /= 1000.0; //Reading in Volts
 8002d74:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d78:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002e04 <temp_mcu+0xdc>
 8002d7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d80:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue -= 0.760; // Subtract the reference voltage at 25�C
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7fd fbf7 	bl	8000578 <__aeabi_f2d>
 8002d8a:	a317      	add	r3, pc, #92	; (adr r3, 8002de8 <temp_mcu+0xc0>)
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f7fd fa92 	bl	80002b8 <__aeabi_dsub>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f7fd ff1c 	bl	8000bd8 <__aeabi_d2f>
 8002da0:	4603      	mov	r3, r0
 8002da2:	607b      	str	r3, [r7, #4]
	  TemperatureValue /= .0025; // Divide by slope 2.5mV
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7fd fbe7 	bl	8000578 <__aeabi_f2d>
 8002daa:	a311      	add	r3, pc, #68	; (adr r3, 8002df0 <temp_mcu+0xc8>)
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	f7fd fd64 	bl	800087c <__aeabi_ddiv>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f7fd ff0c 	bl	8000bd8 <__aeabi_d2f>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	607b      	str	r3, [r7, #4]
	  TemperatureValue += 25.0; // Add the 25�C
 8002dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dc8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002dcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dd0:	edc7 7a01 	vstr	s15, [r7, #4]
	  return TemperatureValue;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	ee07 3a90 	vmov	s15, r3
  }
 8002dda:	eeb0 0a67 	vmov.f32	s0, s15
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	f3af 8000 	nop.w
 8002de8:	851eb852 	.word	0x851eb852
 8002dec:	3fe851eb 	.word	0x3fe851eb
 8002df0:	47ae147b 	.word	0x47ae147b
 8002df4:	3f647ae1 	.word	0x3f647ae1
 8002df8:	20000254 	.word	0x20000254
 8002dfc:	454e4000 	.word	0x454e4000
 8002e00:	457ff000 	.word	0x457ff000
 8002e04:	447a0000 	.word	0x447a0000

08002e08 <charToInt>:
uint8_t charToInt(char* c){
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	uint8_t num = {0};
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; 2 > i; i++){
 8002e14:	2300      	movs	r3, #0
 8002e16:	73bb      	strb	r3, [r7, #14]
 8002e18:	e01d      	b.n	8002e56 <charToInt+0x4e>
		if(i == 0){
 8002e1a:	7bbb      	ldrb	r3, [r7, #14]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10e      	bne.n	8002e3e <charToInt+0x36>
			num += (c[i] - '0') * 10;
 8002e20:	7bbb      	ldrb	r3, [r7, #14]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	3b30      	subs	r3, #48	; 0x30
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	4413      	add	r3, r2
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	e008      	b.n	8002e50 <charToInt+0x48>
		}else{
			num += c[i] - '0';
 8002e3e:	7bbb      	ldrb	r3, [r7, #14]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3b30      	subs	r3, #48	; 0x30
 8002e4e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; 2 > i; i++){
 8002e50:	7bbb      	ldrb	r3, [r7, #14]
 8002e52:	3301      	adds	r3, #1
 8002e54:	73bb      	strb	r3, [r7, #14]
 8002e56:	7bbb      	ldrb	r3, [r7, #14]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d9de      	bls.n	8002e1a <charToInt+0x12>
		}
	}
	return num;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6e:	b672      	cpsid	i
}
 8002e70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e72:	e7fe      	b.n	8002e72 <Error_Handler+0x8>

08002e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_MspInit+0x4c>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <HAL_MspInit+0x4c>)
 8002e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e88:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <HAL_MspInit+0x4c>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e92:	607b      	str	r3, [r7, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_MspInit+0x4c>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <HAL_MspInit+0x4c>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_MspInit+0x4c>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800

08002ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <HAL_ADC_MspInit+0x48>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d115      	bne.n	8002f02 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <HAL_ADC_MspInit+0x4c>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <HAL_ADC_MspInit+0x4c>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_ADC_MspInit+0x4c>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	2012      	movs	r0, #18
 8002ef8:	f001 fa59 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002efc:	2012      	movs	r0, #18
 8002efe:	f001 fa72 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40012000 	.word	0x40012000
 8002f10:	40023800 	.word	0x40023800

08002f14 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a0b      	ldr	r2, [pc, #44]	; (8002f50 <HAL_CRC_MspInit+0x3c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10d      	bne.n	8002f42 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_CRC_MspInit+0x40>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_CRC_MspInit+0x40>)
 8002f30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <HAL_CRC_MspInit+0x40>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40023000 	.word	0x40023000
 8002f54:	40023800 	.word	0x40023800

08002f58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	; 0x28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <HAL_SPI_MspInit+0x84>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d12b      	bne.n	8002fd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <HAL_SPI_MspInit+0x88>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <HAL_SPI_MspInit+0x88>)
 8002f84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f88:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_SPI_MspInit+0x88>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_SPI_MspInit+0x88>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a10      	ldr	r2, [pc, #64]	; (8002fe0 <HAL_SPI_MspInit+0x88>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <HAL_SPI_MspInit+0x88>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 8002fb2:	23e0      	movs	r3, #224	; 0xe0
 8002fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fc2:	2305      	movs	r3, #5
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <HAL_SPI_MspInit+0x8c>)
 8002fce:	f001 feaf 	bl	8004d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002fd2:	bf00      	nop
 8002fd4:	3728      	adds	r7, #40	; 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40013000 	.word	0x40013000
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40020000 	.word	0x40020000

08002fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff8:	d116      	bne.n	8003028 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <HAL_TIM_Base_MspInit+0xf0>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a35      	ldr	r2, [pc, #212]	; (80030d8 <HAL_TIM_Base_MspInit+0xf0>)
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b33      	ldr	r3, [pc, #204]	; (80030d8 <HAL_TIM_Base_MspInit+0xf0>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	2100      	movs	r1, #0
 800301a:	201c      	movs	r0, #28
 800301c:	f001 f9c7 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003020:	201c      	movs	r0, #28
 8003022:	f001 f9e0 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003026:	e052      	b.n	80030ce <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a2b      	ldr	r2, [pc, #172]	; (80030dc <HAL_TIM_Base_MspInit+0xf4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d116      	bne.n	8003060 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <HAL_TIM_Base_MspInit+0xf0>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a27      	ldr	r2, [pc, #156]	; (80030d8 <HAL_TIM_Base_MspInit+0xf0>)
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <HAL_TIM_Base_MspInit+0xf0>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2100      	movs	r1, #0
 8003052:	201d      	movs	r0, #29
 8003054:	f001 f9ab 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003058:	201d      	movs	r0, #29
 800305a:	f001 f9c4 	bl	80043e6 <HAL_NVIC_EnableIRQ>
}
 800305e:	e036      	b.n	80030ce <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <HAL_TIM_Base_MspInit+0xf8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d116      	bne.n	8003098 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_TIM_Base_MspInit+0xf0>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_TIM_Base_MspInit+0xf0>)
 8003074:	f043 0304 	orr.w	r3, r3, #4
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <HAL_TIM_Base_MspInit+0xf0>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2100      	movs	r1, #0
 800308a:	201e      	movs	r0, #30
 800308c:	f001 f98f 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003090:	201e      	movs	r0, #30
 8003092:	f001 f9a8 	bl	80043e6 <HAL_NVIC_EnableIRQ>
}
 8003096:	e01a      	b.n	80030ce <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a11      	ldr	r2, [pc, #68]	; (80030e4 <HAL_TIM_Base_MspInit+0xfc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d115      	bne.n	80030ce <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <HAL_TIM_Base_MspInit+0xf0>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <HAL_TIM_Base_MspInit+0xf0>)
 80030ac:	f043 0308 	orr.w	r3, r3, #8
 80030b0:	6413      	str	r3, [r2, #64]	; 0x40
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_TIM_Base_MspInit+0xf0>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80030be:	2200      	movs	r2, #0
 80030c0:	2100      	movs	r1, #0
 80030c2:	2032      	movs	r0, #50	; 0x32
 80030c4:	f001 f973 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80030c8:	2032      	movs	r0, #50	; 0x32
 80030ca:	f001 f98c 	bl	80043e6 <HAL_NVIC_EnableIRQ>
}
 80030ce:	bf00      	nop
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40000800 	.word	0x40000800
 80030e4:	40000c00 	.word	0x40000c00

080030e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08e      	sub	sp, #56	; 0x38
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a6f      	ldr	r2, [pc, #444]	; (80032c4 <HAL_UART_MspInit+0x1dc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d164      	bne.n	80031d4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	623b      	str	r3, [r7, #32]
 800310e:	4b6e      	ldr	r3, [pc, #440]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003112:	4a6d      	ldr	r2, [pc, #436]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 8003114:	f043 0310 	orr.w	r3, r3, #16
 8003118:	6453      	str	r3, [r2, #68]	; 0x44
 800311a:	4b6b      	ldr	r3, [pc, #428]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	4b67      	ldr	r3, [pc, #412]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a66      	ldr	r2, [pc, #408]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b64      	ldr	r3, [pc, #400]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	61fb      	str	r3, [r7, #28]
 8003140:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8003142:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003148:	2302      	movs	r3, #2
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003150:	2303      	movs	r3, #3
 8003152:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003154:	2307      	movs	r3, #7
 8003156:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315c:	4619      	mov	r1, r3
 800315e:	485b      	ldr	r0, [pc, #364]	; (80032cc <HAL_UART_MspInit+0x1e4>)
 8003160:	f001 fde6 	bl	8004d30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003164:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 8003166:	4a5b      	ldr	r2, [pc, #364]	; (80032d4 <HAL_UART_MspInit+0x1ec>)
 8003168:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800316a:	4b59      	ldr	r3, [pc, #356]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 800316c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003170:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003172:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003178:	4b55      	ldr	r3, [pc, #340]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800317e:	4b54      	ldr	r3, [pc, #336]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 8003180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003184:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003186:	4b52      	ldr	r3, [pc, #328]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 8003188:	2200      	movs	r2, #0
 800318a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800318c:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 800318e:	2200      	movs	r2, #0
 8003190:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003192:	4b4f      	ldr	r3, [pc, #316]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 8003194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003198:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800319a:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 800319c:	2200      	movs	r2, #0
 800319e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031a0:	4b4b      	ldr	r3, [pc, #300]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80031a6:	484a      	ldr	r0, [pc, #296]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 80031a8:	f001 f962 	bl	8004470 <HAL_DMA_Init>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80031b2:	f7ff fe5a 	bl	8002e6a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a45      	ldr	r2, [pc, #276]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
 80031bc:	4a44      	ldr	r2, [pc, #272]	; (80032d0 <HAL_UART_MspInit+0x1e8>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2101      	movs	r1, #1
 80031c6:	2025      	movs	r0, #37	; 0x25
 80031c8:	f001 f8f1 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031cc:	2025      	movs	r0, #37	; 0x25
 80031ce:	f001 f90a 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80031d2:	e073      	b.n	80032bc <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3f      	ldr	r2, [pc, #252]	; (80032d8 <HAL_UART_MspInit+0x1f0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d134      	bne.n	8003248 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a38      	ldr	r2, [pc, #224]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 80031e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
 80031ee:	4b36      	ldr	r3, [pc, #216]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	4b32      	ldr	r3, [pc, #200]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a31      	ldr	r2, [pc, #196]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GSM_TX_Pin|GSM_RX_Pin;
 8003216:	230c      	movs	r3, #12
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003222:	2303      	movs	r3, #3
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003226:	2307      	movs	r3, #7
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800322e:	4619      	mov	r1, r3
 8003230:	4826      	ldr	r0, [pc, #152]	; (80032cc <HAL_UART_MspInit+0x1e4>)
 8003232:	f001 fd7d 	bl	8004d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	2101      	movs	r1, #1
 800323a:	2026      	movs	r0, #38	; 0x26
 800323c:	f001 f8b7 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003240:	2026      	movs	r0, #38	; 0x26
 8003242:	f001 f8d0 	bl	80043e6 <HAL_NVIC_EnableIRQ>
}
 8003246:	e039      	b.n	80032bc <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART6)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a23      	ldr	r2, [pc, #140]	; (80032dc <HAL_UART_MspInit+0x1f4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d134      	bne.n	80032bc <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 800325c:	f043 0320 	orr.w	r3, r3, #32
 8003260:	6453      	str	r3, [r2, #68]	; 0x44
 8003262:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_UART_MspInit+0x1e0>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 800328a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003298:	2303      	movs	r3, #3
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800329c:	2308      	movs	r3, #8
 800329e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a4:	4619      	mov	r1, r3
 80032a6:	4809      	ldr	r0, [pc, #36]	; (80032cc <HAL_UART_MspInit+0x1e4>)
 80032a8:	f001 fd42 	bl	8004d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80032ac:	2200      	movs	r2, #0
 80032ae:	2100      	movs	r1, #0
 80032b0:	2047      	movs	r0, #71	; 0x47
 80032b2:	f001 f87c 	bl	80043ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80032b6:	2047      	movs	r0, #71	; 0x47
 80032b8:	f001 f895 	bl	80043e6 <HAL_NVIC_EnableIRQ>
}
 80032bc:	bf00      	nop
 80032be:	3738      	adds	r7, #56	; 0x38
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	200004e8 	.word	0x200004e8
 80032d4:	40026440 	.word	0x40026440
 80032d8:	40004400 	.word	0x40004400
 80032dc:	40011400 	.word	0x40011400

080032e0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a20      	ldr	r2, [pc, #128]	; (8003370 <HAL_UART_MspDeInit+0x90>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d113      	bne.n	800331a <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_UART_MspDeInit+0x94>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <HAL_UART_MspDeInit+0x94>)
 80032f8:	f023 0310 	bic.w	r3, r3, #16
 80032fc:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPS_TX_Pin|GPS_RX_Pin);
 80032fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003302:	481d      	ldr	r0, [pc, #116]	; (8003378 <HAL_UART_MspDeInit+0x98>)
 8003304:	f001 fe98 	bl	8005038 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	4618      	mov	r0, r3
 800330e:	f001 f95d 	bl	80045cc <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003312:	2025      	movs	r0, #37	; 0x25
 8003314:	f001 f875 	bl	8004402 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8003318:	e025      	b.n	8003366 <HAL_UART_MspDeInit+0x86>
  else if(huart->Instance==USART2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a17      	ldr	r2, [pc, #92]	; (800337c <HAL_UART_MspDeInit+0x9c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10d      	bne.n	8003340 <HAL_UART_MspDeInit+0x60>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003324:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_UART_MspDeInit+0x94>)
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	4a12      	ldr	r2, [pc, #72]	; (8003374 <HAL_UART_MspDeInit+0x94>)
 800332a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800332e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GSM_TX_Pin|GSM_RX_Pin);
 8003330:	210c      	movs	r1, #12
 8003332:	4811      	ldr	r0, [pc, #68]	; (8003378 <HAL_UART_MspDeInit+0x98>)
 8003334:	f001 fe80 	bl	8005038 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003338:	2026      	movs	r0, #38	; 0x26
 800333a:	f001 f862 	bl	8004402 <HAL_NVIC_DisableIRQ>
}
 800333e:	e012      	b.n	8003366 <HAL_UART_MspDeInit+0x86>
  else if(huart->Instance==USART6)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <HAL_UART_MspDeInit+0xa0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d10d      	bne.n	8003366 <HAL_UART_MspDeInit+0x86>
    __HAL_RCC_USART6_CLK_DISABLE();
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_UART_MspDeInit+0x94>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_UART_MspDeInit+0x94>)
 8003350:	f023 0320 	bic.w	r3, r3, #32
 8003354:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, TX_Pin|RX_Pin);
 8003356:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800335a:	4807      	ldr	r0, [pc, #28]	; (8003378 <HAL_UART_MspDeInit+0x98>)
 800335c:	f001 fe6c 	bl	8005038 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8003360:	2047      	movs	r0, #71	; 0x47
 8003362:	f001 f84e 	bl	8004402 <HAL_NVIC_DisableIRQ>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40011000 	.word	0x40011000
 8003374:	40023800 	.word	0x40023800
 8003378:	40020000 	.word	0x40020000
 800337c:	40004400 	.word	0x40004400
 8003380:	40011400 	.word	0x40011400

08003384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003388:	e7fe      	b.n	8003388 <NMI_Handler+0x4>

0800338a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800338a:	b480      	push	{r7}
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800338e:	e7fe      	b.n	800338e <HardFault_Handler+0x4>

08003390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003394:	e7fe      	b.n	8003394 <MemManage_Handler+0x4>

08003396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800339a:	e7fe      	b.n	800339a <BusFault_Handler+0x4>

0800339c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a0:	e7fe      	b.n	80033a0 <UsageFault_Handler+0x4>

080033a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033d0:	f000 f9b8 	bl	8003744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <ADC_IRQHandler+0x10>)
 80033de:	f000 fb78 	bl	8003ad2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000254 	.word	0x20000254

080033ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_DIO0_Pin);
 80033f0:	2020      	movs	r0, #32
 80033f2:	f001 ff1f 	bl	8005234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <TIM2_IRQHandler+0x10>)
 8003402:	f003 f8e8 	bl	80065d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200002fc 	.word	0x200002fc

08003410 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <TIM3_IRQHandler+0x10>)
 8003416:	f003 f8de 	bl	80065d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000344 	.word	0x20000344

08003424 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <TIM4_IRQHandler+0x10>)
 800342a:	f003 f8d4 	bl	80065d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	2000038c 	.word	0x2000038c

08003438 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <USART1_IRQHandler+0x10>)
 800343e:	f003 ff25 	bl	800728c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2000041c 	.word	0x2000041c

0800344c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <USART2_IRQHandler+0x10>)
 8003452:	f003 ff1b 	bl	800728c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20000460 	.word	0x20000460

08003460 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <TIM5_IRQHandler+0x10>)
 8003466:	f003 f8b6 	bl	80065d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200003d4 	.word	0x200003d4

08003474 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <DMA2_Stream2_IRQHandler+0x10>)
 800347a:	f001 f9ef 	bl	800485c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200004e8 	.word	0x200004e8

08003488 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <USART6_IRQHandler+0x10>)
 800348e:	f003 fefd 	bl	800728c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	200004a4 	.word	0x200004a4

0800349c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
	return 1;
 80034a0:	2301      	movs	r3, #1
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <_kill>:

int _kill(int pid, int sig)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80034b6:	f005 f879 	bl	80085ac <__errno>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2216      	movs	r2, #22
 80034be:	601a      	str	r2, [r3, #0]
	return -1;
 80034c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <_exit>:

void _exit (int status)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034d4:	f04f 31ff 	mov.w	r1, #4294967295
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ffe7 	bl	80034ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80034de:	e7fe      	b.n	80034de <_exit+0x12>

080034e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e00a      	b.n	8003508 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034f2:	f3af 8000 	nop.w
 80034f6:	4601      	mov	r1, r0
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	60ba      	str	r2, [r7, #8]
 80034fe:	b2ca      	uxtb	r2, r1
 8003500:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3301      	adds	r3, #1
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	429a      	cmp	r2, r3
 800350e:	dbf0      	blt.n	80034f2 <_read+0x12>
	}

return len;
 8003510:	687b      	ldr	r3, [r7, #4]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e009      	b.n	8003540 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	60ba      	str	r2, [r7, #8]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3301      	adds	r3, #1
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	429a      	cmp	r2, r3
 8003546:	dbf1      	blt.n	800352c <_write+0x12>
	}
	return len;
 8003548:	687b      	ldr	r3, [r7, #4]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <_close>:

int _close(int file)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
	return -1;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800357a:	605a      	str	r2, [r3, #4]
	return 0;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <_isatty>:

int _isatty(int file)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
	return 1;
 8003592:	2301      	movs	r3, #1
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
	return 0;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035c4:	4a14      	ldr	r2, [pc, #80]	; (8003618 <_sbrk+0x5c>)
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <_sbrk+0x60>)
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035d0:	4b13      	ldr	r3, [pc, #76]	; (8003620 <_sbrk+0x64>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035d8:	4b11      	ldr	r3, [pc, #68]	; (8003620 <_sbrk+0x64>)
 80035da:	4a12      	ldr	r2, [pc, #72]	; (8003624 <_sbrk+0x68>)
 80035dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <_sbrk+0x64>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d207      	bcs.n	80035fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035ec:	f004 ffde 	bl	80085ac <__errno>
 80035f0:	4603      	mov	r3, r0
 80035f2:	220c      	movs	r2, #12
 80035f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
 80035fa:	e009      	b.n	8003610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035fc:	4b08      	ldr	r3, [pc, #32]	; (8003620 <_sbrk+0x64>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <_sbrk+0x64>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	4a05      	ldr	r2, [pc, #20]	; (8003620 <_sbrk+0x64>)
 800360c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800360e:	68fb      	ldr	r3, [r7, #12]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20018000 	.word	0x20018000
 800361c:	00000400 	.word	0x00000400
 8003620:	20000770 	.word	0x20000770
 8003624:	20000788 	.word	0x20000788

08003628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <SystemInit+0x20>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	4a05      	ldr	r2, [pc, #20]	; (8003648 <SystemInit+0x20>)
 8003634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800364c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003684 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003650:	480d      	ldr	r0, [pc, #52]	; (8003688 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003652:	490e      	ldr	r1, [pc, #56]	; (800368c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003654:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003658:	e002      	b.n	8003660 <LoopCopyDataInit>

0800365a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800365a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800365c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800365e:	3304      	adds	r3, #4

08003660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003664:	d3f9      	bcc.n	800365a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003666:	4a0b      	ldr	r2, [pc, #44]	; (8003694 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003668:	4c0b      	ldr	r4, [pc, #44]	; (8003698 <LoopFillZerobss+0x26>)
  movs r3, #0
 800366a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800366c:	e001      	b.n	8003672 <LoopFillZerobss>

0800366e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800366e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003670:	3204      	adds	r2, #4

08003672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003674:	d3fb      	bcc.n	800366e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003676:	f7ff ffd7 	bl	8003628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800367a:	f004 ff9d 	bl	80085b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800367e:	f7fe fa7d 	bl	8001b7c <main>
  bx  lr    
 8003682:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003684:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800368c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003690:	0800b924 	.word	0x0800b924
  ldr r2, =_sbss
 8003694:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003698:	20000788 	.word	0x20000788

0800369c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800369c:	e7fe      	b.n	800369c <DMA1_Stream0_IRQHandler>
	...

080036a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_Init+0x40>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0d      	ldr	r2, [pc, #52]	; (80036e0 <HAL_Init+0x40>)
 80036aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_Init+0x40>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <HAL_Init+0x40>)
 80036b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_Init+0x40>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a07      	ldr	r2, [pc, #28]	; (80036e0 <HAL_Init+0x40>)
 80036c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c8:	2003      	movs	r0, #3
 80036ca:	f000 fe65 	bl	8004398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ce:	200f      	movs	r0, #15
 80036d0:	f000 f808 	bl	80036e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036d4:	f7ff fbce 	bl	8002e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40023c00 	.word	0x40023c00

080036e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036ec:	4b12      	ldr	r3, [pc, #72]	; (8003738 <HAL_InitTick+0x54>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_InitTick+0x58>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fe8b 	bl	800441e <HAL_SYSTICK_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e00e      	b.n	8003730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b0f      	cmp	r3, #15
 8003716:	d80a      	bhi.n	800372e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003718:	2200      	movs	r2, #0
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	f000 fe45 	bl	80043ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003724:	4a06      	ldr	r2, [pc, #24]	; (8003740 <HAL_InitTick+0x5c>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	e000      	b.n	8003730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000024 	.word	0x20000024
 800373c:	2000002c 	.word	0x2000002c
 8003740:	20000028 	.word	0x20000028

08003744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_IncTick+0x20>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_IncTick+0x24>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4413      	add	r3, r2
 8003754:	4a04      	ldr	r2, [pc, #16]	; (8003768 <HAL_IncTick+0x24>)
 8003756:	6013      	str	r3, [r2, #0]
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	2000002c 	.word	0x2000002c
 8003768:	20000774 	.word	0x20000774

0800376c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return uwTick;
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <HAL_GetTick+0x14>)
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000774 	.word	0x20000774

08003784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800378c:	f7ff ffee 	bl	800376c <HAL_GetTick>
 8003790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d005      	beq.n	80037aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_Delay+0x44>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037aa:	bf00      	nop
 80037ac:	f7ff ffde 	bl	800376c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d8f7      	bhi.n	80037ac <HAL_Delay+0x28>
  {
  }
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	2000002c 	.word	0x2000002c

080037cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e033      	b.n	800384a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fb6a 	bl	8002ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d118      	bne.n	800383c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003812:	f023 0302 	bic.w	r3, r3, #2
 8003816:	f043 0202 	orr.w	r2, r3, #2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fbc0 	bl	8003fa4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f023 0303 	bic.w	r3, r3, #3
 8003832:	f043 0201 	orr.w	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
 800383a:	e001      	b.n	8003840 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_ADC_Start+0x1a>
 800386a:	2302      	movs	r3, #2
 800386c:	e097      	b.n	800399e <HAL_ADC_Start+0x14a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	d018      	beq.n	80038b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003894:	4b45      	ldr	r3, [pc, #276]	; (80039ac <HAL_ADC_Start+0x158>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a45      	ldr	r2, [pc, #276]	; (80039b0 <HAL_ADC_Start+0x15c>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0c9a      	lsrs	r2, r3, #18
 80038a0:	4613      	mov	r3, r2
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	4413      	add	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80038a8:	e002      	b.n	80038b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f9      	bne.n	80038aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d15f      	bne.n	8003984 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003902:	d106      	bne.n	8003912 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	f023 0206 	bic.w	r2, r3, #6
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	645a      	str	r2, [r3, #68]	; 0x44
 8003910:	e002      	b.n	8003918 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003920:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <HAL_ADC_Start+0x160>)
 8003922:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800392c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d129      	bne.n	800399c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	e020      	b.n	800399c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <HAL_ADC_Start+0x164>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d11b      	bne.n	800399c <HAL_ADC_Start+0x148>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d114      	bne.n	800399c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	e00b      	b.n	800399c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	f043 0210 	orr.w	r2, r3, #16
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f043 0201 	orr.w	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000024 	.word	0x20000024
 80039b0:	431bde83 	.word	0x431bde83
 80039b4:	40012300 	.word	0x40012300
 80039b8:	40012000 	.word	0x40012000

080039bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d8:	d113      	bne.n	8003a02 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e8:	d10b      	bne.n	8003a02 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f043 0220 	orr.w	r2, r3, #32
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e063      	b.n	8003aca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003a02:	f7ff feb3 	bl	800376c <HAL_GetTick>
 8003a06:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a08:	e021      	b.n	8003a4e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d01d      	beq.n	8003a4e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <HAL_ADC_PollForConversion+0x6c>
 8003a18:	f7ff fea8 	bl	800376c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d212      	bcs.n	8003a4e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d00b      	beq.n	8003a4e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f043 0204 	orr.w	r2, r3, #4
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e03d      	b.n	8003aca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d1d6      	bne.n	8003a0a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0212 	mvn.w	r2, #18
 8003a64:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d123      	bne.n	8003ac8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d11f      	bne.n	8003ac8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d006      	beq.n	8003aa4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d111      	bne.n	8003ac8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d105      	bne.n	8003ac8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f043 0201 	orr.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d049      	beq.n	8003b9c <HAL_ADC_IRQHandler+0xca>
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d046      	beq.n	8003b9c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d105      	bne.n	8003b26 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d12b      	bne.n	8003b8c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d127      	bne.n	8003b8c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d119      	bne.n	8003b8c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0220 	bic.w	r2, r2, #32
 8003b66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8bd 	bl	8003d0c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f06f 0212 	mvn.w	r2, #18
 8003b9a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d057      	beq.n	8003c62 <HAL_ADC_IRQHandler+0x190>
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d054      	beq.n	8003c62 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d105      	bne.n	8003bd0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d139      	bne.n	8003c52 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d006      	beq.n	8003bfa <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d12b      	bne.n	8003c52 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d124      	bne.n	8003c52 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d11d      	bne.n	8003c52 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d119      	bne.n	8003c52 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c2c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d105      	bne.n	8003c52 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f043 0201 	orr.w	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 faa2 	bl	800419c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 020c 	mvn.w	r2, #12
 8003c60:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c70:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d017      	beq.n	8003ca8 <HAL_ADC_IRQHandler+0x1d6>
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d014      	beq.n	8003ca8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d10d      	bne.n	8003ca8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f841 	bl	8003d20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f06f 0201 	mvn.w	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cb6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d015      	beq.n	8003cea <HAL_ADC_IRQHandler+0x218>
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d012      	beq.n	8003cea <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	f043 0202 	orr.w	r2, r3, #2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0220 	mvn.w	r2, #32
 8003cd8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f82a 	bl	8003d34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0220 	mvn.w	r2, #32
 8003ce8:	601a      	str	r2, [r3, #0]
  }
}
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x1c>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e105      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x228>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b09      	cmp	r3, #9
 8003d72:	d925      	bls.n	8003dc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68d9      	ldr	r1, [r3, #12]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	4613      	mov	r3, r2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	3b1e      	subs	r3, #30
 8003d8a:	2207      	movs	r2, #7
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43da      	mvns	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	400a      	ands	r2, r1
 8003d98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68d9      	ldr	r1, [r3, #12]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	4618      	mov	r0, r3
 8003dac:	4603      	mov	r3, r0
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4403      	add	r3, r0
 8003db2:	3b1e      	subs	r3, #30
 8003db4:	409a      	lsls	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	e022      	b.n	8003e06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6919      	ldr	r1, [r3, #16]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4613      	mov	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	4413      	add	r3, r2
 8003dd4:	2207      	movs	r2, #7
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43da      	mvns	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	400a      	ands	r2, r1
 8003de2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6919      	ldr	r1, [r3, #16]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4618      	mov	r0, r3
 8003df6:	4603      	mov	r3, r0
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	4403      	add	r3, r0
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d824      	bhi.n	8003e58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3b05      	subs	r3, #5
 8003e20:	221f      	movs	r2, #31
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43da      	mvns	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	3b05      	subs	r3, #5
 8003e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	635a      	str	r2, [r3, #52]	; 0x34
 8003e56:	e04c      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	d824      	bhi.n	8003eaa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	3b23      	subs	r3, #35	; 0x23
 8003e72:	221f      	movs	r2, #31
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43da      	mvns	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	400a      	ands	r2, r1
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	4618      	mov	r0, r3
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	3b23      	subs	r3, #35	; 0x23
 8003e9c:	fa00 f203 	lsl.w	r2, r0, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea8:	e023      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	3b41      	subs	r3, #65	; 0x41
 8003ebc:	221f      	movs	r2, #31
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	400a      	ands	r2, r1
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	4618      	mov	r0, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3b41      	subs	r3, #65	; 0x41
 8003ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ef2:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <HAL_ADC_ConfigChannel+0x234>)
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <HAL_ADC_ConfigChannel+0x238>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d109      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x1cc>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b12      	cmp	r3, #18
 8003f06:	d105      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <HAL_ADC_ConfigChannel+0x238>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d123      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x21e>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	d003      	beq.n	8003f2e <HAL_ADC_ConfigChannel+0x1e6>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b11      	cmp	r3, #17
 8003f2c:	d11b      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b10      	cmp	r3, #16
 8003f40:	d111      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_ADC_ConfigChannel+0x23c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a10      	ldr	r2, [pc, #64]	; (8003f88 <HAL_ADC_ConfigChannel+0x240>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	0c9a      	lsrs	r2, r3, #18
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f58:	e002      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f9      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40012300 	.word	0x40012300
 8003f80:	40012000 	.word	0x40012000
 8003f84:	20000024 	.word	0x20000024
 8003f88:	431bde83 	.word	0x431bde83

08003f8c <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fac:	4b79      	ldr	r3, [pc, #484]	; (8004194 <ADC_Init+0x1f0>)
 8003fae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6859      	ldr	r1, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	021a      	lsls	r2, r3, #8
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6859      	ldr	r1, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800401e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6899      	ldr	r1, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	4a58      	ldr	r2, [pc, #352]	; (8004198 <ADC_Init+0x1f4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d022      	beq.n	8004082 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800404a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6899      	ldr	r1, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800406c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6899      	ldr	r1, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	e00f      	b.n	80040a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0202 	bic.w	r2, r2, #2
 80040b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6899      	ldr	r1, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	7e1b      	ldrb	r3, [r3, #24]
 80040bc:	005a      	lsls	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01b      	beq.n	8004108 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	3b01      	subs	r3, #1
 80040fc:	035a      	lsls	r2, r3, #13
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	e007      	b.n	8004118 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004116:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004126:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	3b01      	subs	r3, #1
 8004134:	051a      	lsls	r2, r3, #20
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800414c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6899      	ldr	r1, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800415a:	025a      	lsls	r2, r3, #9
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004172:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6899      	ldr	r1, [r3, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	029a      	lsls	r2, r3, #10
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	609a      	str	r2, [r3, #8]
}
 8004188:	bf00      	nop
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40012300 	.word	0x40012300
 8004198:	0f000001 	.word	0x0f000001

0800419c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c0:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <__NVIC_SetPriorityGrouping+0x44>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041cc:	4013      	ands	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041e2:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <__NVIC_SetPriorityGrouping+0x44>)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	60d3      	str	r3, [r2, #12]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <__NVIC_GetPriorityGrouping+0x18>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	f003 0307 	and.w	r3, r3, #7
}
 8004206:	4618      	mov	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004222:	2b00      	cmp	r3, #0
 8004224:	db0b      	blt.n	800423e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	f003 021f 	and.w	r2, r3, #31
 800422c:	4907      	ldr	r1, [pc, #28]	; (800424c <__NVIC_EnableIRQ+0x38>)
 800422e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2001      	movs	r0, #1
 8004236:	fa00 f202 	lsl.w	r2, r0, r2
 800423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	e000e100 	.word	0xe000e100

08004250 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	2b00      	cmp	r3, #0
 8004260:	db12      	blt.n	8004288 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	490a      	ldr	r1, [pc, #40]	; (8004294 <__NVIC_DisableIRQ+0x44>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2001      	movs	r0, #1
 8004272:	fa00 f202 	lsl.w	r2, r0, r2
 8004276:	3320      	adds	r3, #32
 8004278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800427c:	f3bf 8f4f 	dsb	sy
}
 8004280:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004282:	f3bf 8f6f 	isb	sy
}
 8004286:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	e000e100 	.word	0xe000e100

08004298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	6039      	str	r1, [r7, #0]
 80042a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	db0a      	blt.n	80042c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	490c      	ldr	r1, [pc, #48]	; (80042e4 <__NVIC_SetPriority+0x4c>)
 80042b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b6:	0112      	lsls	r2, r2, #4
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	440b      	add	r3, r1
 80042bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042c0:	e00a      	b.n	80042d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	4908      	ldr	r1, [pc, #32]	; (80042e8 <__NVIC_SetPriority+0x50>)
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	3b04      	subs	r3, #4
 80042d0:	0112      	lsls	r2, r2, #4
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	440b      	add	r3, r1
 80042d6:	761a      	strb	r2, [r3, #24]
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	e000e100 	.word	0xe000e100
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b089      	sub	sp, #36	; 0x24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f1c3 0307 	rsb	r3, r3, #7
 8004306:	2b04      	cmp	r3, #4
 8004308:	bf28      	it	cs
 800430a:	2304      	movcs	r3, #4
 800430c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	3304      	adds	r3, #4
 8004312:	2b06      	cmp	r3, #6
 8004314:	d902      	bls.n	800431c <NVIC_EncodePriority+0x30>
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	3b03      	subs	r3, #3
 800431a:	e000      	b.n	800431e <NVIC_EncodePriority+0x32>
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004320:	f04f 32ff 	mov.w	r2, #4294967295
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43da      	mvns	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	401a      	ands	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004334:	f04f 31ff 	mov.w	r1, #4294967295
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	43d9      	mvns	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004344:	4313      	orrs	r3, r2
         );
}
 8004346:	4618      	mov	r0, r3
 8004348:	3724      	adds	r7, #36	; 0x24
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3b01      	subs	r3, #1
 8004360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004364:	d301      	bcc.n	800436a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004366:	2301      	movs	r3, #1
 8004368:	e00f      	b.n	800438a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800436a:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <SysTick_Config+0x40>)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3b01      	subs	r3, #1
 8004370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004372:	210f      	movs	r1, #15
 8004374:	f04f 30ff 	mov.w	r0, #4294967295
 8004378:	f7ff ff8e 	bl	8004298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <SysTick_Config+0x40>)
 800437e:	2200      	movs	r2, #0
 8004380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004382:	4b04      	ldr	r3, [pc, #16]	; (8004394 <SysTick_Config+0x40>)
 8004384:	2207      	movs	r2, #7
 8004386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	e000e010 	.word	0xe000e010

08004398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ff05 	bl	80041b0 <__NVIC_SetPriorityGrouping>
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	4603      	mov	r3, r0
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043c0:	f7ff ff1a 	bl	80041f8 <__NVIC_GetPriorityGrouping>
 80043c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	6978      	ldr	r0, [r7, #20]
 80043cc:	f7ff ff8e 	bl	80042ec <NVIC_EncodePriority>
 80043d0:	4602      	mov	r2, r0
 80043d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ff5d 	bl	8004298 <__NVIC_SetPriority>
}
 80043de:	bf00      	nop
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	4603      	mov	r3, r0
 80043ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff0d 	bl	8004214 <__NVIC_EnableIRQ>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800440c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff1d 	bl	8004250 <__NVIC_DisableIRQ>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ff94 	bl	8004354 <SysTick_Config>
 800442c:	4603      	mov	r3, r0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e00e      	b.n	8004466 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	795b      	ldrb	r3, [r3, #5]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fe fd5b 	bl	8002f14 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800447c:	f7ff f976 	bl	800376c <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e099      	b.n	80045c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ac:	e00f      	b.n	80044ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ae:	f7ff f95d 	bl	800376c <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b05      	cmp	r3, #5
 80044ba:	d908      	bls.n	80044ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2203      	movs	r2, #3
 80044c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e078      	b.n	80045c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e8      	bne.n	80044ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <HAL_DMA_Init+0x158>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	2b04      	cmp	r3, #4
 8004526:	d107      	bne.n	8004538 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	4313      	orrs	r3, r2
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f023 0307 	bic.w	r3, r3, #7
 800454e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b04      	cmp	r3, #4
 8004560:	d117      	bne.n	8004592 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00e      	beq.n	8004592 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fb5f 	bl	8004c38 <DMA_CheckFifoParam>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2240      	movs	r2, #64	; 0x40
 8004584:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800458e:	2301      	movs	r3, #1
 8004590:	e016      	b.n	80045c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fb16 	bl	8004bcc <DMA_CalcBaseAndBitshift>
 80045a0:	4603      	mov	r3, r0
 80045a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a8:	223f      	movs	r2, #63	; 0x3f
 80045aa:	409a      	lsls	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	f010803f 	.word	0xf010803f

080045cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e050      	b.n	8004680 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d101      	bne.n	80045ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
 80045ec:	e048      	b.n	8004680 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2200      	movs	r2, #0
 800460c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2200      	movs	r2, #0
 8004624:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2221      	movs	r2, #33	; 0x21
 800462c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 facc 	bl	8004bcc <DMA_CalcBaseAndBitshift>
 8004634:	4603      	mov	r3, r0
 8004636:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004660:	223f      	movs	r2, #63	; 0x3f
 8004662:	409a      	lsls	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_DMA_Start_IT+0x26>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e040      	b.n	8004730 <HAL_DMA_Start_IT+0xa8>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d12f      	bne.n	8004722 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fa4a 	bl	8004b70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e0:	223f      	movs	r2, #63	; 0x3f
 80046e2:	409a      	lsls	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0216 	orr.w	r2, r2, #22
 80046f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0208 	orr.w	r2, r2, #8
 800470e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	e005      	b.n	800472e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800472a:	2302      	movs	r3, #2
 800472c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800472e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004746:	f7ff f811 	bl	800376c <HAL_GetTick>
 800474a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d008      	beq.n	800476a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2280      	movs	r2, #128	; 0x80
 800475c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e052      	b.n	8004810 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0216 	bic.w	r2, r2, #22
 8004778:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695a      	ldr	r2, [r3, #20]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004788:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d103      	bne.n	800479a <HAL_DMA_Abort+0x62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0208 	bic.w	r2, r2, #8
 80047a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0201 	bic.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ba:	e013      	b.n	80047e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047bc:	f7fe ffd6 	bl	800376c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	d90c      	bls.n	80047e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2203      	movs	r2, #3
 80047d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e015      	b.n	8004810 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e4      	bne.n	80047bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	223f      	movs	r2, #63	; 0x3f
 80047f8:	409a      	lsls	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d004      	beq.n	8004836 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2280      	movs	r2, #128	; 0x80
 8004830:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e00c      	b.n	8004850 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2205      	movs	r2, #5
 800483a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004868:	4b8e      	ldr	r3, [pc, #568]	; (8004aa4 <HAL_DMA_IRQHandler+0x248>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a8e      	ldr	r2, [pc, #568]	; (8004aa8 <HAL_DMA_IRQHandler+0x24c>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	0a9b      	lsrs	r3, r3, #10
 8004874:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004886:	2208      	movs	r2, #8
 8004888:	409a      	lsls	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4013      	ands	r3, r2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01a      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d013      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0204 	bic.w	r2, r2, #4
 80048ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	2208      	movs	r2, #8
 80048b6:	409a      	lsls	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	f043 0201 	orr.w	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048cc:	2201      	movs	r2, #1
 80048ce:	409a      	lsls	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d012      	beq.n	80048fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	2201      	movs	r2, #1
 80048ec:	409a      	lsls	r2, r3
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	f043 0202 	orr.w	r2, r3, #2
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004902:	2204      	movs	r2, #4
 8004904:	409a      	lsls	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4013      	ands	r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d012      	beq.n	8004934 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00b      	beq.n	8004934 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004920:	2204      	movs	r2, #4
 8004922:	409a      	lsls	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492c:	f043 0204 	orr.w	r2, r3, #4
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	2210      	movs	r2, #16
 800493a:	409a      	lsls	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d043      	beq.n	80049cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d03c      	beq.n	80049cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004956:	2210      	movs	r2, #16
 8004958:	409a      	lsls	r2, r3
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d018      	beq.n	800499e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d108      	bne.n	800498c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d024      	beq.n	80049cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
 800498a:	e01f      	b.n	80049cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01b      	beq.n	80049cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	4798      	blx	r3
 800499c:	e016      	b.n	80049cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d107      	bne.n	80049bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0208 	bic.w	r2, r2, #8
 80049ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d0:	2220      	movs	r2, #32
 80049d2:	409a      	lsls	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4013      	ands	r3, r2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 808f 	beq.w	8004afc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8087 	beq.w	8004afc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	2220      	movs	r2, #32
 80049f4:	409a      	lsls	r2, r3
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d136      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0216 	bic.w	r2, r2, #22
 8004a14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695a      	ldr	r2, [r3, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <HAL_DMA_IRQHandler+0x1da>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0208 	bic.w	r2, r2, #8
 8004a44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	223f      	movs	r2, #63	; 0x3f
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d07e      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	4798      	blx	r3
        }
        return;
 8004a72:	e079      	b.n	8004b68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01d      	beq.n	8004abe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10d      	bne.n	8004aac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d031      	beq.n	8004afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
 8004aa0:	e02c      	b.n	8004afc <HAL_DMA_IRQHandler+0x2a0>
 8004aa2:	bf00      	nop
 8004aa4:	20000024 	.word	0x20000024
 8004aa8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d023      	beq.n	8004afc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
 8004abc:	e01e      	b.n	8004afc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10f      	bne.n	8004aec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0210 	bic.w	r2, r2, #16
 8004ada:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d032      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d022      	beq.n	8004b56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2205      	movs	r2, #5
 8004b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0201 	bic.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d307      	bcc.n	8004b44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f2      	bne.n	8004b28 <HAL_DMA_IRQHandler+0x2cc>
 8004b42:	e000      	b.n	8004b46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
 8004b66:	e000      	b.n	8004b6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b68:	bf00      	nop
    }
  }
}
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d108      	bne.n	8004bb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004bae:	e007      	b.n	8004bc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	60da      	str	r2, [r3, #12]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	3b10      	subs	r3, #16
 8004bdc:	4a14      	ldr	r2, [pc, #80]	; (8004c30 <DMA_CalcBaseAndBitshift+0x64>)
 8004bde:	fba2 2303 	umull	r2, r3, r2, r3
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004be6:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <DMA_CalcBaseAndBitshift+0x68>)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d909      	bls.n	8004c0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c02:	f023 0303 	bic.w	r3, r3, #3
 8004c06:	1d1a      	adds	r2, r3, #4
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8004c0c:	e007      	b.n	8004c1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c16:	f023 0303 	bic.w	r3, r3, #3
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	aaaaaaab 	.word	0xaaaaaaab
 8004c34:	0800b534 	.word	0x0800b534

08004c38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d11f      	bne.n	8004c92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d856      	bhi.n	8004d06 <DMA_CheckFifoParam+0xce>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <DMA_CheckFifoParam+0x28>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004c83 	.word	0x08004c83
 8004c68:	08004c71 	.word	0x08004c71
 8004c6c:	08004d07 	.word	0x08004d07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d046      	beq.n	8004d0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c80:	e043      	b.n	8004d0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c8a:	d140      	bne.n	8004d0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c90:	e03d      	b.n	8004d0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9a:	d121      	bne.n	8004ce0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d837      	bhi.n	8004d12 <DMA_CheckFifoParam+0xda>
 8004ca2:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <DMA_CheckFifoParam+0x70>)
 8004ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca8:	08004cb9 	.word	0x08004cb9
 8004cac:	08004cbf 	.word	0x08004cbf
 8004cb0:	08004cb9 	.word	0x08004cb9
 8004cb4:	08004cd1 	.word	0x08004cd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
      break;
 8004cbc:	e030      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d025      	beq.n	8004d16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cce:	e022      	b.n	8004d16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cd8:	d11f      	bne.n	8004d1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cde:	e01c      	b.n	8004d1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d903      	bls.n	8004cee <DMA_CheckFifoParam+0xb6>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d003      	beq.n	8004cf4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cec:	e018      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf2:	e015      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00e      	beq.n	8004d1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
      break;
 8004d04:	e00b      	b.n	8004d1e <DMA_CheckFifoParam+0xe6>
      break;
 8004d06:	bf00      	nop
 8004d08:	e00a      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
      break;
 8004d0a:	bf00      	nop
 8004d0c:	e008      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
      break;
 8004d0e:	bf00      	nop
 8004d10:	e006      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
      break;
 8004d12:	bf00      	nop
 8004d14:	e004      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
      break;
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <DMA_CheckFifoParam+0xe8>
      break;
 8004d1e:	bf00      	nop
    }
  } 
  
  return status; 
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop

08004d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b089      	sub	sp, #36	; 0x24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	e159      	b.n	8005000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	f040 8148 	bne.w	8004ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d005      	beq.n	8004d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d130      	bne.n	8004de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4013      	ands	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004db8:	2201      	movs	r2, #1
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 0201 	and.w	r2, r3, #1
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d017      	beq.n	8004e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4013      	ands	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d123      	bne.n	8004e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	08da      	lsrs	r2, r3, #3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3208      	adds	r2, #8
 8004e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	220f      	movs	r2, #15
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	08da      	lsrs	r2, r3, #3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3208      	adds	r2, #8
 8004e6e:	69b9      	ldr	r1, [r7, #24]
 8004e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	2203      	movs	r2, #3
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 0203 	and.w	r2, r3, #3
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80a2 	beq.w	8004ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	4b57      	ldr	r3, [pc, #348]	; (8005018 <HAL_GPIO_Init+0x2e8>)
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebe:	4a56      	ldr	r2, [pc, #344]	; (8005018 <HAL_GPIO_Init+0x2e8>)
 8004ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ec6:	4b54      	ldr	r3, [pc, #336]	; (8005018 <HAL_GPIO_Init+0x2e8>)
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ed2:	4a52      	ldr	r2, [pc, #328]	; (800501c <HAL_GPIO_Init+0x2ec>)
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	089b      	lsrs	r3, r3, #2
 8004ed8:	3302      	adds	r3, #2
 8004eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	220f      	movs	r2, #15
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a49      	ldr	r2, [pc, #292]	; (8005020 <HAL_GPIO_Init+0x2f0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d019      	beq.n	8004f32 <HAL_GPIO_Init+0x202>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a48      	ldr	r2, [pc, #288]	; (8005024 <HAL_GPIO_Init+0x2f4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <HAL_GPIO_Init+0x1fe>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a47      	ldr	r2, [pc, #284]	; (8005028 <HAL_GPIO_Init+0x2f8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00d      	beq.n	8004f2a <HAL_GPIO_Init+0x1fa>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a46      	ldr	r2, [pc, #280]	; (800502c <HAL_GPIO_Init+0x2fc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <HAL_GPIO_Init+0x1f6>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a45      	ldr	r2, [pc, #276]	; (8005030 <HAL_GPIO_Init+0x300>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d101      	bne.n	8004f22 <HAL_GPIO_Init+0x1f2>
 8004f1e:	2304      	movs	r3, #4
 8004f20:	e008      	b.n	8004f34 <HAL_GPIO_Init+0x204>
 8004f22:	2307      	movs	r3, #7
 8004f24:	e006      	b.n	8004f34 <HAL_GPIO_Init+0x204>
 8004f26:	2303      	movs	r3, #3
 8004f28:	e004      	b.n	8004f34 <HAL_GPIO_Init+0x204>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e002      	b.n	8004f34 <HAL_GPIO_Init+0x204>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <HAL_GPIO_Init+0x204>
 8004f32:	2300      	movs	r3, #0
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	f002 0203 	and.w	r2, r2, #3
 8004f3a:	0092      	lsls	r2, r2, #2
 8004f3c:	4093      	lsls	r3, r2
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f44:	4935      	ldr	r1, [pc, #212]	; (800501c <HAL_GPIO_Init+0x2ec>)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	089b      	lsrs	r3, r3, #2
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f52:	4b38      	ldr	r3, [pc, #224]	; (8005034 <HAL_GPIO_Init+0x304>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f76:	4a2f      	ldr	r2, [pc, #188]	; (8005034 <HAL_GPIO_Init+0x304>)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f7c:	4b2d      	ldr	r3, [pc, #180]	; (8005034 <HAL_GPIO_Init+0x304>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fa0:	4a24      	ldr	r2, [pc, #144]	; (8005034 <HAL_GPIO_Init+0x304>)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fa6:	4b23      	ldr	r3, [pc, #140]	; (8005034 <HAL_GPIO_Init+0x304>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fca:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <HAL_GPIO_Init+0x304>)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fd0:	4b18      	ldr	r3, [pc, #96]	; (8005034 <HAL_GPIO_Init+0x304>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ff4:	4a0f      	ldr	r2, [pc, #60]	; (8005034 <HAL_GPIO_Init+0x304>)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	f67f aea2 	bls.w	8004d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	3724      	adds	r7, #36	; 0x24
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800
 800501c:	40013800 	.word	0x40013800
 8005020:	40020000 	.word	0x40020000
 8005024:	40020400 	.word	0x40020400
 8005028:	40020800 	.word	0x40020800
 800502c:	40020c00 	.word	0x40020c00
 8005030:	40021000 	.word	0x40021000
 8005034:	40013c00 	.word	0x40013c00

08005038 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005042:	2300      	movs	r3, #0
 8005044:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	e0bb      	b.n	80051cc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005054:	2201      	movs	r2, #1
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4013      	ands	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	429a      	cmp	r2, r3
 800506c:	f040 80ab 	bne.w	80051c6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005070:	4a5c      	ldr	r2, [pc, #368]	; (80051e4 <HAL_GPIO_DeInit+0x1ac>)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	089b      	lsrs	r3, r3, #2
 8005076:	3302      	adds	r3, #2
 8005078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800507c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	220f      	movs	r2, #15
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	4013      	ands	r3, r2
 8005090:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a54      	ldr	r2, [pc, #336]	; (80051e8 <HAL_GPIO_DeInit+0x1b0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d019      	beq.n	80050ce <HAL_GPIO_DeInit+0x96>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a53      	ldr	r2, [pc, #332]	; (80051ec <HAL_GPIO_DeInit+0x1b4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <HAL_GPIO_DeInit+0x92>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a52      	ldr	r2, [pc, #328]	; (80051f0 <HAL_GPIO_DeInit+0x1b8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00d      	beq.n	80050c6 <HAL_GPIO_DeInit+0x8e>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a51      	ldr	r2, [pc, #324]	; (80051f4 <HAL_GPIO_DeInit+0x1bc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d007      	beq.n	80050c2 <HAL_GPIO_DeInit+0x8a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a50      	ldr	r2, [pc, #320]	; (80051f8 <HAL_GPIO_DeInit+0x1c0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d101      	bne.n	80050be <HAL_GPIO_DeInit+0x86>
 80050ba:	2304      	movs	r3, #4
 80050bc:	e008      	b.n	80050d0 <HAL_GPIO_DeInit+0x98>
 80050be:	2307      	movs	r3, #7
 80050c0:	e006      	b.n	80050d0 <HAL_GPIO_DeInit+0x98>
 80050c2:	2303      	movs	r3, #3
 80050c4:	e004      	b.n	80050d0 <HAL_GPIO_DeInit+0x98>
 80050c6:	2302      	movs	r3, #2
 80050c8:	e002      	b.n	80050d0 <HAL_GPIO_DeInit+0x98>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <HAL_GPIO_DeInit+0x98>
 80050ce:	2300      	movs	r3, #0
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	f002 0203 	and.w	r2, r2, #3
 80050d6:	0092      	lsls	r2, r2, #2
 80050d8:	4093      	lsls	r3, r2
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d132      	bne.n	8005146 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80050e0:	4b46      	ldr	r3, [pc, #280]	; (80051fc <HAL_GPIO_DeInit+0x1c4>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	43db      	mvns	r3, r3
 80050e8:	4944      	ldr	r1, [pc, #272]	; (80051fc <HAL_GPIO_DeInit+0x1c4>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80050ee:	4b43      	ldr	r3, [pc, #268]	; (80051fc <HAL_GPIO_DeInit+0x1c4>)
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	43db      	mvns	r3, r3
 80050f6:	4941      	ldr	r1, [pc, #260]	; (80051fc <HAL_GPIO_DeInit+0x1c4>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80050fc:	4b3f      	ldr	r3, [pc, #252]	; (80051fc <HAL_GPIO_DeInit+0x1c4>)
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	43db      	mvns	r3, r3
 8005104:	493d      	ldr	r1, [pc, #244]	; (80051fc <HAL_GPIO_DeInit+0x1c4>)
 8005106:	4013      	ands	r3, r2
 8005108:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800510a:	4b3c      	ldr	r3, [pc, #240]	; (80051fc <HAL_GPIO_DeInit+0x1c4>)
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	43db      	mvns	r3, r3
 8005112:	493a      	ldr	r1, [pc, #232]	; (80051fc <HAL_GPIO_DeInit+0x1c4>)
 8005114:	4013      	ands	r3, r2
 8005116:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	220f      	movs	r2, #15
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005128:	4a2e      	ldr	r2, [pc, #184]	; (80051e4 <HAL_GPIO_DeInit+0x1ac>)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	089b      	lsrs	r3, r3, #2
 800512e:	3302      	adds	r3, #2
 8005130:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	43da      	mvns	r2, r3
 8005138:	482a      	ldr	r0, [pc, #168]	; (80051e4 <HAL_GPIO_DeInit+0x1ac>)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	089b      	lsrs	r3, r3, #2
 800513e:	400a      	ands	r2, r1
 8005140:	3302      	adds	r3, #2
 8005142:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	2103      	movs	r1, #3
 8005150:	fa01 f303 	lsl.w	r3, r1, r3
 8005154:	43db      	mvns	r3, r3
 8005156:	401a      	ands	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	08da      	lsrs	r2, r3, #3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3208      	adds	r2, #8
 8005164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	220f      	movs	r2, #15
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	43db      	mvns	r3, r3
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	08d2      	lsrs	r2, r2, #3
 800517c:	4019      	ands	r1, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3208      	adds	r2, #8
 8005182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	2103      	movs	r1, #3
 8005190:	fa01 f303 	lsl.w	r3, r1, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	401a      	ands	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	2101      	movs	r1, #1
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	fa01 f303 	lsl.w	r3, r1, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	401a      	ands	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	2103      	movs	r1, #3
 80051ba:	fa01 f303 	lsl.w	r3, r1, r3
 80051be:	43db      	mvns	r3, r3
 80051c0:	401a      	ands	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	3301      	adds	r3, #1
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b0f      	cmp	r3, #15
 80051d0:	f67f af40 	bls.w	8005054 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40013800 	.word	0x40013800
 80051e8:	40020000 	.word	0x40020000
 80051ec:	40020400 	.word	0x40020400
 80051f0:	40020800 	.word	0x40020800
 80051f4:	40020c00 	.word	0x40020c00
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40013c00 	.word	0x40013c00

08005200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	807b      	strh	r3, [r7, #2]
 800520c:	4613      	mov	r3, r2
 800520e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005210:	787b      	ldrb	r3, [r7, #1]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005216:	887a      	ldrh	r2, [r7, #2]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800521c:	e003      	b.n	8005226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800521e:	887b      	ldrh	r3, [r7, #2]
 8005220:	041a      	lsls	r2, r3, #16
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	619a      	str	r2, [r3, #24]
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800523e:	4b08      	ldr	r3, [pc, #32]	; (8005260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	88fb      	ldrh	r3, [r7, #6]
 8005244:	4013      	ands	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d006      	beq.n	8005258 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800524a:	4a05      	ldr	r2, [pc, #20]	; (8005260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fd fc1a 	bl	8002a8c <HAL_GPIO_EXTI_Callback>
  }
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40013c00 	.word	0x40013c00

08005264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e267      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d075      	beq.n	800536e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005282:	4b88      	ldr	r3, [pc, #544]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 030c 	and.w	r3, r3, #12
 800528a:	2b04      	cmp	r3, #4
 800528c:	d00c      	beq.n	80052a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800528e:	4b85      	ldr	r3, [pc, #532]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005296:	2b08      	cmp	r3, #8
 8005298:	d112      	bne.n	80052c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529a:	4b82      	ldr	r3, [pc, #520]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052a6:	d10b      	bne.n	80052c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a8:	4b7e      	ldr	r3, [pc, #504]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d05b      	beq.n	800536c <HAL_RCC_OscConfig+0x108>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d157      	bne.n	800536c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e242      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c8:	d106      	bne.n	80052d8 <HAL_RCC_OscConfig+0x74>
 80052ca:	4b76      	ldr	r3, [pc, #472]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a75      	ldr	r2, [pc, #468]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	e01d      	b.n	8005314 <HAL_RCC_OscConfig+0xb0>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052e0:	d10c      	bne.n	80052fc <HAL_RCC_OscConfig+0x98>
 80052e2:	4b70      	ldr	r3, [pc, #448]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a6f      	ldr	r2, [pc, #444]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	4b6d      	ldr	r3, [pc, #436]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a6c      	ldr	r2, [pc, #432]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e00b      	b.n	8005314 <HAL_RCC_OscConfig+0xb0>
 80052fc:	4b69      	ldr	r3, [pc, #420]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a68      	ldr	r2, [pc, #416]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	4b66      	ldr	r3, [pc, #408]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a65      	ldr	r2, [pc, #404]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 800530e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d013      	beq.n	8005344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531c:	f7fe fa26 	bl	800376c <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005324:	f7fe fa22 	bl	800376c <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b64      	cmp	r3, #100	; 0x64
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e207      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005336:	4b5b      	ldr	r3, [pc, #364]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f0      	beq.n	8005324 <HAL_RCC_OscConfig+0xc0>
 8005342:	e014      	b.n	800536e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7fe fa12 	bl	800376c <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800534c:	f7fe fa0e 	bl	800376c <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	; 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e1f3      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800535e:	4b51      	ldr	r3, [pc, #324]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0xe8>
 800536a:	e000      	b.n	800536e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d063      	beq.n	8005442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800537a:	4b4a      	ldr	r3, [pc, #296]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00b      	beq.n	800539e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005386:	4b47      	ldr	r3, [pc, #284]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800538e:	2b08      	cmp	r3, #8
 8005390:	d11c      	bne.n	80053cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005392:	4b44      	ldr	r3, [pc, #272]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d116      	bne.n	80053cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800539e:	4b41      	ldr	r3, [pc, #260]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <HAL_RCC_OscConfig+0x152>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d001      	beq.n	80053b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e1c7      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b6:	4b3b      	ldr	r3, [pc, #236]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	4937      	ldr	r1, [pc, #220]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ca:	e03a      	b.n	8005442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d020      	beq.n	8005416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d4:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <HAL_RCC_OscConfig+0x244>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fe f9c7 	bl	800376c <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e2:	f7fe f9c3 	bl	800376c <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e1a8      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f4:	4b2b      	ldr	r3, [pc, #172]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0f0      	beq.n	80053e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005400:	4b28      	ldr	r3, [pc, #160]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4925      	ldr	r1, [pc, #148]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005410:	4313      	orrs	r3, r2
 8005412:	600b      	str	r3, [r1, #0]
 8005414:	e015      	b.n	8005442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005416:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <HAL_RCC_OscConfig+0x244>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fe f9a6 	bl	800376c <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005424:	f7fe f9a2 	bl	800376c <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e187      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005436:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f0      	bne.n	8005424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d036      	beq.n	80054bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005456:	4b15      	ldr	r3, [pc, #84]	; (80054ac <HAL_RCC_OscConfig+0x248>)
 8005458:	2201      	movs	r2, #1
 800545a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545c:	f7fe f986 	bl	800376c <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005464:	f7fe f982 	bl	800376c <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e167      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <HAL_RCC_OscConfig+0x240>)
 8005478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0x200>
 8005482:	e01b      	b.n	80054bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005484:	4b09      	ldr	r3, [pc, #36]	; (80054ac <HAL_RCC_OscConfig+0x248>)
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800548a:	f7fe f96f 	bl	800376c <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005490:	e00e      	b.n	80054b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005492:	f7fe f96b 	bl	800376c <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d907      	bls.n	80054b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e150      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
 80054a4:	40023800 	.word	0x40023800
 80054a8:	42470000 	.word	0x42470000
 80054ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b0:	4b88      	ldr	r3, [pc, #544]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80054b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1ea      	bne.n	8005492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8097 	beq.w	80055f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ca:	2300      	movs	r3, #0
 80054cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ce:	4b81      	ldr	r3, [pc, #516]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10f      	bne.n	80054fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054da:	2300      	movs	r3, #0
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	4b7d      	ldr	r3, [pc, #500]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	4a7c      	ldr	r2, [pc, #496]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80054e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e8:	6413      	str	r3, [r2, #64]	; 0x40
 80054ea:	4b7a      	ldr	r3, [pc, #488]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f2:	60bb      	str	r3, [r7, #8]
 80054f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f6:	2301      	movs	r3, #1
 80054f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fa:	4b77      	ldr	r3, [pc, #476]	; (80056d8 <HAL_RCC_OscConfig+0x474>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d118      	bne.n	8005538 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005506:	4b74      	ldr	r3, [pc, #464]	; (80056d8 <HAL_RCC_OscConfig+0x474>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a73      	ldr	r2, [pc, #460]	; (80056d8 <HAL_RCC_OscConfig+0x474>)
 800550c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005512:	f7fe f92b 	bl	800376c <HAL_GetTick>
 8005516:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005518:	e008      	b.n	800552c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800551a:	f7fe f927 	bl	800376c <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e10c      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800552c:	4b6a      	ldr	r3, [pc, #424]	; (80056d8 <HAL_RCC_OscConfig+0x474>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0f0      	beq.n	800551a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d106      	bne.n	800554e <HAL_RCC_OscConfig+0x2ea>
 8005540:	4b64      	ldr	r3, [pc, #400]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005544:	4a63      	ldr	r2, [pc, #396]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	6713      	str	r3, [r2, #112]	; 0x70
 800554c:	e01c      	b.n	8005588 <HAL_RCC_OscConfig+0x324>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b05      	cmp	r3, #5
 8005554:	d10c      	bne.n	8005570 <HAL_RCC_OscConfig+0x30c>
 8005556:	4b5f      	ldr	r3, [pc, #380]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555a:	4a5e      	ldr	r2, [pc, #376]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 800555c:	f043 0304 	orr.w	r3, r3, #4
 8005560:	6713      	str	r3, [r2, #112]	; 0x70
 8005562:	4b5c      	ldr	r3, [pc, #368]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	4a5b      	ldr	r2, [pc, #364]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	6713      	str	r3, [r2, #112]	; 0x70
 800556e:	e00b      	b.n	8005588 <HAL_RCC_OscConfig+0x324>
 8005570:	4b58      	ldr	r3, [pc, #352]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005574:	4a57      	ldr	r2, [pc, #348]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	6713      	str	r3, [r2, #112]	; 0x70
 800557c:	4b55      	ldr	r3, [pc, #340]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	4a54      	ldr	r2, [pc, #336]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005582:	f023 0304 	bic.w	r3, r3, #4
 8005586:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d015      	beq.n	80055bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005590:	f7fe f8ec 	bl	800376c <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005596:	e00a      	b.n	80055ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005598:	f7fe f8e8 	bl	800376c <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e0cb      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ae:	4b49      	ldr	r3, [pc, #292]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0ee      	beq.n	8005598 <HAL_RCC_OscConfig+0x334>
 80055ba:	e014      	b.n	80055e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055bc:	f7fe f8d6 	bl	800376c <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055c2:	e00a      	b.n	80055da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c4:	f7fe f8d2 	bl	800376c <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e0b5      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055da:	4b3e      	ldr	r3, [pc, #248]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80055dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1ee      	bne.n	80055c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d105      	bne.n	80055f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ec:	4b39      	ldr	r3, [pc, #228]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	4a38      	ldr	r2, [pc, #224]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80055f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80a1 	beq.w	8005744 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005602:	4b34      	ldr	r3, [pc, #208]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	2b08      	cmp	r3, #8
 800560c:	d05c      	beq.n	80056c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d141      	bne.n	800569a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005616:	4b31      	ldr	r3, [pc, #196]	; (80056dc <HAL_RCC_OscConfig+0x478>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561c:	f7fe f8a6 	bl	800376c <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005624:	f7fe f8a2 	bl	800376c <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e087      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005636:	4b27      	ldr	r3, [pc, #156]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69da      	ldr	r2, [r3, #28]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	019b      	lsls	r3, r3, #6
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	3b01      	subs	r3, #1
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	061b      	lsls	r3, r3, #24
 8005666:	491b      	ldr	r1, [pc, #108]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 8005668:	4313      	orrs	r3, r2
 800566a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800566c:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <HAL_RCC_OscConfig+0x478>)
 800566e:	2201      	movs	r2, #1
 8005670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005672:	f7fe f87b 	bl	800376c <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005678:	e008      	b.n	800568c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800567a:	f7fe f877 	bl	800376c <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e05c      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0f0      	beq.n	800567a <HAL_RCC_OscConfig+0x416>
 8005698:	e054      	b.n	8005744 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <HAL_RCC_OscConfig+0x478>)
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a0:	f7fe f864 	bl	800376c <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a8:	f7fe f860 	bl	800376c <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e045      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ba:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <HAL_RCC_OscConfig+0x470>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f0      	bne.n	80056a8 <HAL_RCC_OscConfig+0x444>
 80056c6:	e03d      	b.n	8005744 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d107      	bne.n	80056e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e038      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
 80056d4:	40023800 	.word	0x40023800
 80056d8:	40007000 	.word	0x40007000
 80056dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056e0:	4b1b      	ldr	r3, [pc, #108]	; (8005750 <HAL_RCC_OscConfig+0x4ec>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d028      	beq.n	8005740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d121      	bne.n	8005740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005706:	429a      	cmp	r2, r3
 8005708:	d11a      	bne.n	8005740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005710:	4013      	ands	r3, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005716:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005718:	4293      	cmp	r3, r2
 800571a:	d111      	bne.n	8005740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	3b01      	subs	r3, #1
 800572a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d107      	bne.n	8005740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40023800 	.word	0x40023800

08005754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0cc      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005768:	4b68      	ldr	r3, [pc, #416]	; (800590c <HAL_RCC_ClockConfig+0x1b8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d90c      	bls.n	8005790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005776:	4b65      	ldr	r3, [pc, #404]	; (800590c <HAL_RCC_ClockConfig+0x1b8>)
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800577e:	4b63      	ldr	r3, [pc, #396]	; (800590c <HAL_RCC_ClockConfig+0x1b8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e0b8      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d020      	beq.n	80057de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a8:	4b59      	ldr	r3, [pc, #356]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	4a58      	ldr	r2, [pc, #352]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057c0:	4b53      	ldr	r3, [pc, #332]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	4a52      	ldr	r2, [pc, #328]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057cc:	4b50      	ldr	r3, [pc, #320]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	494d      	ldr	r1, [pc, #308]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d044      	beq.n	8005874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d107      	bne.n	8005802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f2:	4b47      	ldr	r3, [pc, #284]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d119      	bne.n	8005832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e07f      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d003      	beq.n	8005812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800580e:	2b03      	cmp	r3, #3
 8005810:	d107      	bne.n	8005822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005812:	4b3f      	ldr	r3, [pc, #252]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e06f      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005822:	4b3b      	ldr	r3, [pc, #236]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e067      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005832:	4b37      	ldr	r3, [pc, #220]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f023 0203 	bic.w	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	4934      	ldr	r1, [pc, #208]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	4313      	orrs	r3, r2
 8005842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005844:	f7fd ff92 	bl	800376c <HAL_GetTick>
 8005848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584a:	e00a      	b.n	8005862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800584c:	f7fd ff8e 	bl	800376c <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e04f      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005862:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 020c 	and.w	r2, r3, #12
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	429a      	cmp	r2, r3
 8005872:	d1eb      	bne.n	800584c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005874:	4b25      	ldr	r3, [pc, #148]	; (800590c <HAL_RCC_ClockConfig+0x1b8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d20c      	bcs.n	800589c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005882:	4b22      	ldr	r3, [pc, #136]	; (800590c <HAL_RCC_ClockConfig+0x1b8>)
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	b2d2      	uxtb	r2, r2
 8005888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b20      	ldr	r3, [pc, #128]	; (800590c <HAL_RCC_ClockConfig+0x1b8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d001      	beq.n	800589c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e032      	b.n	8005902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058a8:	4b19      	ldr	r3, [pc, #100]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	4916      	ldr	r1, [pc, #88]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058c6:	4b12      	ldr	r3, [pc, #72]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	490e      	ldr	r1, [pc, #56]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058da:	f000 f821 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 80058de:	4602      	mov	r2, r0
 80058e0:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	490a      	ldr	r1, [pc, #40]	; (8005914 <HAL_RCC_ClockConfig+0x1c0>)
 80058ec:	5ccb      	ldrb	r3, [r1, r3]
 80058ee:	fa22 f303 	lsr.w	r3, r2, r3
 80058f2:	4a09      	ldr	r2, [pc, #36]	; (8005918 <HAL_RCC_ClockConfig+0x1c4>)
 80058f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058f6:	4b09      	ldr	r3, [pc, #36]	; (800591c <HAL_RCC_ClockConfig+0x1c8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fd fef2 	bl	80036e4 <HAL_InitTick>

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40023c00 	.word	0x40023c00
 8005910:	40023800 	.word	0x40023800
 8005914:	0800b51c 	.word	0x0800b51c
 8005918:	20000024 	.word	0x20000024
 800591c:	20000028 	.word	0x20000028

08005920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005924:	b094      	sub	sp, #80	; 0x50
 8005926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	647b      	str	r3, [r7, #68]	; 0x44
 800592c:	2300      	movs	r3, #0
 800592e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005930:	2300      	movs	r3, #0
 8005932:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005938:	4b79      	ldr	r3, [pc, #484]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 030c 	and.w	r3, r3, #12
 8005940:	2b08      	cmp	r3, #8
 8005942:	d00d      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x40>
 8005944:	2b08      	cmp	r3, #8
 8005946:	f200 80e1 	bhi.w	8005b0c <HAL_RCC_GetSysClockFreq+0x1ec>
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_RCC_GetSysClockFreq+0x34>
 800594e:	2b04      	cmp	r3, #4
 8005950:	d003      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0x3a>
 8005952:	e0db      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005954:	4b73      	ldr	r3, [pc, #460]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005956:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005958:	e0db      	b.n	8005b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800595a:	4b73      	ldr	r3, [pc, #460]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x208>)
 800595c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800595e:	e0d8      	b.n	8005b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005960:	4b6f      	ldr	r3, [pc, #444]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005968:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800596a:	4b6d      	ldr	r3, [pc, #436]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x200>)
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d063      	beq.n	8005a3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005976:	4b6a      	ldr	r3, [pc, #424]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	099b      	lsrs	r3, r3, #6
 800597c:	2200      	movs	r2, #0
 800597e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005980:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005988:	633b      	str	r3, [r7, #48]	; 0x30
 800598a:	2300      	movs	r3, #0
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
 800598e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005992:	4622      	mov	r2, r4
 8005994:	462b      	mov	r3, r5
 8005996:	f04f 0000 	mov.w	r0, #0
 800599a:	f04f 0100 	mov.w	r1, #0
 800599e:	0159      	lsls	r1, r3, #5
 80059a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059a4:	0150      	lsls	r0, r2, #5
 80059a6:	4602      	mov	r2, r0
 80059a8:	460b      	mov	r3, r1
 80059aa:	4621      	mov	r1, r4
 80059ac:	1a51      	subs	r1, r2, r1
 80059ae:	6139      	str	r1, [r7, #16]
 80059b0:	4629      	mov	r1, r5
 80059b2:	eb63 0301 	sbc.w	r3, r3, r1
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059c4:	4659      	mov	r1, fp
 80059c6:	018b      	lsls	r3, r1, #6
 80059c8:	4651      	mov	r1, sl
 80059ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059ce:	4651      	mov	r1, sl
 80059d0:	018a      	lsls	r2, r1, #6
 80059d2:	4651      	mov	r1, sl
 80059d4:	ebb2 0801 	subs.w	r8, r2, r1
 80059d8:	4659      	mov	r1, fp
 80059da:	eb63 0901 	sbc.w	r9, r3, r1
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059f2:	4690      	mov	r8, r2
 80059f4:	4699      	mov	r9, r3
 80059f6:	4623      	mov	r3, r4
 80059f8:	eb18 0303 	adds.w	r3, r8, r3
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	462b      	mov	r3, r5
 8005a00:	eb49 0303 	adc.w	r3, r9, r3
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	f04f 0300 	mov.w	r3, #0
 8005a0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a12:	4629      	mov	r1, r5
 8005a14:	024b      	lsls	r3, r1, #9
 8005a16:	4621      	mov	r1, r4
 8005a18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	024a      	lsls	r2, r1, #9
 8005a20:	4610      	mov	r0, r2
 8005a22:	4619      	mov	r1, r3
 8005a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a26:	2200      	movs	r2, #0
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a30:	f7fb f922 	bl	8000c78 <__aeabi_uldivmod>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4613      	mov	r3, r2
 8005a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a3c:	e058      	b.n	8005af0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a3e:	4b38      	ldr	r3, [pc, #224]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	099b      	lsrs	r3, r3, #6
 8005a44:	2200      	movs	r2, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	4611      	mov	r1, r2
 8005a4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a4e:	623b      	str	r3, [r7, #32]
 8005a50:	2300      	movs	r3, #0
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
 8005a54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a58:	4642      	mov	r2, r8
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	f04f 0000 	mov.w	r0, #0
 8005a60:	f04f 0100 	mov.w	r1, #0
 8005a64:	0159      	lsls	r1, r3, #5
 8005a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a6a:	0150      	lsls	r0, r2, #5
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4641      	mov	r1, r8
 8005a72:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a76:	4649      	mov	r1, r9
 8005a78:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a90:	ebb2 040a 	subs.w	r4, r2, sl
 8005a94:	eb63 050b 	sbc.w	r5, r3, fp
 8005a98:	f04f 0200 	mov.w	r2, #0
 8005a9c:	f04f 0300 	mov.w	r3, #0
 8005aa0:	00eb      	lsls	r3, r5, #3
 8005aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aa6:	00e2      	lsls	r2, r4, #3
 8005aa8:	4614      	mov	r4, r2
 8005aaa:	461d      	mov	r5, r3
 8005aac:	4643      	mov	r3, r8
 8005aae:	18e3      	adds	r3, r4, r3
 8005ab0:	603b      	str	r3, [r7, #0]
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	eb45 0303 	adc.w	r3, r5, r3
 8005ab8:	607b      	str	r3, [r7, #4]
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	028b      	lsls	r3, r1, #10
 8005aca:	4621      	mov	r1, r4
 8005acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ad0:	4621      	mov	r1, r4
 8005ad2:	028a      	lsls	r2, r1, #10
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ada:	2200      	movs	r2, #0
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	61fa      	str	r2, [r7, #28]
 8005ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ae4:	f7fb f8c8 	bl	8000c78 <__aeabi_uldivmod>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4613      	mov	r3, r2
 8005aee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	0c1b      	lsrs	r3, r3, #16
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	3301      	adds	r3, #1
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b0a:	e002      	b.n	8005b12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3750      	adds	r7, #80	; 0x50
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b1e:	bf00      	nop
 8005b20:	40023800 	.word	0x40023800
 8005b24:	00f42400 	.word	0x00f42400
 8005b28:	007a1200 	.word	0x007a1200

08005b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b32:	681b      	ldr	r3, [r3, #0]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20000024 	.word	0x20000024

08005b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b48:	f7ff fff0 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	0a9b      	lsrs	r3, r3, #10
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	4903      	ldr	r1, [pc, #12]	; (8005b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b5a:	5ccb      	ldrb	r3, [r1, r3]
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40023800 	.word	0x40023800
 8005b68:	0800b52c 	.word	0x0800b52c

08005b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b70:	f7ff ffdc 	bl	8005b2c <HAL_RCC_GetHCLKFreq>
 8005b74:	4602      	mov	r2, r0
 8005b76:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	0b5b      	lsrs	r3, r3, #13
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	4903      	ldr	r1, [pc, #12]	; (8005b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b82:	5ccb      	ldrb	r3, [r1, r3]
 8005b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	0800b52c 	.word	0x0800b52c

08005b94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e07b      	b.n	8005c9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d108      	bne.n	8005bc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb6:	d009      	beq.n	8005bcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	61da      	str	r2, [r3, #28]
 8005bbe:	e005      	b.n	8005bcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fd f9b6 	bl	8002f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c50:	ea42 0103 	orr.w	r1, r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	0c1b      	lsrs	r3, r3, #16
 8005c6a:	f003 0104 	and.w	r1, r3, #4
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	f003 0210 	and.w	r2, r3, #16
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b088      	sub	sp, #32
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	603b      	str	r3, [r7, #0]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d101      	bne.n	8005cc8 <HAL_SPI_Transmit+0x22>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e126      	b.n	8005f16 <HAL_SPI_Transmit+0x270>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cd0:	f7fd fd4c 	bl	800376c <HAL_GetTick>
 8005cd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d002      	beq.n	8005cec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cea:	e10b      	b.n	8005f04 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_SPI_Transmit+0x52>
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cfc:	e102      	b.n	8005f04 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2203      	movs	r2, #3
 8005d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	88fa      	ldrh	r2, [r7, #6]
 8005d16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d44:	d10f      	bne.n	8005d66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d70:	2b40      	cmp	r3, #64	; 0x40
 8005d72:	d007      	beq.n	8005d84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d8c:	d14b      	bne.n	8005e26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <HAL_SPI_Transmit+0xf6>
 8005d96:	8afb      	ldrh	r3, [r7, #22]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d13e      	bne.n	8005e1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	881a      	ldrh	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	1c9a      	adds	r2, r3, #2
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005dc0:	e02b      	b.n	8005e1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d112      	bne.n	8005df6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	881a      	ldrh	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	1c9a      	adds	r2, r3, #2
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005df4:	e011      	b.n	8005e1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005df6:	f7fd fcb9 	bl	800376c <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d803      	bhi.n	8005e0e <HAL_SPI_Transmit+0x168>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0c:	d102      	bne.n	8005e14 <HAL_SPI_Transmit+0x16e>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e18:	e074      	b.n	8005f04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1ce      	bne.n	8005dc2 <HAL_SPI_Transmit+0x11c>
 8005e24:	e04c      	b.n	8005ec0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <HAL_SPI_Transmit+0x18e>
 8005e2e:	8afb      	ldrh	r3, [r7, #22]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d140      	bne.n	8005eb6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	7812      	ldrb	r2, [r2, #0]
 8005e40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e5a:	e02c      	b.n	8005eb6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d113      	bne.n	8005e92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	330c      	adds	r3, #12
 8005e74:	7812      	ldrb	r2, [r2, #0]
 8005e76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e90:	e011      	b.n	8005eb6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e92:	f7fd fc6b 	bl	800376c <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d803      	bhi.n	8005eaa <HAL_SPI_Transmit+0x204>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d102      	bne.n	8005eb0 <HAL_SPI_Transmit+0x20a>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005eb4:	e026      	b.n	8005f04 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1cd      	bne.n	8005e5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 fa63 	bl	8006390 <SPI_EndRxTxTransaction>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ede:	2300      	movs	r3, #0
 8005ee0:	613b      	str	r3, [r7, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e000      	b.n	8005f04 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b08c      	sub	sp, #48	; 0x30
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_SPI_TransmitReceive+0x26>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e18a      	b.n	800625a <HAL_SPI_TransmitReceive+0x33c>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f4c:	f7fd fc0e 	bl	800376c <HAL_GetTick>
 8005f50:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005f62:	887b      	ldrh	r3, [r7, #2]
 8005f64:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d00f      	beq.n	8005f8e <HAL_SPI_TransmitReceive+0x70>
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f74:	d107      	bne.n	8005f86 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d103      	bne.n	8005f86 <HAL_SPI_TransmitReceive+0x68>
 8005f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d003      	beq.n	8005f8e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005f86:	2302      	movs	r3, #2
 8005f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f8c:	e15b      	b.n	8006246 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_SPI_TransmitReceive+0x82>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_SPI_TransmitReceive+0x82>
 8005f9a:	887b      	ldrh	r3, [r7, #2]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d103      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005fa6:	e14e      	b.n	8006246 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d003      	beq.n	8005fbc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2205      	movs	r2, #5
 8005fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	887a      	ldrh	r2, [r7, #2]
 8005fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	887a      	ldrh	r2, [r7, #2]
 8005fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	887a      	ldrh	r2, [r7, #2]
 8005fde:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	887a      	ldrh	r2, [r7, #2]
 8005fe4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b40      	cmp	r3, #64	; 0x40
 8005ffe:	d007      	beq.n	8006010 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800600e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006018:	d178      	bne.n	800610c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_SPI_TransmitReceive+0x10a>
 8006022:	8b7b      	ldrh	r3, [r7, #26]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d166      	bne.n	80060f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	881a      	ldrh	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	1c9a      	adds	r2, r3, #2
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800604c:	e053      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b02      	cmp	r3, #2
 800605a:	d11b      	bne.n	8006094 <HAL_SPI_TransmitReceive+0x176>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006060:	b29b      	uxth	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d016      	beq.n	8006094 <HAL_SPI_TransmitReceive+0x176>
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	2b01      	cmp	r3, #1
 800606a:	d113      	bne.n	8006094 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006070:	881a      	ldrh	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	1c9a      	adds	r2, r3, #2
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d119      	bne.n	80060d6 <HAL_SPI_TransmitReceive+0x1b8>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d014      	beq.n	80060d6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	b292      	uxth	r2, r2
 80060b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	1c9a      	adds	r2, r3, #2
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060d2:	2301      	movs	r3, #1
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060d6:	f7fd fb49 	bl	800376c <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d807      	bhi.n	80060f6 <HAL_SPI_TransmitReceive+0x1d8>
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d003      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060f4:	e0a7      	b.n	8006246 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1a6      	bne.n	800604e <HAL_SPI_TransmitReceive+0x130>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1a1      	bne.n	800604e <HAL_SPI_TransmitReceive+0x130>
 800610a:	e07c      	b.n	8006206 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_SPI_TransmitReceive+0x1fc>
 8006114:	8b7b      	ldrh	r3, [r7, #26]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d16b      	bne.n	80061f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006140:	e057      	b.n	80061f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b02      	cmp	r3, #2
 800614e:	d11c      	bne.n	800618a <HAL_SPI_TransmitReceive+0x26c>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d017      	beq.n	800618a <HAL_SPI_TransmitReceive+0x26c>
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	2b01      	cmp	r3, #1
 800615e:	d114      	bne.n	800618a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	330c      	adds	r3, #12
 800616a:	7812      	ldrb	r2, [r2, #0]
 800616c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800617c:	b29b      	uxth	r3, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b01      	cmp	r3, #1
 8006196:	d119      	bne.n	80061cc <HAL_SPI_TransmitReceive+0x2ae>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d014      	beq.n	80061cc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061c8:	2301      	movs	r3, #1
 80061ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061cc:	f7fd face 	bl	800376c <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061d8:	429a      	cmp	r2, r3
 80061da:	d803      	bhi.n	80061e4 <HAL_SPI_TransmitReceive+0x2c6>
 80061dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e2:	d102      	bne.n	80061ea <HAL_SPI_TransmitReceive+0x2cc>
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d103      	bne.n	80061f2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80061f0:	e029      	b.n	8006246 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1a2      	bne.n	8006142 <HAL_SPI_TransmitReceive+0x224>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d19d      	bne.n	8006142 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006208:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 f8c0 	bl	8006390 <SPI_EndRxTxTransaction>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d006      	beq.n	8006224 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006222:	e010      	b.n	8006246 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800622c:	2300      	movs	r3, #0
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	e000      	b.n	8006246 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006244:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006256:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800625a:	4618      	mov	r0, r3
 800625c:	3730      	adds	r7, #48	; 0x30
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006270:	b2db      	uxtb	r3, r3
}
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
	...

08006280 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	4613      	mov	r3, r2
 800628e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006290:	f7fd fa6c 	bl	800376c <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	4413      	add	r3, r2
 800629e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062a0:	f7fd fa64 	bl	800376c <HAL_GetTick>
 80062a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062a6:	4b39      	ldr	r3, [pc, #228]	; (800638c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	015b      	lsls	r3, r3, #5
 80062ac:	0d1b      	lsrs	r3, r3, #20
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	fb02 f303 	mul.w	r3, r2, r3
 80062b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062b6:	e054      	b.n	8006362 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d050      	beq.n	8006362 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062c0:	f7fd fa54 	bl	800376c <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d902      	bls.n	80062d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d13d      	bne.n	8006352 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ee:	d111      	bne.n	8006314 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f8:	d004      	beq.n	8006304 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006302:	d107      	bne.n	8006314 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006312:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631c:	d10f      	bne.n	800633e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800633c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e017      	b.n	8006382 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	3b01      	subs	r3, #1
 8006360:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4013      	ands	r3, r2
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	bf0c      	ite	eq
 8006372:	2301      	moveq	r3, #1
 8006374:	2300      	movne	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	429a      	cmp	r2, r3
 800637e:	d19b      	bne.n	80062b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3720      	adds	r7, #32
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20000024 	.word	0x20000024

08006390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af02      	add	r7, sp, #8
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800639c:	4b1b      	ldr	r3, [pc, #108]	; (800640c <SPI_EndRxTxTransaction+0x7c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a1b      	ldr	r2, [pc, #108]	; (8006410 <SPI_EndRxTxTransaction+0x80>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	0d5b      	lsrs	r3, r3, #21
 80063a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063ac:	fb02 f303 	mul.w	r3, r2, r3
 80063b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ba:	d112      	bne.n	80063e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2200      	movs	r2, #0
 80063c4:	2180      	movs	r1, #128	; 0x80
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f7ff ff5a 	bl	8006280 <SPI_WaitFlagStateUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d016      	beq.n	8006400 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d6:	f043 0220 	orr.w	r2, r3, #32
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e00f      	b.n	8006402 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f8:	2b80      	cmp	r3, #128	; 0x80
 80063fa:	d0f2      	beq.n	80063e2 <SPI_EndRxTxTransaction+0x52>
 80063fc:	e000      	b.n	8006400 <SPI_EndRxTxTransaction+0x70>
        break;
 80063fe:	bf00      	nop
  }

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000024 	.word	0x20000024
 8006410:	165e9f81 	.word	0x165e9f81

08006414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e041      	b.n	80064aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d106      	bne.n	8006440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7fc fdd4 	bl	8002fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3304      	adds	r3, #4
 8006450:	4619      	mov	r1, r3
 8006452:	4610      	mov	r0, r2
 8006454:	f000 fab6 	bl	80069c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d001      	beq.n	80064cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e044      	b.n	8006556 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a1e      	ldr	r2, [pc, #120]	; (8006564 <HAL_TIM_Base_Start_IT+0xb0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d018      	beq.n	8006520 <HAL_TIM_Base_Start_IT+0x6c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f6:	d013      	beq.n	8006520 <HAL_TIM_Base_Start_IT+0x6c>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1a      	ldr	r2, [pc, #104]	; (8006568 <HAL_TIM_Base_Start_IT+0xb4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00e      	beq.n	8006520 <HAL_TIM_Base_Start_IT+0x6c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a19      	ldr	r2, [pc, #100]	; (800656c <HAL_TIM_Base_Start_IT+0xb8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d009      	beq.n	8006520 <HAL_TIM_Base_Start_IT+0x6c>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a17      	ldr	r2, [pc, #92]	; (8006570 <HAL_TIM_Base_Start_IT+0xbc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d004      	beq.n	8006520 <HAL_TIM_Base_Start_IT+0x6c>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a16      	ldr	r2, [pc, #88]	; (8006574 <HAL_TIM_Base_Start_IT+0xc0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d111      	bne.n	8006544 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b06      	cmp	r3, #6
 8006530:	d010      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f042 0201 	orr.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006542:	e007      	b.n	8006554 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	40010000 	.word	0x40010000
 8006568:	40000400 	.word	0x40000400
 800656c:	40000800 	.word	0x40000800
 8006570:	40000c00 	.word	0x40000c00
 8006574:	40014000 	.word	0x40014000

08006578 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0201 	bic.w	r2, r2, #1
 800658e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6a1a      	ldr	r2, [r3, #32]
 8006596:	f241 1311 	movw	r3, #4369	; 0x1111
 800659a:	4013      	ands	r3, r2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10f      	bne.n	80065c0 <HAL_TIM_Base_Stop_IT+0x48>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6a1a      	ldr	r2, [r3, #32]
 80065a6:	f240 4344 	movw	r3, #1092	; 0x444
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d107      	bne.n	80065c0 <HAL_TIM_Base_Stop_IT+0x48>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0201 	bic.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d122      	bne.n	8006632 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d11b      	bne.n	8006632 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f06f 0202 	mvn.w	r2, #2
 8006602:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f003 0303 	and.w	r3, r3, #3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f9b5 	bl	8006988 <HAL_TIM_IC_CaptureCallback>
 800661e:	e005      	b.n	800662c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f9a7 	bl	8006974 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f9b8 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b04      	cmp	r3, #4
 800663e:	d122      	bne.n	8006686 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b04      	cmp	r3, #4
 800664c:	d11b      	bne.n	8006686 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f06f 0204 	mvn.w	r2, #4
 8006656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f98b 	bl	8006988 <HAL_TIM_IC_CaptureCallback>
 8006672:	e005      	b.n	8006680 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f97d 	bl	8006974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f98e 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b08      	cmp	r3, #8
 8006692:	d122      	bne.n	80066da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d11b      	bne.n	80066da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f06f 0208 	mvn.w	r2, #8
 80066aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2204      	movs	r2, #4
 80066b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f961 	bl	8006988 <HAL_TIM_IC_CaptureCallback>
 80066c6:	e005      	b.n	80066d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f953 	bl	8006974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f964 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f003 0310 	and.w	r3, r3, #16
 80066e4:	2b10      	cmp	r3, #16
 80066e6:	d122      	bne.n	800672e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	2b10      	cmp	r3, #16
 80066f4:	d11b      	bne.n	800672e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f06f 0210 	mvn.w	r2, #16
 80066fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2208      	movs	r2, #8
 8006704:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f937 	bl	8006988 <HAL_TIM_IC_CaptureCallback>
 800671a:	e005      	b.n	8006728 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f929 	bl	8006974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f93a 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b01      	cmp	r3, #1
 800673a:	d10e      	bne.n	800675a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b01      	cmp	r3, #1
 8006748:	d107      	bne.n	800675a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f06f 0201 	mvn.w	r2, #1
 8006752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7fc f955 	bl	8002a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006764:	2b80      	cmp	r3, #128	; 0x80
 8006766:	d10e      	bne.n	8006786 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006772:	2b80      	cmp	r3, #128	; 0x80
 8006774:	d107      	bne.n	8006786 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800677e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fab1 	bl	8006ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006790:	2b40      	cmp	r3, #64	; 0x40
 8006792:	d10e      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d107      	bne.n	80067b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f8ff 	bl	80069b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f003 0320 	and.w	r3, r3, #32
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d10e      	bne.n	80067de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d107      	bne.n	80067de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f06f 0220 	mvn.w	r2, #32
 80067d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fa7b 	bl	8006cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d101      	bne.n	8006802 <HAL_TIM_ConfigClockSource+0x1c>
 80067fe:	2302      	movs	r3, #2
 8006800:	e0b4      	b.n	800696c <HAL_TIM_ConfigClockSource+0x186>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2202      	movs	r2, #2
 800680e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006820:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006828:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800683a:	d03e      	beq.n	80068ba <HAL_TIM_ConfigClockSource+0xd4>
 800683c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006840:	f200 8087 	bhi.w	8006952 <HAL_TIM_ConfigClockSource+0x16c>
 8006844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006848:	f000 8086 	beq.w	8006958 <HAL_TIM_ConfigClockSource+0x172>
 800684c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006850:	d87f      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x16c>
 8006852:	2b70      	cmp	r3, #112	; 0x70
 8006854:	d01a      	beq.n	800688c <HAL_TIM_ConfigClockSource+0xa6>
 8006856:	2b70      	cmp	r3, #112	; 0x70
 8006858:	d87b      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x16c>
 800685a:	2b60      	cmp	r3, #96	; 0x60
 800685c:	d050      	beq.n	8006900 <HAL_TIM_ConfigClockSource+0x11a>
 800685e:	2b60      	cmp	r3, #96	; 0x60
 8006860:	d877      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x16c>
 8006862:	2b50      	cmp	r3, #80	; 0x50
 8006864:	d03c      	beq.n	80068e0 <HAL_TIM_ConfigClockSource+0xfa>
 8006866:	2b50      	cmp	r3, #80	; 0x50
 8006868:	d873      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x16c>
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d058      	beq.n	8006920 <HAL_TIM_ConfigClockSource+0x13a>
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d86f      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x16c>
 8006872:	2b30      	cmp	r3, #48	; 0x30
 8006874:	d064      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0x15a>
 8006876:	2b30      	cmp	r3, #48	; 0x30
 8006878:	d86b      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x16c>
 800687a:	2b20      	cmp	r3, #32
 800687c:	d060      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0x15a>
 800687e:	2b20      	cmp	r3, #32
 8006880:	d867      	bhi.n	8006952 <HAL_TIM_ConfigClockSource+0x16c>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d05c      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0x15a>
 8006886:	2b10      	cmp	r3, #16
 8006888:	d05a      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0x15a>
 800688a:	e062      	b.n	8006952 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6818      	ldr	r0, [r3, #0]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	6899      	ldr	r1, [r3, #8]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f000 f98c 	bl	8006bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	609a      	str	r2, [r3, #8]
      break;
 80068b8:	e04f      	b.n	800695a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6899      	ldr	r1, [r3, #8]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f000 f975 	bl	8006bb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068dc:	609a      	str	r2, [r3, #8]
      break;
 80068de:	e03c      	b.n	800695a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	6859      	ldr	r1, [r3, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	461a      	mov	r2, r3
 80068ee:	f000 f8e9 	bl	8006ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2150      	movs	r1, #80	; 0x50
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 f942 	bl	8006b82 <TIM_ITRx_SetConfig>
      break;
 80068fe:	e02c      	b.n	800695a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	6859      	ldr	r1, [r3, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	461a      	mov	r2, r3
 800690e:	f000 f908 	bl	8006b22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2160      	movs	r1, #96	; 0x60
 8006918:	4618      	mov	r0, r3
 800691a:	f000 f932 	bl	8006b82 <TIM_ITRx_SetConfig>
      break;
 800691e:	e01c      	b.n	800695a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	6859      	ldr	r1, [r3, #4]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	461a      	mov	r2, r3
 800692e:	f000 f8c9 	bl	8006ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2140      	movs	r1, #64	; 0x40
 8006938:	4618      	mov	r0, r3
 800693a:	f000 f922 	bl	8006b82 <TIM_ITRx_SetConfig>
      break;
 800693e:	e00c      	b.n	800695a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4619      	mov	r1, r3
 800694a:	4610      	mov	r0, r2
 800694c:	f000 f919 	bl	8006b82 <TIM_ITRx_SetConfig>
      break;
 8006950:	e003      	b.n	800695a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]
      break;
 8006956:	e000      	b.n	800695a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006958:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a34      	ldr	r2, [pc, #208]	; (8006aa8 <TIM_Base_SetConfig+0xe4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00f      	beq.n	80069fc <TIM_Base_SetConfig+0x38>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e2:	d00b      	beq.n	80069fc <TIM_Base_SetConfig+0x38>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a31      	ldr	r2, [pc, #196]	; (8006aac <TIM_Base_SetConfig+0xe8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <TIM_Base_SetConfig+0x38>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a30      	ldr	r2, [pc, #192]	; (8006ab0 <TIM_Base_SetConfig+0xec>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_Base_SetConfig+0x38>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a2f      	ldr	r2, [pc, #188]	; (8006ab4 <TIM_Base_SetConfig+0xf0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d108      	bne.n	8006a0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a25      	ldr	r2, [pc, #148]	; (8006aa8 <TIM_Base_SetConfig+0xe4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01b      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1c:	d017      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a22      	ldr	r2, [pc, #136]	; (8006aac <TIM_Base_SetConfig+0xe8>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a21      	ldr	r2, [pc, #132]	; (8006ab0 <TIM_Base_SetConfig+0xec>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00f      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a20      	ldr	r2, [pc, #128]	; (8006ab4 <TIM_Base_SetConfig+0xf0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00b      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a1f      	ldr	r2, [pc, #124]	; (8006ab8 <TIM_Base_SetConfig+0xf4>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d007      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a1e      	ldr	r2, [pc, #120]	; (8006abc <TIM_Base_SetConfig+0xf8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d003      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a1d      	ldr	r2, [pc, #116]	; (8006ac0 <TIM_Base_SetConfig+0xfc>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d108      	bne.n	8006a60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a08      	ldr	r2, [pc, #32]	; (8006aa8 <TIM_Base_SetConfig+0xe4>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d103      	bne.n	8006a94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	615a      	str	r2, [r3, #20]
}
 8006a9a:	bf00      	nop
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40000400 	.word	0x40000400
 8006ab0:	40000800 	.word	0x40000800
 8006ab4:	40000c00 	.word	0x40000c00
 8006ab8:	40014000 	.word	0x40014000
 8006abc:	40014400 	.word	0x40014400
 8006ac0:	40014800 	.word	0x40014800

08006ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	f023 0201 	bic.w	r2, r3, #1
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f023 030a 	bic.w	r3, r3, #10
 8006b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	621a      	str	r2, [r3, #32]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b087      	sub	sp, #28
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f023 0210 	bic.w	r2, r3, #16
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	031b      	lsls	r3, r3, #12
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	621a      	str	r2, [r3, #32]
}
 8006b76:	bf00      	nop
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f043 0307 	orr.w	r3, r3, #7
 8006ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	609a      	str	r2, [r3, #8]
}
 8006bac:	bf00      	nop
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	021a      	lsls	r2, r3, #8
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	609a      	str	r2, [r3, #8]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e050      	b.n	8006cb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a1c      	ldr	r2, [pc, #112]	; (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d018      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5c:	d013      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00e      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a16      	ldr	r2, [pc, #88]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d009      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d004      	beq.n	8006c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a13      	ldr	r2, [pc, #76]	; (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d10c      	bne.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40010000 	.word	0x40010000
 8006cc4:	40000400 	.word	0x40000400
 8006cc8:	40000800 	.word	0x40000800
 8006ccc:	40000c00 	.word	0x40000c00
 8006cd0:	40014000 	.word	0x40014000

08006cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e03f      	b.n	8006d8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fc f9e0 	bl	80030e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2224      	movs	r2, #36	; 0x24
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 f9bf 	bl	80080c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	695a      	ldr	r2, [r3, #20]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b082      	sub	sp, #8
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e021      	b.n	8006dec <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2224      	movs	r2, #36	; 0x24
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dbe:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7fc fa8d 	bl	80032e0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08a      	sub	sp, #40	; 0x28
 8006df8:	af02      	add	r7, sp, #8
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	4613      	mov	r3, r2
 8006e02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d17c      	bne.n	8006f0e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <HAL_UART_Transmit+0x2c>
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e075      	b.n	8006f10 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <HAL_UART_Transmit+0x3e>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e06e      	b.n	8006f10 <HAL_UART_Transmit+0x11c>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2221      	movs	r2, #33	; 0x21
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e48:	f7fc fc90 	bl	800376c <HAL_GetTick>
 8006e4c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	88fa      	ldrh	r2, [r7, #6]
 8006e52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	88fa      	ldrh	r2, [r7, #6]
 8006e58:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e62:	d108      	bne.n	8006e76 <HAL_UART_Transmit+0x82>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d104      	bne.n	8006e76 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	e003      	b.n	8006e7e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006e86:	e02a      	b.n	8006ede <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fdaa 	bl	80079ec <UART_WaitOnFlagUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e036      	b.n	8006f10 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10b      	bne.n	8006ec0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	3302      	adds	r3, #2
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	e007      	b.n	8006ed0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	781a      	ldrb	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1cf      	bne.n	8006e88 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2140      	movs	r1, #64	; 0x40
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 fd7a 	bl	80079ec <UART_WaitOnFlagUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e006      	b.n	8006f10 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e000      	b.n	8006f10 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f0e:	2302      	movs	r3, #2
  }
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3720      	adds	r7, #32
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4613      	mov	r3, r2
 8006f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d130      	bne.n	8006f94 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <HAL_UART_Transmit_IT+0x26>
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e029      	b.n	8006f96 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_UART_Transmit_IT+0x38>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e022      	b.n	8006f96 <HAL_UART_Transmit_IT+0x7e>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	88fa      	ldrh	r2, [r7, #6]
 8006f62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	88fa      	ldrh	r2, [r7, #6]
 8006f68:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2221      	movs	r2, #33	; 0x21
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f8e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	e000      	b.n	8006f96 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006f94:	2302      	movs	r3, #2
  }
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	4613      	mov	r3, r2
 8006fae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d11d      	bne.n	8006ff8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_UART_Receive_IT+0x26>
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e016      	b.n	8006ffa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_UART_Receive_IT+0x38>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e00f      	b.n	8006ffa <HAL_UART_Receive_IT+0x58>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	461a      	mov	r2, r3
 8006fec:	68b9      	ldr	r1, [r7, #8]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 fd6a 	bl	8007ac8 <UART_Start_Receive_IT>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	e000      	b.n	8006ffa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006ff8:	2302      	movs	r3, #2
  }
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b084      	sub	sp, #16
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	4613      	mov	r3, r2
 800700e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b20      	cmp	r3, #32
 800701a:	d11d      	bne.n	8007058 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <HAL_UART_Receive_DMA+0x26>
 8007022:	88fb      	ldrh	r3, [r7, #6]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e016      	b.n	800705a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_UART_Receive_DMA+0x38>
 8007036:	2302      	movs	r3, #2
 8007038:	e00f      	b.n	800705a <HAL_UART_Receive_DMA+0x58>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007048:	88fb      	ldrh	r3, [r7, #6]
 800704a:	461a      	mov	r2, r3
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 fd78 	bl	8007b44 <UART_Start_Receive_DMA>
 8007054:	4603      	mov	r3, r0
 8007056:	e000      	b.n	800705a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007058:	2302      	movs	r3, #2
  }
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b0a2      	sub	sp, #136	; 0x88
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800706c:	2301      	movs	r3, #1
 800706e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	330c      	adds	r3, #12
 8007078:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007084:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8007088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	330c      	adds	r3, #12
 8007092:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007096:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007098:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800709c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e3      	bne.n	8007072 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3314      	adds	r3, #20
 80070b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070bc:	f023 0301 	bic.w	r3, r3, #1
 80070c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3314      	adds	r3, #20
 80070c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80070ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80070cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e5      	bne.n	80070aa <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d119      	bne.n	800711a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	330c      	adds	r3, #12
 80070ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f8:	f023 0310 	bic.w	r3, r3, #16
 80070fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	330c      	adds	r3, #12
 8007104:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007106:	647a      	str	r2, [r7, #68]	; 0x44
 8007108:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800710c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e5      	bne.n	80070e6 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00f      	beq.n	8007142 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712c:	2b80      	cmp	r3, #128	; 0x80
 800712e:	d104      	bne.n	800713a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007134:	4a53      	ldr	r2, [pc, #332]	; (8007284 <HAL_UART_Abort_IT+0x220>)
 8007136:	651a      	str	r2, [r3, #80]	; 0x50
 8007138:	e003      	b.n	8007142 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713e:	2200      	movs	r2, #0
 8007140:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00f      	beq.n	800716a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	2b40      	cmp	r3, #64	; 0x40
 8007156:	d104      	bne.n	8007162 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	4a4a      	ldr	r2, [pc, #296]	; (8007288 <HAL_UART_Abort_IT+0x224>)
 800715e:	651a      	str	r2, [r3, #80]	; 0x50
 8007160:	e003      	b.n	800716a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	2200      	movs	r2, #0
 8007168:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007174:	2b80      	cmp	r3, #128	; 0x80
 8007176:	d12d      	bne.n	80071d4 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3314      	adds	r3, #20
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	623b      	str	r3, [r7, #32]
   return(result);
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800718e:	677b      	str	r3, [r7, #116]	; 0x74
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3314      	adds	r3, #20
 8007196:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007198:	633a      	str	r2, [r7, #48]	; 0x30
 800719a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800719e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071a0:	e841 2300 	strex	r3, r2, [r1]
 80071a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e5      	bne.n	8007178 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00f      	beq.n	80071d4 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fd fb2d 	bl	8004818 <HAL_DMA_Abort_IT>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	2200      	movs	r2, #0
 80071ca:	651a      	str	r2, [r3, #80]	; 0x50
 80071cc:	e002      	b.n	80071d4 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d130      	bne.n	8007244 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3314      	adds	r3, #20
 80071e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	e853 3f00 	ldrex	r3, [r3]
 80071f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f8:	673b      	str	r3, [r7, #112]	; 0x70
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3314      	adds	r3, #20
 8007200:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007202:	61fa      	str	r2, [r7, #28]
 8007204:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	69b9      	ldr	r1, [r7, #24]
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	617b      	str	r3, [r7, #20]
   return(result);
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e5      	bne.n	80071e2 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	2b00      	cmp	r3, #0
 800721c:	d012      	beq.n	8007244 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	4618      	mov	r0, r3
 8007224:	f7fd faf8 	bl	8004818 <HAL_DMA_Abort_IT>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d007      	beq.n	800723e <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	2200      	movs	r2, #0
 8007234:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8007236:	2301      	movs	r3, #1
 8007238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800723c:	e002      	b.n	8007244 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 800723e:	2300      	movs	r3, #0
 8007240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8007244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007248:	2b01      	cmp	r3, #1
 800724a:	d116      	bne.n	800727a <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 faab 	bl	80077d0 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3788      	adds	r7, #136	; 0x88
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	08007dbf 	.word	0x08007dbf
 8007288:	08007e1f 	.word	0x08007e1f

0800728c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b0ba      	sub	sp, #232	; 0xe8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c2:	f003 030f 	and.w	r3, r3, #15
 80072c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80072ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10f      	bne.n	80072f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d6:	f003 0320 	and.w	r3, r3, #32
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d009      	beq.n	80072f2 <HAL_UART_IRQHandler+0x66>
 80072de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fe2f 	bl	8007f4e <UART_Receive_IT>
      return;
 80072f0:	e256      	b.n	80077a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80072f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 80de 	beq.w	80074b8 <HAL_UART_IRQHandler+0x22c>
 80072fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d106      	bne.n	8007316 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 80d1 	beq.w	80074b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00b      	beq.n	800733a <HAL_UART_IRQHandler+0xae>
 8007322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	f043 0201 	orr.w	r2, r3, #1
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800733a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00b      	beq.n	800735e <HAL_UART_IRQHandler+0xd2>
 8007346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d005      	beq.n	800735e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	f043 0202 	orr.w	r2, r3, #2
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800735e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <HAL_UART_IRQHandler+0xf6>
 800736a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b00      	cmp	r3, #0
 8007374:	d005      	beq.n	8007382 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	f043 0204 	orr.w	r2, r3, #4
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b00      	cmp	r3, #0
 800738c:	d011      	beq.n	80073b2 <HAL_UART_IRQHandler+0x126>
 800738e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d105      	bne.n	80073a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800739a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	f043 0208 	orr.w	r2, r3, #8
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 81ed 	beq.w	8007796 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <HAL_UART_IRQHandler+0x14e>
 80073c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073cc:	f003 0320 	and.w	r3, r3, #32
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fdba 	bl	8007f4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e4:	2b40      	cmp	r3, #64	; 0x40
 80073e6:	bf0c      	ite	eq
 80073e8:	2301      	moveq	r3, #1
 80073ea:	2300      	movne	r3, #0
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d103      	bne.n	8007406 <HAL_UART_IRQHandler+0x17a>
 80073fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007402:	2b00      	cmp	r3, #0
 8007404:	d04f      	beq.n	80074a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fc62 	bl	8007cd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007416:	2b40      	cmp	r3, #64	; 0x40
 8007418:	d141      	bne.n	800749e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3314      	adds	r3, #20
 8007420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3314      	adds	r3, #20
 8007442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007446:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800744a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007456:	e841 2300 	strex	r3, r2, [r1]
 800745a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800745e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1d9      	bne.n	800741a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	2b00      	cmp	r3, #0
 800746c:	d013      	beq.n	8007496 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	4a7d      	ldr	r2, [pc, #500]	; (8007668 <HAL_UART_IRQHandler+0x3dc>)
 8007474:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	4618      	mov	r0, r3
 800747c:	f7fd f9cc 	bl	8004818 <HAL_DMA_Abort_IT>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d016      	beq.n	80074b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007490:	4610      	mov	r0, r2
 8007492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007494:	e00e      	b.n	80074b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fb fa60 	bl	800295c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749c:	e00a      	b.n	80074b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fb fa5c 	bl	800295c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a4:	e006      	b.n	80074b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fb fa58 	bl	800295c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074b2:	e170      	b.n	8007796 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b4:	bf00      	nop
    return;
 80074b6:	e16e      	b.n	8007796 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	2b01      	cmp	r3, #1
 80074be:	f040 814a 	bne.w	8007756 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 8143 	beq.w	8007756 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80074d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d4:	f003 0310 	and.w	r3, r3, #16
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 813c 	beq.w	8007756 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074de:	2300      	movs	r3, #0
 80074e0:	60bb      	str	r3, [r7, #8]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60bb      	str	r3, [r7, #8]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	60bb      	str	r3, [r7, #8]
 80074f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fe:	2b40      	cmp	r3, #64	; 0x40
 8007500:	f040 80b4 	bne.w	800766c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8140 	beq.w	800779a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800751e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007522:	429a      	cmp	r2, r3
 8007524:	f080 8139 	bcs.w	800779a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800752e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800753a:	f000 8088 	beq.w	800764e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	330c      	adds	r3, #12
 8007544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800755c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	330c      	adds	r3, #12
 8007566:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800756a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800756e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1d9      	bne.n	800753e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3314      	adds	r3, #20
 8007590:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800759a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800759c:	f023 0301 	bic.w	r3, r3, #1
 80075a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3314      	adds	r3, #20
 80075aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e1      	bne.n	800758a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3314      	adds	r3, #20
 80075cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3314      	adds	r3, #20
 80075e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e3      	bne.n	80075c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	330c      	adds	r3, #12
 8007612:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800761c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800761e:	f023 0310 	bic.w	r3, r3, #16
 8007622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	330c      	adds	r3, #12
 800762c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007630:	65ba      	str	r2, [r7, #88]	; 0x58
 8007632:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007636:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800763e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e3      	bne.n	800760c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	4618      	mov	r0, r3
 800764a:	f7fd f875 	bl	8004738 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007656:	b29b      	uxth	r3, r3
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	b29b      	uxth	r3, r3
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f8c0 	bl	80077e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007664:	e099      	b.n	800779a <HAL_UART_IRQHandler+0x50e>
 8007666:	bf00      	nop
 8007668:	08007d97 	.word	0x08007d97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007674:	b29b      	uxth	r3, r3
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007680:	b29b      	uxth	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 808b 	beq.w	800779e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8086 	beq.w	800779e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	330c      	adds	r3, #12
 8007698:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	330c      	adds	r3, #12
 80076b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80076b6:	647a      	str	r2, [r7, #68]	; 0x44
 80076b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e3      	bne.n	8007692 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3314      	adds	r3, #20
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	623b      	str	r3, [r7, #32]
   return(result);
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3314      	adds	r3, #20
 80076ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076ee:	633a      	str	r2, [r7, #48]	; 0x30
 80076f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e3      	bne.n	80076ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2220      	movs	r2, #32
 8007706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	330c      	adds	r3, #12
 8007716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0310 	bic.w	r3, r3, #16
 8007726:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	330c      	adds	r3, #12
 8007730:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007734:	61fa      	str	r2, [r7, #28]
 8007736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	69b9      	ldr	r1, [r7, #24]
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	e841 2300 	strex	r3, r2, [r1]
 8007740:	617b      	str	r3, [r7, #20]
   return(result);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e3      	bne.n	8007710 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800774c:	4619      	mov	r1, r3
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f848 	bl	80077e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007754:	e023      	b.n	800779e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775e:	2b00      	cmp	r3, #0
 8007760:	d009      	beq.n	8007776 <HAL_UART_IRQHandler+0x4ea>
 8007762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fb85 	bl	8007e7e <UART_Transmit_IT>
    return;
 8007774:	e014      	b.n	80077a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00e      	beq.n	80077a0 <HAL_UART_IRQHandler+0x514>
 8007782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	d008      	beq.n	80077a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fbc5 	bl	8007f1e <UART_EndTransmit_IT>
    return;
 8007794:	e004      	b.n	80077a0 <HAL_UART_IRQHandler+0x514>
    return;
 8007796:	bf00      	nop
 8007798:	e002      	b.n	80077a0 <HAL_UART_IRQHandler+0x514>
      return;
 800779a:	bf00      	nop
 800779c:	e000      	b.n	80077a0 <HAL_UART_IRQHandler+0x514>
      return;
 800779e:	bf00      	nop
  }
}
 80077a0:	37e8      	adds	r7, #232	; 0xe8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop

080077a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b09c      	sub	sp, #112	; 0x70
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007814:	2b00      	cmp	r3, #0
 8007816:	d172      	bne.n	80078fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800781a:	2200      	movs	r2, #0
 800781c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800781e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	330c      	adds	r3, #12
 8007824:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800782e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007834:	66bb      	str	r3, [r7, #104]	; 0x68
 8007836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	330c      	adds	r3, #12
 800783c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800783e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007840:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800784c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e5      	bne.n	800781e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3314      	adds	r3, #20
 8007858:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007864:	f023 0301 	bic.w	r3, r3, #1
 8007868:	667b      	str	r3, [r7, #100]	; 0x64
 800786a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3314      	adds	r3, #20
 8007870:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007872:	647a      	str	r2, [r7, #68]	; 0x44
 8007874:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800787a:	e841 2300 	strex	r3, r2, [r1]
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e5      	bne.n	8007852 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3314      	adds	r3, #20
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	623b      	str	r3, [r7, #32]
   return(result);
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800789c:	663b      	str	r3, [r7, #96]	; 0x60
 800789e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3314      	adds	r3, #20
 80078a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078a6:	633a      	str	r2, [r7, #48]	; 0x30
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e5      	bne.n	8007886 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078bc:	2220      	movs	r2, #32
 80078be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d119      	bne.n	80078fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	330c      	adds	r3, #12
 80078d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	e853 3f00 	ldrex	r3, [r3]
 80078d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f023 0310 	bic.w	r3, r3, #16
 80078e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	330c      	adds	r3, #12
 80078e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078ea:	61fa      	str	r2, [r7, #28]
 80078ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	69b9      	ldr	r1, [r7, #24]
 80078f0:	69fa      	ldr	r2, [r7, #28]
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	617b      	str	r3, [r7, #20]
   return(result);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1e5      	bne.n	80078ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	2b01      	cmp	r3, #1
 8007904:	d106      	bne.n	8007914 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800790a:	4619      	mov	r1, r3
 800790c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800790e:	f7ff ff69 	bl	80077e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007912:	e002      	b.n	800791a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007914:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007916:	f7fa ff65 	bl	80027e4 <HAL_UART_RxCpltCallback>
}
 800791a:	bf00      	nop
 800791c:	3770      	adds	r7, #112	; 0x70
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007934:	2b01      	cmp	r3, #1
 8007936:	d108      	bne.n	800794a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800793c:	085b      	lsrs	r3, r3, #1
 800793e:	b29b      	uxth	r3, r3
 8007940:	4619      	mov	r1, r3
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff ff4e 	bl	80077e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007948:	e002      	b.n	8007950 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f7ff ff36 	bl	80077bc <HAL_UART_RxHalfCpltCallback>
}
 8007950:	bf00      	nop
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007974:	2b80      	cmp	r3, #128	; 0x80
 8007976:	bf0c      	ite	eq
 8007978:	2301      	moveq	r3, #1
 800797a:	2300      	movne	r3, #0
 800797c:	b2db      	uxtb	r3, r3
 800797e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b21      	cmp	r3, #33	; 0x21
 800798a:	d108      	bne.n	800799e <UART_DMAError+0x46>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2200      	movs	r2, #0
 8007996:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007998:	68b8      	ldr	r0, [r7, #8]
 800799a:	f000 f971 	bl	8007c80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a8:	2b40      	cmp	r3, #64	; 0x40
 80079aa:	bf0c      	ite	eq
 80079ac:	2301      	moveq	r3, #1
 80079ae:	2300      	movne	r3, #0
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b22      	cmp	r3, #34	; 0x22
 80079be:	d108      	bne.n	80079d2 <UART_DMAError+0x7a>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d005      	beq.n	80079d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2200      	movs	r2, #0
 80079ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80079cc:	68b8      	ldr	r0, [r7, #8]
 80079ce:	f000 f97f 	bl	8007cd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	f043 0210 	orr.w	r2, r3, #16
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079de:	68b8      	ldr	r0, [r7, #8]
 80079e0:	f7fa ffbc 	bl	800295c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079e4:	bf00      	nop
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b090      	sub	sp, #64	; 0x40
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	603b      	str	r3, [r7, #0]
 80079f8:	4613      	mov	r3, r2
 80079fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079fc:	e050      	b.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a04:	d04c      	beq.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d007      	beq.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8007a0c:	f7fb feae 	bl	800376c <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d241      	bcs.n	8007aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	330c      	adds	r3, #12
 8007a3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a3c:	637a      	str	r2, [r7, #52]	; 0x34
 8007a3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e5      	bne.n	8007a1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3314      	adds	r3, #20
 8007a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	e853 3f00 	ldrex	r3, [r3]
 8007a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f023 0301 	bic.w	r3, r3, #1
 8007a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3314      	adds	r3, #20
 8007a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a70:	623a      	str	r2, [r7, #32]
 8007a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	69f9      	ldr	r1, [r7, #28]
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	e841 2300 	strex	r3, r2, [r1]
 8007a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e5      	bne.n	8007a50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2220      	movs	r2, #32
 8007a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e00f      	b.n	8007ac0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	bf0c      	ite	eq
 8007ab0:	2301      	moveq	r3, #1
 8007ab2:	2300      	movne	r3, #0
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d09f      	beq.n	80079fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3740      	adds	r7, #64	; 0x40
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	88fa      	ldrh	r2, [r7, #6]
 8007ae0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	88fa      	ldrh	r2, [r7, #6]
 8007ae6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2222      	movs	r2, #34	; 0x22
 8007af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d007      	beq.n	8007b16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	695a      	ldr	r2, [r3, #20]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f042 0201 	orr.w	r2, r2, #1
 8007b24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f042 0220 	orr.w	r2, r2, #32
 8007b34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b098      	sub	sp, #96	; 0x60
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2222      	movs	r2, #34	; 0x22
 8007b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	4a40      	ldr	r2, [pc, #256]	; (8007c74 <UART_Start_Receive_DMA+0x130>)
 8007b72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b78:	4a3f      	ldr	r2, [pc, #252]	; (8007c78 <UART_Start_Receive_DMA+0x134>)
 8007b7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b80:	4a3e      	ldr	r2, [pc, #248]	; (8007c7c <UART_Start_Receive_DMA+0x138>)
 8007b82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b88:	2200      	movs	r2, #0
 8007b8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007b8c:	f107 0308 	add.w	r3, r7, #8
 8007b90:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	88fb      	ldrh	r3, [r7, #6]
 8007ba4:	f7fc fd70 	bl	8004688 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007ba8:	2300      	movs	r3, #0
 8007baa:	613b      	str	r3, [r7, #16]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	613b      	str	r3, [r7, #16]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d019      	beq.n	8007c02 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	330c      	adds	r3, #12
 8007bd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007be4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	330c      	adds	r3, #12
 8007bec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007bf0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e5      	bne.n	8007bce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3314      	adds	r3, #20
 8007c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	e853 3f00 	ldrex	r3, [r3]
 8007c10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c14:	f043 0301 	orr.w	r3, r3, #1
 8007c18:	657b      	str	r3, [r7, #84]	; 0x54
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3314      	adds	r3, #20
 8007c20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c22:	63ba      	str	r2, [r7, #56]	; 0x38
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c2a:	e841 2300 	strex	r3, r2, [r1]
 8007c2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1e5      	bne.n	8007c02 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3314      	adds	r3, #20
 8007c3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	617b      	str	r3, [r7, #20]
   return(result);
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3314      	adds	r3, #20
 8007c54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c56:	627a      	str	r2, [r7, #36]	; 0x24
 8007c58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6a39      	ldr	r1, [r7, #32]
 8007c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e5      	bne.n	8007c36 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3760      	adds	r7, #96	; 0x60
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	080077fd 	.word	0x080077fd
 8007c78:	08007923 	.word	0x08007923
 8007c7c:	08007959 	.word	0x08007959

08007c80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b089      	sub	sp, #36	; 0x24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c9e:	61fb      	str	r3, [r7, #28]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	330c      	adds	r3, #12
 8007ca6:	69fa      	ldr	r2, [r7, #28]
 8007ca8:	61ba      	str	r2, [r7, #24]
 8007caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6979      	ldr	r1, [r7, #20]
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e5      	bne.n	8007c88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007cc4:	bf00      	nop
 8007cc6:	3724      	adds	r7, #36	; 0x24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b095      	sub	sp, #84	; 0x54
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	330c      	adds	r3, #12
 8007cde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	330c      	adds	r3, #12
 8007cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cf8:	643a      	str	r2, [r7, #64]	; 0x40
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e5      	bne.n	8007cd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3314      	adds	r3, #20
 8007d12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f023 0301 	bic.w	r3, r3, #1
 8007d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3314      	adds	r3, #20
 8007d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d34:	e841 2300 	strex	r3, r2, [r1]
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e5      	bne.n	8007d0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d119      	bne.n	8007d7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	330c      	adds	r3, #12
 8007d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	e853 3f00 	ldrex	r3, [r3]
 8007d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f023 0310 	bic.w	r3, r3, #16
 8007d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	330c      	adds	r3, #12
 8007d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d68:	61ba      	str	r2, [r7, #24]
 8007d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6979      	ldr	r1, [r7, #20]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	e841 2300 	strex	r3, r2, [r1]
 8007d74:	613b      	str	r3, [r7, #16]
   return(result);
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e5      	bne.n	8007d48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d8a:	bf00      	nop
 8007d8c:	3754      	adds	r7, #84	; 0x54
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f7fa fdd3 	bl	800295c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007db6:	bf00      	nop
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dca:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d004      	beq.n	8007de6 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d117      	bne.n	8007e16 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff fcde 	bl	80077d0 <HAL_UART_AbortCpltCallback>
 8007e14:	e000      	b.n	8007e18 <UART_DMATxAbortCallback+0x5a>
      return;
 8007e16:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e30:	2200      	movs	r2, #0
 8007e32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d004      	beq.n	8007e46 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d117      	bne.n	8007e76 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f7ff fcae 	bl	80077d0 <HAL_UART_AbortCpltCallback>
 8007e74:	e000      	b.n	8007e78 <UART_DMARxAbortCallback+0x5a>
      return;
 8007e76:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b085      	sub	sp, #20
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b21      	cmp	r3, #33	; 0x21
 8007e90:	d13e      	bne.n	8007f10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9a:	d114      	bne.n	8007ec6 <UART_Transmit_IT+0x48>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d110      	bne.n	8007ec6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	1c9a      	adds	r2, r3, #2
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	621a      	str	r2, [r3, #32]
 8007ec4:	e008      	b.n	8007ed8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	1c59      	adds	r1, r3, #1
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6211      	str	r1, [r2, #32]
 8007ed0:	781a      	ldrb	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10f      	bne.n	8007f0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007efa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e000      	b.n	8007f12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f10:	2302      	movs	r3, #2
  }
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7ff fc32 	bl	80077a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b08c      	sub	sp, #48	; 0x30
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b22      	cmp	r3, #34	; 0x22
 8007f60:	f040 80ab 	bne.w	80080ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f6c:	d117      	bne.n	8007f9e <UART_Receive_IT+0x50>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d113      	bne.n	8007f9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	1c9a      	adds	r2, r3, #2
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8007f9c:	e026      	b.n	8007fec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb0:	d007      	beq.n	8007fc2 <UART_Receive_IT+0x74>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <UART_Receive_IT+0x82>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d106      	bne.n	8007fd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fcc:	701a      	strb	r2, [r3, #0]
 8007fce:	e008      	b.n	8007fe2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d15a      	bne.n	80080b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0220 	bic.w	r2, r2, #32
 800800e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800801e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695a      	ldr	r2, [r3, #20]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0201 	bic.w	r2, r2, #1
 800802e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803c:	2b01      	cmp	r3, #1
 800803e:	d135      	bne.n	80080ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	330c      	adds	r3, #12
 800804c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	613b      	str	r3, [r7, #16]
   return(result);
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f023 0310 	bic.w	r3, r3, #16
 800805c:	627b      	str	r3, [r7, #36]	; 0x24
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008066:	623a      	str	r2, [r7, #32]
 8008068:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	69f9      	ldr	r1, [r7, #28]
 800806c:	6a3a      	ldr	r2, [r7, #32]
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	61bb      	str	r3, [r7, #24]
   return(result);
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e5      	bne.n	8008046 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0310 	and.w	r3, r3, #16
 8008084:	2b10      	cmp	r3, #16
 8008086:	d10a      	bne.n	800809e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008088:	2300      	movs	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff fb9d 	bl	80077e4 <HAL_UARTEx_RxEventCallback>
 80080aa:	e002      	b.n	80080b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7fa fb99 	bl	80027e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	e002      	b.n	80080bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e000      	b.n	80080bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080ba:	2302      	movs	r3, #2
  }
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3730      	adds	r7, #48	; 0x30
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080c8:	b0c0      	sub	sp, #256	; 0x100
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e0:	68d9      	ldr	r1, [r3, #12]
 80080e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	ea40 0301 	orr.w	r3, r0, r1
 80080ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	431a      	orrs	r2, r3
 80080fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	431a      	orrs	r2, r3
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	4313      	orrs	r3, r2
 800810c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800811c:	f021 010c 	bic.w	r1, r1, #12
 8008120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800812a:	430b      	orrs	r3, r1
 800812c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800812e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800813a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800813e:	6999      	ldr	r1, [r3, #24]
 8008140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	ea40 0301 	orr.w	r3, r0, r1
 800814a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800814c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	4b8f      	ldr	r3, [pc, #572]	; (8008390 <UART_SetConfig+0x2cc>)
 8008154:	429a      	cmp	r2, r3
 8008156:	d005      	beq.n	8008164 <UART_SetConfig+0xa0>
 8008158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4b8d      	ldr	r3, [pc, #564]	; (8008394 <UART_SetConfig+0x2d0>)
 8008160:	429a      	cmp	r2, r3
 8008162:	d104      	bne.n	800816e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008164:	f7fd fd02 	bl	8005b6c <HAL_RCC_GetPCLK2Freq>
 8008168:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800816c:	e003      	b.n	8008176 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800816e:	f7fd fce9 	bl	8005b44 <HAL_RCC_GetPCLK1Freq>
 8008172:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008180:	f040 810c 	bne.w	800839c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008188:	2200      	movs	r2, #0
 800818a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800818e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008192:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008196:	4622      	mov	r2, r4
 8008198:	462b      	mov	r3, r5
 800819a:	1891      	adds	r1, r2, r2
 800819c:	65b9      	str	r1, [r7, #88]	; 0x58
 800819e:	415b      	adcs	r3, r3
 80081a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081a6:	4621      	mov	r1, r4
 80081a8:	eb12 0801 	adds.w	r8, r2, r1
 80081ac:	4629      	mov	r1, r5
 80081ae:	eb43 0901 	adc.w	r9, r3, r1
 80081b2:	f04f 0200 	mov.w	r2, #0
 80081b6:	f04f 0300 	mov.w	r3, #0
 80081ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081c6:	4690      	mov	r8, r2
 80081c8:	4699      	mov	r9, r3
 80081ca:	4623      	mov	r3, r4
 80081cc:	eb18 0303 	adds.w	r3, r8, r3
 80081d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081d4:	462b      	mov	r3, r5
 80081d6:	eb49 0303 	adc.w	r3, r9, r3
 80081da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081f2:	460b      	mov	r3, r1
 80081f4:	18db      	adds	r3, r3, r3
 80081f6:	653b      	str	r3, [r7, #80]	; 0x50
 80081f8:	4613      	mov	r3, r2
 80081fa:	eb42 0303 	adc.w	r3, r2, r3
 80081fe:	657b      	str	r3, [r7, #84]	; 0x54
 8008200:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008204:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008208:	f7f8 fd36 	bl	8000c78 <__aeabi_uldivmod>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4b61      	ldr	r3, [pc, #388]	; (8008398 <UART_SetConfig+0x2d4>)
 8008212:	fba3 2302 	umull	r2, r3, r3, r2
 8008216:	095b      	lsrs	r3, r3, #5
 8008218:	011c      	lsls	r4, r3, #4
 800821a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800821e:	2200      	movs	r2, #0
 8008220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008224:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008228:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800822c:	4642      	mov	r2, r8
 800822e:	464b      	mov	r3, r9
 8008230:	1891      	adds	r1, r2, r2
 8008232:	64b9      	str	r1, [r7, #72]	; 0x48
 8008234:	415b      	adcs	r3, r3
 8008236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008238:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800823c:	4641      	mov	r1, r8
 800823e:	eb12 0a01 	adds.w	sl, r2, r1
 8008242:	4649      	mov	r1, r9
 8008244:	eb43 0b01 	adc.w	fp, r3, r1
 8008248:	f04f 0200 	mov.w	r2, #0
 800824c:	f04f 0300 	mov.w	r3, #0
 8008250:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008254:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800825c:	4692      	mov	sl, r2
 800825e:	469b      	mov	fp, r3
 8008260:	4643      	mov	r3, r8
 8008262:	eb1a 0303 	adds.w	r3, sl, r3
 8008266:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800826a:	464b      	mov	r3, r9
 800826c:	eb4b 0303 	adc.w	r3, fp, r3
 8008270:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008280:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008284:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008288:	460b      	mov	r3, r1
 800828a:	18db      	adds	r3, r3, r3
 800828c:	643b      	str	r3, [r7, #64]	; 0x40
 800828e:	4613      	mov	r3, r2
 8008290:	eb42 0303 	adc.w	r3, r2, r3
 8008294:	647b      	str	r3, [r7, #68]	; 0x44
 8008296:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800829a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800829e:	f7f8 fceb 	bl	8000c78 <__aeabi_uldivmod>
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4611      	mov	r1, r2
 80082a8:	4b3b      	ldr	r3, [pc, #236]	; (8008398 <UART_SetConfig+0x2d4>)
 80082aa:	fba3 2301 	umull	r2, r3, r3, r1
 80082ae:	095b      	lsrs	r3, r3, #5
 80082b0:	2264      	movs	r2, #100	; 0x64
 80082b2:	fb02 f303 	mul.w	r3, r2, r3
 80082b6:	1acb      	subs	r3, r1, r3
 80082b8:	00db      	lsls	r3, r3, #3
 80082ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082be:	4b36      	ldr	r3, [pc, #216]	; (8008398 <UART_SetConfig+0x2d4>)
 80082c0:	fba3 2302 	umull	r2, r3, r3, r2
 80082c4:	095b      	lsrs	r3, r3, #5
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082cc:	441c      	add	r4, r3
 80082ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082e0:	4642      	mov	r2, r8
 80082e2:	464b      	mov	r3, r9
 80082e4:	1891      	adds	r1, r2, r2
 80082e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80082e8:	415b      	adcs	r3, r3
 80082ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082f0:	4641      	mov	r1, r8
 80082f2:	1851      	adds	r1, r2, r1
 80082f4:	6339      	str	r1, [r7, #48]	; 0x30
 80082f6:	4649      	mov	r1, r9
 80082f8:	414b      	adcs	r3, r1
 80082fa:	637b      	str	r3, [r7, #52]	; 0x34
 80082fc:	f04f 0200 	mov.w	r2, #0
 8008300:	f04f 0300 	mov.w	r3, #0
 8008304:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008308:	4659      	mov	r1, fp
 800830a:	00cb      	lsls	r3, r1, #3
 800830c:	4651      	mov	r1, sl
 800830e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008312:	4651      	mov	r1, sl
 8008314:	00ca      	lsls	r2, r1, #3
 8008316:	4610      	mov	r0, r2
 8008318:	4619      	mov	r1, r3
 800831a:	4603      	mov	r3, r0
 800831c:	4642      	mov	r2, r8
 800831e:	189b      	adds	r3, r3, r2
 8008320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008324:	464b      	mov	r3, r9
 8008326:	460a      	mov	r2, r1
 8008328:	eb42 0303 	adc.w	r3, r2, r3
 800832c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800833c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008340:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008344:	460b      	mov	r3, r1
 8008346:	18db      	adds	r3, r3, r3
 8008348:	62bb      	str	r3, [r7, #40]	; 0x28
 800834a:	4613      	mov	r3, r2
 800834c:	eb42 0303 	adc.w	r3, r2, r3
 8008350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008356:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800835a:	f7f8 fc8d 	bl	8000c78 <__aeabi_uldivmod>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	4b0d      	ldr	r3, [pc, #52]	; (8008398 <UART_SetConfig+0x2d4>)
 8008364:	fba3 1302 	umull	r1, r3, r3, r2
 8008368:	095b      	lsrs	r3, r3, #5
 800836a:	2164      	movs	r1, #100	; 0x64
 800836c:	fb01 f303 	mul.w	r3, r1, r3
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	3332      	adds	r3, #50	; 0x32
 8008376:	4a08      	ldr	r2, [pc, #32]	; (8008398 <UART_SetConfig+0x2d4>)
 8008378:	fba2 2303 	umull	r2, r3, r2, r3
 800837c:	095b      	lsrs	r3, r3, #5
 800837e:	f003 0207 	and.w	r2, r3, #7
 8008382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4422      	add	r2, r4
 800838a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800838c:	e105      	b.n	800859a <UART_SetConfig+0x4d6>
 800838e:	bf00      	nop
 8008390:	40011000 	.word	0x40011000
 8008394:	40011400 	.word	0x40011400
 8008398:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800839c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083ae:	4642      	mov	r2, r8
 80083b0:	464b      	mov	r3, r9
 80083b2:	1891      	adds	r1, r2, r2
 80083b4:	6239      	str	r1, [r7, #32]
 80083b6:	415b      	adcs	r3, r3
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
 80083ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083be:	4641      	mov	r1, r8
 80083c0:	1854      	adds	r4, r2, r1
 80083c2:	4649      	mov	r1, r9
 80083c4:	eb43 0501 	adc.w	r5, r3, r1
 80083c8:	f04f 0200 	mov.w	r2, #0
 80083cc:	f04f 0300 	mov.w	r3, #0
 80083d0:	00eb      	lsls	r3, r5, #3
 80083d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083d6:	00e2      	lsls	r2, r4, #3
 80083d8:	4614      	mov	r4, r2
 80083da:	461d      	mov	r5, r3
 80083dc:	4643      	mov	r3, r8
 80083de:	18e3      	adds	r3, r4, r3
 80083e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083e4:	464b      	mov	r3, r9
 80083e6:	eb45 0303 	adc.w	r3, r5, r3
 80083ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083fe:	f04f 0200 	mov.w	r2, #0
 8008402:	f04f 0300 	mov.w	r3, #0
 8008406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800840a:	4629      	mov	r1, r5
 800840c:	008b      	lsls	r3, r1, #2
 800840e:	4621      	mov	r1, r4
 8008410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008414:	4621      	mov	r1, r4
 8008416:	008a      	lsls	r2, r1, #2
 8008418:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800841c:	f7f8 fc2c 	bl	8000c78 <__aeabi_uldivmod>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4b60      	ldr	r3, [pc, #384]	; (80085a8 <UART_SetConfig+0x4e4>)
 8008426:	fba3 2302 	umull	r2, r3, r3, r2
 800842a:	095b      	lsrs	r3, r3, #5
 800842c:	011c      	lsls	r4, r3, #4
 800842e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008432:	2200      	movs	r2, #0
 8008434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008438:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800843c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008440:	4642      	mov	r2, r8
 8008442:	464b      	mov	r3, r9
 8008444:	1891      	adds	r1, r2, r2
 8008446:	61b9      	str	r1, [r7, #24]
 8008448:	415b      	adcs	r3, r3
 800844a:	61fb      	str	r3, [r7, #28]
 800844c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008450:	4641      	mov	r1, r8
 8008452:	1851      	adds	r1, r2, r1
 8008454:	6139      	str	r1, [r7, #16]
 8008456:	4649      	mov	r1, r9
 8008458:	414b      	adcs	r3, r1
 800845a:	617b      	str	r3, [r7, #20]
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	f04f 0300 	mov.w	r3, #0
 8008464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008468:	4659      	mov	r1, fp
 800846a:	00cb      	lsls	r3, r1, #3
 800846c:	4651      	mov	r1, sl
 800846e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008472:	4651      	mov	r1, sl
 8008474:	00ca      	lsls	r2, r1, #3
 8008476:	4610      	mov	r0, r2
 8008478:	4619      	mov	r1, r3
 800847a:	4603      	mov	r3, r0
 800847c:	4642      	mov	r2, r8
 800847e:	189b      	adds	r3, r3, r2
 8008480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008484:	464b      	mov	r3, r9
 8008486:	460a      	mov	r2, r1
 8008488:	eb42 0303 	adc.w	r3, r2, r3
 800848c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	67bb      	str	r3, [r7, #120]	; 0x78
 800849a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800849c:	f04f 0200 	mov.w	r2, #0
 80084a0:	f04f 0300 	mov.w	r3, #0
 80084a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084a8:	4649      	mov	r1, r9
 80084aa:	008b      	lsls	r3, r1, #2
 80084ac:	4641      	mov	r1, r8
 80084ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084b2:	4641      	mov	r1, r8
 80084b4:	008a      	lsls	r2, r1, #2
 80084b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084ba:	f7f8 fbdd 	bl	8000c78 <__aeabi_uldivmod>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4b39      	ldr	r3, [pc, #228]	; (80085a8 <UART_SetConfig+0x4e4>)
 80084c4:	fba3 1302 	umull	r1, r3, r3, r2
 80084c8:	095b      	lsrs	r3, r3, #5
 80084ca:	2164      	movs	r1, #100	; 0x64
 80084cc:	fb01 f303 	mul.w	r3, r1, r3
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	3332      	adds	r3, #50	; 0x32
 80084d6:	4a34      	ldr	r2, [pc, #208]	; (80085a8 <UART_SetConfig+0x4e4>)
 80084d8:	fba2 2303 	umull	r2, r3, r2, r3
 80084dc:	095b      	lsrs	r3, r3, #5
 80084de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084e2:	441c      	add	r4, r3
 80084e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084e8:	2200      	movs	r2, #0
 80084ea:	673b      	str	r3, [r7, #112]	; 0x70
 80084ec:	677a      	str	r2, [r7, #116]	; 0x74
 80084ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084f2:	4642      	mov	r2, r8
 80084f4:	464b      	mov	r3, r9
 80084f6:	1891      	adds	r1, r2, r2
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	415b      	adcs	r3, r3
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008502:	4641      	mov	r1, r8
 8008504:	1851      	adds	r1, r2, r1
 8008506:	6039      	str	r1, [r7, #0]
 8008508:	4649      	mov	r1, r9
 800850a:	414b      	adcs	r3, r1
 800850c:	607b      	str	r3, [r7, #4]
 800850e:	f04f 0200 	mov.w	r2, #0
 8008512:	f04f 0300 	mov.w	r3, #0
 8008516:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800851a:	4659      	mov	r1, fp
 800851c:	00cb      	lsls	r3, r1, #3
 800851e:	4651      	mov	r1, sl
 8008520:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008524:	4651      	mov	r1, sl
 8008526:	00ca      	lsls	r2, r1, #3
 8008528:	4610      	mov	r0, r2
 800852a:	4619      	mov	r1, r3
 800852c:	4603      	mov	r3, r0
 800852e:	4642      	mov	r2, r8
 8008530:	189b      	adds	r3, r3, r2
 8008532:	66bb      	str	r3, [r7, #104]	; 0x68
 8008534:	464b      	mov	r3, r9
 8008536:	460a      	mov	r2, r1
 8008538:	eb42 0303 	adc.w	r3, r2, r3
 800853c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800853e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	663b      	str	r3, [r7, #96]	; 0x60
 8008548:	667a      	str	r2, [r7, #100]	; 0x64
 800854a:	f04f 0200 	mov.w	r2, #0
 800854e:	f04f 0300 	mov.w	r3, #0
 8008552:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008556:	4649      	mov	r1, r9
 8008558:	008b      	lsls	r3, r1, #2
 800855a:	4641      	mov	r1, r8
 800855c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008560:	4641      	mov	r1, r8
 8008562:	008a      	lsls	r2, r1, #2
 8008564:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008568:	f7f8 fb86 	bl	8000c78 <__aeabi_uldivmod>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4b0d      	ldr	r3, [pc, #52]	; (80085a8 <UART_SetConfig+0x4e4>)
 8008572:	fba3 1302 	umull	r1, r3, r3, r2
 8008576:	095b      	lsrs	r3, r3, #5
 8008578:	2164      	movs	r1, #100	; 0x64
 800857a:	fb01 f303 	mul.w	r3, r1, r3
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	3332      	adds	r3, #50	; 0x32
 8008584:	4a08      	ldr	r2, [pc, #32]	; (80085a8 <UART_SetConfig+0x4e4>)
 8008586:	fba2 2303 	umull	r2, r3, r2, r3
 800858a:	095b      	lsrs	r3, r3, #5
 800858c:	f003 020f 	and.w	r2, r3, #15
 8008590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4422      	add	r2, r4
 8008598:	609a      	str	r2, [r3, #8]
}
 800859a:	bf00      	nop
 800859c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80085a0:	46bd      	mov	sp, r7
 80085a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085a6:	bf00      	nop
 80085a8:	51eb851f 	.word	0x51eb851f

080085ac <__errno>:
 80085ac:	4b01      	ldr	r3, [pc, #4]	; (80085b4 <__errno+0x8>)
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	20000030 	.word	0x20000030

080085b8 <__libc_init_array>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	4d0d      	ldr	r5, [pc, #52]	; (80085f0 <__libc_init_array+0x38>)
 80085bc:	4c0d      	ldr	r4, [pc, #52]	; (80085f4 <__libc_init_array+0x3c>)
 80085be:	1b64      	subs	r4, r4, r5
 80085c0:	10a4      	asrs	r4, r4, #2
 80085c2:	2600      	movs	r6, #0
 80085c4:	42a6      	cmp	r6, r4
 80085c6:	d109      	bne.n	80085dc <__libc_init_array+0x24>
 80085c8:	4d0b      	ldr	r5, [pc, #44]	; (80085f8 <__libc_init_array+0x40>)
 80085ca:	4c0c      	ldr	r4, [pc, #48]	; (80085fc <__libc_init_array+0x44>)
 80085cc:	f002 ff38 	bl	800b440 <_init>
 80085d0:	1b64      	subs	r4, r4, r5
 80085d2:	10a4      	asrs	r4, r4, #2
 80085d4:	2600      	movs	r6, #0
 80085d6:	42a6      	cmp	r6, r4
 80085d8:	d105      	bne.n	80085e6 <__libc_init_array+0x2e>
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e0:	4798      	blx	r3
 80085e2:	3601      	adds	r6, #1
 80085e4:	e7ee      	b.n	80085c4 <__libc_init_array+0xc>
 80085e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ea:	4798      	blx	r3
 80085ec:	3601      	adds	r6, #1
 80085ee:	e7f2      	b.n	80085d6 <__libc_init_array+0x1e>
 80085f0:	0800b91c 	.word	0x0800b91c
 80085f4:	0800b91c 	.word	0x0800b91c
 80085f8:	0800b91c 	.word	0x0800b91c
 80085fc:	0800b920 	.word	0x0800b920

08008600 <memcpy>:
 8008600:	440a      	add	r2, r1
 8008602:	4291      	cmp	r1, r2
 8008604:	f100 33ff 	add.w	r3, r0, #4294967295
 8008608:	d100      	bne.n	800860c <memcpy+0xc>
 800860a:	4770      	bx	lr
 800860c:	b510      	push	{r4, lr}
 800860e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008616:	4291      	cmp	r1, r2
 8008618:	d1f9      	bne.n	800860e <memcpy+0xe>
 800861a:	bd10      	pop	{r4, pc}

0800861c <memset>:
 800861c:	4402      	add	r2, r0
 800861e:	4603      	mov	r3, r0
 8008620:	4293      	cmp	r3, r2
 8008622:	d100      	bne.n	8008626 <memset+0xa>
 8008624:	4770      	bx	lr
 8008626:	f803 1b01 	strb.w	r1, [r3], #1
 800862a:	e7f9      	b.n	8008620 <memset+0x4>

0800862c <__cvt>:
 800862c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008630:	ec55 4b10 	vmov	r4, r5, d0
 8008634:	2d00      	cmp	r5, #0
 8008636:	460e      	mov	r6, r1
 8008638:	4619      	mov	r1, r3
 800863a:	462b      	mov	r3, r5
 800863c:	bfbb      	ittet	lt
 800863e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008642:	461d      	movlt	r5, r3
 8008644:	2300      	movge	r3, #0
 8008646:	232d      	movlt	r3, #45	; 0x2d
 8008648:	700b      	strb	r3, [r1, #0]
 800864a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800864c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008650:	4691      	mov	r9, r2
 8008652:	f023 0820 	bic.w	r8, r3, #32
 8008656:	bfbc      	itt	lt
 8008658:	4622      	movlt	r2, r4
 800865a:	4614      	movlt	r4, r2
 800865c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008660:	d005      	beq.n	800866e <__cvt+0x42>
 8008662:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008666:	d100      	bne.n	800866a <__cvt+0x3e>
 8008668:	3601      	adds	r6, #1
 800866a:	2102      	movs	r1, #2
 800866c:	e000      	b.n	8008670 <__cvt+0x44>
 800866e:	2103      	movs	r1, #3
 8008670:	ab03      	add	r3, sp, #12
 8008672:	9301      	str	r3, [sp, #4]
 8008674:	ab02      	add	r3, sp, #8
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	ec45 4b10 	vmov	d0, r4, r5
 800867c:	4653      	mov	r3, sl
 800867e:	4632      	mov	r2, r6
 8008680:	f000 fd1e 	bl	80090c0 <_dtoa_r>
 8008684:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008688:	4607      	mov	r7, r0
 800868a:	d102      	bne.n	8008692 <__cvt+0x66>
 800868c:	f019 0f01 	tst.w	r9, #1
 8008690:	d022      	beq.n	80086d8 <__cvt+0xac>
 8008692:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008696:	eb07 0906 	add.w	r9, r7, r6
 800869a:	d110      	bne.n	80086be <__cvt+0x92>
 800869c:	783b      	ldrb	r3, [r7, #0]
 800869e:	2b30      	cmp	r3, #48	; 0x30
 80086a0:	d10a      	bne.n	80086b8 <__cvt+0x8c>
 80086a2:	2200      	movs	r2, #0
 80086a4:	2300      	movs	r3, #0
 80086a6:	4620      	mov	r0, r4
 80086a8:	4629      	mov	r1, r5
 80086aa:	f7f8 fa25 	bl	8000af8 <__aeabi_dcmpeq>
 80086ae:	b918      	cbnz	r0, 80086b8 <__cvt+0x8c>
 80086b0:	f1c6 0601 	rsb	r6, r6, #1
 80086b4:	f8ca 6000 	str.w	r6, [sl]
 80086b8:	f8da 3000 	ldr.w	r3, [sl]
 80086bc:	4499      	add	r9, r3
 80086be:	2200      	movs	r2, #0
 80086c0:	2300      	movs	r3, #0
 80086c2:	4620      	mov	r0, r4
 80086c4:	4629      	mov	r1, r5
 80086c6:	f7f8 fa17 	bl	8000af8 <__aeabi_dcmpeq>
 80086ca:	b108      	cbz	r0, 80086d0 <__cvt+0xa4>
 80086cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80086d0:	2230      	movs	r2, #48	; 0x30
 80086d2:	9b03      	ldr	r3, [sp, #12]
 80086d4:	454b      	cmp	r3, r9
 80086d6:	d307      	bcc.n	80086e8 <__cvt+0xbc>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086dc:	1bdb      	subs	r3, r3, r7
 80086de:	4638      	mov	r0, r7
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	b004      	add	sp, #16
 80086e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e8:	1c59      	adds	r1, r3, #1
 80086ea:	9103      	str	r1, [sp, #12]
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	e7f0      	b.n	80086d2 <__cvt+0xa6>

080086f0 <__exponent>:
 80086f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086f2:	4603      	mov	r3, r0
 80086f4:	2900      	cmp	r1, #0
 80086f6:	bfb8      	it	lt
 80086f8:	4249      	neglt	r1, r1
 80086fa:	f803 2b02 	strb.w	r2, [r3], #2
 80086fe:	bfb4      	ite	lt
 8008700:	222d      	movlt	r2, #45	; 0x2d
 8008702:	222b      	movge	r2, #43	; 0x2b
 8008704:	2909      	cmp	r1, #9
 8008706:	7042      	strb	r2, [r0, #1]
 8008708:	dd2a      	ble.n	8008760 <__exponent+0x70>
 800870a:	f10d 0407 	add.w	r4, sp, #7
 800870e:	46a4      	mov	ip, r4
 8008710:	270a      	movs	r7, #10
 8008712:	46a6      	mov	lr, r4
 8008714:	460a      	mov	r2, r1
 8008716:	fb91 f6f7 	sdiv	r6, r1, r7
 800871a:	fb07 1516 	mls	r5, r7, r6, r1
 800871e:	3530      	adds	r5, #48	; 0x30
 8008720:	2a63      	cmp	r2, #99	; 0x63
 8008722:	f104 34ff 	add.w	r4, r4, #4294967295
 8008726:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800872a:	4631      	mov	r1, r6
 800872c:	dcf1      	bgt.n	8008712 <__exponent+0x22>
 800872e:	3130      	adds	r1, #48	; 0x30
 8008730:	f1ae 0502 	sub.w	r5, lr, #2
 8008734:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008738:	1c44      	adds	r4, r0, #1
 800873a:	4629      	mov	r1, r5
 800873c:	4561      	cmp	r1, ip
 800873e:	d30a      	bcc.n	8008756 <__exponent+0x66>
 8008740:	f10d 0209 	add.w	r2, sp, #9
 8008744:	eba2 020e 	sub.w	r2, r2, lr
 8008748:	4565      	cmp	r5, ip
 800874a:	bf88      	it	hi
 800874c:	2200      	movhi	r2, #0
 800874e:	4413      	add	r3, r2
 8008750:	1a18      	subs	r0, r3, r0
 8008752:	b003      	add	sp, #12
 8008754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800875a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800875e:	e7ed      	b.n	800873c <__exponent+0x4c>
 8008760:	2330      	movs	r3, #48	; 0x30
 8008762:	3130      	adds	r1, #48	; 0x30
 8008764:	7083      	strb	r3, [r0, #2]
 8008766:	70c1      	strb	r1, [r0, #3]
 8008768:	1d03      	adds	r3, r0, #4
 800876a:	e7f1      	b.n	8008750 <__exponent+0x60>

0800876c <_printf_float>:
 800876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	ed2d 8b02 	vpush	{d8}
 8008774:	b08d      	sub	sp, #52	; 0x34
 8008776:	460c      	mov	r4, r1
 8008778:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800877c:	4616      	mov	r6, r2
 800877e:	461f      	mov	r7, r3
 8008780:	4605      	mov	r5, r0
 8008782:	f001 fb81 	bl	8009e88 <_localeconv_r>
 8008786:	f8d0 a000 	ldr.w	sl, [r0]
 800878a:	4650      	mov	r0, sl
 800878c:	f7f7 fd32 	bl	80001f4 <strlen>
 8008790:	2300      	movs	r3, #0
 8008792:	930a      	str	r3, [sp, #40]	; 0x28
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	9305      	str	r3, [sp, #20]
 8008798:	f8d8 3000 	ldr.w	r3, [r8]
 800879c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087a0:	3307      	adds	r3, #7
 80087a2:	f023 0307 	bic.w	r3, r3, #7
 80087a6:	f103 0208 	add.w	r2, r3, #8
 80087aa:	f8c8 2000 	str.w	r2, [r8]
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087be:	9307      	str	r3, [sp, #28]
 80087c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80087c4:	ee08 0a10 	vmov	s16, r0
 80087c8:	4b9f      	ldr	r3, [pc, #636]	; (8008a48 <_printf_float+0x2dc>)
 80087ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087ce:	f04f 32ff 	mov.w	r2, #4294967295
 80087d2:	f7f8 f9c3 	bl	8000b5c <__aeabi_dcmpun>
 80087d6:	bb88      	cbnz	r0, 800883c <_printf_float+0xd0>
 80087d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087dc:	4b9a      	ldr	r3, [pc, #616]	; (8008a48 <_printf_float+0x2dc>)
 80087de:	f04f 32ff 	mov.w	r2, #4294967295
 80087e2:	f7f8 f99d 	bl	8000b20 <__aeabi_dcmple>
 80087e6:	bb48      	cbnz	r0, 800883c <_printf_float+0xd0>
 80087e8:	2200      	movs	r2, #0
 80087ea:	2300      	movs	r3, #0
 80087ec:	4640      	mov	r0, r8
 80087ee:	4649      	mov	r1, r9
 80087f0:	f7f8 f98c 	bl	8000b0c <__aeabi_dcmplt>
 80087f4:	b110      	cbz	r0, 80087fc <_printf_float+0x90>
 80087f6:	232d      	movs	r3, #45	; 0x2d
 80087f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087fc:	4b93      	ldr	r3, [pc, #588]	; (8008a4c <_printf_float+0x2e0>)
 80087fe:	4894      	ldr	r0, [pc, #592]	; (8008a50 <_printf_float+0x2e4>)
 8008800:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008804:	bf94      	ite	ls
 8008806:	4698      	movls	r8, r3
 8008808:	4680      	movhi	r8, r0
 800880a:	2303      	movs	r3, #3
 800880c:	6123      	str	r3, [r4, #16]
 800880e:	9b05      	ldr	r3, [sp, #20]
 8008810:	f023 0204 	bic.w	r2, r3, #4
 8008814:	6022      	str	r2, [r4, #0]
 8008816:	f04f 0900 	mov.w	r9, #0
 800881a:	9700      	str	r7, [sp, #0]
 800881c:	4633      	mov	r3, r6
 800881e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008820:	4621      	mov	r1, r4
 8008822:	4628      	mov	r0, r5
 8008824:	f000 f9d8 	bl	8008bd8 <_printf_common>
 8008828:	3001      	adds	r0, #1
 800882a:	f040 8090 	bne.w	800894e <_printf_float+0x1e2>
 800882e:	f04f 30ff 	mov.w	r0, #4294967295
 8008832:	b00d      	add	sp, #52	; 0x34
 8008834:	ecbd 8b02 	vpop	{d8}
 8008838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883c:	4642      	mov	r2, r8
 800883e:	464b      	mov	r3, r9
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	f7f8 f98a 	bl	8000b5c <__aeabi_dcmpun>
 8008848:	b140      	cbz	r0, 800885c <_printf_float+0xf0>
 800884a:	464b      	mov	r3, r9
 800884c:	2b00      	cmp	r3, #0
 800884e:	bfbc      	itt	lt
 8008850:	232d      	movlt	r3, #45	; 0x2d
 8008852:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008856:	487f      	ldr	r0, [pc, #508]	; (8008a54 <_printf_float+0x2e8>)
 8008858:	4b7f      	ldr	r3, [pc, #508]	; (8008a58 <_printf_float+0x2ec>)
 800885a:	e7d1      	b.n	8008800 <_printf_float+0x94>
 800885c:	6863      	ldr	r3, [r4, #4]
 800885e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008862:	9206      	str	r2, [sp, #24]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	d13f      	bne.n	80088e8 <_printf_float+0x17c>
 8008868:	2306      	movs	r3, #6
 800886a:	6063      	str	r3, [r4, #4]
 800886c:	9b05      	ldr	r3, [sp, #20]
 800886e:	6861      	ldr	r1, [r4, #4]
 8008870:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008874:	2300      	movs	r3, #0
 8008876:	9303      	str	r3, [sp, #12]
 8008878:	ab0a      	add	r3, sp, #40	; 0x28
 800887a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800887e:	ab09      	add	r3, sp, #36	; 0x24
 8008880:	ec49 8b10 	vmov	d0, r8, r9
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	6022      	str	r2, [r4, #0]
 8008888:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800888c:	4628      	mov	r0, r5
 800888e:	f7ff fecd 	bl	800862c <__cvt>
 8008892:	9b06      	ldr	r3, [sp, #24]
 8008894:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008896:	2b47      	cmp	r3, #71	; 0x47
 8008898:	4680      	mov	r8, r0
 800889a:	d108      	bne.n	80088ae <_printf_float+0x142>
 800889c:	1cc8      	adds	r0, r1, #3
 800889e:	db02      	blt.n	80088a6 <_printf_float+0x13a>
 80088a0:	6863      	ldr	r3, [r4, #4]
 80088a2:	4299      	cmp	r1, r3
 80088a4:	dd41      	ble.n	800892a <_printf_float+0x1be>
 80088a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80088aa:	fa5f fb8b 	uxtb.w	fp, fp
 80088ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088b2:	d820      	bhi.n	80088f6 <_printf_float+0x18a>
 80088b4:	3901      	subs	r1, #1
 80088b6:	465a      	mov	r2, fp
 80088b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088bc:	9109      	str	r1, [sp, #36]	; 0x24
 80088be:	f7ff ff17 	bl	80086f0 <__exponent>
 80088c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088c4:	1813      	adds	r3, r2, r0
 80088c6:	2a01      	cmp	r2, #1
 80088c8:	4681      	mov	r9, r0
 80088ca:	6123      	str	r3, [r4, #16]
 80088cc:	dc02      	bgt.n	80088d4 <_printf_float+0x168>
 80088ce:	6822      	ldr	r2, [r4, #0]
 80088d0:	07d2      	lsls	r2, r2, #31
 80088d2:	d501      	bpl.n	80088d8 <_printf_float+0x16c>
 80088d4:	3301      	adds	r3, #1
 80088d6:	6123      	str	r3, [r4, #16]
 80088d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d09c      	beq.n	800881a <_printf_float+0xae>
 80088e0:	232d      	movs	r3, #45	; 0x2d
 80088e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088e6:	e798      	b.n	800881a <_printf_float+0xae>
 80088e8:	9a06      	ldr	r2, [sp, #24]
 80088ea:	2a47      	cmp	r2, #71	; 0x47
 80088ec:	d1be      	bne.n	800886c <_printf_float+0x100>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1bc      	bne.n	800886c <_printf_float+0x100>
 80088f2:	2301      	movs	r3, #1
 80088f4:	e7b9      	b.n	800886a <_printf_float+0xfe>
 80088f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80088fa:	d118      	bne.n	800892e <_printf_float+0x1c2>
 80088fc:	2900      	cmp	r1, #0
 80088fe:	6863      	ldr	r3, [r4, #4]
 8008900:	dd0b      	ble.n	800891a <_printf_float+0x1ae>
 8008902:	6121      	str	r1, [r4, #16]
 8008904:	b913      	cbnz	r3, 800890c <_printf_float+0x1a0>
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	07d0      	lsls	r0, r2, #31
 800890a:	d502      	bpl.n	8008912 <_printf_float+0x1a6>
 800890c:	3301      	adds	r3, #1
 800890e:	440b      	add	r3, r1
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	65a1      	str	r1, [r4, #88]	; 0x58
 8008914:	f04f 0900 	mov.w	r9, #0
 8008918:	e7de      	b.n	80088d8 <_printf_float+0x16c>
 800891a:	b913      	cbnz	r3, 8008922 <_printf_float+0x1b6>
 800891c:	6822      	ldr	r2, [r4, #0]
 800891e:	07d2      	lsls	r2, r2, #31
 8008920:	d501      	bpl.n	8008926 <_printf_float+0x1ba>
 8008922:	3302      	adds	r3, #2
 8008924:	e7f4      	b.n	8008910 <_printf_float+0x1a4>
 8008926:	2301      	movs	r3, #1
 8008928:	e7f2      	b.n	8008910 <_printf_float+0x1a4>
 800892a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800892e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008930:	4299      	cmp	r1, r3
 8008932:	db05      	blt.n	8008940 <_printf_float+0x1d4>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	6121      	str	r1, [r4, #16]
 8008938:	07d8      	lsls	r0, r3, #31
 800893a:	d5ea      	bpl.n	8008912 <_printf_float+0x1a6>
 800893c:	1c4b      	adds	r3, r1, #1
 800893e:	e7e7      	b.n	8008910 <_printf_float+0x1a4>
 8008940:	2900      	cmp	r1, #0
 8008942:	bfd4      	ite	le
 8008944:	f1c1 0202 	rsble	r2, r1, #2
 8008948:	2201      	movgt	r2, #1
 800894a:	4413      	add	r3, r2
 800894c:	e7e0      	b.n	8008910 <_printf_float+0x1a4>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	055a      	lsls	r2, r3, #21
 8008952:	d407      	bmi.n	8008964 <_printf_float+0x1f8>
 8008954:	6923      	ldr	r3, [r4, #16]
 8008956:	4642      	mov	r2, r8
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	d12c      	bne.n	80089bc <_printf_float+0x250>
 8008962:	e764      	b.n	800882e <_printf_float+0xc2>
 8008964:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008968:	f240 80e0 	bls.w	8008b2c <_printf_float+0x3c0>
 800896c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008970:	2200      	movs	r2, #0
 8008972:	2300      	movs	r3, #0
 8008974:	f7f8 f8c0 	bl	8000af8 <__aeabi_dcmpeq>
 8008978:	2800      	cmp	r0, #0
 800897a:	d034      	beq.n	80089e6 <_printf_float+0x27a>
 800897c:	4a37      	ldr	r2, [pc, #220]	; (8008a5c <_printf_float+0x2f0>)
 800897e:	2301      	movs	r3, #1
 8008980:	4631      	mov	r1, r6
 8008982:	4628      	mov	r0, r5
 8008984:	47b8      	blx	r7
 8008986:	3001      	adds	r0, #1
 8008988:	f43f af51 	beq.w	800882e <_printf_float+0xc2>
 800898c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008990:	429a      	cmp	r2, r3
 8008992:	db02      	blt.n	800899a <_printf_float+0x22e>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	07d8      	lsls	r0, r3, #31
 8008998:	d510      	bpl.n	80089bc <_printf_float+0x250>
 800899a:	ee18 3a10 	vmov	r3, s16
 800899e:	4652      	mov	r2, sl
 80089a0:	4631      	mov	r1, r6
 80089a2:	4628      	mov	r0, r5
 80089a4:	47b8      	blx	r7
 80089a6:	3001      	adds	r0, #1
 80089a8:	f43f af41 	beq.w	800882e <_printf_float+0xc2>
 80089ac:	f04f 0800 	mov.w	r8, #0
 80089b0:	f104 091a 	add.w	r9, r4, #26
 80089b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b6:	3b01      	subs	r3, #1
 80089b8:	4543      	cmp	r3, r8
 80089ba:	dc09      	bgt.n	80089d0 <_printf_float+0x264>
 80089bc:	6823      	ldr	r3, [r4, #0]
 80089be:	079b      	lsls	r3, r3, #30
 80089c0:	f100 8105 	bmi.w	8008bce <_printf_float+0x462>
 80089c4:	68e0      	ldr	r0, [r4, #12]
 80089c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089c8:	4298      	cmp	r0, r3
 80089ca:	bfb8      	it	lt
 80089cc:	4618      	movlt	r0, r3
 80089ce:	e730      	b.n	8008832 <_printf_float+0xc6>
 80089d0:	2301      	movs	r3, #1
 80089d2:	464a      	mov	r2, r9
 80089d4:	4631      	mov	r1, r6
 80089d6:	4628      	mov	r0, r5
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	f43f af27 	beq.w	800882e <_printf_float+0xc2>
 80089e0:	f108 0801 	add.w	r8, r8, #1
 80089e4:	e7e6      	b.n	80089b4 <_printf_float+0x248>
 80089e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	dc39      	bgt.n	8008a60 <_printf_float+0x2f4>
 80089ec:	4a1b      	ldr	r2, [pc, #108]	; (8008a5c <_printf_float+0x2f0>)
 80089ee:	2301      	movs	r3, #1
 80089f0:	4631      	mov	r1, r6
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b8      	blx	r7
 80089f6:	3001      	adds	r0, #1
 80089f8:	f43f af19 	beq.w	800882e <_printf_float+0xc2>
 80089fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a00:	4313      	orrs	r3, r2
 8008a02:	d102      	bne.n	8008a0a <_printf_float+0x29e>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	07d9      	lsls	r1, r3, #31
 8008a08:	d5d8      	bpl.n	80089bc <_printf_float+0x250>
 8008a0a:	ee18 3a10 	vmov	r3, s16
 8008a0e:	4652      	mov	r2, sl
 8008a10:	4631      	mov	r1, r6
 8008a12:	4628      	mov	r0, r5
 8008a14:	47b8      	blx	r7
 8008a16:	3001      	adds	r0, #1
 8008a18:	f43f af09 	beq.w	800882e <_printf_float+0xc2>
 8008a1c:	f04f 0900 	mov.w	r9, #0
 8008a20:	f104 0a1a 	add.w	sl, r4, #26
 8008a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a26:	425b      	negs	r3, r3
 8008a28:	454b      	cmp	r3, r9
 8008a2a:	dc01      	bgt.n	8008a30 <_printf_float+0x2c4>
 8008a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a2e:	e792      	b.n	8008956 <_printf_float+0x1ea>
 8008a30:	2301      	movs	r3, #1
 8008a32:	4652      	mov	r2, sl
 8008a34:	4631      	mov	r1, r6
 8008a36:	4628      	mov	r0, r5
 8008a38:	47b8      	blx	r7
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	f43f aef7 	beq.w	800882e <_printf_float+0xc2>
 8008a40:	f109 0901 	add.w	r9, r9, #1
 8008a44:	e7ee      	b.n	8008a24 <_printf_float+0x2b8>
 8008a46:	bf00      	nop
 8008a48:	7fefffff 	.word	0x7fefffff
 8008a4c:	0800b540 	.word	0x0800b540
 8008a50:	0800b544 	.word	0x0800b544
 8008a54:	0800b54c 	.word	0x0800b54c
 8008a58:	0800b548 	.word	0x0800b548
 8008a5c:	0800b550 	.word	0x0800b550
 8008a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a64:	429a      	cmp	r2, r3
 8008a66:	bfa8      	it	ge
 8008a68:	461a      	movge	r2, r3
 8008a6a:	2a00      	cmp	r2, #0
 8008a6c:	4691      	mov	r9, r2
 8008a6e:	dc37      	bgt.n	8008ae0 <_printf_float+0x374>
 8008a70:	f04f 0b00 	mov.w	fp, #0
 8008a74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a78:	f104 021a 	add.w	r2, r4, #26
 8008a7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a7e:	9305      	str	r3, [sp, #20]
 8008a80:	eba3 0309 	sub.w	r3, r3, r9
 8008a84:	455b      	cmp	r3, fp
 8008a86:	dc33      	bgt.n	8008af0 <_printf_float+0x384>
 8008a88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	db3b      	blt.n	8008b08 <_printf_float+0x39c>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	07da      	lsls	r2, r3, #31
 8008a94:	d438      	bmi.n	8008b08 <_printf_float+0x39c>
 8008a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a98:	9a05      	ldr	r2, [sp, #20]
 8008a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a9c:	1a9a      	subs	r2, r3, r2
 8008a9e:	eba3 0901 	sub.w	r9, r3, r1
 8008aa2:	4591      	cmp	r9, r2
 8008aa4:	bfa8      	it	ge
 8008aa6:	4691      	movge	r9, r2
 8008aa8:	f1b9 0f00 	cmp.w	r9, #0
 8008aac:	dc35      	bgt.n	8008b1a <_printf_float+0x3ae>
 8008aae:	f04f 0800 	mov.w	r8, #0
 8008ab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ab6:	f104 0a1a 	add.w	sl, r4, #26
 8008aba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	eba3 0309 	sub.w	r3, r3, r9
 8008ac4:	4543      	cmp	r3, r8
 8008ac6:	f77f af79 	ble.w	80089bc <_printf_float+0x250>
 8008aca:	2301      	movs	r3, #1
 8008acc:	4652      	mov	r2, sl
 8008ace:	4631      	mov	r1, r6
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	47b8      	blx	r7
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	f43f aeaa 	beq.w	800882e <_printf_float+0xc2>
 8008ada:	f108 0801 	add.w	r8, r8, #1
 8008ade:	e7ec      	b.n	8008aba <_printf_float+0x34e>
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4642      	mov	r2, r8
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	d1c0      	bne.n	8008a70 <_printf_float+0x304>
 8008aee:	e69e      	b.n	800882e <_printf_float+0xc2>
 8008af0:	2301      	movs	r3, #1
 8008af2:	4631      	mov	r1, r6
 8008af4:	4628      	mov	r0, r5
 8008af6:	9205      	str	r2, [sp, #20]
 8008af8:	47b8      	blx	r7
 8008afa:	3001      	adds	r0, #1
 8008afc:	f43f ae97 	beq.w	800882e <_printf_float+0xc2>
 8008b00:	9a05      	ldr	r2, [sp, #20]
 8008b02:	f10b 0b01 	add.w	fp, fp, #1
 8008b06:	e7b9      	b.n	8008a7c <_printf_float+0x310>
 8008b08:	ee18 3a10 	vmov	r3, s16
 8008b0c:	4652      	mov	r2, sl
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4628      	mov	r0, r5
 8008b12:	47b8      	blx	r7
 8008b14:	3001      	adds	r0, #1
 8008b16:	d1be      	bne.n	8008a96 <_printf_float+0x32a>
 8008b18:	e689      	b.n	800882e <_printf_float+0xc2>
 8008b1a:	9a05      	ldr	r2, [sp, #20]
 8008b1c:	464b      	mov	r3, r9
 8008b1e:	4442      	add	r2, r8
 8008b20:	4631      	mov	r1, r6
 8008b22:	4628      	mov	r0, r5
 8008b24:	47b8      	blx	r7
 8008b26:	3001      	adds	r0, #1
 8008b28:	d1c1      	bne.n	8008aae <_printf_float+0x342>
 8008b2a:	e680      	b.n	800882e <_printf_float+0xc2>
 8008b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b2e:	2a01      	cmp	r2, #1
 8008b30:	dc01      	bgt.n	8008b36 <_printf_float+0x3ca>
 8008b32:	07db      	lsls	r3, r3, #31
 8008b34:	d538      	bpl.n	8008ba8 <_printf_float+0x43c>
 8008b36:	2301      	movs	r3, #1
 8008b38:	4642      	mov	r2, r8
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	47b8      	blx	r7
 8008b40:	3001      	adds	r0, #1
 8008b42:	f43f ae74 	beq.w	800882e <_printf_float+0xc2>
 8008b46:	ee18 3a10 	vmov	r3, s16
 8008b4a:	4652      	mov	r2, sl
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4628      	mov	r0, r5
 8008b50:	47b8      	blx	r7
 8008b52:	3001      	adds	r0, #1
 8008b54:	f43f ae6b 	beq.w	800882e <_printf_float+0xc2>
 8008b58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2300      	movs	r3, #0
 8008b60:	f7f7 ffca 	bl	8000af8 <__aeabi_dcmpeq>
 8008b64:	b9d8      	cbnz	r0, 8008b9e <_printf_float+0x432>
 8008b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b68:	f108 0201 	add.w	r2, r8, #1
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4628      	mov	r0, r5
 8008b72:	47b8      	blx	r7
 8008b74:	3001      	adds	r0, #1
 8008b76:	d10e      	bne.n	8008b96 <_printf_float+0x42a>
 8008b78:	e659      	b.n	800882e <_printf_float+0xc2>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4652      	mov	r2, sl
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b8      	blx	r7
 8008b84:	3001      	adds	r0, #1
 8008b86:	f43f ae52 	beq.w	800882e <_printf_float+0xc2>
 8008b8a:	f108 0801 	add.w	r8, r8, #1
 8008b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b90:	3b01      	subs	r3, #1
 8008b92:	4543      	cmp	r3, r8
 8008b94:	dcf1      	bgt.n	8008b7a <_printf_float+0x40e>
 8008b96:	464b      	mov	r3, r9
 8008b98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b9c:	e6dc      	b.n	8008958 <_printf_float+0x1ec>
 8008b9e:	f04f 0800 	mov.w	r8, #0
 8008ba2:	f104 0a1a 	add.w	sl, r4, #26
 8008ba6:	e7f2      	b.n	8008b8e <_printf_float+0x422>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	4642      	mov	r2, r8
 8008bac:	e7df      	b.n	8008b6e <_printf_float+0x402>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	464a      	mov	r2, r9
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	47b8      	blx	r7
 8008bb8:	3001      	adds	r0, #1
 8008bba:	f43f ae38 	beq.w	800882e <_printf_float+0xc2>
 8008bbe:	f108 0801 	add.w	r8, r8, #1
 8008bc2:	68e3      	ldr	r3, [r4, #12]
 8008bc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bc6:	1a5b      	subs	r3, r3, r1
 8008bc8:	4543      	cmp	r3, r8
 8008bca:	dcf0      	bgt.n	8008bae <_printf_float+0x442>
 8008bcc:	e6fa      	b.n	80089c4 <_printf_float+0x258>
 8008bce:	f04f 0800 	mov.w	r8, #0
 8008bd2:	f104 0919 	add.w	r9, r4, #25
 8008bd6:	e7f4      	b.n	8008bc2 <_printf_float+0x456>

08008bd8 <_printf_common>:
 8008bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bdc:	4616      	mov	r6, r2
 8008bde:	4699      	mov	r9, r3
 8008be0:	688a      	ldr	r2, [r1, #8]
 8008be2:	690b      	ldr	r3, [r1, #16]
 8008be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008be8:	4293      	cmp	r3, r2
 8008bea:	bfb8      	it	lt
 8008bec:	4613      	movlt	r3, r2
 8008bee:	6033      	str	r3, [r6, #0]
 8008bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	b10a      	cbz	r2, 8008bfe <_printf_common+0x26>
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	6033      	str	r3, [r6, #0]
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	0699      	lsls	r1, r3, #26
 8008c02:	bf42      	ittt	mi
 8008c04:	6833      	ldrmi	r3, [r6, #0]
 8008c06:	3302      	addmi	r3, #2
 8008c08:	6033      	strmi	r3, [r6, #0]
 8008c0a:	6825      	ldr	r5, [r4, #0]
 8008c0c:	f015 0506 	ands.w	r5, r5, #6
 8008c10:	d106      	bne.n	8008c20 <_printf_common+0x48>
 8008c12:	f104 0a19 	add.w	sl, r4, #25
 8008c16:	68e3      	ldr	r3, [r4, #12]
 8008c18:	6832      	ldr	r2, [r6, #0]
 8008c1a:	1a9b      	subs	r3, r3, r2
 8008c1c:	42ab      	cmp	r3, r5
 8008c1e:	dc26      	bgt.n	8008c6e <_printf_common+0x96>
 8008c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c24:	1e13      	subs	r3, r2, #0
 8008c26:	6822      	ldr	r2, [r4, #0]
 8008c28:	bf18      	it	ne
 8008c2a:	2301      	movne	r3, #1
 8008c2c:	0692      	lsls	r2, r2, #26
 8008c2e:	d42b      	bmi.n	8008c88 <_printf_common+0xb0>
 8008c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c34:	4649      	mov	r1, r9
 8008c36:	4638      	mov	r0, r7
 8008c38:	47c0      	blx	r8
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	d01e      	beq.n	8008c7c <_printf_common+0xa4>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	68e5      	ldr	r5, [r4, #12]
 8008c42:	6832      	ldr	r2, [r6, #0]
 8008c44:	f003 0306 	and.w	r3, r3, #6
 8008c48:	2b04      	cmp	r3, #4
 8008c4a:	bf08      	it	eq
 8008c4c:	1aad      	subeq	r5, r5, r2
 8008c4e:	68a3      	ldr	r3, [r4, #8]
 8008c50:	6922      	ldr	r2, [r4, #16]
 8008c52:	bf0c      	ite	eq
 8008c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c58:	2500      	movne	r5, #0
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	bfc4      	itt	gt
 8008c5e:	1a9b      	subgt	r3, r3, r2
 8008c60:	18ed      	addgt	r5, r5, r3
 8008c62:	2600      	movs	r6, #0
 8008c64:	341a      	adds	r4, #26
 8008c66:	42b5      	cmp	r5, r6
 8008c68:	d11a      	bne.n	8008ca0 <_printf_common+0xc8>
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e008      	b.n	8008c80 <_printf_common+0xa8>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	4652      	mov	r2, sl
 8008c72:	4649      	mov	r1, r9
 8008c74:	4638      	mov	r0, r7
 8008c76:	47c0      	blx	r8
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d103      	bne.n	8008c84 <_printf_common+0xac>
 8008c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c84:	3501      	adds	r5, #1
 8008c86:	e7c6      	b.n	8008c16 <_printf_common+0x3e>
 8008c88:	18e1      	adds	r1, r4, r3
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	2030      	movs	r0, #48	; 0x30
 8008c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c92:	4422      	add	r2, r4
 8008c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c9c:	3302      	adds	r3, #2
 8008c9e:	e7c7      	b.n	8008c30 <_printf_common+0x58>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	4638      	mov	r0, r7
 8008ca8:	47c0      	blx	r8
 8008caa:	3001      	adds	r0, #1
 8008cac:	d0e6      	beq.n	8008c7c <_printf_common+0xa4>
 8008cae:	3601      	adds	r6, #1
 8008cb0:	e7d9      	b.n	8008c66 <_printf_common+0x8e>
	...

08008cb4 <_printf_i>:
 8008cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	7e0f      	ldrb	r7, [r1, #24]
 8008cba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cbc:	2f78      	cmp	r7, #120	; 0x78
 8008cbe:	4691      	mov	r9, r2
 8008cc0:	4680      	mov	r8, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	469a      	mov	sl, r3
 8008cc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cca:	d807      	bhi.n	8008cdc <_printf_i+0x28>
 8008ccc:	2f62      	cmp	r7, #98	; 0x62
 8008cce:	d80a      	bhi.n	8008ce6 <_printf_i+0x32>
 8008cd0:	2f00      	cmp	r7, #0
 8008cd2:	f000 80d8 	beq.w	8008e86 <_printf_i+0x1d2>
 8008cd6:	2f58      	cmp	r7, #88	; 0x58
 8008cd8:	f000 80a3 	beq.w	8008e22 <_printf_i+0x16e>
 8008cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ce4:	e03a      	b.n	8008d5c <_printf_i+0xa8>
 8008ce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cea:	2b15      	cmp	r3, #21
 8008cec:	d8f6      	bhi.n	8008cdc <_printf_i+0x28>
 8008cee:	a101      	add	r1, pc, #4	; (adr r1, 8008cf4 <_printf_i+0x40>)
 8008cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cf4:	08008d4d 	.word	0x08008d4d
 8008cf8:	08008d61 	.word	0x08008d61
 8008cfc:	08008cdd 	.word	0x08008cdd
 8008d00:	08008cdd 	.word	0x08008cdd
 8008d04:	08008cdd 	.word	0x08008cdd
 8008d08:	08008cdd 	.word	0x08008cdd
 8008d0c:	08008d61 	.word	0x08008d61
 8008d10:	08008cdd 	.word	0x08008cdd
 8008d14:	08008cdd 	.word	0x08008cdd
 8008d18:	08008cdd 	.word	0x08008cdd
 8008d1c:	08008cdd 	.word	0x08008cdd
 8008d20:	08008e6d 	.word	0x08008e6d
 8008d24:	08008d91 	.word	0x08008d91
 8008d28:	08008e4f 	.word	0x08008e4f
 8008d2c:	08008cdd 	.word	0x08008cdd
 8008d30:	08008cdd 	.word	0x08008cdd
 8008d34:	08008e8f 	.word	0x08008e8f
 8008d38:	08008cdd 	.word	0x08008cdd
 8008d3c:	08008d91 	.word	0x08008d91
 8008d40:	08008cdd 	.word	0x08008cdd
 8008d44:	08008cdd 	.word	0x08008cdd
 8008d48:	08008e57 	.word	0x08008e57
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	1d1a      	adds	r2, r3, #4
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	602a      	str	r2, [r5, #0]
 8008d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e0a3      	b.n	8008ea8 <_printf_i+0x1f4>
 8008d60:	6820      	ldr	r0, [r4, #0]
 8008d62:	6829      	ldr	r1, [r5, #0]
 8008d64:	0606      	lsls	r6, r0, #24
 8008d66:	f101 0304 	add.w	r3, r1, #4
 8008d6a:	d50a      	bpl.n	8008d82 <_printf_i+0xce>
 8008d6c:	680e      	ldr	r6, [r1, #0]
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	2e00      	cmp	r6, #0
 8008d72:	da03      	bge.n	8008d7c <_printf_i+0xc8>
 8008d74:	232d      	movs	r3, #45	; 0x2d
 8008d76:	4276      	negs	r6, r6
 8008d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d7c:	485e      	ldr	r0, [pc, #376]	; (8008ef8 <_printf_i+0x244>)
 8008d7e:	230a      	movs	r3, #10
 8008d80:	e019      	b.n	8008db6 <_printf_i+0x102>
 8008d82:	680e      	ldr	r6, [r1, #0]
 8008d84:	602b      	str	r3, [r5, #0]
 8008d86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d8a:	bf18      	it	ne
 8008d8c:	b236      	sxthne	r6, r6
 8008d8e:	e7ef      	b.n	8008d70 <_printf_i+0xbc>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	6820      	ldr	r0, [r4, #0]
 8008d94:	1d19      	adds	r1, r3, #4
 8008d96:	6029      	str	r1, [r5, #0]
 8008d98:	0601      	lsls	r1, r0, #24
 8008d9a:	d501      	bpl.n	8008da0 <_printf_i+0xec>
 8008d9c:	681e      	ldr	r6, [r3, #0]
 8008d9e:	e002      	b.n	8008da6 <_printf_i+0xf2>
 8008da0:	0646      	lsls	r6, r0, #25
 8008da2:	d5fb      	bpl.n	8008d9c <_printf_i+0xe8>
 8008da4:	881e      	ldrh	r6, [r3, #0]
 8008da6:	4854      	ldr	r0, [pc, #336]	; (8008ef8 <_printf_i+0x244>)
 8008da8:	2f6f      	cmp	r7, #111	; 0x6f
 8008daa:	bf0c      	ite	eq
 8008dac:	2308      	moveq	r3, #8
 8008dae:	230a      	movne	r3, #10
 8008db0:	2100      	movs	r1, #0
 8008db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008db6:	6865      	ldr	r5, [r4, #4]
 8008db8:	60a5      	str	r5, [r4, #8]
 8008dba:	2d00      	cmp	r5, #0
 8008dbc:	bfa2      	ittt	ge
 8008dbe:	6821      	ldrge	r1, [r4, #0]
 8008dc0:	f021 0104 	bicge.w	r1, r1, #4
 8008dc4:	6021      	strge	r1, [r4, #0]
 8008dc6:	b90e      	cbnz	r6, 8008dcc <_printf_i+0x118>
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	d04d      	beq.n	8008e68 <_printf_i+0x1b4>
 8008dcc:	4615      	mov	r5, r2
 8008dce:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dd2:	fb03 6711 	mls	r7, r3, r1, r6
 8008dd6:	5dc7      	ldrb	r7, [r0, r7]
 8008dd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ddc:	4637      	mov	r7, r6
 8008dde:	42bb      	cmp	r3, r7
 8008de0:	460e      	mov	r6, r1
 8008de2:	d9f4      	bls.n	8008dce <_printf_i+0x11a>
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d10b      	bne.n	8008e00 <_printf_i+0x14c>
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	07de      	lsls	r6, r3, #31
 8008dec:	d508      	bpl.n	8008e00 <_printf_i+0x14c>
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	6861      	ldr	r1, [r4, #4]
 8008df2:	4299      	cmp	r1, r3
 8008df4:	bfde      	ittt	le
 8008df6:	2330      	movle	r3, #48	; 0x30
 8008df8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e00:	1b52      	subs	r2, r2, r5
 8008e02:	6122      	str	r2, [r4, #16]
 8008e04:	f8cd a000 	str.w	sl, [sp]
 8008e08:	464b      	mov	r3, r9
 8008e0a:	aa03      	add	r2, sp, #12
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4640      	mov	r0, r8
 8008e10:	f7ff fee2 	bl	8008bd8 <_printf_common>
 8008e14:	3001      	adds	r0, #1
 8008e16:	d14c      	bne.n	8008eb2 <_printf_i+0x1fe>
 8008e18:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1c:	b004      	add	sp, #16
 8008e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e22:	4835      	ldr	r0, [pc, #212]	; (8008ef8 <_printf_i+0x244>)
 8008e24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e28:	6829      	ldr	r1, [r5, #0]
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e30:	6029      	str	r1, [r5, #0]
 8008e32:	061d      	lsls	r5, r3, #24
 8008e34:	d514      	bpl.n	8008e60 <_printf_i+0x1ac>
 8008e36:	07df      	lsls	r7, r3, #31
 8008e38:	bf44      	itt	mi
 8008e3a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e3e:	6023      	strmi	r3, [r4, #0]
 8008e40:	b91e      	cbnz	r6, 8008e4a <_printf_i+0x196>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	f023 0320 	bic.w	r3, r3, #32
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	2310      	movs	r3, #16
 8008e4c:	e7b0      	b.n	8008db0 <_printf_i+0xfc>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	f043 0320 	orr.w	r3, r3, #32
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	2378      	movs	r3, #120	; 0x78
 8008e58:	4828      	ldr	r0, [pc, #160]	; (8008efc <_printf_i+0x248>)
 8008e5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e5e:	e7e3      	b.n	8008e28 <_printf_i+0x174>
 8008e60:	0659      	lsls	r1, r3, #25
 8008e62:	bf48      	it	mi
 8008e64:	b2b6      	uxthmi	r6, r6
 8008e66:	e7e6      	b.n	8008e36 <_printf_i+0x182>
 8008e68:	4615      	mov	r5, r2
 8008e6a:	e7bb      	b.n	8008de4 <_printf_i+0x130>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	6826      	ldr	r6, [r4, #0]
 8008e70:	6961      	ldr	r1, [r4, #20]
 8008e72:	1d18      	adds	r0, r3, #4
 8008e74:	6028      	str	r0, [r5, #0]
 8008e76:	0635      	lsls	r5, r6, #24
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	d501      	bpl.n	8008e80 <_printf_i+0x1cc>
 8008e7c:	6019      	str	r1, [r3, #0]
 8008e7e:	e002      	b.n	8008e86 <_printf_i+0x1d2>
 8008e80:	0670      	lsls	r0, r6, #25
 8008e82:	d5fb      	bpl.n	8008e7c <_printf_i+0x1c8>
 8008e84:	8019      	strh	r1, [r3, #0]
 8008e86:	2300      	movs	r3, #0
 8008e88:	6123      	str	r3, [r4, #16]
 8008e8a:	4615      	mov	r5, r2
 8008e8c:	e7ba      	b.n	8008e04 <_printf_i+0x150>
 8008e8e:	682b      	ldr	r3, [r5, #0]
 8008e90:	1d1a      	adds	r2, r3, #4
 8008e92:	602a      	str	r2, [r5, #0]
 8008e94:	681d      	ldr	r5, [r3, #0]
 8008e96:	6862      	ldr	r2, [r4, #4]
 8008e98:	2100      	movs	r1, #0
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f7f7 f9b8 	bl	8000210 <memchr>
 8008ea0:	b108      	cbz	r0, 8008ea6 <_printf_i+0x1f2>
 8008ea2:	1b40      	subs	r0, r0, r5
 8008ea4:	6060      	str	r0, [r4, #4]
 8008ea6:	6863      	ldr	r3, [r4, #4]
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb0:	e7a8      	b.n	8008e04 <_printf_i+0x150>
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	462a      	mov	r2, r5
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	4640      	mov	r0, r8
 8008eba:	47d0      	blx	sl
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d0ab      	beq.n	8008e18 <_printf_i+0x164>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	079b      	lsls	r3, r3, #30
 8008ec4:	d413      	bmi.n	8008eee <_printf_i+0x23a>
 8008ec6:	68e0      	ldr	r0, [r4, #12]
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	4298      	cmp	r0, r3
 8008ecc:	bfb8      	it	lt
 8008ece:	4618      	movlt	r0, r3
 8008ed0:	e7a4      	b.n	8008e1c <_printf_i+0x168>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4632      	mov	r2, r6
 8008ed6:	4649      	mov	r1, r9
 8008ed8:	4640      	mov	r0, r8
 8008eda:	47d0      	blx	sl
 8008edc:	3001      	adds	r0, #1
 8008ede:	d09b      	beq.n	8008e18 <_printf_i+0x164>
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	68e3      	ldr	r3, [r4, #12]
 8008ee4:	9903      	ldr	r1, [sp, #12]
 8008ee6:	1a5b      	subs	r3, r3, r1
 8008ee8:	42ab      	cmp	r3, r5
 8008eea:	dcf2      	bgt.n	8008ed2 <_printf_i+0x21e>
 8008eec:	e7eb      	b.n	8008ec6 <_printf_i+0x212>
 8008eee:	2500      	movs	r5, #0
 8008ef0:	f104 0619 	add.w	r6, r4, #25
 8008ef4:	e7f5      	b.n	8008ee2 <_printf_i+0x22e>
 8008ef6:	bf00      	nop
 8008ef8:	0800b552 	.word	0x0800b552
 8008efc:	0800b563 	.word	0x0800b563

08008f00 <sniprintf>:
 8008f00:	b40c      	push	{r2, r3}
 8008f02:	b530      	push	{r4, r5, lr}
 8008f04:	4b17      	ldr	r3, [pc, #92]	; (8008f64 <sniprintf+0x64>)
 8008f06:	1e0c      	subs	r4, r1, #0
 8008f08:	681d      	ldr	r5, [r3, #0]
 8008f0a:	b09d      	sub	sp, #116	; 0x74
 8008f0c:	da08      	bge.n	8008f20 <sniprintf+0x20>
 8008f0e:	238b      	movs	r3, #139	; 0x8b
 8008f10:	602b      	str	r3, [r5, #0]
 8008f12:	f04f 30ff 	mov.w	r0, #4294967295
 8008f16:	b01d      	add	sp, #116	; 0x74
 8008f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f1c:	b002      	add	sp, #8
 8008f1e:	4770      	bx	lr
 8008f20:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008f24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008f28:	bf14      	ite	ne
 8008f2a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f2e:	4623      	moveq	r3, r4
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	9307      	str	r3, [sp, #28]
 8008f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f38:	9002      	str	r0, [sp, #8]
 8008f3a:	9006      	str	r0, [sp, #24]
 8008f3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f42:	ab21      	add	r3, sp, #132	; 0x84
 8008f44:	a902      	add	r1, sp, #8
 8008f46:	4628      	mov	r0, r5
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	f001 fc83 	bl	800a854 <_svfiprintf_r>
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	bfbc      	itt	lt
 8008f52:	238b      	movlt	r3, #139	; 0x8b
 8008f54:	602b      	strlt	r3, [r5, #0]
 8008f56:	2c00      	cmp	r4, #0
 8008f58:	d0dd      	beq.n	8008f16 <sniprintf+0x16>
 8008f5a:	9b02      	ldr	r3, [sp, #8]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	701a      	strb	r2, [r3, #0]
 8008f60:	e7d9      	b.n	8008f16 <sniprintf+0x16>
 8008f62:	bf00      	nop
 8008f64:	20000030 	.word	0x20000030

08008f68 <strchr>:
 8008f68:	b2c9      	uxtb	r1, r1
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f70:	b11a      	cbz	r2, 8008f7a <strchr+0x12>
 8008f72:	428a      	cmp	r2, r1
 8008f74:	d1f9      	bne.n	8008f6a <strchr+0x2>
 8008f76:	4618      	mov	r0, r3
 8008f78:	4770      	bx	lr
 8008f7a:	2900      	cmp	r1, #0
 8008f7c:	bf18      	it	ne
 8008f7e:	2300      	movne	r3, #0
 8008f80:	e7f9      	b.n	8008f76 <strchr+0xe>

08008f82 <strrchr>:
 8008f82:	b538      	push	{r3, r4, r5, lr}
 8008f84:	4603      	mov	r3, r0
 8008f86:	460c      	mov	r4, r1
 8008f88:	b969      	cbnz	r1, 8008fa6 <strrchr+0x24>
 8008f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f8e:	f7ff bfeb 	b.w	8008f68 <strchr>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	4605      	mov	r5, r0
 8008f96:	4621      	mov	r1, r4
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7ff ffe5 	bl	8008f68 <strchr>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d1f7      	bne.n	8008f92 <strrchr+0x10>
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	bd38      	pop	{r3, r4, r5, pc}
 8008fa6:	2500      	movs	r5, #0
 8008fa8:	e7f5      	b.n	8008f96 <strrchr+0x14>

08008faa <quorem>:
 8008faa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fae:	6903      	ldr	r3, [r0, #16]
 8008fb0:	690c      	ldr	r4, [r1, #16]
 8008fb2:	42a3      	cmp	r3, r4
 8008fb4:	4607      	mov	r7, r0
 8008fb6:	f2c0 8081 	blt.w	80090bc <quorem+0x112>
 8008fba:	3c01      	subs	r4, #1
 8008fbc:	f101 0814 	add.w	r8, r1, #20
 8008fc0:	f100 0514 	add.w	r5, r0, #20
 8008fc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fc8:	9301      	str	r3, [sp, #4]
 8008fca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fde:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fe2:	d331      	bcc.n	8009048 <quorem+0x9e>
 8008fe4:	f04f 0e00 	mov.w	lr, #0
 8008fe8:	4640      	mov	r0, r8
 8008fea:	46ac      	mov	ip, r5
 8008fec:	46f2      	mov	sl, lr
 8008fee:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ff2:	b293      	uxth	r3, r2
 8008ff4:	fb06 e303 	mla	r3, r6, r3, lr
 8008ff8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	ebaa 0303 	sub.w	r3, sl, r3
 8009002:	f8dc a000 	ldr.w	sl, [ip]
 8009006:	0c12      	lsrs	r2, r2, #16
 8009008:	fa13 f38a 	uxtah	r3, r3, sl
 800900c:	fb06 e202 	mla	r2, r6, r2, lr
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	9b00      	ldr	r3, [sp, #0]
 8009014:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009018:	b292      	uxth	r2, r2
 800901a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800901e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009022:	f8bd 3000 	ldrh.w	r3, [sp]
 8009026:	4581      	cmp	r9, r0
 8009028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800902c:	f84c 3b04 	str.w	r3, [ip], #4
 8009030:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009034:	d2db      	bcs.n	8008fee <quorem+0x44>
 8009036:	f855 300b 	ldr.w	r3, [r5, fp]
 800903a:	b92b      	cbnz	r3, 8009048 <quorem+0x9e>
 800903c:	9b01      	ldr	r3, [sp, #4]
 800903e:	3b04      	subs	r3, #4
 8009040:	429d      	cmp	r5, r3
 8009042:	461a      	mov	r2, r3
 8009044:	d32e      	bcc.n	80090a4 <quorem+0xfa>
 8009046:	613c      	str	r4, [r7, #16]
 8009048:	4638      	mov	r0, r7
 800904a:	f001 f9af 	bl	800a3ac <__mcmp>
 800904e:	2800      	cmp	r0, #0
 8009050:	db24      	blt.n	800909c <quorem+0xf2>
 8009052:	3601      	adds	r6, #1
 8009054:	4628      	mov	r0, r5
 8009056:	f04f 0c00 	mov.w	ip, #0
 800905a:	f858 2b04 	ldr.w	r2, [r8], #4
 800905e:	f8d0 e000 	ldr.w	lr, [r0]
 8009062:	b293      	uxth	r3, r2
 8009064:	ebac 0303 	sub.w	r3, ip, r3
 8009068:	0c12      	lsrs	r2, r2, #16
 800906a:	fa13 f38e 	uxtah	r3, r3, lr
 800906e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009072:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009076:	b29b      	uxth	r3, r3
 8009078:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800907c:	45c1      	cmp	r9, r8
 800907e:	f840 3b04 	str.w	r3, [r0], #4
 8009082:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009086:	d2e8      	bcs.n	800905a <quorem+0xb0>
 8009088:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800908c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009090:	b922      	cbnz	r2, 800909c <quorem+0xf2>
 8009092:	3b04      	subs	r3, #4
 8009094:	429d      	cmp	r5, r3
 8009096:	461a      	mov	r2, r3
 8009098:	d30a      	bcc.n	80090b0 <quorem+0x106>
 800909a:	613c      	str	r4, [r7, #16]
 800909c:	4630      	mov	r0, r6
 800909e:	b003      	add	sp, #12
 80090a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a4:	6812      	ldr	r2, [r2, #0]
 80090a6:	3b04      	subs	r3, #4
 80090a8:	2a00      	cmp	r2, #0
 80090aa:	d1cc      	bne.n	8009046 <quorem+0x9c>
 80090ac:	3c01      	subs	r4, #1
 80090ae:	e7c7      	b.n	8009040 <quorem+0x96>
 80090b0:	6812      	ldr	r2, [r2, #0]
 80090b2:	3b04      	subs	r3, #4
 80090b4:	2a00      	cmp	r2, #0
 80090b6:	d1f0      	bne.n	800909a <quorem+0xf0>
 80090b8:	3c01      	subs	r4, #1
 80090ba:	e7eb      	b.n	8009094 <quorem+0xea>
 80090bc:	2000      	movs	r0, #0
 80090be:	e7ee      	b.n	800909e <quorem+0xf4>

080090c0 <_dtoa_r>:
 80090c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	ed2d 8b04 	vpush	{d8-d9}
 80090c8:	ec57 6b10 	vmov	r6, r7, d0
 80090cc:	b093      	sub	sp, #76	; 0x4c
 80090ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80090d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090d4:	9106      	str	r1, [sp, #24]
 80090d6:	ee10 aa10 	vmov	sl, s0
 80090da:	4604      	mov	r4, r0
 80090dc:	9209      	str	r2, [sp, #36]	; 0x24
 80090de:	930c      	str	r3, [sp, #48]	; 0x30
 80090e0:	46bb      	mov	fp, r7
 80090e2:	b975      	cbnz	r5, 8009102 <_dtoa_r+0x42>
 80090e4:	2010      	movs	r0, #16
 80090e6:	f000 fed7 	bl	8009e98 <malloc>
 80090ea:	4602      	mov	r2, r0
 80090ec:	6260      	str	r0, [r4, #36]	; 0x24
 80090ee:	b920      	cbnz	r0, 80090fa <_dtoa_r+0x3a>
 80090f0:	4ba7      	ldr	r3, [pc, #668]	; (8009390 <_dtoa_r+0x2d0>)
 80090f2:	21ea      	movs	r1, #234	; 0xea
 80090f4:	48a7      	ldr	r0, [pc, #668]	; (8009394 <_dtoa_r+0x2d4>)
 80090f6:	f001 ff2d 	bl	800af54 <__assert_func>
 80090fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090fe:	6005      	str	r5, [r0, #0]
 8009100:	60c5      	str	r5, [r0, #12]
 8009102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009104:	6819      	ldr	r1, [r3, #0]
 8009106:	b151      	cbz	r1, 800911e <_dtoa_r+0x5e>
 8009108:	685a      	ldr	r2, [r3, #4]
 800910a:	604a      	str	r2, [r1, #4]
 800910c:	2301      	movs	r3, #1
 800910e:	4093      	lsls	r3, r2
 8009110:	608b      	str	r3, [r1, #8]
 8009112:	4620      	mov	r0, r4
 8009114:	f000 ff08 	bl	8009f28 <_Bfree>
 8009118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800911a:	2200      	movs	r2, #0
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	1e3b      	subs	r3, r7, #0
 8009120:	bfaa      	itet	ge
 8009122:	2300      	movge	r3, #0
 8009124:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009128:	f8c8 3000 	strge.w	r3, [r8]
 800912c:	4b9a      	ldr	r3, [pc, #616]	; (8009398 <_dtoa_r+0x2d8>)
 800912e:	bfbc      	itt	lt
 8009130:	2201      	movlt	r2, #1
 8009132:	f8c8 2000 	strlt.w	r2, [r8]
 8009136:	ea33 030b 	bics.w	r3, r3, fp
 800913a:	d11b      	bne.n	8009174 <_dtoa_r+0xb4>
 800913c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800913e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009142:	6013      	str	r3, [r2, #0]
 8009144:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009148:	4333      	orrs	r3, r6
 800914a:	f000 8592 	beq.w	8009c72 <_dtoa_r+0xbb2>
 800914e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009150:	b963      	cbnz	r3, 800916c <_dtoa_r+0xac>
 8009152:	4b92      	ldr	r3, [pc, #584]	; (800939c <_dtoa_r+0x2dc>)
 8009154:	e022      	b.n	800919c <_dtoa_r+0xdc>
 8009156:	4b92      	ldr	r3, [pc, #584]	; (80093a0 <_dtoa_r+0x2e0>)
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	3308      	adds	r3, #8
 800915c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	9801      	ldr	r0, [sp, #4]
 8009162:	b013      	add	sp, #76	; 0x4c
 8009164:	ecbd 8b04 	vpop	{d8-d9}
 8009168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916c:	4b8b      	ldr	r3, [pc, #556]	; (800939c <_dtoa_r+0x2dc>)
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	3303      	adds	r3, #3
 8009172:	e7f3      	b.n	800915c <_dtoa_r+0x9c>
 8009174:	2200      	movs	r2, #0
 8009176:	2300      	movs	r3, #0
 8009178:	4650      	mov	r0, sl
 800917a:	4659      	mov	r1, fp
 800917c:	f7f7 fcbc 	bl	8000af8 <__aeabi_dcmpeq>
 8009180:	ec4b ab19 	vmov	d9, sl, fp
 8009184:	4680      	mov	r8, r0
 8009186:	b158      	cbz	r0, 80091a0 <_dtoa_r+0xe0>
 8009188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800918a:	2301      	movs	r3, #1
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 856b 	beq.w	8009c6c <_dtoa_r+0xbac>
 8009196:	4883      	ldr	r0, [pc, #524]	; (80093a4 <_dtoa_r+0x2e4>)
 8009198:	6018      	str	r0, [r3, #0]
 800919a:	1e43      	subs	r3, r0, #1
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	e7df      	b.n	8009160 <_dtoa_r+0xa0>
 80091a0:	ec4b ab10 	vmov	d0, sl, fp
 80091a4:	aa10      	add	r2, sp, #64	; 0x40
 80091a6:	a911      	add	r1, sp, #68	; 0x44
 80091a8:	4620      	mov	r0, r4
 80091aa:	f001 f9a5 	bl	800a4f8 <__d2b>
 80091ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80091b2:	ee08 0a10 	vmov	s16, r0
 80091b6:	2d00      	cmp	r5, #0
 80091b8:	f000 8084 	beq.w	80092c4 <_dtoa_r+0x204>
 80091bc:	ee19 3a90 	vmov	r3, s19
 80091c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80091c8:	4656      	mov	r6, sl
 80091ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80091ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80091d6:	4b74      	ldr	r3, [pc, #464]	; (80093a8 <_dtoa_r+0x2e8>)
 80091d8:	2200      	movs	r2, #0
 80091da:	4630      	mov	r0, r6
 80091dc:	4639      	mov	r1, r7
 80091de:	f7f7 f86b 	bl	80002b8 <__aeabi_dsub>
 80091e2:	a365      	add	r3, pc, #404	; (adr r3, 8009378 <_dtoa_r+0x2b8>)
 80091e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e8:	f7f7 fa1e 	bl	8000628 <__aeabi_dmul>
 80091ec:	a364      	add	r3, pc, #400	; (adr r3, 8009380 <_dtoa_r+0x2c0>)
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f7 f863 	bl	80002bc <__adddf3>
 80091f6:	4606      	mov	r6, r0
 80091f8:	4628      	mov	r0, r5
 80091fa:	460f      	mov	r7, r1
 80091fc:	f7f7 f9aa 	bl	8000554 <__aeabi_i2d>
 8009200:	a361      	add	r3, pc, #388	; (adr r3, 8009388 <_dtoa_r+0x2c8>)
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	f7f7 fa0f 	bl	8000628 <__aeabi_dmul>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	4630      	mov	r0, r6
 8009210:	4639      	mov	r1, r7
 8009212:	f7f7 f853 	bl	80002bc <__adddf3>
 8009216:	4606      	mov	r6, r0
 8009218:	460f      	mov	r7, r1
 800921a:	f7f7 fcb5 	bl	8000b88 <__aeabi_d2iz>
 800921e:	2200      	movs	r2, #0
 8009220:	9000      	str	r0, [sp, #0]
 8009222:	2300      	movs	r3, #0
 8009224:	4630      	mov	r0, r6
 8009226:	4639      	mov	r1, r7
 8009228:	f7f7 fc70 	bl	8000b0c <__aeabi_dcmplt>
 800922c:	b150      	cbz	r0, 8009244 <_dtoa_r+0x184>
 800922e:	9800      	ldr	r0, [sp, #0]
 8009230:	f7f7 f990 	bl	8000554 <__aeabi_i2d>
 8009234:	4632      	mov	r2, r6
 8009236:	463b      	mov	r3, r7
 8009238:	f7f7 fc5e 	bl	8000af8 <__aeabi_dcmpeq>
 800923c:	b910      	cbnz	r0, 8009244 <_dtoa_r+0x184>
 800923e:	9b00      	ldr	r3, [sp, #0]
 8009240:	3b01      	subs	r3, #1
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	9b00      	ldr	r3, [sp, #0]
 8009246:	2b16      	cmp	r3, #22
 8009248:	d85a      	bhi.n	8009300 <_dtoa_r+0x240>
 800924a:	9a00      	ldr	r2, [sp, #0]
 800924c:	4b57      	ldr	r3, [pc, #348]	; (80093ac <_dtoa_r+0x2ec>)
 800924e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	ec51 0b19 	vmov	r0, r1, d9
 800925a:	f7f7 fc57 	bl	8000b0c <__aeabi_dcmplt>
 800925e:	2800      	cmp	r0, #0
 8009260:	d050      	beq.n	8009304 <_dtoa_r+0x244>
 8009262:	9b00      	ldr	r3, [sp, #0]
 8009264:	3b01      	subs	r3, #1
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	2300      	movs	r3, #0
 800926a:	930b      	str	r3, [sp, #44]	; 0x2c
 800926c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800926e:	1b5d      	subs	r5, r3, r5
 8009270:	1e6b      	subs	r3, r5, #1
 8009272:	9305      	str	r3, [sp, #20]
 8009274:	bf45      	ittet	mi
 8009276:	f1c5 0301 	rsbmi	r3, r5, #1
 800927a:	9304      	strmi	r3, [sp, #16]
 800927c:	2300      	movpl	r3, #0
 800927e:	2300      	movmi	r3, #0
 8009280:	bf4c      	ite	mi
 8009282:	9305      	strmi	r3, [sp, #20]
 8009284:	9304      	strpl	r3, [sp, #16]
 8009286:	9b00      	ldr	r3, [sp, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	db3d      	blt.n	8009308 <_dtoa_r+0x248>
 800928c:	9b05      	ldr	r3, [sp, #20]
 800928e:	9a00      	ldr	r2, [sp, #0]
 8009290:	920a      	str	r2, [sp, #40]	; 0x28
 8009292:	4413      	add	r3, r2
 8009294:	9305      	str	r3, [sp, #20]
 8009296:	2300      	movs	r3, #0
 8009298:	9307      	str	r3, [sp, #28]
 800929a:	9b06      	ldr	r3, [sp, #24]
 800929c:	2b09      	cmp	r3, #9
 800929e:	f200 8089 	bhi.w	80093b4 <_dtoa_r+0x2f4>
 80092a2:	2b05      	cmp	r3, #5
 80092a4:	bfc4      	itt	gt
 80092a6:	3b04      	subgt	r3, #4
 80092a8:	9306      	strgt	r3, [sp, #24]
 80092aa:	9b06      	ldr	r3, [sp, #24]
 80092ac:	f1a3 0302 	sub.w	r3, r3, #2
 80092b0:	bfcc      	ite	gt
 80092b2:	2500      	movgt	r5, #0
 80092b4:	2501      	movle	r5, #1
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	f200 8087 	bhi.w	80093ca <_dtoa_r+0x30a>
 80092bc:	e8df f003 	tbb	[pc, r3]
 80092c0:	59383a2d 	.word	0x59383a2d
 80092c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80092c8:	441d      	add	r5, r3
 80092ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092ce:	2b20      	cmp	r3, #32
 80092d0:	bfc1      	itttt	gt
 80092d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80092da:	fa0b f303 	lslgt.w	r3, fp, r3
 80092de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80092e2:	bfda      	itte	le
 80092e4:	f1c3 0320 	rsble	r3, r3, #32
 80092e8:	fa06 f003 	lslle.w	r0, r6, r3
 80092ec:	4318      	orrgt	r0, r3
 80092ee:	f7f7 f921 	bl	8000534 <__aeabi_ui2d>
 80092f2:	2301      	movs	r3, #1
 80092f4:	4606      	mov	r6, r0
 80092f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80092fa:	3d01      	subs	r5, #1
 80092fc:	930e      	str	r3, [sp, #56]	; 0x38
 80092fe:	e76a      	b.n	80091d6 <_dtoa_r+0x116>
 8009300:	2301      	movs	r3, #1
 8009302:	e7b2      	b.n	800926a <_dtoa_r+0x1aa>
 8009304:	900b      	str	r0, [sp, #44]	; 0x2c
 8009306:	e7b1      	b.n	800926c <_dtoa_r+0x1ac>
 8009308:	9b04      	ldr	r3, [sp, #16]
 800930a:	9a00      	ldr	r2, [sp, #0]
 800930c:	1a9b      	subs	r3, r3, r2
 800930e:	9304      	str	r3, [sp, #16]
 8009310:	4253      	negs	r3, r2
 8009312:	9307      	str	r3, [sp, #28]
 8009314:	2300      	movs	r3, #0
 8009316:	930a      	str	r3, [sp, #40]	; 0x28
 8009318:	e7bf      	b.n	800929a <_dtoa_r+0x1da>
 800931a:	2300      	movs	r3, #0
 800931c:	9308      	str	r3, [sp, #32]
 800931e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009320:	2b00      	cmp	r3, #0
 8009322:	dc55      	bgt.n	80093d0 <_dtoa_r+0x310>
 8009324:	2301      	movs	r3, #1
 8009326:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800932a:	461a      	mov	r2, r3
 800932c:	9209      	str	r2, [sp, #36]	; 0x24
 800932e:	e00c      	b.n	800934a <_dtoa_r+0x28a>
 8009330:	2301      	movs	r3, #1
 8009332:	e7f3      	b.n	800931c <_dtoa_r+0x25c>
 8009334:	2300      	movs	r3, #0
 8009336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009338:	9308      	str	r3, [sp, #32]
 800933a:	9b00      	ldr	r3, [sp, #0]
 800933c:	4413      	add	r3, r2
 800933e:	9302      	str	r3, [sp, #8]
 8009340:	3301      	adds	r3, #1
 8009342:	2b01      	cmp	r3, #1
 8009344:	9303      	str	r3, [sp, #12]
 8009346:	bfb8      	it	lt
 8009348:	2301      	movlt	r3, #1
 800934a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800934c:	2200      	movs	r2, #0
 800934e:	6042      	str	r2, [r0, #4]
 8009350:	2204      	movs	r2, #4
 8009352:	f102 0614 	add.w	r6, r2, #20
 8009356:	429e      	cmp	r6, r3
 8009358:	6841      	ldr	r1, [r0, #4]
 800935a:	d93d      	bls.n	80093d8 <_dtoa_r+0x318>
 800935c:	4620      	mov	r0, r4
 800935e:	f000 fda3 	bl	8009ea8 <_Balloc>
 8009362:	9001      	str	r0, [sp, #4]
 8009364:	2800      	cmp	r0, #0
 8009366:	d13b      	bne.n	80093e0 <_dtoa_r+0x320>
 8009368:	4b11      	ldr	r3, [pc, #68]	; (80093b0 <_dtoa_r+0x2f0>)
 800936a:	4602      	mov	r2, r0
 800936c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009370:	e6c0      	b.n	80090f4 <_dtoa_r+0x34>
 8009372:	2301      	movs	r3, #1
 8009374:	e7df      	b.n	8009336 <_dtoa_r+0x276>
 8009376:	bf00      	nop
 8009378:	636f4361 	.word	0x636f4361
 800937c:	3fd287a7 	.word	0x3fd287a7
 8009380:	8b60c8b3 	.word	0x8b60c8b3
 8009384:	3fc68a28 	.word	0x3fc68a28
 8009388:	509f79fb 	.word	0x509f79fb
 800938c:	3fd34413 	.word	0x3fd34413
 8009390:	0800b581 	.word	0x0800b581
 8009394:	0800b598 	.word	0x0800b598
 8009398:	7ff00000 	.word	0x7ff00000
 800939c:	0800b57d 	.word	0x0800b57d
 80093a0:	0800b574 	.word	0x0800b574
 80093a4:	0800b551 	.word	0x0800b551
 80093a8:	3ff80000 	.word	0x3ff80000
 80093ac:	0800b6e8 	.word	0x0800b6e8
 80093b0:	0800b5f3 	.word	0x0800b5f3
 80093b4:	2501      	movs	r5, #1
 80093b6:	2300      	movs	r3, #0
 80093b8:	9306      	str	r3, [sp, #24]
 80093ba:	9508      	str	r5, [sp, #32]
 80093bc:	f04f 33ff 	mov.w	r3, #4294967295
 80093c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093c4:	2200      	movs	r2, #0
 80093c6:	2312      	movs	r3, #18
 80093c8:	e7b0      	b.n	800932c <_dtoa_r+0x26c>
 80093ca:	2301      	movs	r3, #1
 80093cc:	9308      	str	r3, [sp, #32]
 80093ce:	e7f5      	b.n	80093bc <_dtoa_r+0x2fc>
 80093d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093d6:	e7b8      	b.n	800934a <_dtoa_r+0x28a>
 80093d8:	3101      	adds	r1, #1
 80093da:	6041      	str	r1, [r0, #4]
 80093dc:	0052      	lsls	r2, r2, #1
 80093de:	e7b8      	b.n	8009352 <_dtoa_r+0x292>
 80093e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093e2:	9a01      	ldr	r2, [sp, #4]
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	2b0e      	cmp	r3, #14
 80093ea:	f200 809d 	bhi.w	8009528 <_dtoa_r+0x468>
 80093ee:	2d00      	cmp	r5, #0
 80093f0:	f000 809a 	beq.w	8009528 <_dtoa_r+0x468>
 80093f4:	9b00      	ldr	r3, [sp, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	dd32      	ble.n	8009460 <_dtoa_r+0x3a0>
 80093fa:	4ab7      	ldr	r2, [pc, #732]	; (80096d8 <_dtoa_r+0x618>)
 80093fc:	f003 030f 	and.w	r3, r3, #15
 8009400:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009404:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009408:	9b00      	ldr	r3, [sp, #0]
 800940a:	05d8      	lsls	r0, r3, #23
 800940c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009410:	d516      	bpl.n	8009440 <_dtoa_r+0x380>
 8009412:	4bb2      	ldr	r3, [pc, #712]	; (80096dc <_dtoa_r+0x61c>)
 8009414:	ec51 0b19 	vmov	r0, r1, d9
 8009418:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800941c:	f7f7 fa2e 	bl	800087c <__aeabi_ddiv>
 8009420:	f007 070f 	and.w	r7, r7, #15
 8009424:	4682      	mov	sl, r0
 8009426:	468b      	mov	fp, r1
 8009428:	2503      	movs	r5, #3
 800942a:	4eac      	ldr	r6, [pc, #688]	; (80096dc <_dtoa_r+0x61c>)
 800942c:	b957      	cbnz	r7, 8009444 <_dtoa_r+0x384>
 800942e:	4642      	mov	r2, r8
 8009430:	464b      	mov	r3, r9
 8009432:	4650      	mov	r0, sl
 8009434:	4659      	mov	r1, fp
 8009436:	f7f7 fa21 	bl	800087c <__aeabi_ddiv>
 800943a:	4682      	mov	sl, r0
 800943c:	468b      	mov	fp, r1
 800943e:	e028      	b.n	8009492 <_dtoa_r+0x3d2>
 8009440:	2502      	movs	r5, #2
 8009442:	e7f2      	b.n	800942a <_dtoa_r+0x36a>
 8009444:	07f9      	lsls	r1, r7, #31
 8009446:	d508      	bpl.n	800945a <_dtoa_r+0x39a>
 8009448:	4640      	mov	r0, r8
 800944a:	4649      	mov	r1, r9
 800944c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009450:	f7f7 f8ea 	bl	8000628 <__aeabi_dmul>
 8009454:	3501      	adds	r5, #1
 8009456:	4680      	mov	r8, r0
 8009458:	4689      	mov	r9, r1
 800945a:	107f      	asrs	r7, r7, #1
 800945c:	3608      	adds	r6, #8
 800945e:	e7e5      	b.n	800942c <_dtoa_r+0x36c>
 8009460:	f000 809b 	beq.w	800959a <_dtoa_r+0x4da>
 8009464:	9b00      	ldr	r3, [sp, #0]
 8009466:	4f9d      	ldr	r7, [pc, #628]	; (80096dc <_dtoa_r+0x61c>)
 8009468:	425e      	negs	r6, r3
 800946a:	4b9b      	ldr	r3, [pc, #620]	; (80096d8 <_dtoa_r+0x618>)
 800946c:	f006 020f 	and.w	r2, r6, #15
 8009470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	ec51 0b19 	vmov	r0, r1, d9
 800947c:	f7f7 f8d4 	bl	8000628 <__aeabi_dmul>
 8009480:	1136      	asrs	r6, r6, #4
 8009482:	4682      	mov	sl, r0
 8009484:	468b      	mov	fp, r1
 8009486:	2300      	movs	r3, #0
 8009488:	2502      	movs	r5, #2
 800948a:	2e00      	cmp	r6, #0
 800948c:	d17a      	bne.n	8009584 <_dtoa_r+0x4c4>
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1d3      	bne.n	800943a <_dtoa_r+0x37a>
 8009492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 8082 	beq.w	800959e <_dtoa_r+0x4de>
 800949a:	4b91      	ldr	r3, [pc, #580]	; (80096e0 <_dtoa_r+0x620>)
 800949c:	2200      	movs	r2, #0
 800949e:	4650      	mov	r0, sl
 80094a0:	4659      	mov	r1, fp
 80094a2:	f7f7 fb33 	bl	8000b0c <__aeabi_dcmplt>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d079      	beq.n	800959e <_dtoa_r+0x4de>
 80094aa:	9b03      	ldr	r3, [sp, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d076      	beq.n	800959e <_dtoa_r+0x4de>
 80094b0:	9b02      	ldr	r3, [sp, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	dd36      	ble.n	8009524 <_dtoa_r+0x464>
 80094b6:	9b00      	ldr	r3, [sp, #0]
 80094b8:	4650      	mov	r0, sl
 80094ba:	4659      	mov	r1, fp
 80094bc:	1e5f      	subs	r7, r3, #1
 80094be:	2200      	movs	r2, #0
 80094c0:	4b88      	ldr	r3, [pc, #544]	; (80096e4 <_dtoa_r+0x624>)
 80094c2:	f7f7 f8b1 	bl	8000628 <__aeabi_dmul>
 80094c6:	9e02      	ldr	r6, [sp, #8]
 80094c8:	4682      	mov	sl, r0
 80094ca:	468b      	mov	fp, r1
 80094cc:	3501      	adds	r5, #1
 80094ce:	4628      	mov	r0, r5
 80094d0:	f7f7 f840 	bl	8000554 <__aeabi_i2d>
 80094d4:	4652      	mov	r2, sl
 80094d6:	465b      	mov	r3, fp
 80094d8:	f7f7 f8a6 	bl	8000628 <__aeabi_dmul>
 80094dc:	4b82      	ldr	r3, [pc, #520]	; (80096e8 <_dtoa_r+0x628>)
 80094de:	2200      	movs	r2, #0
 80094e0:	f7f6 feec 	bl	80002bc <__adddf3>
 80094e4:	46d0      	mov	r8, sl
 80094e6:	46d9      	mov	r9, fp
 80094e8:	4682      	mov	sl, r0
 80094ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80094ee:	2e00      	cmp	r6, #0
 80094f0:	d158      	bne.n	80095a4 <_dtoa_r+0x4e4>
 80094f2:	4b7e      	ldr	r3, [pc, #504]	; (80096ec <_dtoa_r+0x62c>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	4640      	mov	r0, r8
 80094f8:	4649      	mov	r1, r9
 80094fa:	f7f6 fedd 	bl	80002b8 <__aeabi_dsub>
 80094fe:	4652      	mov	r2, sl
 8009500:	465b      	mov	r3, fp
 8009502:	4680      	mov	r8, r0
 8009504:	4689      	mov	r9, r1
 8009506:	f7f7 fb1f 	bl	8000b48 <__aeabi_dcmpgt>
 800950a:	2800      	cmp	r0, #0
 800950c:	f040 8295 	bne.w	8009a3a <_dtoa_r+0x97a>
 8009510:	4652      	mov	r2, sl
 8009512:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009516:	4640      	mov	r0, r8
 8009518:	4649      	mov	r1, r9
 800951a:	f7f7 faf7 	bl	8000b0c <__aeabi_dcmplt>
 800951e:	2800      	cmp	r0, #0
 8009520:	f040 8289 	bne.w	8009a36 <_dtoa_r+0x976>
 8009524:	ec5b ab19 	vmov	sl, fp, d9
 8009528:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800952a:	2b00      	cmp	r3, #0
 800952c:	f2c0 8148 	blt.w	80097c0 <_dtoa_r+0x700>
 8009530:	9a00      	ldr	r2, [sp, #0]
 8009532:	2a0e      	cmp	r2, #14
 8009534:	f300 8144 	bgt.w	80097c0 <_dtoa_r+0x700>
 8009538:	4b67      	ldr	r3, [pc, #412]	; (80096d8 <_dtoa_r+0x618>)
 800953a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800953e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009544:	2b00      	cmp	r3, #0
 8009546:	f280 80d5 	bge.w	80096f4 <_dtoa_r+0x634>
 800954a:	9b03      	ldr	r3, [sp, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f300 80d1 	bgt.w	80096f4 <_dtoa_r+0x634>
 8009552:	f040 826f 	bne.w	8009a34 <_dtoa_r+0x974>
 8009556:	4b65      	ldr	r3, [pc, #404]	; (80096ec <_dtoa_r+0x62c>)
 8009558:	2200      	movs	r2, #0
 800955a:	4640      	mov	r0, r8
 800955c:	4649      	mov	r1, r9
 800955e:	f7f7 f863 	bl	8000628 <__aeabi_dmul>
 8009562:	4652      	mov	r2, sl
 8009564:	465b      	mov	r3, fp
 8009566:	f7f7 fae5 	bl	8000b34 <__aeabi_dcmpge>
 800956a:	9e03      	ldr	r6, [sp, #12]
 800956c:	4637      	mov	r7, r6
 800956e:	2800      	cmp	r0, #0
 8009570:	f040 8245 	bne.w	80099fe <_dtoa_r+0x93e>
 8009574:	9d01      	ldr	r5, [sp, #4]
 8009576:	2331      	movs	r3, #49	; 0x31
 8009578:	f805 3b01 	strb.w	r3, [r5], #1
 800957c:	9b00      	ldr	r3, [sp, #0]
 800957e:	3301      	adds	r3, #1
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	e240      	b.n	8009a06 <_dtoa_r+0x946>
 8009584:	07f2      	lsls	r2, r6, #31
 8009586:	d505      	bpl.n	8009594 <_dtoa_r+0x4d4>
 8009588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800958c:	f7f7 f84c 	bl	8000628 <__aeabi_dmul>
 8009590:	3501      	adds	r5, #1
 8009592:	2301      	movs	r3, #1
 8009594:	1076      	asrs	r6, r6, #1
 8009596:	3708      	adds	r7, #8
 8009598:	e777      	b.n	800948a <_dtoa_r+0x3ca>
 800959a:	2502      	movs	r5, #2
 800959c:	e779      	b.n	8009492 <_dtoa_r+0x3d2>
 800959e:	9f00      	ldr	r7, [sp, #0]
 80095a0:	9e03      	ldr	r6, [sp, #12]
 80095a2:	e794      	b.n	80094ce <_dtoa_r+0x40e>
 80095a4:	9901      	ldr	r1, [sp, #4]
 80095a6:	4b4c      	ldr	r3, [pc, #304]	; (80096d8 <_dtoa_r+0x618>)
 80095a8:	4431      	add	r1, r6
 80095aa:	910d      	str	r1, [sp, #52]	; 0x34
 80095ac:	9908      	ldr	r1, [sp, #32]
 80095ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095b6:	2900      	cmp	r1, #0
 80095b8:	d043      	beq.n	8009642 <_dtoa_r+0x582>
 80095ba:	494d      	ldr	r1, [pc, #308]	; (80096f0 <_dtoa_r+0x630>)
 80095bc:	2000      	movs	r0, #0
 80095be:	f7f7 f95d 	bl	800087c <__aeabi_ddiv>
 80095c2:	4652      	mov	r2, sl
 80095c4:	465b      	mov	r3, fp
 80095c6:	f7f6 fe77 	bl	80002b8 <__aeabi_dsub>
 80095ca:	9d01      	ldr	r5, [sp, #4]
 80095cc:	4682      	mov	sl, r0
 80095ce:	468b      	mov	fp, r1
 80095d0:	4649      	mov	r1, r9
 80095d2:	4640      	mov	r0, r8
 80095d4:	f7f7 fad8 	bl	8000b88 <__aeabi_d2iz>
 80095d8:	4606      	mov	r6, r0
 80095da:	f7f6 ffbb 	bl	8000554 <__aeabi_i2d>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4640      	mov	r0, r8
 80095e4:	4649      	mov	r1, r9
 80095e6:	f7f6 fe67 	bl	80002b8 <__aeabi_dsub>
 80095ea:	3630      	adds	r6, #48	; 0x30
 80095ec:	f805 6b01 	strb.w	r6, [r5], #1
 80095f0:	4652      	mov	r2, sl
 80095f2:	465b      	mov	r3, fp
 80095f4:	4680      	mov	r8, r0
 80095f6:	4689      	mov	r9, r1
 80095f8:	f7f7 fa88 	bl	8000b0c <__aeabi_dcmplt>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d163      	bne.n	80096c8 <_dtoa_r+0x608>
 8009600:	4642      	mov	r2, r8
 8009602:	464b      	mov	r3, r9
 8009604:	4936      	ldr	r1, [pc, #216]	; (80096e0 <_dtoa_r+0x620>)
 8009606:	2000      	movs	r0, #0
 8009608:	f7f6 fe56 	bl	80002b8 <__aeabi_dsub>
 800960c:	4652      	mov	r2, sl
 800960e:	465b      	mov	r3, fp
 8009610:	f7f7 fa7c 	bl	8000b0c <__aeabi_dcmplt>
 8009614:	2800      	cmp	r0, #0
 8009616:	f040 80b5 	bne.w	8009784 <_dtoa_r+0x6c4>
 800961a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800961c:	429d      	cmp	r5, r3
 800961e:	d081      	beq.n	8009524 <_dtoa_r+0x464>
 8009620:	4b30      	ldr	r3, [pc, #192]	; (80096e4 <_dtoa_r+0x624>)
 8009622:	2200      	movs	r2, #0
 8009624:	4650      	mov	r0, sl
 8009626:	4659      	mov	r1, fp
 8009628:	f7f6 fffe 	bl	8000628 <__aeabi_dmul>
 800962c:	4b2d      	ldr	r3, [pc, #180]	; (80096e4 <_dtoa_r+0x624>)
 800962e:	4682      	mov	sl, r0
 8009630:	468b      	mov	fp, r1
 8009632:	4640      	mov	r0, r8
 8009634:	4649      	mov	r1, r9
 8009636:	2200      	movs	r2, #0
 8009638:	f7f6 fff6 	bl	8000628 <__aeabi_dmul>
 800963c:	4680      	mov	r8, r0
 800963e:	4689      	mov	r9, r1
 8009640:	e7c6      	b.n	80095d0 <_dtoa_r+0x510>
 8009642:	4650      	mov	r0, sl
 8009644:	4659      	mov	r1, fp
 8009646:	f7f6 ffef 	bl	8000628 <__aeabi_dmul>
 800964a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800964c:	9d01      	ldr	r5, [sp, #4]
 800964e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009650:	4682      	mov	sl, r0
 8009652:	468b      	mov	fp, r1
 8009654:	4649      	mov	r1, r9
 8009656:	4640      	mov	r0, r8
 8009658:	f7f7 fa96 	bl	8000b88 <__aeabi_d2iz>
 800965c:	4606      	mov	r6, r0
 800965e:	f7f6 ff79 	bl	8000554 <__aeabi_i2d>
 8009662:	3630      	adds	r6, #48	; 0x30
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4640      	mov	r0, r8
 800966a:	4649      	mov	r1, r9
 800966c:	f7f6 fe24 	bl	80002b8 <__aeabi_dsub>
 8009670:	f805 6b01 	strb.w	r6, [r5], #1
 8009674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009676:	429d      	cmp	r5, r3
 8009678:	4680      	mov	r8, r0
 800967a:	4689      	mov	r9, r1
 800967c:	f04f 0200 	mov.w	r2, #0
 8009680:	d124      	bne.n	80096cc <_dtoa_r+0x60c>
 8009682:	4b1b      	ldr	r3, [pc, #108]	; (80096f0 <_dtoa_r+0x630>)
 8009684:	4650      	mov	r0, sl
 8009686:	4659      	mov	r1, fp
 8009688:	f7f6 fe18 	bl	80002bc <__adddf3>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	4640      	mov	r0, r8
 8009692:	4649      	mov	r1, r9
 8009694:	f7f7 fa58 	bl	8000b48 <__aeabi_dcmpgt>
 8009698:	2800      	cmp	r0, #0
 800969a:	d173      	bne.n	8009784 <_dtoa_r+0x6c4>
 800969c:	4652      	mov	r2, sl
 800969e:	465b      	mov	r3, fp
 80096a0:	4913      	ldr	r1, [pc, #76]	; (80096f0 <_dtoa_r+0x630>)
 80096a2:	2000      	movs	r0, #0
 80096a4:	f7f6 fe08 	bl	80002b8 <__aeabi_dsub>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	4640      	mov	r0, r8
 80096ae:	4649      	mov	r1, r9
 80096b0:	f7f7 fa2c 	bl	8000b0c <__aeabi_dcmplt>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	f43f af35 	beq.w	8009524 <_dtoa_r+0x464>
 80096ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096bc:	1e6b      	subs	r3, r5, #1
 80096be:	930f      	str	r3, [sp, #60]	; 0x3c
 80096c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096c4:	2b30      	cmp	r3, #48	; 0x30
 80096c6:	d0f8      	beq.n	80096ba <_dtoa_r+0x5fa>
 80096c8:	9700      	str	r7, [sp, #0]
 80096ca:	e049      	b.n	8009760 <_dtoa_r+0x6a0>
 80096cc:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <_dtoa_r+0x624>)
 80096ce:	f7f6 ffab 	bl	8000628 <__aeabi_dmul>
 80096d2:	4680      	mov	r8, r0
 80096d4:	4689      	mov	r9, r1
 80096d6:	e7bd      	b.n	8009654 <_dtoa_r+0x594>
 80096d8:	0800b6e8 	.word	0x0800b6e8
 80096dc:	0800b6c0 	.word	0x0800b6c0
 80096e0:	3ff00000 	.word	0x3ff00000
 80096e4:	40240000 	.word	0x40240000
 80096e8:	401c0000 	.word	0x401c0000
 80096ec:	40140000 	.word	0x40140000
 80096f0:	3fe00000 	.word	0x3fe00000
 80096f4:	9d01      	ldr	r5, [sp, #4]
 80096f6:	4656      	mov	r6, sl
 80096f8:	465f      	mov	r7, fp
 80096fa:	4642      	mov	r2, r8
 80096fc:	464b      	mov	r3, r9
 80096fe:	4630      	mov	r0, r6
 8009700:	4639      	mov	r1, r7
 8009702:	f7f7 f8bb 	bl	800087c <__aeabi_ddiv>
 8009706:	f7f7 fa3f 	bl	8000b88 <__aeabi_d2iz>
 800970a:	4682      	mov	sl, r0
 800970c:	f7f6 ff22 	bl	8000554 <__aeabi_i2d>
 8009710:	4642      	mov	r2, r8
 8009712:	464b      	mov	r3, r9
 8009714:	f7f6 ff88 	bl	8000628 <__aeabi_dmul>
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009724:	f7f6 fdc8 	bl	80002b8 <__aeabi_dsub>
 8009728:	f805 6b01 	strb.w	r6, [r5], #1
 800972c:	9e01      	ldr	r6, [sp, #4]
 800972e:	9f03      	ldr	r7, [sp, #12]
 8009730:	1bae      	subs	r6, r5, r6
 8009732:	42b7      	cmp	r7, r6
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	d135      	bne.n	80097a6 <_dtoa_r+0x6e6>
 800973a:	f7f6 fdbf 	bl	80002bc <__adddf3>
 800973e:	4642      	mov	r2, r8
 8009740:	464b      	mov	r3, r9
 8009742:	4606      	mov	r6, r0
 8009744:	460f      	mov	r7, r1
 8009746:	f7f7 f9ff 	bl	8000b48 <__aeabi_dcmpgt>
 800974a:	b9d0      	cbnz	r0, 8009782 <_dtoa_r+0x6c2>
 800974c:	4642      	mov	r2, r8
 800974e:	464b      	mov	r3, r9
 8009750:	4630      	mov	r0, r6
 8009752:	4639      	mov	r1, r7
 8009754:	f7f7 f9d0 	bl	8000af8 <__aeabi_dcmpeq>
 8009758:	b110      	cbz	r0, 8009760 <_dtoa_r+0x6a0>
 800975a:	f01a 0f01 	tst.w	sl, #1
 800975e:	d110      	bne.n	8009782 <_dtoa_r+0x6c2>
 8009760:	4620      	mov	r0, r4
 8009762:	ee18 1a10 	vmov	r1, s16
 8009766:	f000 fbdf 	bl	8009f28 <_Bfree>
 800976a:	2300      	movs	r3, #0
 800976c:	9800      	ldr	r0, [sp, #0]
 800976e:	702b      	strb	r3, [r5, #0]
 8009770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009772:	3001      	adds	r0, #1
 8009774:	6018      	str	r0, [r3, #0]
 8009776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009778:	2b00      	cmp	r3, #0
 800977a:	f43f acf1 	beq.w	8009160 <_dtoa_r+0xa0>
 800977e:	601d      	str	r5, [r3, #0]
 8009780:	e4ee      	b.n	8009160 <_dtoa_r+0xa0>
 8009782:	9f00      	ldr	r7, [sp, #0]
 8009784:	462b      	mov	r3, r5
 8009786:	461d      	mov	r5, r3
 8009788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800978c:	2a39      	cmp	r2, #57	; 0x39
 800978e:	d106      	bne.n	800979e <_dtoa_r+0x6de>
 8009790:	9a01      	ldr	r2, [sp, #4]
 8009792:	429a      	cmp	r2, r3
 8009794:	d1f7      	bne.n	8009786 <_dtoa_r+0x6c6>
 8009796:	9901      	ldr	r1, [sp, #4]
 8009798:	2230      	movs	r2, #48	; 0x30
 800979a:	3701      	adds	r7, #1
 800979c:	700a      	strb	r2, [r1, #0]
 800979e:	781a      	ldrb	r2, [r3, #0]
 80097a0:	3201      	adds	r2, #1
 80097a2:	701a      	strb	r2, [r3, #0]
 80097a4:	e790      	b.n	80096c8 <_dtoa_r+0x608>
 80097a6:	4ba6      	ldr	r3, [pc, #664]	; (8009a40 <_dtoa_r+0x980>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	f7f6 ff3d 	bl	8000628 <__aeabi_dmul>
 80097ae:	2200      	movs	r2, #0
 80097b0:	2300      	movs	r3, #0
 80097b2:	4606      	mov	r6, r0
 80097b4:	460f      	mov	r7, r1
 80097b6:	f7f7 f99f 	bl	8000af8 <__aeabi_dcmpeq>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d09d      	beq.n	80096fa <_dtoa_r+0x63a>
 80097be:	e7cf      	b.n	8009760 <_dtoa_r+0x6a0>
 80097c0:	9a08      	ldr	r2, [sp, #32]
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	f000 80d7 	beq.w	8009976 <_dtoa_r+0x8b6>
 80097c8:	9a06      	ldr	r2, [sp, #24]
 80097ca:	2a01      	cmp	r2, #1
 80097cc:	f300 80ba 	bgt.w	8009944 <_dtoa_r+0x884>
 80097d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097d2:	2a00      	cmp	r2, #0
 80097d4:	f000 80b2 	beq.w	800993c <_dtoa_r+0x87c>
 80097d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097dc:	9e07      	ldr	r6, [sp, #28]
 80097de:	9d04      	ldr	r5, [sp, #16]
 80097e0:	9a04      	ldr	r2, [sp, #16]
 80097e2:	441a      	add	r2, r3
 80097e4:	9204      	str	r2, [sp, #16]
 80097e6:	9a05      	ldr	r2, [sp, #20]
 80097e8:	2101      	movs	r1, #1
 80097ea:	441a      	add	r2, r3
 80097ec:	4620      	mov	r0, r4
 80097ee:	9205      	str	r2, [sp, #20]
 80097f0:	f000 fc52 	bl	800a098 <__i2b>
 80097f4:	4607      	mov	r7, r0
 80097f6:	2d00      	cmp	r5, #0
 80097f8:	dd0c      	ble.n	8009814 <_dtoa_r+0x754>
 80097fa:	9b05      	ldr	r3, [sp, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dd09      	ble.n	8009814 <_dtoa_r+0x754>
 8009800:	42ab      	cmp	r3, r5
 8009802:	9a04      	ldr	r2, [sp, #16]
 8009804:	bfa8      	it	ge
 8009806:	462b      	movge	r3, r5
 8009808:	1ad2      	subs	r2, r2, r3
 800980a:	9204      	str	r2, [sp, #16]
 800980c:	9a05      	ldr	r2, [sp, #20]
 800980e:	1aed      	subs	r5, r5, r3
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	9305      	str	r3, [sp, #20]
 8009814:	9b07      	ldr	r3, [sp, #28]
 8009816:	b31b      	cbz	r3, 8009860 <_dtoa_r+0x7a0>
 8009818:	9b08      	ldr	r3, [sp, #32]
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 80af 	beq.w	800997e <_dtoa_r+0x8be>
 8009820:	2e00      	cmp	r6, #0
 8009822:	dd13      	ble.n	800984c <_dtoa_r+0x78c>
 8009824:	4639      	mov	r1, r7
 8009826:	4632      	mov	r2, r6
 8009828:	4620      	mov	r0, r4
 800982a:	f000 fcf5 	bl	800a218 <__pow5mult>
 800982e:	ee18 2a10 	vmov	r2, s16
 8009832:	4601      	mov	r1, r0
 8009834:	4607      	mov	r7, r0
 8009836:	4620      	mov	r0, r4
 8009838:	f000 fc44 	bl	800a0c4 <__multiply>
 800983c:	ee18 1a10 	vmov	r1, s16
 8009840:	4680      	mov	r8, r0
 8009842:	4620      	mov	r0, r4
 8009844:	f000 fb70 	bl	8009f28 <_Bfree>
 8009848:	ee08 8a10 	vmov	s16, r8
 800984c:	9b07      	ldr	r3, [sp, #28]
 800984e:	1b9a      	subs	r2, r3, r6
 8009850:	d006      	beq.n	8009860 <_dtoa_r+0x7a0>
 8009852:	ee18 1a10 	vmov	r1, s16
 8009856:	4620      	mov	r0, r4
 8009858:	f000 fcde 	bl	800a218 <__pow5mult>
 800985c:	ee08 0a10 	vmov	s16, r0
 8009860:	2101      	movs	r1, #1
 8009862:	4620      	mov	r0, r4
 8009864:	f000 fc18 	bl	800a098 <__i2b>
 8009868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800986a:	2b00      	cmp	r3, #0
 800986c:	4606      	mov	r6, r0
 800986e:	f340 8088 	ble.w	8009982 <_dtoa_r+0x8c2>
 8009872:	461a      	mov	r2, r3
 8009874:	4601      	mov	r1, r0
 8009876:	4620      	mov	r0, r4
 8009878:	f000 fcce 	bl	800a218 <__pow5mult>
 800987c:	9b06      	ldr	r3, [sp, #24]
 800987e:	2b01      	cmp	r3, #1
 8009880:	4606      	mov	r6, r0
 8009882:	f340 8081 	ble.w	8009988 <_dtoa_r+0x8c8>
 8009886:	f04f 0800 	mov.w	r8, #0
 800988a:	6933      	ldr	r3, [r6, #16]
 800988c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009890:	6918      	ldr	r0, [r3, #16]
 8009892:	f000 fbb1 	bl	8009ff8 <__hi0bits>
 8009896:	f1c0 0020 	rsb	r0, r0, #32
 800989a:	9b05      	ldr	r3, [sp, #20]
 800989c:	4418      	add	r0, r3
 800989e:	f010 001f 	ands.w	r0, r0, #31
 80098a2:	f000 8092 	beq.w	80099ca <_dtoa_r+0x90a>
 80098a6:	f1c0 0320 	rsb	r3, r0, #32
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	f340 808a 	ble.w	80099c4 <_dtoa_r+0x904>
 80098b0:	f1c0 001c 	rsb	r0, r0, #28
 80098b4:	9b04      	ldr	r3, [sp, #16]
 80098b6:	4403      	add	r3, r0
 80098b8:	9304      	str	r3, [sp, #16]
 80098ba:	9b05      	ldr	r3, [sp, #20]
 80098bc:	4403      	add	r3, r0
 80098be:	4405      	add	r5, r0
 80098c0:	9305      	str	r3, [sp, #20]
 80098c2:	9b04      	ldr	r3, [sp, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	dd07      	ble.n	80098d8 <_dtoa_r+0x818>
 80098c8:	ee18 1a10 	vmov	r1, s16
 80098cc:	461a      	mov	r2, r3
 80098ce:	4620      	mov	r0, r4
 80098d0:	f000 fcfc 	bl	800a2cc <__lshift>
 80098d4:	ee08 0a10 	vmov	s16, r0
 80098d8:	9b05      	ldr	r3, [sp, #20]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	dd05      	ble.n	80098ea <_dtoa_r+0x82a>
 80098de:	4631      	mov	r1, r6
 80098e0:	461a      	mov	r2, r3
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 fcf2 	bl	800a2cc <__lshift>
 80098e8:	4606      	mov	r6, r0
 80098ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d06e      	beq.n	80099ce <_dtoa_r+0x90e>
 80098f0:	ee18 0a10 	vmov	r0, s16
 80098f4:	4631      	mov	r1, r6
 80098f6:	f000 fd59 	bl	800a3ac <__mcmp>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	da67      	bge.n	80099ce <_dtoa_r+0x90e>
 80098fe:	9b00      	ldr	r3, [sp, #0]
 8009900:	3b01      	subs	r3, #1
 8009902:	ee18 1a10 	vmov	r1, s16
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	220a      	movs	r2, #10
 800990a:	2300      	movs	r3, #0
 800990c:	4620      	mov	r0, r4
 800990e:	f000 fb2d 	bl	8009f6c <__multadd>
 8009912:	9b08      	ldr	r3, [sp, #32]
 8009914:	ee08 0a10 	vmov	s16, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 81b1 	beq.w	8009c80 <_dtoa_r+0xbc0>
 800991e:	2300      	movs	r3, #0
 8009920:	4639      	mov	r1, r7
 8009922:	220a      	movs	r2, #10
 8009924:	4620      	mov	r0, r4
 8009926:	f000 fb21 	bl	8009f6c <__multadd>
 800992a:	9b02      	ldr	r3, [sp, #8]
 800992c:	2b00      	cmp	r3, #0
 800992e:	4607      	mov	r7, r0
 8009930:	f300 808e 	bgt.w	8009a50 <_dtoa_r+0x990>
 8009934:	9b06      	ldr	r3, [sp, #24]
 8009936:	2b02      	cmp	r3, #2
 8009938:	dc51      	bgt.n	80099de <_dtoa_r+0x91e>
 800993a:	e089      	b.n	8009a50 <_dtoa_r+0x990>
 800993c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800993e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009942:	e74b      	b.n	80097dc <_dtoa_r+0x71c>
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	1e5e      	subs	r6, r3, #1
 8009948:	9b07      	ldr	r3, [sp, #28]
 800994a:	42b3      	cmp	r3, r6
 800994c:	bfbf      	itttt	lt
 800994e:	9b07      	ldrlt	r3, [sp, #28]
 8009950:	9607      	strlt	r6, [sp, #28]
 8009952:	1af2      	sublt	r2, r6, r3
 8009954:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009956:	bfb6      	itet	lt
 8009958:	189b      	addlt	r3, r3, r2
 800995a:	1b9e      	subge	r6, r3, r6
 800995c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800995e:	9b03      	ldr	r3, [sp, #12]
 8009960:	bfb8      	it	lt
 8009962:	2600      	movlt	r6, #0
 8009964:	2b00      	cmp	r3, #0
 8009966:	bfb7      	itett	lt
 8009968:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800996c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009970:	1a9d      	sublt	r5, r3, r2
 8009972:	2300      	movlt	r3, #0
 8009974:	e734      	b.n	80097e0 <_dtoa_r+0x720>
 8009976:	9e07      	ldr	r6, [sp, #28]
 8009978:	9d04      	ldr	r5, [sp, #16]
 800997a:	9f08      	ldr	r7, [sp, #32]
 800997c:	e73b      	b.n	80097f6 <_dtoa_r+0x736>
 800997e:	9a07      	ldr	r2, [sp, #28]
 8009980:	e767      	b.n	8009852 <_dtoa_r+0x792>
 8009982:	9b06      	ldr	r3, [sp, #24]
 8009984:	2b01      	cmp	r3, #1
 8009986:	dc18      	bgt.n	80099ba <_dtoa_r+0x8fa>
 8009988:	f1ba 0f00 	cmp.w	sl, #0
 800998c:	d115      	bne.n	80099ba <_dtoa_r+0x8fa>
 800998e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009992:	b993      	cbnz	r3, 80099ba <_dtoa_r+0x8fa>
 8009994:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009998:	0d1b      	lsrs	r3, r3, #20
 800999a:	051b      	lsls	r3, r3, #20
 800999c:	b183      	cbz	r3, 80099c0 <_dtoa_r+0x900>
 800999e:	9b04      	ldr	r3, [sp, #16]
 80099a0:	3301      	adds	r3, #1
 80099a2:	9304      	str	r3, [sp, #16]
 80099a4:	9b05      	ldr	r3, [sp, #20]
 80099a6:	3301      	adds	r3, #1
 80099a8:	9305      	str	r3, [sp, #20]
 80099aa:	f04f 0801 	mov.w	r8, #1
 80099ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f47f af6a 	bne.w	800988a <_dtoa_r+0x7ca>
 80099b6:	2001      	movs	r0, #1
 80099b8:	e76f      	b.n	800989a <_dtoa_r+0x7da>
 80099ba:	f04f 0800 	mov.w	r8, #0
 80099be:	e7f6      	b.n	80099ae <_dtoa_r+0x8ee>
 80099c0:	4698      	mov	r8, r3
 80099c2:	e7f4      	b.n	80099ae <_dtoa_r+0x8ee>
 80099c4:	f43f af7d 	beq.w	80098c2 <_dtoa_r+0x802>
 80099c8:	4618      	mov	r0, r3
 80099ca:	301c      	adds	r0, #28
 80099cc:	e772      	b.n	80098b4 <_dtoa_r+0x7f4>
 80099ce:	9b03      	ldr	r3, [sp, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	dc37      	bgt.n	8009a44 <_dtoa_r+0x984>
 80099d4:	9b06      	ldr	r3, [sp, #24]
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	dd34      	ble.n	8009a44 <_dtoa_r+0x984>
 80099da:	9b03      	ldr	r3, [sp, #12]
 80099dc:	9302      	str	r3, [sp, #8]
 80099de:	9b02      	ldr	r3, [sp, #8]
 80099e0:	b96b      	cbnz	r3, 80099fe <_dtoa_r+0x93e>
 80099e2:	4631      	mov	r1, r6
 80099e4:	2205      	movs	r2, #5
 80099e6:	4620      	mov	r0, r4
 80099e8:	f000 fac0 	bl	8009f6c <__multadd>
 80099ec:	4601      	mov	r1, r0
 80099ee:	4606      	mov	r6, r0
 80099f0:	ee18 0a10 	vmov	r0, s16
 80099f4:	f000 fcda 	bl	800a3ac <__mcmp>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	f73f adbb 	bgt.w	8009574 <_dtoa_r+0x4b4>
 80099fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a00:	9d01      	ldr	r5, [sp, #4]
 8009a02:	43db      	mvns	r3, r3
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	f04f 0800 	mov.w	r8, #0
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 fa8b 	bl	8009f28 <_Bfree>
 8009a12:	2f00      	cmp	r7, #0
 8009a14:	f43f aea4 	beq.w	8009760 <_dtoa_r+0x6a0>
 8009a18:	f1b8 0f00 	cmp.w	r8, #0
 8009a1c:	d005      	beq.n	8009a2a <_dtoa_r+0x96a>
 8009a1e:	45b8      	cmp	r8, r7
 8009a20:	d003      	beq.n	8009a2a <_dtoa_r+0x96a>
 8009a22:	4641      	mov	r1, r8
 8009a24:	4620      	mov	r0, r4
 8009a26:	f000 fa7f 	bl	8009f28 <_Bfree>
 8009a2a:	4639      	mov	r1, r7
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f000 fa7b 	bl	8009f28 <_Bfree>
 8009a32:	e695      	b.n	8009760 <_dtoa_r+0x6a0>
 8009a34:	2600      	movs	r6, #0
 8009a36:	4637      	mov	r7, r6
 8009a38:	e7e1      	b.n	80099fe <_dtoa_r+0x93e>
 8009a3a:	9700      	str	r7, [sp, #0]
 8009a3c:	4637      	mov	r7, r6
 8009a3e:	e599      	b.n	8009574 <_dtoa_r+0x4b4>
 8009a40:	40240000 	.word	0x40240000
 8009a44:	9b08      	ldr	r3, [sp, #32]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 80ca 	beq.w	8009be0 <_dtoa_r+0xb20>
 8009a4c:	9b03      	ldr	r3, [sp, #12]
 8009a4e:	9302      	str	r3, [sp, #8]
 8009a50:	2d00      	cmp	r5, #0
 8009a52:	dd05      	ble.n	8009a60 <_dtoa_r+0x9a0>
 8009a54:	4639      	mov	r1, r7
 8009a56:	462a      	mov	r2, r5
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 fc37 	bl	800a2cc <__lshift>
 8009a5e:	4607      	mov	r7, r0
 8009a60:	f1b8 0f00 	cmp.w	r8, #0
 8009a64:	d05b      	beq.n	8009b1e <_dtoa_r+0xa5e>
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f000 fa1d 	bl	8009ea8 <_Balloc>
 8009a6e:	4605      	mov	r5, r0
 8009a70:	b928      	cbnz	r0, 8009a7e <_dtoa_r+0x9be>
 8009a72:	4b87      	ldr	r3, [pc, #540]	; (8009c90 <_dtoa_r+0xbd0>)
 8009a74:	4602      	mov	r2, r0
 8009a76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a7a:	f7ff bb3b 	b.w	80090f4 <_dtoa_r+0x34>
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	3202      	adds	r2, #2
 8009a82:	0092      	lsls	r2, r2, #2
 8009a84:	f107 010c 	add.w	r1, r7, #12
 8009a88:	300c      	adds	r0, #12
 8009a8a:	f7fe fdb9 	bl	8008600 <memcpy>
 8009a8e:	2201      	movs	r2, #1
 8009a90:	4629      	mov	r1, r5
 8009a92:	4620      	mov	r0, r4
 8009a94:	f000 fc1a 	bl	800a2cc <__lshift>
 8009a98:	9b01      	ldr	r3, [sp, #4]
 8009a9a:	f103 0901 	add.w	r9, r3, #1
 8009a9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	9305      	str	r3, [sp, #20]
 8009aa6:	f00a 0301 	and.w	r3, sl, #1
 8009aaa:	46b8      	mov	r8, r7
 8009aac:	9304      	str	r3, [sp, #16]
 8009aae:	4607      	mov	r7, r0
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	ee18 0a10 	vmov	r0, s16
 8009ab6:	f7ff fa78 	bl	8008faa <quorem>
 8009aba:	4641      	mov	r1, r8
 8009abc:	9002      	str	r0, [sp, #8]
 8009abe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009ac2:	ee18 0a10 	vmov	r0, s16
 8009ac6:	f000 fc71 	bl	800a3ac <__mcmp>
 8009aca:	463a      	mov	r2, r7
 8009acc:	9003      	str	r0, [sp, #12]
 8009ace:	4631      	mov	r1, r6
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f000 fc87 	bl	800a3e4 <__mdiff>
 8009ad6:	68c2      	ldr	r2, [r0, #12]
 8009ad8:	f109 3bff 	add.w	fp, r9, #4294967295
 8009adc:	4605      	mov	r5, r0
 8009ade:	bb02      	cbnz	r2, 8009b22 <_dtoa_r+0xa62>
 8009ae0:	4601      	mov	r1, r0
 8009ae2:	ee18 0a10 	vmov	r0, s16
 8009ae6:	f000 fc61 	bl	800a3ac <__mcmp>
 8009aea:	4602      	mov	r2, r0
 8009aec:	4629      	mov	r1, r5
 8009aee:	4620      	mov	r0, r4
 8009af0:	9207      	str	r2, [sp, #28]
 8009af2:	f000 fa19 	bl	8009f28 <_Bfree>
 8009af6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009afa:	ea43 0102 	orr.w	r1, r3, r2
 8009afe:	9b04      	ldr	r3, [sp, #16]
 8009b00:	430b      	orrs	r3, r1
 8009b02:	464d      	mov	r5, r9
 8009b04:	d10f      	bne.n	8009b26 <_dtoa_r+0xa66>
 8009b06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b0a:	d02a      	beq.n	8009b62 <_dtoa_r+0xaa2>
 8009b0c:	9b03      	ldr	r3, [sp, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	dd02      	ble.n	8009b18 <_dtoa_r+0xa58>
 8009b12:	9b02      	ldr	r3, [sp, #8]
 8009b14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009b18:	f88b a000 	strb.w	sl, [fp]
 8009b1c:	e775      	b.n	8009a0a <_dtoa_r+0x94a>
 8009b1e:	4638      	mov	r0, r7
 8009b20:	e7ba      	b.n	8009a98 <_dtoa_r+0x9d8>
 8009b22:	2201      	movs	r2, #1
 8009b24:	e7e2      	b.n	8009aec <_dtoa_r+0xa2c>
 8009b26:	9b03      	ldr	r3, [sp, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	db04      	blt.n	8009b36 <_dtoa_r+0xa76>
 8009b2c:	9906      	ldr	r1, [sp, #24]
 8009b2e:	430b      	orrs	r3, r1
 8009b30:	9904      	ldr	r1, [sp, #16]
 8009b32:	430b      	orrs	r3, r1
 8009b34:	d122      	bne.n	8009b7c <_dtoa_r+0xabc>
 8009b36:	2a00      	cmp	r2, #0
 8009b38:	ddee      	ble.n	8009b18 <_dtoa_r+0xa58>
 8009b3a:	ee18 1a10 	vmov	r1, s16
 8009b3e:	2201      	movs	r2, #1
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 fbc3 	bl	800a2cc <__lshift>
 8009b46:	4631      	mov	r1, r6
 8009b48:	ee08 0a10 	vmov	s16, r0
 8009b4c:	f000 fc2e 	bl	800a3ac <__mcmp>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	dc03      	bgt.n	8009b5c <_dtoa_r+0xa9c>
 8009b54:	d1e0      	bne.n	8009b18 <_dtoa_r+0xa58>
 8009b56:	f01a 0f01 	tst.w	sl, #1
 8009b5a:	d0dd      	beq.n	8009b18 <_dtoa_r+0xa58>
 8009b5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b60:	d1d7      	bne.n	8009b12 <_dtoa_r+0xa52>
 8009b62:	2339      	movs	r3, #57	; 0x39
 8009b64:	f88b 3000 	strb.w	r3, [fp]
 8009b68:	462b      	mov	r3, r5
 8009b6a:	461d      	mov	r5, r3
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b72:	2a39      	cmp	r2, #57	; 0x39
 8009b74:	d071      	beq.n	8009c5a <_dtoa_r+0xb9a>
 8009b76:	3201      	adds	r2, #1
 8009b78:	701a      	strb	r2, [r3, #0]
 8009b7a:	e746      	b.n	8009a0a <_dtoa_r+0x94a>
 8009b7c:	2a00      	cmp	r2, #0
 8009b7e:	dd07      	ble.n	8009b90 <_dtoa_r+0xad0>
 8009b80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b84:	d0ed      	beq.n	8009b62 <_dtoa_r+0xaa2>
 8009b86:	f10a 0301 	add.w	r3, sl, #1
 8009b8a:	f88b 3000 	strb.w	r3, [fp]
 8009b8e:	e73c      	b.n	8009a0a <_dtoa_r+0x94a>
 8009b90:	9b05      	ldr	r3, [sp, #20]
 8009b92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009b96:	4599      	cmp	r9, r3
 8009b98:	d047      	beq.n	8009c2a <_dtoa_r+0xb6a>
 8009b9a:	ee18 1a10 	vmov	r1, s16
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	220a      	movs	r2, #10
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f000 f9e2 	bl	8009f6c <__multadd>
 8009ba8:	45b8      	cmp	r8, r7
 8009baa:	ee08 0a10 	vmov	s16, r0
 8009bae:	f04f 0300 	mov.w	r3, #0
 8009bb2:	f04f 020a 	mov.w	r2, #10
 8009bb6:	4641      	mov	r1, r8
 8009bb8:	4620      	mov	r0, r4
 8009bba:	d106      	bne.n	8009bca <_dtoa_r+0xb0a>
 8009bbc:	f000 f9d6 	bl	8009f6c <__multadd>
 8009bc0:	4680      	mov	r8, r0
 8009bc2:	4607      	mov	r7, r0
 8009bc4:	f109 0901 	add.w	r9, r9, #1
 8009bc8:	e772      	b.n	8009ab0 <_dtoa_r+0x9f0>
 8009bca:	f000 f9cf 	bl	8009f6c <__multadd>
 8009bce:	4639      	mov	r1, r7
 8009bd0:	4680      	mov	r8, r0
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	220a      	movs	r2, #10
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f000 f9c8 	bl	8009f6c <__multadd>
 8009bdc:	4607      	mov	r7, r0
 8009bde:	e7f1      	b.n	8009bc4 <_dtoa_r+0xb04>
 8009be0:	9b03      	ldr	r3, [sp, #12]
 8009be2:	9302      	str	r3, [sp, #8]
 8009be4:	9d01      	ldr	r5, [sp, #4]
 8009be6:	ee18 0a10 	vmov	r0, s16
 8009bea:	4631      	mov	r1, r6
 8009bec:	f7ff f9dd 	bl	8008faa <quorem>
 8009bf0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009bf4:	9b01      	ldr	r3, [sp, #4]
 8009bf6:	f805 ab01 	strb.w	sl, [r5], #1
 8009bfa:	1aea      	subs	r2, r5, r3
 8009bfc:	9b02      	ldr	r3, [sp, #8]
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	dd09      	ble.n	8009c16 <_dtoa_r+0xb56>
 8009c02:	ee18 1a10 	vmov	r1, s16
 8009c06:	2300      	movs	r3, #0
 8009c08:	220a      	movs	r2, #10
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 f9ae 	bl	8009f6c <__multadd>
 8009c10:	ee08 0a10 	vmov	s16, r0
 8009c14:	e7e7      	b.n	8009be6 <_dtoa_r+0xb26>
 8009c16:	9b02      	ldr	r3, [sp, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bfc8      	it	gt
 8009c1c:	461d      	movgt	r5, r3
 8009c1e:	9b01      	ldr	r3, [sp, #4]
 8009c20:	bfd8      	it	le
 8009c22:	2501      	movle	r5, #1
 8009c24:	441d      	add	r5, r3
 8009c26:	f04f 0800 	mov.w	r8, #0
 8009c2a:	ee18 1a10 	vmov	r1, s16
 8009c2e:	2201      	movs	r2, #1
 8009c30:	4620      	mov	r0, r4
 8009c32:	f000 fb4b 	bl	800a2cc <__lshift>
 8009c36:	4631      	mov	r1, r6
 8009c38:	ee08 0a10 	vmov	s16, r0
 8009c3c:	f000 fbb6 	bl	800a3ac <__mcmp>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	dc91      	bgt.n	8009b68 <_dtoa_r+0xaa8>
 8009c44:	d102      	bne.n	8009c4c <_dtoa_r+0xb8c>
 8009c46:	f01a 0f01 	tst.w	sl, #1
 8009c4a:	d18d      	bne.n	8009b68 <_dtoa_r+0xaa8>
 8009c4c:	462b      	mov	r3, r5
 8009c4e:	461d      	mov	r5, r3
 8009c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c54:	2a30      	cmp	r2, #48	; 0x30
 8009c56:	d0fa      	beq.n	8009c4e <_dtoa_r+0xb8e>
 8009c58:	e6d7      	b.n	8009a0a <_dtoa_r+0x94a>
 8009c5a:	9a01      	ldr	r2, [sp, #4]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d184      	bne.n	8009b6a <_dtoa_r+0xaaa>
 8009c60:	9b00      	ldr	r3, [sp, #0]
 8009c62:	3301      	adds	r3, #1
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	2331      	movs	r3, #49	; 0x31
 8009c68:	7013      	strb	r3, [r2, #0]
 8009c6a:	e6ce      	b.n	8009a0a <_dtoa_r+0x94a>
 8009c6c:	4b09      	ldr	r3, [pc, #36]	; (8009c94 <_dtoa_r+0xbd4>)
 8009c6e:	f7ff ba95 	b.w	800919c <_dtoa_r+0xdc>
 8009c72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f47f aa6e 	bne.w	8009156 <_dtoa_r+0x96>
 8009c7a:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <_dtoa_r+0xbd8>)
 8009c7c:	f7ff ba8e 	b.w	800919c <_dtoa_r+0xdc>
 8009c80:	9b02      	ldr	r3, [sp, #8]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dcae      	bgt.n	8009be4 <_dtoa_r+0xb24>
 8009c86:	9b06      	ldr	r3, [sp, #24]
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	f73f aea8 	bgt.w	80099de <_dtoa_r+0x91e>
 8009c8e:	e7a9      	b.n	8009be4 <_dtoa_r+0xb24>
 8009c90:	0800b5f3 	.word	0x0800b5f3
 8009c94:	0800b550 	.word	0x0800b550
 8009c98:	0800b574 	.word	0x0800b574

08009c9c <std>:
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	b510      	push	{r4, lr}
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	e9c0 3300 	strd	r3, r3, [r0]
 8009ca6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009caa:	6083      	str	r3, [r0, #8]
 8009cac:	8181      	strh	r1, [r0, #12]
 8009cae:	6643      	str	r3, [r0, #100]	; 0x64
 8009cb0:	81c2      	strh	r2, [r0, #14]
 8009cb2:	6183      	str	r3, [r0, #24]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	2208      	movs	r2, #8
 8009cb8:	305c      	adds	r0, #92	; 0x5c
 8009cba:	f7fe fcaf 	bl	800861c <memset>
 8009cbe:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <std+0x38>)
 8009cc0:	6263      	str	r3, [r4, #36]	; 0x24
 8009cc2:	4b05      	ldr	r3, [pc, #20]	; (8009cd8 <std+0x3c>)
 8009cc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cc6:	4b05      	ldr	r3, [pc, #20]	; (8009cdc <std+0x40>)
 8009cc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cca:	4b05      	ldr	r3, [pc, #20]	; (8009ce0 <std+0x44>)
 8009ccc:	6224      	str	r4, [r4, #32]
 8009cce:	6323      	str	r3, [r4, #48]	; 0x30
 8009cd0:	bd10      	pop	{r4, pc}
 8009cd2:	bf00      	nop
 8009cd4:	0800ad29 	.word	0x0800ad29
 8009cd8:	0800ad4b 	.word	0x0800ad4b
 8009cdc:	0800ad83 	.word	0x0800ad83
 8009ce0:	0800ada7 	.word	0x0800ada7

08009ce4 <_cleanup_r>:
 8009ce4:	4901      	ldr	r1, [pc, #4]	; (8009cec <_cleanup_r+0x8>)
 8009ce6:	f000 b8af 	b.w	8009e48 <_fwalk_reent>
 8009cea:	bf00      	nop
 8009cec:	0800b0bd 	.word	0x0800b0bd

08009cf0 <__sfmoreglue>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	2268      	movs	r2, #104	; 0x68
 8009cf4:	1e4d      	subs	r5, r1, #1
 8009cf6:	4355      	muls	r5, r2
 8009cf8:	460e      	mov	r6, r1
 8009cfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cfe:	f000 fcd9 	bl	800a6b4 <_malloc_r>
 8009d02:	4604      	mov	r4, r0
 8009d04:	b140      	cbz	r0, 8009d18 <__sfmoreglue+0x28>
 8009d06:	2100      	movs	r1, #0
 8009d08:	e9c0 1600 	strd	r1, r6, [r0]
 8009d0c:	300c      	adds	r0, #12
 8009d0e:	60a0      	str	r0, [r4, #8]
 8009d10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d14:	f7fe fc82 	bl	800861c <memset>
 8009d18:	4620      	mov	r0, r4
 8009d1a:	bd70      	pop	{r4, r5, r6, pc}

08009d1c <__sfp_lock_acquire>:
 8009d1c:	4801      	ldr	r0, [pc, #4]	; (8009d24 <__sfp_lock_acquire+0x8>)
 8009d1e:	f000 b8b8 	b.w	8009e92 <__retarget_lock_acquire_recursive>
 8009d22:	bf00      	nop
 8009d24:	20000779 	.word	0x20000779

08009d28 <__sfp_lock_release>:
 8009d28:	4801      	ldr	r0, [pc, #4]	; (8009d30 <__sfp_lock_release+0x8>)
 8009d2a:	f000 b8b3 	b.w	8009e94 <__retarget_lock_release_recursive>
 8009d2e:	bf00      	nop
 8009d30:	20000779 	.word	0x20000779

08009d34 <__sinit_lock_acquire>:
 8009d34:	4801      	ldr	r0, [pc, #4]	; (8009d3c <__sinit_lock_acquire+0x8>)
 8009d36:	f000 b8ac 	b.w	8009e92 <__retarget_lock_acquire_recursive>
 8009d3a:	bf00      	nop
 8009d3c:	2000077a 	.word	0x2000077a

08009d40 <__sinit_lock_release>:
 8009d40:	4801      	ldr	r0, [pc, #4]	; (8009d48 <__sinit_lock_release+0x8>)
 8009d42:	f000 b8a7 	b.w	8009e94 <__retarget_lock_release_recursive>
 8009d46:	bf00      	nop
 8009d48:	2000077a 	.word	0x2000077a

08009d4c <__sinit>:
 8009d4c:	b510      	push	{r4, lr}
 8009d4e:	4604      	mov	r4, r0
 8009d50:	f7ff fff0 	bl	8009d34 <__sinit_lock_acquire>
 8009d54:	69a3      	ldr	r3, [r4, #24]
 8009d56:	b11b      	cbz	r3, 8009d60 <__sinit+0x14>
 8009d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d5c:	f7ff bff0 	b.w	8009d40 <__sinit_lock_release>
 8009d60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d64:	6523      	str	r3, [r4, #80]	; 0x50
 8009d66:	4b13      	ldr	r3, [pc, #76]	; (8009db4 <__sinit+0x68>)
 8009d68:	4a13      	ldr	r2, [pc, #76]	; (8009db8 <__sinit+0x6c>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d6e:	42a3      	cmp	r3, r4
 8009d70:	bf04      	itt	eq
 8009d72:	2301      	moveq	r3, #1
 8009d74:	61a3      	streq	r3, [r4, #24]
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 f820 	bl	8009dbc <__sfp>
 8009d7c:	6060      	str	r0, [r4, #4]
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f000 f81c 	bl	8009dbc <__sfp>
 8009d84:	60a0      	str	r0, [r4, #8]
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 f818 	bl	8009dbc <__sfp>
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	60e0      	str	r0, [r4, #12]
 8009d90:	2104      	movs	r1, #4
 8009d92:	6860      	ldr	r0, [r4, #4]
 8009d94:	f7ff ff82 	bl	8009c9c <std>
 8009d98:	68a0      	ldr	r0, [r4, #8]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	2109      	movs	r1, #9
 8009d9e:	f7ff ff7d 	bl	8009c9c <std>
 8009da2:	68e0      	ldr	r0, [r4, #12]
 8009da4:	2202      	movs	r2, #2
 8009da6:	2112      	movs	r1, #18
 8009da8:	f7ff ff78 	bl	8009c9c <std>
 8009dac:	2301      	movs	r3, #1
 8009dae:	61a3      	str	r3, [r4, #24]
 8009db0:	e7d2      	b.n	8009d58 <__sinit+0xc>
 8009db2:	bf00      	nop
 8009db4:	0800b53c 	.word	0x0800b53c
 8009db8:	08009ce5 	.word	0x08009ce5

08009dbc <__sfp>:
 8009dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbe:	4607      	mov	r7, r0
 8009dc0:	f7ff ffac 	bl	8009d1c <__sfp_lock_acquire>
 8009dc4:	4b1e      	ldr	r3, [pc, #120]	; (8009e40 <__sfp+0x84>)
 8009dc6:	681e      	ldr	r6, [r3, #0]
 8009dc8:	69b3      	ldr	r3, [r6, #24]
 8009dca:	b913      	cbnz	r3, 8009dd2 <__sfp+0x16>
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f7ff ffbd 	bl	8009d4c <__sinit>
 8009dd2:	3648      	adds	r6, #72	; 0x48
 8009dd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	d503      	bpl.n	8009de4 <__sfp+0x28>
 8009ddc:	6833      	ldr	r3, [r6, #0]
 8009dde:	b30b      	cbz	r3, 8009e24 <__sfp+0x68>
 8009de0:	6836      	ldr	r6, [r6, #0]
 8009de2:	e7f7      	b.n	8009dd4 <__sfp+0x18>
 8009de4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009de8:	b9d5      	cbnz	r5, 8009e20 <__sfp+0x64>
 8009dea:	4b16      	ldr	r3, [pc, #88]	; (8009e44 <__sfp+0x88>)
 8009dec:	60e3      	str	r3, [r4, #12]
 8009dee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009df2:	6665      	str	r5, [r4, #100]	; 0x64
 8009df4:	f000 f84c 	bl	8009e90 <__retarget_lock_init_recursive>
 8009df8:	f7ff ff96 	bl	8009d28 <__sfp_lock_release>
 8009dfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e04:	6025      	str	r5, [r4, #0]
 8009e06:	61a5      	str	r5, [r4, #24]
 8009e08:	2208      	movs	r2, #8
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e10:	f7fe fc04 	bl	800861c <memset>
 8009e14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e20:	3468      	adds	r4, #104	; 0x68
 8009e22:	e7d9      	b.n	8009dd8 <__sfp+0x1c>
 8009e24:	2104      	movs	r1, #4
 8009e26:	4638      	mov	r0, r7
 8009e28:	f7ff ff62 	bl	8009cf0 <__sfmoreglue>
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	6030      	str	r0, [r6, #0]
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d1d5      	bne.n	8009de0 <__sfp+0x24>
 8009e34:	f7ff ff78 	bl	8009d28 <__sfp_lock_release>
 8009e38:	230c      	movs	r3, #12
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	e7ee      	b.n	8009e1c <__sfp+0x60>
 8009e3e:	bf00      	nop
 8009e40:	0800b53c 	.word	0x0800b53c
 8009e44:	ffff0001 	.word	0xffff0001

08009e48 <_fwalk_reent>:
 8009e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	4688      	mov	r8, r1
 8009e50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e54:	2700      	movs	r7, #0
 8009e56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e5a:	f1b9 0901 	subs.w	r9, r9, #1
 8009e5e:	d505      	bpl.n	8009e6c <_fwalk_reent+0x24>
 8009e60:	6824      	ldr	r4, [r4, #0]
 8009e62:	2c00      	cmp	r4, #0
 8009e64:	d1f7      	bne.n	8009e56 <_fwalk_reent+0xe>
 8009e66:	4638      	mov	r0, r7
 8009e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e6c:	89ab      	ldrh	r3, [r5, #12]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d907      	bls.n	8009e82 <_fwalk_reent+0x3a>
 8009e72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e76:	3301      	adds	r3, #1
 8009e78:	d003      	beq.n	8009e82 <_fwalk_reent+0x3a>
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	47c0      	blx	r8
 8009e80:	4307      	orrs	r7, r0
 8009e82:	3568      	adds	r5, #104	; 0x68
 8009e84:	e7e9      	b.n	8009e5a <_fwalk_reent+0x12>
	...

08009e88 <_localeconv_r>:
 8009e88:	4800      	ldr	r0, [pc, #0]	; (8009e8c <_localeconv_r+0x4>)
 8009e8a:	4770      	bx	lr
 8009e8c:	20000184 	.word	0x20000184

08009e90 <__retarget_lock_init_recursive>:
 8009e90:	4770      	bx	lr

08009e92 <__retarget_lock_acquire_recursive>:
 8009e92:	4770      	bx	lr

08009e94 <__retarget_lock_release_recursive>:
 8009e94:	4770      	bx	lr
	...

08009e98 <malloc>:
 8009e98:	4b02      	ldr	r3, [pc, #8]	; (8009ea4 <malloc+0xc>)
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	f000 bc09 	b.w	800a6b4 <_malloc_r>
 8009ea2:	bf00      	nop
 8009ea4:	20000030 	.word	0x20000030

08009ea8 <_Balloc>:
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009eac:	4604      	mov	r4, r0
 8009eae:	460d      	mov	r5, r1
 8009eb0:	b976      	cbnz	r6, 8009ed0 <_Balloc+0x28>
 8009eb2:	2010      	movs	r0, #16
 8009eb4:	f7ff fff0 	bl	8009e98 <malloc>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	6260      	str	r0, [r4, #36]	; 0x24
 8009ebc:	b920      	cbnz	r0, 8009ec8 <_Balloc+0x20>
 8009ebe:	4b18      	ldr	r3, [pc, #96]	; (8009f20 <_Balloc+0x78>)
 8009ec0:	4818      	ldr	r0, [pc, #96]	; (8009f24 <_Balloc+0x7c>)
 8009ec2:	2166      	movs	r1, #102	; 0x66
 8009ec4:	f001 f846 	bl	800af54 <__assert_func>
 8009ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ecc:	6006      	str	r6, [r0, #0]
 8009ece:	60c6      	str	r6, [r0, #12]
 8009ed0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ed2:	68f3      	ldr	r3, [r6, #12]
 8009ed4:	b183      	cbz	r3, 8009ef8 <_Balloc+0x50>
 8009ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ede:	b9b8      	cbnz	r0, 8009f10 <_Balloc+0x68>
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ee6:	1d72      	adds	r2, r6, #5
 8009ee8:	0092      	lsls	r2, r2, #2
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 fb60 	bl	800a5b0 <_calloc_r>
 8009ef0:	b160      	cbz	r0, 8009f0c <_Balloc+0x64>
 8009ef2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ef6:	e00e      	b.n	8009f16 <_Balloc+0x6e>
 8009ef8:	2221      	movs	r2, #33	; 0x21
 8009efa:	2104      	movs	r1, #4
 8009efc:	4620      	mov	r0, r4
 8009efe:	f000 fb57 	bl	800a5b0 <_calloc_r>
 8009f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f04:	60f0      	str	r0, [r6, #12]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1e4      	bne.n	8009ed6 <_Balloc+0x2e>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	bd70      	pop	{r4, r5, r6, pc}
 8009f10:	6802      	ldr	r2, [r0, #0]
 8009f12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f16:	2300      	movs	r3, #0
 8009f18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f1c:	e7f7      	b.n	8009f0e <_Balloc+0x66>
 8009f1e:	bf00      	nop
 8009f20:	0800b581 	.word	0x0800b581
 8009f24:	0800b664 	.word	0x0800b664

08009f28 <_Bfree>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	b976      	cbnz	r6, 8009f50 <_Bfree+0x28>
 8009f32:	2010      	movs	r0, #16
 8009f34:	f7ff ffb0 	bl	8009e98 <malloc>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	6268      	str	r0, [r5, #36]	; 0x24
 8009f3c:	b920      	cbnz	r0, 8009f48 <_Bfree+0x20>
 8009f3e:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <_Bfree+0x3c>)
 8009f40:	4809      	ldr	r0, [pc, #36]	; (8009f68 <_Bfree+0x40>)
 8009f42:	218a      	movs	r1, #138	; 0x8a
 8009f44:	f001 f806 	bl	800af54 <__assert_func>
 8009f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f4c:	6006      	str	r6, [r0, #0]
 8009f4e:	60c6      	str	r6, [r0, #12]
 8009f50:	b13c      	cbz	r4, 8009f62 <_Bfree+0x3a>
 8009f52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f54:	6862      	ldr	r2, [r4, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f5c:	6021      	str	r1, [r4, #0]
 8009f5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f62:	bd70      	pop	{r4, r5, r6, pc}
 8009f64:	0800b581 	.word	0x0800b581
 8009f68:	0800b664 	.word	0x0800b664

08009f6c <__multadd>:
 8009f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f70:	690d      	ldr	r5, [r1, #16]
 8009f72:	4607      	mov	r7, r0
 8009f74:	460c      	mov	r4, r1
 8009f76:	461e      	mov	r6, r3
 8009f78:	f101 0c14 	add.w	ip, r1, #20
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	f8dc 3000 	ldr.w	r3, [ip]
 8009f82:	b299      	uxth	r1, r3
 8009f84:	fb02 6101 	mla	r1, r2, r1, r6
 8009f88:	0c1e      	lsrs	r6, r3, #16
 8009f8a:	0c0b      	lsrs	r3, r1, #16
 8009f8c:	fb02 3306 	mla	r3, r2, r6, r3
 8009f90:	b289      	uxth	r1, r1
 8009f92:	3001      	adds	r0, #1
 8009f94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f98:	4285      	cmp	r5, r0
 8009f9a:	f84c 1b04 	str.w	r1, [ip], #4
 8009f9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fa2:	dcec      	bgt.n	8009f7e <__multadd+0x12>
 8009fa4:	b30e      	cbz	r6, 8009fea <__multadd+0x7e>
 8009fa6:	68a3      	ldr	r3, [r4, #8]
 8009fa8:	42ab      	cmp	r3, r5
 8009faa:	dc19      	bgt.n	8009fe0 <__multadd+0x74>
 8009fac:	6861      	ldr	r1, [r4, #4]
 8009fae:	4638      	mov	r0, r7
 8009fb0:	3101      	adds	r1, #1
 8009fb2:	f7ff ff79 	bl	8009ea8 <_Balloc>
 8009fb6:	4680      	mov	r8, r0
 8009fb8:	b928      	cbnz	r0, 8009fc6 <__multadd+0x5a>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	4b0c      	ldr	r3, [pc, #48]	; (8009ff0 <__multadd+0x84>)
 8009fbe:	480d      	ldr	r0, [pc, #52]	; (8009ff4 <__multadd+0x88>)
 8009fc0:	21b5      	movs	r1, #181	; 0xb5
 8009fc2:	f000 ffc7 	bl	800af54 <__assert_func>
 8009fc6:	6922      	ldr	r2, [r4, #16]
 8009fc8:	3202      	adds	r2, #2
 8009fca:	f104 010c 	add.w	r1, r4, #12
 8009fce:	0092      	lsls	r2, r2, #2
 8009fd0:	300c      	adds	r0, #12
 8009fd2:	f7fe fb15 	bl	8008600 <memcpy>
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4638      	mov	r0, r7
 8009fda:	f7ff ffa5 	bl	8009f28 <_Bfree>
 8009fde:	4644      	mov	r4, r8
 8009fe0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fe4:	3501      	adds	r5, #1
 8009fe6:	615e      	str	r6, [r3, #20]
 8009fe8:	6125      	str	r5, [r4, #16]
 8009fea:	4620      	mov	r0, r4
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	0800b5f3 	.word	0x0800b5f3
 8009ff4:	0800b664 	.word	0x0800b664

08009ff8 <__hi0bits>:
 8009ff8:	0c03      	lsrs	r3, r0, #16
 8009ffa:	041b      	lsls	r3, r3, #16
 8009ffc:	b9d3      	cbnz	r3, 800a034 <__hi0bits+0x3c>
 8009ffe:	0400      	lsls	r0, r0, #16
 800a000:	2310      	movs	r3, #16
 800a002:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a006:	bf04      	itt	eq
 800a008:	0200      	lsleq	r0, r0, #8
 800a00a:	3308      	addeq	r3, #8
 800a00c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a010:	bf04      	itt	eq
 800a012:	0100      	lsleq	r0, r0, #4
 800a014:	3304      	addeq	r3, #4
 800a016:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a01a:	bf04      	itt	eq
 800a01c:	0080      	lsleq	r0, r0, #2
 800a01e:	3302      	addeq	r3, #2
 800a020:	2800      	cmp	r0, #0
 800a022:	db05      	blt.n	800a030 <__hi0bits+0x38>
 800a024:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a028:	f103 0301 	add.w	r3, r3, #1
 800a02c:	bf08      	it	eq
 800a02e:	2320      	moveq	r3, #32
 800a030:	4618      	mov	r0, r3
 800a032:	4770      	bx	lr
 800a034:	2300      	movs	r3, #0
 800a036:	e7e4      	b.n	800a002 <__hi0bits+0xa>

0800a038 <__lo0bits>:
 800a038:	6803      	ldr	r3, [r0, #0]
 800a03a:	f013 0207 	ands.w	r2, r3, #7
 800a03e:	4601      	mov	r1, r0
 800a040:	d00b      	beq.n	800a05a <__lo0bits+0x22>
 800a042:	07da      	lsls	r2, r3, #31
 800a044:	d423      	bmi.n	800a08e <__lo0bits+0x56>
 800a046:	0798      	lsls	r0, r3, #30
 800a048:	bf49      	itett	mi
 800a04a:	085b      	lsrmi	r3, r3, #1
 800a04c:	089b      	lsrpl	r3, r3, #2
 800a04e:	2001      	movmi	r0, #1
 800a050:	600b      	strmi	r3, [r1, #0]
 800a052:	bf5c      	itt	pl
 800a054:	600b      	strpl	r3, [r1, #0]
 800a056:	2002      	movpl	r0, #2
 800a058:	4770      	bx	lr
 800a05a:	b298      	uxth	r0, r3
 800a05c:	b9a8      	cbnz	r0, 800a08a <__lo0bits+0x52>
 800a05e:	0c1b      	lsrs	r3, r3, #16
 800a060:	2010      	movs	r0, #16
 800a062:	b2da      	uxtb	r2, r3
 800a064:	b90a      	cbnz	r2, 800a06a <__lo0bits+0x32>
 800a066:	3008      	adds	r0, #8
 800a068:	0a1b      	lsrs	r3, r3, #8
 800a06a:	071a      	lsls	r2, r3, #28
 800a06c:	bf04      	itt	eq
 800a06e:	091b      	lsreq	r3, r3, #4
 800a070:	3004      	addeq	r0, #4
 800a072:	079a      	lsls	r2, r3, #30
 800a074:	bf04      	itt	eq
 800a076:	089b      	lsreq	r3, r3, #2
 800a078:	3002      	addeq	r0, #2
 800a07a:	07da      	lsls	r2, r3, #31
 800a07c:	d403      	bmi.n	800a086 <__lo0bits+0x4e>
 800a07e:	085b      	lsrs	r3, r3, #1
 800a080:	f100 0001 	add.w	r0, r0, #1
 800a084:	d005      	beq.n	800a092 <__lo0bits+0x5a>
 800a086:	600b      	str	r3, [r1, #0]
 800a088:	4770      	bx	lr
 800a08a:	4610      	mov	r0, r2
 800a08c:	e7e9      	b.n	800a062 <__lo0bits+0x2a>
 800a08e:	2000      	movs	r0, #0
 800a090:	4770      	bx	lr
 800a092:	2020      	movs	r0, #32
 800a094:	4770      	bx	lr
	...

0800a098 <__i2b>:
 800a098:	b510      	push	{r4, lr}
 800a09a:	460c      	mov	r4, r1
 800a09c:	2101      	movs	r1, #1
 800a09e:	f7ff ff03 	bl	8009ea8 <_Balloc>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	b928      	cbnz	r0, 800a0b2 <__i2b+0x1a>
 800a0a6:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <__i2b+0x24>)
 800a0a8:	4805      	ldr	r0, [pc, #20]	; (800a0c0 <__i2b+0x28>)
 800a0aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0ae:	f000 ff51 	bl	800af54 <__assert_func>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	6144      	str	r4, [r0, #20]
 800a0b6:	6103      	str	r3, [r0, #16]
 800a0b8:	bd10      	pop	{r4, pc}
 800a0ba:	bf00      	nop
 800a0bc:	0800b5f3 	.word	0x0800b5f3
 800a0c0:	0800b664 	.word	0x0800b664

0800a0c4 <__multiply>:
 800a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	4691      	mov	r9, r2
 800a0ca:	690a      	ldr	r2, [r1, #16]
 800a0cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	bfb8      	it	lt
 800a0d4:	460b      	movlt	r3, r1
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	bfbc      	itt	lt
 800a0da:	464c      	movlt	r4, r9
 800a0dc:	4699      	movlt	r9, r3
 800a0de:	6927      	ldr	r7, [r4, #16]
 800a0e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0e4:	68a3      	ldr	r3, [r4, #8]
 800a0e6:	6861      	ldr	r1, [r4, #4]
 800a0e8:	eb07 060a 	add.w	r6, r7, sl
 800a0ec:	42b3      	cmp	r3, r6
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	bfb8      	it	lt
 800a0f2:	3101      	addlt	r1, #1
 800a0f4:	f7ff fed8 	bl	8009ea8 <_Balloc>
 800a0f8:	b930      	cbnz	r0, 800a108 <__multiply+0x44>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	4b44      	ldr	r3, [pc, #272]	; (800a210 <__multiply+0x14c>)
 800a0fe:	4845      	ldr	r0, [pc, #276]	; (800a214 <__multiply+0x150>)
 800a100:	f240 115d 	movw	r1, #349	; 0x15d
 800a104:	f000 ff26 	bl	800af54 <__assert_func>
 800a108:	f100 0514 	add.w	r5, r0, #20
 800a10c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a110:	462b      	mov	r3, r5
 800a112:	2200      	movs	r2, #0
 800a114:	4543      	cmp	r3, r8
 800a116:	d321      	bcc.n	800a15c <__multiply+0x98>
 800a118:	f104 0314 	add.w	r3, r4, #20
 800a11c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a120:	f109 0314 	add.w	r3, r9, #20
 800a124:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a128:	9202      	str	r2, [sp, #8]
 800a12a:	1b3a      	subs	r2, r7, r4
 800a12c:	3a15      	subs	r2, #21
 800a12e:	f022 0203 	bic.w	r2, r2, #3
 800a132:	3204      	adds	r2, #4
 800a134:	f104 0115 	add.w	r1, r4, #21
 800a138:	428f      	cmp	r7, r1
 800a13a:	bf38      	it	cc
 800a13c:	2204      	movcc	r2, #4
 800a13e:	9201      	str	r2, [sp, #4]
 800a140:	9a02      	ldr	r2, [sp, #8]
 800a142:	9303      	str	r3, [sp, #12]
 800a144:	429a      	cmp	r2, r3
 800a146:	d80c      	bhi.n	800a162 <__multiply+0x9e>
 800a148:	2e00      	cmp	r6, #0
 800a14a:	dd03      	ble.n	800a154 <__multiply+0x90>
 800a14c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a150:	2b00      	cmp	r3, #0
 800a152:	d05a      	beq.n	800a20a <__multiply+0x146>
 800a154:	6106      	str	r6, [r0, #16]
 800a156:	b005      	add	sp, #20
 800a158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15c:	f843 2b04 	str.w	r2, [r3], #4
 800a160:	e7d8      	b.n	800a114 <__multiply+0x50>
 800a162:	f8b3 a000 	ldrh.w	sl, [r3]
 800a166:	f1ba 0f00 	cmp.w	sl, #0
 800a16a:	d024      	beq.n	800a1b6 <__multiply+0xf2>
 800a16c:	f104 0e14 	add.w	lr, r4, #20
 800a170:	46a9      	mov	r9, r5
 800a172:	f04f 0c00 	mov.w	ip, #0
 800a176:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a17a:	f8d9 1000 	ldr.w	r1, [r9]
 800a17e:	fa1f fb82 	uxth.w	fp, r2
 800a182:	b289      	uxth	r1, r1
 800a184:	fb0a 110b 	mla	r1, sl, fp, r1
 800a188:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a18c:	f8d9 2000 	ldr.w	r2, [r9]
 800a190:	4461      	add	r1, ip
 800a192:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a196:	fb0a c20b 	mla	r2, sl, fp, ip
 800a19a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a19e:	b289      	uxth	r1, r1
 800a1a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1a4:	4577      	cmp	r7, lr
 800a1a6:	f849 1b04 	str.w	r1, [r9], #4
 800a1aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1ae:	d8e2      	bhi.n	800a176 <__multiply+0xb2>
 800a1b0:	9a01      	ldr	r2, [sp, #4]
 800a1b2:	f845 c002 	str.w	ip, [r5, r2]
 800a1b6:	9a03      	ldr	r2, [sp, #12]
 800a1b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1bc:	3304      	adds	r3, #4
 800a1be:	f1b9 0f00 	cmp.w	r9, #0
 800a1c2:	d020      	beq.n	800a206 <__multiply+0x142>
 800a1c4:	6829      	ldr	r1, [r5, #0]
 800a1c6:	f104 0c14 	add.w	ip, r4, #20
 800a1ca:	46ae      	mov	lr, r5
 800a1cc:	f04f 0a00 	mov.w	sl, #0
 800a1d0:	f8bc b000 	ldrh.w	fp, [ip]
 800a1d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1d8:	fb09 220b 	mla	r2, r9, fp, r2
 800a1dc:	4492      	add	sl, r2
 800a1de:	b289      	uxth	r1, r1
 800a1e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a1e4:	f84e 1b04 	str.w	r1, [lr], #4
 800a1e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a1ec:	f8be 1000 	ldrh.w	r1, [lr]
 800a1f0:	0c12      	lsrs	r2, r2, #16
 800a1f2:	fb09 1102 	mla	r1, r9, r2, r1
 800a1f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a1fa:	4567      	cmp	r7, ip
 800a1fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a200:	d8e6      	bhi.n	800a1d0 <__multiply+0x10c>
 800a202:	9a01      	ldr	r2, [sp, #4]
 800a204:	50a9      	str	r1, [r5, r2]
 800a206:	3504      	adds	r5, #4
 800a208:	e79a      	b.n	800a140 <__multiply+0x7c>
 800a20a:	3e01      	subs	r6, #1
 800a20c:	e79c      	b.n	800a148 <__multiply+0x84>
 800a20e:	bf00      	nop
 800a210:	0800b5f3 	.word	0x0800b5f3
 800a214:	0800b664 	.word	0x0800b664

0800a218 <__pow5mult>:
 800a218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a21c:	4615      	mov	r5, r2
 800a21e:	f012 0203 	ands.w	r2, r2, #3
 800a222:	4606      	mov	r6, r0
 800a224:	460f      	mov	r7, r1
 800a226:	d007      	beq.n	800a238 <__pow5mult+0x20>
 800a228:	4c25      	ldr	r4, [pc, #148]	; (800a2c0 <__pow5mult+0xa8>)
 800a22a:	3a01      	subs	r2, #1
 800a22c:	2300      	movs	r3, #0
 800a22e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a232:	f7ff fe9b 	bl	8009f6c <__multadd>
 800a236:	4607      	mov	r7, r0
 800a238:	10ad      	asrs	r5, r5, #2
 800a23a:	d03d      	beq.n	800a2b8 <__pow5mult+0xa0>
 800a23c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a23e:	b97c      	cbnz	r4, 800a260 <__pow5mult+0x48>
 800a240:	2010      	movs	r0, #16
 800a242:	f7ff fe29 	bl	8009e98 <malloc>
 800a246:	4602      	mov	r2, r0
 800a248:	6270      	str	r0, [r6, #36]	; 0x24
 800a24a:	b928      	cbnz	r0, 800a258 <__pow5mult+0x40>
 800a24c:	4b1d      	ldr	r3, [pc, #116]	; (800a2c4 <__pow5mult+0xac>)
 800a24e:	481e      	ldr	r0, [pc, #120]	; (800a2c8 <__pow5mult+0xb0>)
 800a250:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a254:	f000 fe7e 	bl	800af54 <__assert_func>
 800a258:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a25c:	6004      	str	r4, [r0, #0]
 800a25e:	60c4      	str	r4, [r0, #12]
 800a260:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a264:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a268:	b94c      	cbnz	r4, 800a27e <__pow5mult+0x66>
 800a26a:	f240 2171 	movw	r1, #625	; 0x271
 800a26e:	4630      	mov	r0, r6
 800a270:	f7ff ff12 	bl	800a098 <__i2b>
 800a274:	2300      	movs	r3, #0
 800a276:	f8c8 0008 	str.w	r0, [r8, #8]
 800a27a:	4604      	mov	r4, r0
 800a27c:	6003      	str	r3, [r0, #0]
 800a27e:	f04f 0900 	mov.w	r9, #0
 800a282:	07eb      	lsls	r3, r5, #31
 800a284:	d50a      	bpl.n	800a29c <__pow5mult+0x84>
 800a286:	4639      	mov	r1, r7
 800a288:	4622      	mov	r2, r4
 800a28a:	4630      	mov	r0, r6
 800a28c:	f7ff ff1a 	bl	800a0c4 <__multiply>
 800a290:	4639      	mov	r1, r7
 800a292:	4680      	mov	r8, r0
 800a294:	4630      	mov	r0, r6
 800a296:	f7ff fe47 	bl	8009f28 <_Bfree>
 800a29a:	4647      	mov	r7, r8
 800a29c:	106d      	asrs	r5, r5, #1
 800a29e:	d00b      	beq.n	800a2b8 <__pow5mult+0xa0>
 800a2a0:	6820      	ldr	r0, [r4, #0]
 800a2a2:	b938      	cbnz	r0, 800a2b4 <__pow5mult+0x9c>
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f7ff ff0b 	bl	800a0c4 <__multiply>
 800a2ae:	6020      	str	r0, [r4, #0]
 800a2b0:	f8c0 9000 	str.w	r9, [r0]
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	e7e4      	b.n	800a282 <__pow5mult+0x6a>
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800b7b0 	.word	0x0800b7b0
 800a2c4:	0800b581 	.word	0x0800b581
 800a2c8:	0800b664 	.word	0x0800b664

0800a2cc <__lshift>:
 800a2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	6849      	ldr	r1, [r1, #4]
 800a2d4:	6923      	ldr	r3, [r4, #16]
 800a2d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2da:	68a3      	ldr	r3, [r4, #8]
 800a2dc:	4607      	mov	r7, r0
 800a2de:	4691      	mov	r9, r2
 800a2e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2e4:	f108 0601 	add.w	r6, r8, #1
 800a2e8:	42b3      	cmp	r3, r6
 800a2ea:	db0b      	blt.n	800a304 <__lshift+0x38>
 800a2ec:	4638      	mov	r0, r7
 800a2ee:	f7ff fddb 	bl	8009ea8 <_Balloc>
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	b948      	cbnz	r0, 800a30a <__lshift+0x3e>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	4b2a      	ldr	r3, [pc, #168]	; (800a3a4 <__lshift+0xd8>)
 800a2fa:	482b      	ldr	r0, [pc, #172]	; (800a3a8 <__lshift+0xdc>)
 800a2fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a300:	f000 fe28 	bl	800af54 <__assert_func>
 800a304:	3101      	adds	r1, #1
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	e7ee      	b.n	800a2e8 <__lshift+0x1c>
 800a30a:	2300      	movs	r3, #0
 800a30c:	f100 0114 	add.w	r1, r0, #20
 800a310:	f100 0210 	add.w	r2, r0, #16
 800a314:	4618      	mov	r0, r3
 800a316:	4553      	cmp	r3, sl
 800a318:	db37      	blt.n	800a38a <__lshift+0xbe>
 800a31a:	6920      	ldr	r0, [r4, #16]
 800a31c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a320:	f104 0314 	add.w	r3, r4, #20
 800a324:	f019 091f 	ands.w	r9, r9, #31
 800a328:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a32c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a330:	d02f      	beq.n	800a392 <__lshift+0xc6>
 800a332:	f1c9 0e20 	rsb	lr, r9, #32
 800a336:	468a      	mov	sl, r1
 800a338:	f04f 0c00 	mov.w	ip, #0
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	fa02 f209 	lsl.w	r2, r2, r9
 800a342:	ea42 020c 	orr.w	r2, r2, ip
 800a346:	f84a 2b04 	str.w	r2, [sl], #4
 800a34a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a34e:	4298      	cmp	r0, r3
 800a350:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a354:	d8f2      	bhi.n	800a33c <__lshift+0x70>
 800a356:	1b03      	subs	r3, r0, r4
 800a358:	3b15      	subs	r3, #21
 800a35a:	f023 0303 	bic.w	r3, r3, #3
 800a35e:	3304      	adds	r3, #4
 800a360:	f104 0215 	add.w	r2, r4, #21
 800a364:	4290      	cmp	r0, r2
 800a366:	bf38      	it	cc
 800a368:	2304      	movcc	r3, #4
 800a36a:	f841 c003 	str.w	ip, [r1, r3]
 800a36e:	f1bc 0f00 	cmp.w	ip, #0
 800a372:	d001      	beq.n	800a378 <__lshift+0xac>
 800a374:	f108 0602 	add.w	r6, r8, #2
 800a378:	3e01      	subs	r6, #1
 800a37a:	4638      	mov	r0, r7
 800a37c:	612e      	str	r6, [r5, #16]
 800a37e:	4621      	mov	r1, r4
 800a380:	f7ff fdd2 	bl	8009f28 <_Bfree>
 800a384:	4628      	mov	r0, r5
 800a386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a38e:	3301      	adds	r3, #1
 800a390:	e7c1      	b.n	800a316 <__lshift+0x4a>
 800a392:	3904      	subs	r1, #4
 800a394:	f853 2b04 	ldr.w	r2, [r3], #4
 800a398:	f841 2f04 	str.w	r2, [r1, #4]!
 800a39c:	4298      	cmp	r0, r3
 800a39e:	d8f9      	bhi.n	800a394 <__lshift+0xc8>
 800a3a0:	e7ea      	b.n	800a378 <__lshift+0xac>
 800a3a2:	bf00      	nop
 800a3a4:	0800b5f3 	.word	0x0800b5f3
 800a3a8:	0800b664 	.word	0x0800b664

0800a3ac <__mcmp>:
 800a3ac:	b530      	push	{r4, r5, lr}
 800a3ae:	6902      	ldr	r2, [r0, #16]
 800a3b0:	690c      	ldr	r4, [r1, #16]
 800a3b2:	1b12      	subs	r2, r2, r4
 800a3b4:	d10e      	bne.n	800a3d4 <__mcmp+0x28>
 800a3b6:	f100 0314 	add.w	r3, r0, #20
 800a3ba:	3114      	adds	r1, #20
 800a3bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3cc:	42a5      	cmp	r5, r4
 800a3ce:	d003      	beq.n	800a3d8 <__mcmp+0x2c>
 800a3d0:	d305      	bcc.n	800a3de <__mcmp+0x32>
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	bd30      	pop	{r4, r5, pc}
 800a3d8:	4283      	cmp	r3, r0
 800a3da:	d3f3      	bcc.n	800a3c4 <__mcmp+0x18>
 800a3dc:	e7fa      	b.n	800a3d4 <__mcmp+0x28>
 800a3de:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e2:	e7f7      	b.n	800a3d4 <__mcmp+0x28>

0800a3e4 <__mdiff>:
 800a3e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	4690      	mov	r8, r2
 800a3f2:	f7ff ffdb 	bl	800a3ac <__mcmp>
 800a3f6:	1e05      	subs	r5, r0, #0
 800a3f8:	d110      	bne.n	800a41c <__mdiff+0x38>
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f7ff fd53 	bl	8009ea8 <_Balloc>
 800a402:	b930      	cbnz	r0, 800a412 <__mdiff+0x2e>
 800a404:	4b3a      	ldr	r3, [pc, #232]	; (800a4f0 <__mdiff+0x10c>)
 800a406:	4602      	mov	r2, r0
 800a408:	f240 2132 	movw	r1, #562	; 0x232
 800a40c:	4839      	ldr	r0, [pc, #228]	; (800a4f4 <__mdiff+0x110>)
 800a40e:	f000 fda1 	bl	800af54 <__assert_func>
 800a412:	2301      	movs	r3, #1
 800a414:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41c:	bfa4      	itt	ge
 800a41e:	4643      	movge	r3, r8
 800a420:	46a0      	movge	r8, r4
 800a422:	4630      	mov	r0, r6
 800a424:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a428:	bfa6      	itte	ge
 800a42a:	461c      	movge	r4, r3
 800a42c:	2500      	movge	r5, #0
 800a42e:	2501      	movlt	r5, #1
 800a430:	f7ff fd3a 	bl	8009ea8 <_Balloc>
 800a434:	b920      	cbnz	r0, 800a440 <__mdiff+0x5c>
 800a436:	4b2e      	ldr	r3, [pc, #184]	; (800a4f0 <__mdiff+0x10c>)
 800a438:	4602      	mov	r2, r0
 800a43a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a43e:	e7e5      	b.n	800a40c <__mdiff+0x28>
 800a440:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a444:	6926      	ldr	r6, [r4, #16]
 800a446:	60c5      	str	r5, [r0, #12]
 800a448:	f104 0914 	add.w	r9, r4, #20
 800a44c:	f108 0514 	add.w	r5, r8, #20
 800a450:	f100 0e14 	add.w	lr, r0, #20
 800a454:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a458:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a45c:	f108 0210 	add.w	r2, r8, #16
 800a460:	46f2      	mov	sl, lr
 800a462:	2100      	movs	r1, #0
 800a464:	f859 3b04 	ldr.w	r3, [r9], #4
 800a468:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a46c:	fa1f f883 	uxth.w	r8, r3
 800a470:	fa11 f18b 	uxtah	r1, r1, fp
 800a474:	0c1b      	lsrs	r3, r3, #16
 800a476:	eba1 0808 	sub.w	r8, r1, r8
 800a47a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a47e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a482:	fa1f f888 	uxth.w	r8, r8
 800a486:	1419      	asrs	r1, r3, #16
 800a488:	454e      	cmp	r6, r9
 800a48a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a48e:	f84a 3b04 	str.w	r3, [sl], #4
 800a492:	d8e7      	bhi.n	800a464 <__mdiff+0x80>
 800a494:	1b33      	subs	r3, r6, r4
 800a496:	3b15      	subs	r3, #21
 800a498:	f023 0303 	bic.w	r3, r3, #3
 800a49c:	3304      	adds	r3, #4
 800a49e:	3415      	adds	r4, #21
 800a4a0:	42a6      	cmp	r6, r4
 800a4a2:	bf38      	it	cc
 800a4a4:	2304      	movcc	r3, #4
 800a4a6:	441d      	add	r5, r3
 800a4a8:	4473      	add	r3, lr
 800a4aa:	469e      	mov	lr, r3
 800a4ac:	462e      	mov	r6, r5
 800a4ae:	4566      	cmp	r6, ip
 800a4b0:	d30e      	bcc.n	800a4d0 <__mdiff+0xec>
 800a4b2:	f10c 0203 	add.w	r2, ip, #3
 800a4b6:	1b52      	subs	r2, r2, r5
 800a4b8:	f022 0203 	bic.w	r2, r2, #3
 800a4bc:	3d03      	subs	r5, #3
 800a4be:	45ac      	cmp	ip, r5
 800a4c0:	bf38      	it	cc
 800a4c2:	2200      	movcc	r2, #0
 800a4c4:	441a      	add	r2, r3
 800a4c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a4ca:	b17b      	cbz	r3, 800a4ec <__mdiff+0x108>
 800a4cc:	6107      	str	r7, [r0, #16]
 800a4ce:	e7a3      	b.n	800a418 <__mdiff+0x34>
 800a4d0:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4d4:	fa11 f288 	uxtah	r2, r1, r8
 800a4d8:	1414      	asrs	r4, r2, #16
 800a4da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4de:	b292      	uxth	r2, r2
 800a4e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a4e4:	f84e 2b04 	str.w	r2, [lr], #4
 800a4e8:	1421      	asrs	r1, r4, #16
 800a4ea:	e7e0      	b.n	800a4ae <__mdiff+0xca>
 800a4ec:	3f01      	subs	r7, #1
 800a4ee:	e7ea      	b.n	800a4c6 <__mdiff+0xe2>
 800a4f0:	0800b5f3 	.word	0x0800b5f3
 800a4f4:	0800b664 	.word	0x0800b664

0800a4f8 <__d2b>:
 800a4f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4fc:	4689      	mov	r9, r1
 800a4fe:	2101      	movs	r1, #1
 800a500:	ec57 6b10 	vmov	r6, r7, d0
 800a504:	4690      	mov	r8, r2
 800a506:	f7ff fccf 	bl	8009ea8 <_Balloc>
 800a50a:	4604      	mov	r4, r0
 800a50c:	b930      	cbnz	r0, 800a51c <__d2b+0x24>
 800a50e:	4602      	mov	r2, r0
 800a510:	4b25      	ldr	r3, [pc, #148]	; (800a5a8 <__d2b+0xb0>)
 800a512:	4826      	ldr	r0, [pc, #152]	; (800a5ac <__d2b+0xb4>)
 800a514:	f240 310a 	movw	r1, #778	; 0x30a
 800a518:	f000 fd1c 	bl	800af54 <__assert_func>
 800a51c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a520:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a524:	bb35      	cbnz	r5, 800a574 <__d2b+0x7c>
 800a526:	2e00      	cmp	r6, #0
 800a528:	9301      	str	r3, [sp, #4]
 800a52a:	d028      	beq.n	800a57e <__d2b+0x86>
 800a52c:	4668      	mov	r0, sp
 800a52e:	9600      	str	r6, [sp, #0]
 800a530:	f7ff fd82 	bl	800a038 <__lo0bits>
 800a534:	9900      	ldr	r1, [sp, #0]
 800a536:	b300      	cbz	r0, 800a57a <__d2b+0x82>
 800a538:	9a01      	ldr	r2, [sp, #4]
 800a53a:	f1c0 0320 	rsb	r3, r0, #32
 800a53e:	fa02 f303 	lsl.w	r3, r2, r3
 800a542:	430b      	orrs	r3, r1
 800a544:	40c2      	lsrs	r2, r0
 800a546:	6163      	str	r3, [r4, #20]
 800a548:	9201      	str	r2, [sp, #4]
 800a54a:	9b01      	ldr	r3, [sp, #4]
 800a54c:	61a3      	str	r3, [r4, #24]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	bf14      	ite	ne
 800a552:	2202      	movne	r2, #2
 800a554:	2201      	moveq	r2, #1
 800a556:	6122      	str	r2, [r4, #16]
 800a558:	b1d5      	cbz	r5, 800a590 <__d2b+0x98>
 800a55a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a55e:	4405      	add	r5, r0
 800a560:	f8c9 5000 	str.w	r5, [r9]
 800a564:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a568:	f8c8 0000 	str.w	r0, [r8]
 800a56c:	4620      	mov	r0, r4
 800a56e:	b003      	add	sp, #12
 800a570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a578:	e7d5      	b.n	800a526 <__d2b+0x2e>
 800a57a:	6161      	str	r1, [r4, #20]
 800a57c:	e7e5      	b.n	800a54a <__d2b+0x52>
 800a57e:	a801      	add	r0, sp, #4
 800a580:	f7ff fd5a 	bl	800a038 <__lo0bits>
 800a584:	9b01      	ldr	r3, [sp, #4]
 800a586:	6163      	str	r3, [r4, #20]
 800a588:	2201      	movs	r2, #1
 800a58a:	6122      	str	r2, [r4, #16]
 800a58c:	3020      	adds	r0, #32
 800a58e:	e7e3      	b.n	800a558 <__d2b+0x60>
 800a590:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a594:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a598:	f8c9 0000 	str.w	r0, [r9]
 800a59c:	6918      	ldr	r0, [r3, #16]
 800a59e:	f7ff fd2b 	bl	8009ff8 <__hi0bits>
 800a5a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5a6:	e7df      	b.n	800a568 <__d2b+0x70>
 800a5a8:	0800b5f3 	.word	0x0800b5f3
 800a5ac:	0800b664 	.word	0x0800b664

0800a5b0 <_calloc_r>:
 800a5b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5b2:	fba1 2402 	umull	r2, r4, r1, r2
 800a5b6:	b94c      	cbnz	r4, 800a5cc <_calloc_r+0x1c>
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	9201      	str	r2, [sp, #4]
 800a5bc:	f000 f87a 	bl	800a6b4 <_malloc_r>
 800a5c0:	9a01      	ldr	r2, [sp, #4]
 800a5c2:	4605      	mov	r5, r0
 800a5c4:	b930      	cbnz	r0, 800a5d4 <_calloc_r+0x24>
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	b003      	add	sp, #12
 800a5ca:	bd30      	pop	{r4, r5, pc}
 800a5cc:	220c      	movs	r2, #12
 800a5ce:	6002      	str	r2, [r0, #0]
 800a5d0:	2500      	movs	r5, #0
 800a5d2:	e7f8      	b.n	800a5c6 <_calloc_r+0x16>
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	f7fe f821 	bl	800861c <memset>
 800a5da:	e7f4      	b.n	800a5c6 <_calloc_r+0x16>

0800a5dc <_free_r>:
 800a5dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5de:	2900      	cmp	r1, #0
 800a5e0:	d044      	beq.n	800a66c <_free_r+0x90>
 800a5e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5e6:	9001      	str	r0, [sp, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a5ee:	bfb8      	it	lt
 800a5f0:	18e4      	addlt	r4, r4, r3
 800a5f2:	f000 fe55 	bl	800b2a0 <__malloc_lock>
 800a5f6:	4a1e      	ldr	r2, [pc, #120]	; (800a670 <_free_r+0x94>)
 800a5f8:	9801      	ldr	r0, [sp, #4]
 800a5fa:	6813      	ldr	r3, [r2, #0]
 800a5fc:	b933      	cbnz	r3, 800a60c <_free_r+0x30>
 800a5fe:	6063      	str	r3, [r4, #4]
 800a600:	6014      	str	r4, [r2, #0]
 800a602:	b003      	add	sp, #12
 800a604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a608:	f000 be50 	b.w	800b2ac <__malloc_unlock>
 800a60c:	42a3      	cmp	r3, r4
 800a60e:	d908      	bls.n	800a622 <_free_r+0x46>
 800a610:	6825      	ldr	r5, [r4, #0]
 800a612:	1961      	adds	r1, r4, r5
 800a614:	428b      	cmp	r3, r1
 800a616:	bf01      	itttt	eq
 800a618:	6819      	ldreq	r1, [r3, #0]
 800a61a:	685b      	ldreq	r3, [r3, #4]
 800a61c:	1949      	addeq	r1, r1, r5
 800a61e:	6021      	streq	r1, [r4, #0]
 800a620:	e7ed      	b.n	800a5fe <_free_r+0x22>
 800a622:	461a      	mov	r2, r3
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	b10b      	cbz	r3, 800a62c <_free_r+0x50>
 800a628:	42a3      	cmp	r3, r4
 800a62a:	d9fa      	bls.n	800a622 <_free_r+0x46>
 800a62c:	6811      	ldr	r1, [r2, #0]
 800a62e:	1855      	adds	r5, r2, r1
 800a630:	42a5      	cmp	r5, r4
 800a632:	d10b      	bne.n	800a64c <_free_r+0x70>
 800a634:	6824      	ldr	r4, [r4, #0]
 800a636:	4421      	add	r1, r4
 800a638:	1854      	adds	r4, r2, r1
 800a63a:	42a3      	cmp	r3, r4
 800a63c:	6011      	str	r1, [r2, #0]
 800a63e:	d1e0      	bne.n	800a602 <_free_r+0x26>
 800a640:	681c      	ldr	r4, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	6053      	str	r3, [r2, #4]
 800a646:	4421      	add	r1, r4
 800a648:	6011      	str	r1, [r2, #0]
 800a64a:	e7da      	b.n	800a602 <_free_r+0x26>
 800a64c:	d902      	bls.n	800a654 <_free_r+0x78>
 800a64e:	230c      	movs	r3, #12
 800a650:	6003      	str	r3, [r0, #0]
 800a652:	e7d6      	b.n	800a602 <_free_r+0x26>
 800a654:	6825      	ldr	r5, [r4, #0]
 800a656:	1961      	adds	r1, r4, r5
 800a658:	428b      	cmp	r3, r1
 800a65a:	bf04      	itt	eq
 800a65c:	6819      	ldreq	r1, [r3, #0]
 800a65e:	685b      	ldreq	r3, [r3, #4]
 800a660:	6063      	str	r3, [r4, #4]
 800a662:	bf04      	itt	eq
 800a664:	1949      	addeq	r1, r1, r5
 800a666:	6021      	streq	r1, [r4, #0]
 800a668:	6054      	str	r4, [r2, #4]
 800a66a:	e7ca      	b.n	800a602 <_free_r+0x26>
 800a66c:	b003      	add	sp, #12
 800a66e:	bd30      	pop	{r4, r5, pc}
 800a670:	2000077c 	.word	0x2000077c

0800a674 <sbrk_aligned>:
 800a674:	b570      	push	{r4, r5, r6, lr}
 800a676:	4e0e      	ldr	r6, [pc, #56]	; (800a6b0 <sbrk_aligned+0x3c>)
 800a678:	460c      	mov	r4, r1
 800a67a:	6831      	ldr	r1, [r6, #0]
 800a67c:	4605      	mov	r5, r0
 800a67e:	b911      	cbnz	r1, 800a686 <sbrk_aligned+0x12>
 800a680:	f000 fb42 	bl	800ad08 <_sbrk_r>
 800a684:	6030      	str	r0, [r6, #0]
 800a686:	4621      	mov	r1, r4
 800a688:	4628      	mov	r0, r5
 800a68a:	f000 fb3d 	bl	800ad08 <_sbrk_r>
 800a68e:	1c43      	adds	r3, r0, #1
 800a690:	d00a      	beq.n	800a6a8 <sbrk_aligned+0x34>
 800a692:	1cc4      	adds	r4, r0, #3
 800a694:	f024 0403 	bic.w	r4, r4, #3
 800a698:	42a0      	cmp	r0, r4
 800a69a:	d007      	beq.n	800a6ac <sbrk_aligned+0x38>
 800a69c:	1a21      	subs	r1, r4, r0
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f000 fb32 	bl	800ad08 <_sbrk_r>
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	d101      	bne.n	800a6ac <sbrk_aligned+0x38>
 800a6a8:	f04f 34ff 	mov.w	r4, #4294967295
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	bd70      	pop	{r4, r5, r6, pc}
 800a6b0:	20000780 	.word	0x20000780

0800a6b4 <_malloc_r>:
 800a6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b8:	1ccd      	adds	r5, r1, #3
 800a6ba:	f025 0503 	bic.w	r5, r5, #3
 800a6be:	3508      	adds	r5, #8
 800a6c0:	2d0c      	cmp	r5, #12
 800a6c2:	bf38      	it	cc
 800a6c4:	250c      	movcc	r5, #12
 800a6c6:	2d00      	cmp	r5, #0
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	db01      	blt.n	800a6d0 <_malloc_r+0x1c>
 800a6cc:	42a9      	cmp	r1, r5
 800a6ce:	d905      	bls.n	800a6dc <_malloc_r+0x28>
 800a6d0:	230c      	movs	r3, #12
 800a6d2:	603b      	str	r3, [r7, #0]
 800a6d4:	2600      	movs	r6, #0
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6dc:	4e2e      	ldr	r6, [pc, #184]	; (800a798 <_malloc_r+0xe4>)
 800a6de:	f000 fddf 	bl	800b2a0 <__malloc_lock>
 800a6e2:	6833      	ldr	r3, [r6, #0]
 800a6e4:	461c      	mov	r4, r3
 800a6e6:	bb34      	cbnz	r4, 800a736 <_malloc_r+0x82>
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	4638      	mov	r0, r7
 800a6ec:	f7ff ffc2 	bl	800a674 <sbrk_aligned>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	d14d      	bne.n	800a792 <_malloc_r+0xde>
 800a6f6:	6834      	ldr	r4, [r6, #0]
 800a6f8:	4626      	mov	r6, r4
 800a6fa:	2e00      	cmp	r6, #0
 800a6fc:	d140      	bne.n	800a780 <_malloc_r+0xcc>
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	4631      	mov	r1, r6
 800a702:	4638      	mov	r0, r7
 800a704:	eb04 0803 	add.w	r8, r4, r3
 800a708:	f000 fafe 	bl	800ad08 <_sbrk_r>
 800a70c:	4580      	cmp	r8, r0
 800a70e:	d13a      	bne.n	800a786 <_malloc_r+0xd2>
 800a710:	6821      	ldr	r1, [r4, #0]
 800a712:	3503      	adds	r5, #3
 800a714:	1a6d      	subs	r5, r5, r1
 800a716:	f025 0503 	bic.w	r5, r5, #3
 800a71a:	3508      	adds	r5, #8
 800a71c:	2d0c      	cmp	r5, #12
 800a71e:	bf38      	it	cc
 800a720:	250c      	movcc	r5, #12
 800a722:	4629      	mov	r1, r5
 800a724:	4638      	mov	r0, r7
 800a726:	f7ff ffa5 	bl	800a674 <sbrk_aligned>
 800a72a:	3001      	adds	r0, #1
 800a72c:	d02b      	beq.n	800a786 <_malloc_r+0xd2>
 800a72e:	6823      	ldr	r3, [r4, #0]
 800a730:	442b      	add	r3, r5
 800a732:	6023      	str	r3, [r4, #0]
 800a734:	e00e      	b.n	800a754 <_malloc_r+0xa0>
 800a736:	6822      	ldr	r2, [r4, #0]
 800a738:	1b52      	subs	r2, r2, r5
 800a73a:	d41e      	bmi.n	800a77a <_malloc_r+0xc6>
 800a73c:	2a0b      	cmp	r2, #11
 800a73e:	d916      	bls.n	800a76e <_malloc_r+0xba>
 800a740:	1961      	adds	r1, r4, r5
 800a742:	42a3      	cmp	r3, r4
 800a744:	6025      	str	r5, [r4, #0]
 800a746:	bf18      	it	ne
 800a748:	6059      	strne	r1, [r3, #4]
 800a74a:	6863      	ldr	r3, [r4, #4]
 800a74c:	bf08      	it	eq
 800a74e:	6031      	streq	r1, [r6, #0]
 800a750:	5162      	str	r2, [r4, r5]
 800a752:	604b      	str	r3, [r1, #4]
 800a754:	4638      	mov	r0, r7
 800a756:	f104 060b 	add.w	r6, r4, #11
 800a75a:	f000 fda7 	bl	800b2ac <__malloc_unlock>
 800a75e:	f026 0607 	bic.w	r6, r6, #7
 800a762:	1d23      	adds	r3, r4, #4
 800a764:	1af2      	subs	r2, r6, r3
 800a766:	d0b6      	beq.n	800a6d6 <_malloc_r+0x22>
 800a768:	1b9b      	subs	r3, r3, r6
 800a76a:	50a3      	str	r3, [r4, r2]
 800a76c:	e7b3      	b.n	800a6d6 <_malloc_r+0x22>
 800a76e:	6862      	ldr	r2, [r4, #4]
 800a770:	42a3      	cmp	r3, r4
 800a772:	bf0c      	ite	eq
 800a774:	6032      	streq	r2, [r6, #0]
 800a776:	605a      	strne	r2, [r3, #4]
 800a778:	e7ec      	b.n	800a754 <_malloc_r+0xa0>
 800a77a:	4623      	mov	r3, r4
 800a77c:	6864      	ldr	r4, [r4, #4]
 800a77e:	e7b2      	b.n	800a6e6 <_malloc_r+0x32>
 800a780:	4634      	mov	r4, r6
 800a782:	6876      	ldr	r6, [r6, #4]
 800a784:	e7b9      	b.n	800a6fa <_malloc_r+0x46>
 800a786:	230c      	movs	r3, #12
 800a788:	603b      	str	r3, [r7, #0]
 800a78a:	4638      	mov	r0, r7
 800a78c:	f000 fd8e 	bl	800b2ac <__malloc_unlock>
 800a790:	e7a1      	b.n	800a6d6 <_malloc_r+0x22>
 800a792:	6025      	str	r5, [r4, #0]
 800a794:	e7de      	b.n	800a754 <_malloc_r+0xa0>
 800a796:	bf00      	nop
 800a798:	2000077c 	.word	0x2000077c

0800a79c <__ssputs_r>:
 800a79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a0:	688e      	ldr	r6, [r1, #8]
 800a7a2:	429e      	cmp	r6, r3
 800a7a4:	4682      	mov	sl, r0
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	4690      	mov	r8, r2
 800a7aa:	461f      	mov	r7, r3
 800a7ac:	d838      	bhi.n	800a820 <__ssputs_r+0x84>
 800a7ae:	898a      	ldrh	r2, [r1, #12]
 800a7b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7b4:	d032      	beq.n	800a81c <__ssputs_r+0x80>
 800a7b6:	6825      	ldr	r5, [r4, #0]
 800a7b8:	6909      	ldr	r1, [r1, #16]
 800a7ba:	eba5 0901 	sub.w	r9, r5, r1
 800a7be:	6965      	ldr	r5, [r4, #20]
 800a7c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	444b      	add	r3, r9
 800a7cc:	106d      	asrs	r5, r5, #1
 800a7ce:	429d      	cmp	r5, r3
 800a7d0:	bf38      	it	cc
 800a7d2:	461d      	movcc	r5, r3
 800a7d4:	0553      	lsls	r3, r2, #21
 800a7d6:	d531      	bpl.n	800a83c <__ssputs_r+0xa0>
 800a7d8:	4629      	mov	r1, r5
 800a7da:	f7ff ff6b 	bl	800a6b4 <_malloc_r>
 800a7de:	4606      	mov	r6, r0
 800a7e0:	b950      	cbnz	r0, 800a7f8 <__ssputs_r+0x5c>
 800a7e2:	230c      	movs	r3, #12
 800a7e4:	f8ca 3000 	str.w	r3, [sl]
 800a7e8:	89a3      	ldrh	r3, [r4, #12]
 800a7ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ee:	81a3      	strh	r3, [r4, #12]
 800a7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f8:	6921      	ldr	r1, [r4, #16]
 800a7fa:	464a      	mov	r2, r9
 800a7fc:	f7fd ff00 	bl	8008600 <memcpy>
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a80a:	81a3      	strh	r3, [r4, #12]
 800a80c:	6126      	str	r6, [r4, #16]
 800a80e:	6165      	str	r5, [r4, #20]
 800a810:	444e      	add	r6, r9
 800a812:	eba5 0509 	sub.w	r5, r5, r9
 800a816:	6026      	str	r6, [r4, #0]
 800a818:	60a5      	str	r5, [r4, #8]
 800a81a:	463e      	mov	r6, r7
 800a81c:	42be      	cmp	r6, r7
 800a81e:	d900      	bls.n	800a822 <__ssputs_r+0x86>
 800a820:	463e      	mov	r6, r7
 800a822:	6820      	ldr	r0, [r4, #0]
 800a824:	4632      	mov	r2, r6
 800a826:	4641      	mov	r1, r8
 800a828:	f000 fd20 	bl	800b26c <memmove>
 800a82c:	68a3      	ldr	r3, [r4, #8]
 800a82e:	1b9b      	subs	r3, r3, r6
 800a830:	60a3      	str	r3, [r4, #8]
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	4433      	add	r3, r6
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	2000      	movs	r0, #0
 800a83a:	e7db      	b.n	800a7f4 <__ssputs_r+0x58>
 800a83c:	462a      	mov	r2, r5
 800a83e:	f000 fd3b 	bl	800b2b8 <_realloc_r>
 800a842:	4606      	mov	r6, r0
 800a844:	2800      	cmp	r0, #0
 800a846:	d1e1      	bne.n	800a80c <__ssputs_r+0x70>
 800a848:	6921      	ldr	r1, [r4, #16]
 800a84a:	4650      	mov	r0, sl
 800a84c:	f7ff fec6 	bl	800a5dc <_free_r>
 800a850:	e7c7      	b.n	800a7e2 <__ssputs_r+0x46>
	...

0800a854 <_svfiprintf_r>:
 800a854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a858:	4698      	mov	r8, r3
 800a85a:	898b      	ldrh	r3, [r1, #12]
 800a85c:	061b      	lsls	r3, r3, #24
 800a85e:	b09d      	sub	sp, #116	; 0x74
 800a860:	4607      	mov	r7, r0
 800a862:	460d      	mov	r5, r1
 800a864:	4614      	mov	r4, r2
 800a866:	d50e      	bpl.n	800a886 <_svfiprintf_r+0x32>
 800a868:	690b      	ldr	r3, [r1, #16]
 800a86a:	b963      	cbnz	r3, 800a886 <_svfiprintf_r+0x32>
 800a86c:	2140      	movs	r1, #64	; 0x40
 800a86e:	f7ff ff21 	bl	800a6b4 <_malloc_r>
 800a872:	6028      	str	r0, [r5, #0]
 800a874:	6128      	str	r0, [r5, #16]
 800a876:	b920      	cbnz	r0, 800a882 <_svfiprintf_r+0x2e>
 800a878:	230c      	movs	r3, #12
 800a87a:	603b      	str	r3, [r7, #0]
 800a87c:	f04f 30ff 	mov.w	r0, #4294967295
 800a880:	e0d1      	b.n	800aa26 <_svfiprintf_r+0x1d2>
 800a882:	2340      	movs	r3, #64	; 0x40
 800a884:	616b      	str	r3, [r5, #20]
 800a886:	2300      	movs	r3, #0
 800a888:	9309      	str	r3, [sp, #36]	; 0x24
 800a88a:	2320      	movs	r3, #32
 800a88c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a890:	f8cd 800c 	str.w	r8, [sp, #12]
 800a894:	2330      	movs	r3, #48	; 0x30
 800a896:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa40 <_svfiprintf_r+0x1ec>
 800a89a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a89e:	f04f 0901 	mov.w	r9, #1
 800a8a2:	4623      	mov	r3, r4
 800a8a4:	469a      	mov	sl, r3
 800a8a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8aa:	b10a      	cbz	r2, 800a8b0 <_svfiprintf_r+0x5c>
 800a8ac:	2a25      	cmp	r2, #37	; 0x25
 800a8ae:	d1f9      	bne.n	800a8a4 <_svfiprintf_r+0x50>
 800a8b0:	ebba 0b04 	subs.w	fp, sl, r4
 800a8b4:	d00b      	beq.n	800a8ce <_svfiprintf_r+0x7a>
 800a8b6:	465b      	mov	r3, fp
 800a8b8:	4622      	mov	r2, r4
 800a8ba:	4629      	mov	r1, r5
 800a8bc:	4638      	mov	r0, r7
 800a8be:	f7ff ff6d 	bl	800a79c <__ssputs_r>
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	f000 80aa 	beq.w	800aa1c <_svfiprintf_r+0x1c8>
 800a8c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ca:	445a      	add	r2, fp
 800a8cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f000 80a2 	beq.w	800aa1c <_svfiprintf_r+0x1c8>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	f04f 32ff 	mov.w	r2, #4294967295
 800a8de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8e2:	f10a 0a01 	add.w	sl, sl, #1
 800a8e6:	9304      	str	r3, [sp, #16]
 800a8e8:	9307      	str	r3, [sp, #28]
 800a8ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8ee:	931a      	str	r3, [sp, #104]	; 0x68
 800a8f0:	4654      	mov	r4, sl
 800a8f2:	2205      	movs	r2, #5
 800a8f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8f8:	4851      	ldr	r0, [pc, #324]	; (800aa40 <_svfiprintf_r+0x1ec>)
 800a8fa:	f7f5 fc89 	bl	8000210 <memchr>
 800a8fe:	9a04      	ldr	r2, [sp, #16]
 800a900:	b9d8      	cbnz	r0, 800a93a <_svfiprintf_r+0xe6>
 800a902:	06d0      	lsls	r0, r2, #27
 800a904:	bf44      	itt	mi
 800a906:	2320      	movmi	r3, #32
 800a908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a90c:	0711      	lsls	r1, r2, #28
 800a90e:	bf44      	itt	mi
 800a910:	232b      	movmi	r3, #43	; 0x2b
 800a912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a916:	f89a 3000 	ldrb.w	r3, [sl]
 800a91a:	2b2a      	cmp	r3, #42	; 0x2a
 800a91c:	d015      	beq.n	800a94a <_svfiprintf_r+0xf6>
 800a91e:	9a07      	ldr	r2, [sp, #28]
 800a920:	4654      	mov	r4, sl
 800a922:	2000      	movs	r0, #0
 800a924:	f04f 0c0a 	mov.w	ip, #10
 800a928:	4621      	mov	r1, r4
 800a92a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a92e:	3b30      	subs	r3, #48	; 0x30
 800a930:	2b09      	cmp	r3, #9
 800a932:	d94e      	bls.n	800a9d2 <_svfiprintf_r+0x17e>
 800a934:	b1b0      	cbz	r0, 800a964 <_svfiprintf_r+0x110>
 800a936:	9207      	str	r2, [sp, #28]
 800a938:	e014      	b.n	800a964 <_svfiprintf_r+0x110>
 800a93a:	eba0 0308 	sub.w	r3, r0, r8
 800a93e:	fa09 f303 	lsl.w	r3, r9, r3
 800a942:	4313      	orrs	r3, r2
 800a944:	9304      	str	r3, [sp, #16]
 800a946:	46a2      	mov	sl, r4
 800a948:	e7d2      	b.n	800a8f0 <_svfiprintf_r+0x9c>
 800a94a:	9b03      	ldr	r3, [sp, #12]
 800a94c:	1d19      	adds	r1, r3, #4
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	9103      	str	r1, [sp, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	bfbb      	ittet	lt
 800a956:	425b      	neglt	r3, r3
 800a958:	f042 0202 	orrlt.w	r2, r2, #2
 800a95c:	9307      	strge	r3, [sp, #28]
 800a95e:	9307      	strlt	r3, [sp, #28]
 800a960:	bfb8      	it	lt
 800a962:	9204      	strlt	r2, [sp, #16]
 800a964:	7823      	ldrb	r3, [r4, #0]
 800a966:	2b2e      	cmp	r3, #46	; 0x2e
 800a968:	d10c      	bne.n	800a984 <_svfiprintf_r+0x130>
 800a96a:	7863      	ldrb	r3, [r4, #1]
 800a96c:	2b2a      	cmp	r3, #42	; 0x2a
 800a96e:	d135      	bne.n	800a9dc <_svfiprintf_r+0x188>
 800a970:	9b03      	ldr	r3, [sp, #12]
 800a972:	1d1a      	adds	r2, r3, #4
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	9203      	str	r2, [sp, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	bfb8      	it	lt
 800a97c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a980:	3402      	adds	r4, #2
 800a982:	9305      	str	r3, [sp, #20]
 800a984:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa50 <_svfiprintf_r+0x1fc>
 800a988:	7821      	ldrb	r1, [r4, #0]
 800a98a:	2203      	movs	r2, #3
 800a98c:	4650      	mov	r0, sl
 800a98e:	f7f5 fc3f 	bl	8000210 <memchr>
 800a992:	b140      	cbz	r0, 800a9a6 <_svfiprintf_r+0x152>
 800a994:	2340      	movs	r3, #64	; 0x40
 800a996:	eba0 000a 	sub.w	r0, r0, sl
 800a99a:	fa03 f000 	lsl.w	r0, r3, r0
 800a99e:	9b04      	ldr	r3, [sp, #16]
 800a9a0:	4303      	orrs	r3, r0
 800a9a2:	3401      	adds	r4, #1
 800a9a4:	9304      	str	r3, [sp, #16]
 800a9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9aa:	4826      	ldr	r0, [pc, #152]	; (800aa44 <_svfiprintf_r+0x1f0>)
 800a9ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9b0:	2206      	movs	r2, #6
 800a9b2:	f7f5 fc2d 	bl	8000210 <memchr>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d038      	beq.n	800aa2c <_svfiprintf_r+0x1d8>
 800a9ba:	4b23      	ldr	r3, [pc, #140]	; (800aa48 <_svfiprintf_r+0x1f4>)
 800a9bc:	bb1b      	cbnz	r3, 800aa06 <_svfiprintf_r+0x1b2>
 800a9be:	9b03      	ldr	r3, [sp, #12]
 800a9c0:	3307      	adds	r3, #7
 800a9c2:	f023 0307 	bic.w	r3, r3, #7
 800a9c6:	3308      	adds	r3, #8
 800a9c8:	9303      	str	r3, [sp, #12]
 800a9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9cc:	4433      	add	r3, r6
 800a9ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d0:	e767      	b.n	800a8a2 <_svfiprintf_r+0x4e>
 800a9d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	2001      	movs	r0, #1
 800a9da:	e7a5      	b.n	800a928 <_svfiprintf_r+0xd4>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	3401      	adds	r4, #1
 800a9e0:	9305      	str	r3, [sp, #20]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	f04f 0c0a 	mov.w	ip, #10
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9ee:	3a30      	subs	r2, #48	; 0x30
 800a9f0:	2a09      	cmp	r2, #9
 800a9f2:	d903      	bls.n	800a9fc <_svfiprintf_r+0x1a8>
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d0c5      	beq.n	800a984 <_svfiprintf_r+0x130>
 800a9f8:	9105      	str	r1, [sp, #20]
 800a9fa:	e7c3      	b.n	800a984 <_svfiprintf_r+0x130>
 800a9fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa00:	4604      	mov	r4, r0
 800aa02:	2301      	movs	r3, #1
 800aa04:	e7f0      	b.n	800a9e8 <_svfiprintf_r+0x194>
 800aa06:	ab03      	add	r3, sp, #12
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	462a      	mov	r2, r5
 800aa0c:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <_svfiprintf_r+0x1f8>)
 800aa0e:	a904      	add	r1, sp, #16
 800aa10:	4638      	mov	r0, r7
 800aa12:	f7fd feab 	bl	800876c <_printf_float>
 800aa16:	1c42      	adds	r2, r0, #1
 800aa18:	4606      	mov	r6, r0
 800aa1a:	d1d6      	bne.n	800a9ca <_svfiprintf_r+0x176>
 800aa1c:	89ab      	ldrh	r3, [r5, #12]
 800aa1e:	065b      	lsls	r3, r3, #25
 800aa20:	f53f af2c 	bmi.w	800a87c <_svfiprintf_r+0x28>
 800aa24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa26:	b01d      	add	sp, #116	; 0x74
 800aa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2c:	ab03      	add	r3, sp, #12
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	462a      	mov	r2, r5
 800aa32:	4b06      	ldr	r3, [pc, #24]	; (800aa4c <_svfiprintf_r+0x1f8>)
 800aa34:	a904      	add	r1, sp, #16
 800aa36:	4638      	mov	r0, r7
 800aa38:	f7fe f93c 	bl	8008cb4 <_printf_i>
 800aa3c:	e7eb      	b.n	800aa16 <_svfiprintf_r+0x1c2>
 800aa3e:	bf00      	nop
 800aa40:	0800b7bc 	.word	0x0800b7bc
 800aa44:	0800b7c6 	.word	0x0800b7c6
 800aa48:	0800876d 	.word	0x0800876d
 800aa4c:	0800a79d 	.word	0x0800a79d
 800aa50:	0800b7c2 	.word	0x0800b7c2

0800aa54 <__sfputc_r>:
 800aa54:	6893      	ldr	r3, [r2, #8]
 800aa56:	3b01      	subs	r3, #1
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	b410      	push	{r4}
 800aa5c:	6093      	str	r3, [r2, #8]
 800aa5e:	da08      	bge.n	800aa72 <__sfputc_r+0x1e>
 800aa60:	6994      	ldr	r4, [r2, #24]
 800aa62:	42a3      	cmp	r3, r4
 800aa64:	db01      	blt.n	800aa6a <__sfputc_r+0x16>
 800aa66:	290a      	cmp	r1, #10
 800aa68:	d103      	bne.n	800aa72 <__sfputc_r+0x1e>
 800aa6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa6e:	f000 b99f 	b.w	800adb0 <__swbuf_r>
 800aa72:	6813      	ldr	r3, [r2, #0]
 800aa74:	1c58      	adds	r0, r3, #1
 800aa76:	6010      	str	r0, [r2, #0]
 800aa78:	7019      	strb	r1, [r3, #0]
 800aa7a:	4608      	mov	r0, r1
 800aa7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa80:	4770      	bx	lr

0800aa82 <__sfputs_r>:
 800aa82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa84:	4606      	mov	r6, r0
 800aa86:	460f      	mov	r7, r1
 800aa88:	4614      	mov	r4, r2
 800aa8a:	18d5      	adds	r5, r2, r3
 800aa8c:	42ac      	cmp	r4, r5
 800aa8e:	d101      	bne.n	800aa94 <__sfputs_r+0x12>
 800aa90:	2000      	movs	r0, #0
 800aa92:	e007      	b.n	800aaa4 <__sfputs_r+0x22>
 800aa94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa98:	463a      	mov	r2, r7
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f7ff ffda 	bl	800aa54 <__sfputc_r>
 800aaa0:	1c43      	adds	r3, r0, #1
 800aaa2:	d1f3      	bne.n	800aa8c <__sfputs_r+0xa>
 800aaa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aaa8 <_vfiprintf_r>:
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	460d      	mov	r5, r1
 800aaae:	b09d      	sub	sp, #116	; 0x74
 800aab0:	4614      	mov	r4, r2
 800aab2:	4698      	mov	r8, r3
 800aab4:	4606      	mov	r6, r0
 800aab6:	b118      	cbz	r0, 800aac0 <_vfiprintf_r+0x18>
 800aab8:	6983      	ldr	r3, [r0, #24]
 800aaba:	b90b      	cbnz	r3, 800aac0 <_vfiprintf_r+0x18>
 800aabc:	f7ff f946 	bl	8009d4c <__sinit>
 800aac0:	4b89      	ldr	r3, [pc, #548]	; (800ace8 <_vfiprintf_r+0x240>)
 800aac2:	429d      	cmp	r5, r3
 800aac4:	d11b      	bne.n	800aafe <_vfiprintf_r+0x56>
 800aac6:	6875      	ldr	r5, [r6, #4]
 800aac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaca:	07d9      	lsls	r1, r3, #31
 800aacc:	d405      	bmi.n	800aada <_vfiprintf_r+0x32>
 800aace:	89ab      	ldrh	r3, [r5, #12]
 800aad0:	059a      	lsls	r2, r3, #22
 800aad2:	d402      	bmi.n	800aada <_vfiprintf_r+0x32>
 800aad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aad6:	f7ff f9dc 	bl	8009e92 <__retarget_lock_acquire_recursive>
 800aada:	89ab      	ldrh	r3, [r5, #12]
 800aadc:	071b      	lsls	r3, r3, #28
 800aade:	d501      	bpl.n	800aae4 <_vfiprintf_r+0x3c>
 800aae0:	692b      	ldr	r3, [r5, #16]
 800aae2:	b9eb      	cbnz	r3, 800ab20 <_vfiprintf_r+0x78>
 800aae4:	4629      	mov	r1, r5
 800aae6:	4630      	mov	r0, r6
 800aae8:	f000 f9c6 	bl	800ae78 <__swsetup_r>
 800aaec:	b1c0      	cbz	r0, 800ab20 <_vfiprintf_r+0x78>
 800aaee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaf0:	07dc      	lsls	r4, r3, #31
 800aaf2:	d50e      	bpl.n	800ab12 <_vfiprintf_r+0x6a>
 800aaf4:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf8:	b01d      	add	sp, #116	; 0x74
 800aafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aafe:	4b7b      	ldr	r3, [pc, #492]	; (800acec <_vfiprintf_r+0x244>)
 800ab00:	429d      	cmp	r5, r3
 800ab02:	d101      	bne.n	800ab08 <_vfiprintf_r+0x60>
 800ab04:	68b5      	ldr	r5, [r6, #8]
 800ab06:	e7df      	b.n	800aac8 <_vfiprintf_r+0x20>
 800ab08:	4b79      	ldr	r3, [pc, #484]	; (800acf0 <_vfiprintf_r+0x248>)
 800ab0a:	429d      	cmp	r5, r3
 800ab0c:	bf08      	it	eq
 800ab0e:	68f5      	ldreq	r5, [r6, #12]
 800ab10:	e7da      	b.n	800aac8 <_vfiprintf_r+0x20>
 800ab12:	89ab      	ldrh	r3, [r5, #12]
 800ab14:	0598      	lsls	r0, r3, #22
 800ab16:	d4ed      	bmi.n	800aaf4 <_vfiprintf_r+0x4c>
 800ab18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab1a:	f7ff f9bb 	bl	8009e94 <__retarget_lock_release_recursive>
 800ab1e:	e7e9      	b.n	800aaf4 <_vfiprintf_r+0x4c>
 800ab20:	2300      	movs	r3, #0
 800ab22:	9309      	str	r3, [sp, #36]	; 0x24
 800ab24:	2320      	movs	r3, #32
 800ab26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab2e:	2330      	movs	r3, #48	; 0x30
 800ab30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800acf4 <_vfiprintf_r+0x24c>
 800ab34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab38:	f04f 0901 	mov.w	r9, #1
 800ab3c:	4623      	mov	r3, r4
 800ab3e:	469a      	mov	sl, r3
 800ab40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab44:	b10a      	cbz	r2, 800ab4a <_vfiprintf_r+0xa2>
 800ab46:	2a25      	cmp	r2, #37	; 0x25
 800ab48:	d1f9      	bne.n	800ab3e <_vfiprintf_r+0x96>
 800ab4a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab4e:	d00b      	beq.n	800ab68 <_vfiprintf_r+0xc0>
 800ab50:	465b      	mov	r3, fp
 800ab52:	4622      	mov	r2, r4
 800ab54:	4629      	mov	r1, r5
 800ab56:	4630      	mov	r0, r6
 800ab58:	f7ff ff93 	bl	800aa82 <__sfputs_r>
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	f000 80aa 	beq.w	800acb6 <_vfiprintf_r+0x20e>
 800ab62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab64:	445a      	add	r2, fp
 800ab66:	9209      	str	r2, [sp, #36]	; 0x24
 800ab68:	f89a 3000 	ldrb.w	r3, [sl]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f000 80a2 	beq.w	800acb6 <_vfiprintf_r+0x20e>
 800ab72:	2300      	movs	r3, #0
 800ab74:	f04f 32ff 	mov.w	r2, #4294967295
 800ab78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab7c:	f10a 0a01 	add.w	sl, sl, #1
 800ab80:	9304      	str	r3, [sp, #16]
 800ab82:	9307      	str	r3, [sp, #28]
 800ab84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab88:	931a      	str	r3, [sp, #104]	; 0x68
 800ab8a:	4654      	mov	r4, sl
 800ab8c:	2205      	movs	r2, #5
 800ab8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab92:	4858      	ldr	r0, [pc, #352]	; (800acf4 <_vfiprintf_r+0x24c>)
 800ab94:	f7f5 fb3c 	bl	8000210 <memchr>
 800ab98:	9a04      	ldr	r2, [sp, #16]
 800ab9a:	b9d8      	cbnz	r0, 800abd4 <_vfiprintf_r+0x12c>
 800ab9c:	06d1      	lsls	r1, r2, #27
 800ab9e:	bf44      	itt	mi
 800aba0:	2320      	movmi	r3, #32
 800aba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aba6:	0713      	lsls	r3, r2, #28
 800aba8:	bf44      	itt	mi
 800abaa:	232b      	movmi	r3, #43	; 0x2b
 800abac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abb0:	f89a 3000 	ldrb.w	r3, [sl]
 800abb4:	2b2a      	cmp	r3, #42	; 0x2a
 800abb6:	d015      	beq.n	800abe4 <_vfiprintf_r+0x13c>
 800abb8:	9a07      	ldr	r2, [sp, #28]
 800abba:	4654      	mov	r4, sl
 800abbc:	2000      	movs	r0, #0
 800abbe:	f04f 0c0a 	mov.w	ip, #10
 800abc2:	4621      	mov	r1, r4
 800abc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abc8:	3b30      	subs	r3, #48	; 0x30
 800abca:	2b09      	cmp	r3, #9
 800abcc:	d94e      	bls.n	800ac6c <_vfiprintf_r+0x1c4>
 800abce:	b1b0      	cbz	r0, 800abfe <_vfiprintf_r+0x156>
 800abd0:	9207      	str	r2, [sp, #28]
 800abd2:	e014      	b.n	800abfe <_vfiprintf_r+0x156>
 800abd4:	eba0 0308 	sub.w	r3, r0, r8
 800abd8:	fa09 f303 	lsl.w	r3, r9, r3
 800abdc:	4313      	orrs	r3, r2
 800abde:	9304      	str	r3, [sp, #16]
 800abe0:	46a2      	mov	sl, r4
 800abe2:	e7d2      	b.n	800ab8a <_vfiprintf_r+0xe2>
 800abe4:	9b03      	ldr	r3, [sp, #12]
 800abe6:	1d19      	adds	r1, r3, #4
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	9103      	str	r1, [sp, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	bfbb      	ittet	lt
 800abf0:	425b      	neglt	r3, r3
 800abf2:	f042 0202 	orrlt.w	r2, r2, #2
 800abf6:	9307      	strge	r3, [sp, #28]
 800abf8:	9307      	strlt	r3, [sp, #28]
 800abfa:	bfb8      	it	lt
 800abfc:	9204      	strlt	r2, [sp, #16]
 800abfe:	7823      	ldrb	r3, [r4, #0]
 800ac00:	2b2e      	cmp	r3, #46	; 0x2e
 800ac02:	d10c      	bne.n	800ac1e <_vfiprintf_r+0x176>
 800ac04:	7863      	ldrb	r3, [r4, #1]
 800ac06:	2b2a      	cmp	r3, #42	; 0x2a
 800ac08:	d135      	bne.n	800ac76 <_vfiprintf_r+0x1ce>
 800ac0a:	9b03      	ldr	r3, [sp, #12]
 800ac0c:	1d1a      	adds	r2, r3, #4
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	9203      	str	r2, [sp, #12]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	bfb8      	it	lt
 800ac16:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac1a:	3402      	adds	r4, #2
 800ac1c:	9305      	str	r3, [sp, #20]
 800ac1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad04 <_vfiprintf_r+0x25c>
 800ac22:	7821      	ldrb	r1, [r4, #0]
 800ac24:	2203      	movs	r2, #3
 800ac26:	4650      	mov	r0, sl
 800ac28:	f7f5 faf2 	bl	8000210 <memchr>
 800ac2c:	b140      	cbz	r0, 800ac40 <_vfiprintf_r+0x198>
 800ac2e:	2340      	movs	r3, #64	; 0x40
 800ac30:	eba0 000a 	sub.w	r0, r0, sl
 800ac34:	fa03 f000 	lsl.w	r0, r3, r0
 800ac38:	9b04      	ldr	r3, [sp, #16]
 800ac3a:	4303      	orrs	r3, r0
 800ac3c:	3401      	adds	r4, #1
 800ac3e:	9304      	str	r3, [sp, #16]
 800ac40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac44:	482c      	ldr	r0, [pc, #176]	; (800acf8 <_vfiprintf_r+0x250>)
 800ac46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac4a:	2206      	movs	r2, #6
 800ac4c:	f7f5 fae0 	bl	8000210 <memchr>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d03f      	beq.n	800acd4 <_vfiprintf_r+0x22c>
 800ac54:	4b29      	ldr	r3, [pc, #164]	; (800acfc <_vfiprintf_r+0x254>)
 800ac56:	bb1b      	cbnz	r3, 800aca0 <_vfiprintf_r+0x1f8>
 800ac58:	9b03      	ldr	r3, [sp, #12]
 800ac5a:	3307      	adds	r3, #7
 800ac5c:	f023 0307 	bic.w	r3, r3, #7
 800ac60:	3308      	adds	r3, #8
 800ac62:	9303      	str	r3, [sp, #12]
 800ac64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac66:	443b      	add	r3, r7
 800ac68:	9309      	str	r3, [sp, #36]	; 0x24
 800ac6a:	e767      	b.n	800ab3c <_vfiprintf_r+0x94>
 800ac6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac70:	460c      	mov	r4, r1
 800ac72:	2001      	movs	r0, #1
 800ac74:	e7a5      	b.n	800abc2 <_vfiprintf_r+0x11a>
 800ac76:	2300      	movs	r3, #0
 800ac78:	3401      	adds	r4, #1
 800ac7a:	9305      	str	r3, [sp, #20]
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	f04f 0c0a 	mov.w	ip, #10
 800ac82:	4620      	mov	r0, r4
 800ac84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac88:	3a30      	subs	r2, #48	; 0x30
 800ac8a:	2a09      	cmp	r2, #9
 800ac8c:	d903      	bls.n	800ac96 <_vfiprintf_r+0x1ee>
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d0c5      	beq.n	800ac1e <_vfiprintf_r+0x176>
 800ac92:	9105      	str	r1, [sp, #20]
 800ac94:	e7c3      	b.n	800ac1e <_vfiprintf_r+0x176>
 800ac96:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e7f0      	b.n	800ac82 <_vfiprintf_r+0x1da>
 800aca0:	ab03      	add	r3, sp, #12
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	462a      	mov	r2, r5
 800aca6:	4b16      	ldr	r3, [pc, #88]	; (800ad00 <_vfiprintf_r+0x258>)
 800aca8:	a904      	add	r1, sp, #16
 800acaa:	4630      	mov	r0, r6
 800acac:	f7fd fd5e 	bl	800876c <_printf_float>
 800acb0:	4607      	mov	r7, r0
 800acb2:	1c78      	adds	r0, r7, #1
 800acb4:	d1d6      	bne.n	800ac64 <_vfiprintf_r+0x1bc>
 800acb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acb8:	07d9      	lsls	r1, r3, #31
 800acba:	d405      	bmi.n	800acc8 <_vfiprintf_r+0x220>
 800acbc:	89ab      	ldrh	r3, [r5, #12]
 800acbe:	059a      	lsls	r2, r3, #22
 800acc0:	d402      	bmi.n	800acc8 <_vfiprintf_r+0x220>
 800acc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acc4:	f7ff f8e6 	bl	8009e94 <__retarget_lock_release_recursive>
 800acc8:	89ab      	ldrh	r3, [r5, #12]
 800acca:	065b      	lsls	r3, r3, #25
 800accc:	f53f af12 	bmi.w	800aaf4 <_vfiprintf_r+0x4c>
 800acd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acd2:	e711      	b.n	800aaf8 <_vfiprintf_r+0x50>
 800acd4:	ab03      	add	r3, sp, #12
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	462a      	mov	r2, r5
 800acda:	4b09      	ldr	r3, [pc, #36]	; (800ad00 <_vfiprintf_r+0x258>)
 800acdc:	a904      	add	r1, sp, #16
 800acde:	4630      	mov	r0, r6
 800ace0:	f7fd ffe8 	bl	8008cb4 <_printf_i>
 800ace4:	e7e4      	b.n	800acb0 <_vfiprintf_r+0x208>
 800ace6:	bf00      	nop
 800ace8:	0800b624 	.word	0x0800b624
 800acec:	0800b644 	.word	0x0800b644
 800acf0:	0800b604 	.word	0x0800b604
 800acf4:	0800b7bc 	.word	0x0800b7bc
 800acf8:	0800b7c6 	.word	0x0800b7c6
 800acfc:	0800876d 	.word	0x0800876d
 800ad00:	0800aa83 	.word	0x0800aa83
 800ad04:	0800b7c2 	.word	0x0800b7c2

0800ad08 <_sbrk_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4d06      	ldr	r5, [pc, #24]	; (800ad24 <_sbrk_r+0x1c>)
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	4604      	mov	r4, r0
 800ad10:	4608      	mov	r0, r1
 800ad12:	602b      	str	r3, [r5, #0]
 800ad14:	f7f8 fc52 	bl	80035bc <_sbrk>
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	d102      	bne.n	800ad22 <_sbrk_r+0x1a>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	b103      	cbz	r3, 800ad22 <_sbrk_r+0x1a>
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	20000784 	.word	0x20000784

0800ad28 <__sread>:
 800ad28:	b510      	push	{r4, lr}
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad30:	f000 faf2 	bl	800b318 <_read_r>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	bfab      	itete	ge
 800ad38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad3a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad3c:	181b      	addge	r3, r3, r0
 800ad3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad42:	bfac      	ite	ge
 800ad44:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad46:	81a3      	strhlt	r3, [r4, #12]
 800ad48:	bd10      	pop	{r4, pc}

0800ad4a <__swrite>:
 800ad4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4e:	461f      	mov	r7, r3
 800ad50:	898b      	ldrh	r3, [r1, #12]
 800ad52:	05db      	lsls	r3, r3, #23
 800ad54:	4605      	mov	r5, r0
 800ad56:	460c      	mov	r4, r1
 800ad58:	4616      	mov	r6, r2
 800ad5a:	d505      	bpl.n	800ad68 <__swrite+0x1e>
 800ad5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad60:	2302      	movs	r3, #2
 800ad62:	2200      	movs	r2, #0
 800ad64:	f000 f9f8 	bl	800b158 <_lseek_r>
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad72:	81a3      	strh	r3, [r4, #12]
 800ad74:	4632      	mov	r2, r6
 800ad76:	463b      	mov	r3, r7
 800ad78:	4628      	mov	r0, r5
 800ad7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7e:	f000 b869 	b.w	800ae54 <_write_r>

0800ad82 <__sseek>:
 800ad82:	b510      	push	{r4, lr}
 800ad84:	460c      	mov	r4, r1
 800ad86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad8a:	f000 f9e5 	bl	800b158 <_lseek_r>
 800ad8e:	1c43      	adds	r3, r0, #1
 800ad90:	89a3      	ldrh	r3, [r4, #12]
 800ad92:	bf15      	itete	ne
 800ad94:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad9e:	81a3      	strheq	r3, [r4, #12]
 800ada0:	bf18      	it	ne
 800ada2:	81a3      	strhne	r3, [r4, #12]
 800ada4:	bd10      	pop	{r4, pc}

0800ada6 <__sclose>:
 800ada6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adaa:	f000 b8f1 	b.w	800af90 <_close_r>
	...

0800adb0 <__swbuf_r>:
 800adb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb2:	460e      	mov	r6, r1
 800adb4:	4614      	mov	r4, r2
 800adb6:	4605      	mov	r5, r0
 800adb8:	b118      	cbz	r0, 800adc2 <__swbuf_r+0x12>
 800adba:	6983      	ldr	r3, [r0, #24]
 800adbc:	b90b      	cbnz	r3, 800adc2 <__swbuf_r+0x12>
 800adbe:	f7fe ffc5 	bl	8009d4c <__sinit>
 800adc2:	4b21      	ldr	r3, [pc, #132]	; (800ae48 <__swbuf_r+0x98>)
 800adc4:	429c      	cmp	r4, r3
 800adc6:	d12b      	bne.n	800ae20 <__swbuf_r+0x70>
 800adc8:	686c      	ldr	r4, [r5, #4]
 800adca:	69a3      	ldr	r3, [r4, #24]
 800adcc:	60a3      	str	r3, [r4, #8]
 800adce:	89a3      	ldrh	r3, [r4, #12]
 800add0:	071a      	lsls	r2, r3, #28
 800add2:	d52f      	bpl.n	800ae34 <__swbuf_r+0x84>
 800add4:	6923      	ldr	r3, [r4, #16]
 800add6:	b36b      	cbz	r3, 800ae34 <__swbuf_r+0x84>
 800add8:	6923      	ldr	r3, [r4, #16]
 800adda:	6820      	ldr	r0, [r4, #0]
 800addc:	1ac0      	subs	r0, r0, r3
 800adde:	6963      	ldr	r3, [r4, #20]
 800ade0:	b2f6      	uxtb	r6, r6
 800ade2:	4283      	cmp	r3, r0
 800ade4:	4637      	mov	r7, r6
 800ade6:	dc04      	bgt.n	800adf2 <__swbuf_r+0x42>
 800ade8:	4621      	mov	r1, r4
 800adea:	4628      	mov	r0, r5
 800adec:	f000 f966 	bl	800b0bc <_fflush_r>
 800adf0:	bb30      	cbnz	r0, 800ae40 <__swbuf_r+0x90>
 800adf2:	68a3      	ldr	r3, [r4, #8]
 800adf4:	3b01      	subs	r3, #1
 800adf6:	60a3      	str	r3, [r4, #8]
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	1c5a      	adds	r2, r3, #1
 800adfc:	6022      	str	r2, [r4, #0]
 800adfe:	701e      	strb	r6, [r3, #0]
 800ae00:	6963      	ldr	r3, [r4, #20]
 800ae02:	3001      	adds	r0, #1
 800ae04:	4283      	cmp	r3, r0
 800ae06:	d004      	beq.n	800ae12 <__swbuf_r+0x62>
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	07db      	lsls	r3, r3, #31
 800ae0c:	d506      	bpl.n	800ae1c <__swbuf_r+0x6c>
 800ae0e:	2e0a      	cmp	r6, #10
 800ae10:	d104      	bne.n	800ae1c <__swbuf_r+0x6c>
 800ae12:	4621      	mov	r1, r4
 800ae14:	4628      	mov	r0, r5
 800ae16:	f000 f951 	bl	800b0bc <_fflush_r>
 800ae1a:	b988      	cbnz	r0, 800ae40 <__swbuf_r+0x90>
 800ae1c:	4638      	mov	r0, r7
 800ae1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae20:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <__swbuf_r+0x9c>)
 800ae22:	429c      	cmp	r4, r3
 800ae24:	d101      	bne.n	800ae2a <__swbuf_r+0x7a>
 800ae26:	68ac      	ldr	r4, [r5, #8]
 800ae28:	e7cf      	b.n	800adca <__swbuf_r+0x1a>
 800ae2a:	4b09      	ldr	r3, [pc, #36]	; (800ae50 <__swbuf_r+0xa0>)
 800ae2c:	429c      	cmp	r4, r3
 800ae2e:	bf08      	it	eq
 800ae30:	68ec      	ldreq	r4, [r5, #12]
 800ae32:	e7ca      	b.n	800adca <__swbuf_r+0x1a>
 800ae34:	4621      	mov	r1, r4
 800ae36:	4628      	mov	r0, r5
 800ae38:	f000 f81e 	bl	800ae78 <__swsetup_r>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	d0cb      	beq.n	800add8 <__swbuf_r+0x28>
 800ae40:	f04f 37ff 	mov.w	r7, #4294967295
 800ae44:	e7ea      	b.n	800ae1c <__swbuf_r+0x6c>
 800ae46:	bf00      	nop
 800ae48:	0800b624 	.word	0x0800b624
 800ae4c:	0800b644 	.word	0x0800b644
 800ae50:	0800b604 	.word	0x0800b604

0800ae54 <_write_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	4d07      	ldr	r5, [pc, #28]	; (800ae74 <_write_r+0x20>)
 800ae58:	4604      	mov	r4, r0
 800ae5a:	4608      	mov	r0, r1
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	2200      	movs	r2, #0
 800ae60:	602a      	str	r2, [r5, #0]
 800ae62:	461a      	mov	r2, r3
 800ae64:	f7f8 fb59 	bl	800351a <_write>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_write_r+0x1e>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_write_r+0x1e>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	20000784 	.word	0x20000784

0800ae78 <__swsetup_r>:
 800ae78:	4b32      	ldr	r3, [pc, #200]	; (800af44 <__swsetup_r+0xcc>)
 800ae7a:	b570      	push	{r4, r5, r6, lr}
 800ae7c:	681d      	ldr	r5, [r3, #0]
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460c      	mov	r4, r1
 800ae82:	b125      	cbz	r5, 800ae8e <__swsetup_r+0x16>
 800ae84:	69ab      	ldr	r3, [r5, #24]
 800ae86:	b913      	cbnz	r3, 800ae8e <__swsetup_r+0x16>
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f7fe ff5f 	bl	8009d4c <__sinit>
 800ae8e:	4b2e      	ldr	r3, [pc, #184]	; (800af48 <__swsetup_r+0xd0>)
 800ae90:	429c      	cmp	r4, r3
 800ae92:	d10f      	bne.n	800aeb4 <__swsetup_r+0x3c>
 800ae94:	686c      	ldr	r4, [r5, #4]
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae9c:	0719      	lsls	r1, r3, #28
 800ae9e:	d42c      	bmi.n	800aefa <__swsetup_r+0x82>
 800aea0:	06dd      	lsls	r5, r3, #27
 800aea2:	d411      	bmi.n	800aec8 <__swsetup_r+0x50>
 800aea4:	2309      	movs	r3, #9
 800aea6:	6033      	str	r3, [r6, #0]
 800aea8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb2:	e03e      	b.n	800af32 <__swsetup_r+0xba>
 800aeb4:	4b25      	ldr	r3, [pc, #148]	; (800af4c <__swsetup_r+0xd4>)
 800aeb6:	429c      	cmp	r4, r3
 800aeb8:	d101      	bne.n	800aebe <__swsetup_r+0x46>
 800aeba:	68ac      	ldr	r4, [r5, #8]
 800aebc:	e7eb      	b.n	800ae96 <__swsetup_r+0x1e>
 800aebe:	4b24      	ldr	r3, [pc, #144]	; (800af50 <__swsetup_r+0xd8>)
 800aec0:	429c      	cmp	r4, r3
 800aec2:	bf08      	it	eq
 800aec4:	68ec      	ldreq	r4, [r5, #12]
 800aec6:	e7e6      	b.n	800ae96 <__swsetup_r+0x1e>
 800aec8:	0758      	lsls	r0, r3, #29
 800aeca:	d512      	bpl.n	800aef2 <__swsetup_r+0x7a>
 800aecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aece:	b141      	cbz	r1, 800aee2 <__swsetup_r+0x6a>
 800aed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aed4:	4299      	cmp	r1, r3
 800aed6:	d002      	beq.n	800aede <__swsetup_r+0x66>
 800aed8:	4630      	mov	r0, r6
 800aeda:	f7ff fb7f 	bl	800a5dc <_free_r>
 800aede:	2300      	movs	r3, #0
 800aee0:	6363      	str	r3, [r4, #52]	; 0x34
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aee8:	81a3      	strh	r3, [r4, #12]
 800aeea:	2300      	movs	r3, #0
 800aeec:	6063      	str	r3, [r4, #4]
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	89a3      	ldrh	r3, [r4, #12]
 800aef4:	f043 0308 	orr.w	r3, r3, #8
 800aef8:	81a3      	strh	r3, [r4, #12]
 800aefa:	6923      	ldr	r3, [r4, #16]
 800aefc:	b94b      	cbnz	r3, 800af12 <__swsetup_r+0x9a>
 800aefe:	89a3      	ldrh	r3, [r4, #12]
 800af00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af08:	d003      	beq.n	800af12 <__swsetup_r+0x9a>
 800af0a:	4621      	mov	r1, r4
 800af0c:	4630      	mov	r0, r6
 800af0e:	f000 f95b 	bl	800b1c8 <__smakebuf_r>
 800af12:	89a0      	ldrh	r0, [r4, #12]
 800af14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af18:	f010 0301 	ands.w	r3, r0, #1
 800af1c:	d00a      	beq.n	800af34 <__swsetup_r+0xbc>
 800af1e:	2300      	movs	r3, #0
 800af20:	60a3      	str	r3, [r4, #8]
 800af22:	6963      	ldr	r3, [r4, #20]
 800af24:	425b      	negs	r3, r3
 800af26:	61a3      	str	r3, [r4, #24]
 800af28:	6923      	ldr	r3, [r4, #16]
 800af2a:	b943      	cbnz	r3, 800af3e <__swsetup_r+0xc6>
 800af2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af30:	d1ba      	bne.n	800aea8 <__swsetup_r+0x30>
 800af32:	bd70      	pop	{r4, r5, r6, pc}
 800af34:	0781      	lsls	r1, r0, #30
 800af36:	bf58      	it	pl
 800af38:	6963      	ldrpl	r3, [r4, #20]
 800af3a:	60a3      	str	r3, [r4, #8]
 800af3c:	e7f4      	b.n	800af28 <__swsetup_r+0xb0>
 800af3e:	2000      	movs	r0, #0
 800af40:	e7f7      	b.n	800af32 <__swsetup_r+0xba>
 800af42:	bf00      	nop
 800af44:	20000030 	.word	0x20000030
 800af48:	0800b624 	.word	0x0800b624
 800af4c:	0800b644 	.word	0x0800b644
 800af50:	0800b604 	.word	0x0800b604

0800af54 <__assert_func>:
 800af54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af56:	4614      	mov	r4, r2
 800af58:	461a      	mov	r2, r3
 800af5a:	4b09      	ldr	r3, [pc, #36]	; (800af80 <__assert_func+0x2c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4605      	mov	r5, r0
 800af60:	68d8      	ldr	r0, [r3, #12]
 800af62:	b14c      	cbz	r4, 800af78 <__assert_func+0x24>
 800af64:	4b07      	ldr	r3, [pc, #28]	; (800af84 <__assert_func+0x30>)
 800af66:	9100      	str	r1, [sp, #0]
 800af68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af6c:	4906      	ldr	r1, [pc, #24]	; (800af88 <__assert_func+0x34>)
 800af6e:	462b      	mov	r3, r5
 800af70:	f000 f8e0 	bl	800b134 <fiprintf>
 800af74:	f000 f9ef 	bl	800b356 <abort>
 800af78:	4b04      	ldr	r3, [pc, #16]	; (800af8c <__assert_func+0x38>)
 800af7a:	461c      	mov	r4, r3
 800af7c:	e7f3      	b.n	800af66 <__assert_func+0x12>
 800af7e:	bf00      	nop
 800af80:	20000030 	.word	0x20000030
 800af84:	0800b7cd 	.word	0x0800b7cd
 800af88:	0800b7da 	.word	0x0800b7da
 800af8c:	0800b808 	.word	0x0800b808

0800af90 <_close_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4d06      	ldr	r5, [pc, #24]	; (800afac <_close_r+0x1c>)
 800af94:	2300      	movs	r3, #0
 800af96:	4604      	mov	r4, r0
 800af98:	4608      	mov	r0, r1
 800af9a:	602b      	str	r3, [r5, #0]
 800af9c:	f7f8 fad9 	bl	8003552 <_close>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d102      	bne.n	800afaa <_close_r+0x1a>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b103      	cbz	r3, 800afaa <_close_r+0x1a>
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	20000784 	.word	0x20000784

0800afb0 <__sflush_r>:
 800afb0:	898a      	ldrh	r2, [r1, #12]
 800afb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb6:	4605      	mov	r5, r0
 800afb8:	0710      	lsls	r0, r2, #28
 800afba:	460c      	mov	r4, r1
 800afbc:	d458      	bmi.n	800b070 <__sflush_r+0xc0>
 800afbe:	684b      	ldr	r3, [r1, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	dc05      	bgt.n	800afd0 <__sflush_r+0x20>
 800afc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	dc02      	bgt.n	800afd0 <__sflush_r+0x20>
 800afca:	2000      	movs	r0, #0
 800afcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	d0f9      	beq.n	800afca <__sflush_r+0x1a>
 800afd6:	2300      	movs	r3, #0
 800afd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afdc:	682f      	ldr	r7, [r5, #0]
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	d032      	beq.n	800b048 <__sflush_r+0x98>
 800afe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	075a      	lsls	r2, r3, #29
 800afe8:	d505      	bpl.n	800aff6 <__sflush_r+0x46>
 800afea:	6863      	ldr	r3, [r4, #4]
 800afec:	1ac0      	subs	r0, r0, r3
 800afee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aff0:	b10b      	cbz	r3, 800aff6 <__sflush_r+0x46>
 800aff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aff4:	1ac0      	subs	r0, r0, r3
 800aff6:	2300      	movs	r3, #0
 800aff8:	4602      	mov	r2, r0
 800affa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800affc:	6a21      	ldr	r1, [r4, #32]
 800affe:	4628      	mov	r0, r5
 800b000:	47b0      	blx	r6
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	89a3      	ldrh	r3, [r4, #12]
 800b006:	d106      	bne.n	800b016 <__sflush_r+0x66>
 800b008:	6829      	ldr	r1, [r5, #0]
 800b00a:	291d      	cmp	r1, #29
 800b00c:	d82c      	bhi.n	800b068 <__sflush_r+0xb8>
 800b00e:	4a2a      	ldr	r2, [pc, #168]	; (800b0b8 <__sflush_r+0x108>)
 800b010:	40ca      	lsrs	r2, r1
 800b012:	07d6      	lsls	r6, r2, #31
 800b014:	d528      	bpl.n	800b068 <__sflush_r+0xb8>
 800b016:	2200      	movs	r2, #0
 800b018:	6062      	str	r2, [r4, #4]
 800b01a:	04d9      	lsls	r1, r3, #19
 800b01c:	6922      	ldr	r2, [r4, #16]
 800b01e:	6022      	str	r2, [r4, #0]
 800b020:	d504      	bpl.n	800b02c <__sflush_r+0x7c>
 800b022:	1c42      	adds	r2, r0, #1
 800b024:	d101      	bne.n	800b02a <__sflush_r+0x7a>
 800b026:	682b      	ldr	r3, [r5, #0]
 800b028:	b903      	cbnz	r3, 800b02c <__sflush_r+0x7c>
 800b02a:	6560      	str	r0, [r4, #84]	; 0x54
 800b02c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b02e:	602f      	str	r7, [r5, #0]
 800b030:	2900      	cmp	r1, #0
 800b032:	d0ca      	beq.n	800afca <__sflush_r+0x1a>
 800b034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b038:	4299      	cmp	r1, r3
 800b03a:	d002      	beq.n	800b042 <__sflush_r+0x92>
 800b03c:	4628      	mov	r0, r5
 800b03e:	f7ff facd 	bl	800a5dc <_free_r>
 800b042:	2000      	movs	r0, #0
 800b044:	6360      	str	r0, [r4, #52]	; 0x34
 800b046:	e7c1      	b.n	800afcc <__sflush_r+0x1c>
 800b048:	6a21      	ldr	r1, [r4, #32]
 800b04a:	2301      	movs	r3, #1
 800b04c:	4628      	mov	r0, r5
 800b04e:	47b0      	blx	r6
 800b050:	1c41      	adds	r1, r0, #1
 800b052:	d1c7      	bne.n	800afe4 <__sflush_r+0x34>
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0c4      	beq.n	800afe4 <__sflush_r+0x34>
 800b05a:	2b1d      	cmp	r3, #29
 800b05c:	d001      	beq.n	800b062 <__sflush_r+0xb2>
 800b05e:	2b16      	cmp	r3, #22
 800b060:	d101      	bne.n	800b066 <__sflush_r+0xb6>
 800b062:	602f      	str	r7, [r5, #0]
 800b064:	e7b1      	b.n	800afca <__sflush_r+0x1a>
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b06c:	81a3      	strh	r3, [r4, #12]
 800b06e:	e7ad      	b.n	800afcc <__sflush_r+0x1c>
 800b070:	690f      	ldr	r7, [r1, #16]
 800b072:	2f00      	cmp	r7, #0
 800b074:	d0a9      	beq.n	800afca <__sflush_r+0x1a>
 800b076:	0793      	lsls	r3, r2, #30
 800b078:	680e      	ldr	r6, [r1, #0]
 800b07a:	bf08      	it	eq
 800b07c:	694b      	ldreq	r3, [r1, #20]
 800b07e:	600f      	str	r7, [r1, #0]
 800b080:	bf18      	it	ne
 800b082:	2300      	movne	r3, #0
 800b084:	eba6 0807 	sub.w	r8, r6, r7
 800b088:	608b      	str	r3, [r1, #8]
 800b08a:	f1b8 0f00 	cmp.w	r8, #0
 800b08e:	dd9c      	ble.n	800afca <__sflush_r+0x1a>
 800b090:	6a21      	ldr	r1, [r4, #32]
 800b092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b094:	4643      	mov	r3, r8
 800b096:	463a      	mov	r2, r7
 800b098:	4628      	mov	r0, r5
 800b09a:	47b0      	blx	r6
 800b09c:	2800      	cmp	r0, #0
 800b09e:	dc06      	bgt.n	800b0ae <__sflush_r+0xfe>
 800b0a0:	89a3      	ldrh	r3, [r4, #12]
 800b0a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0a6:	81a3      	strh	r3, [r4, #12]
 800b0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ac:	e78e      	b.n	800afcc <__sflush_r+0x1c>
 800b0ae:	4407      	add	r7, r0
 800b0b0:	eba8 0800 	sub.w	r8, r8, r0
 800b0b4:	e7e9      	b.n	800b08a <__sflush_r+0xda>
 800b0b6:	bf00      	nop
 800b0b8:	20400001 	.word	0x20400001

0800b0bc <_fflush_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	690b      	ldr	r3, [r1, #16]
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	b913      	cbnz	r3, 800b0cc <_fflush_r+0x10>
 800b0c6:	2500      	movs	r5, #0
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	bd38      	pop	{r3, r4, r5, pc}
 800b0cc:	b118      	cbz	r0, 800b0d6 <_fflush_r+0x1a>
 800b0ce:	6983      	ldr	r3, [r0, #24]
 800b0d0:	b90b      	cbnz	r3, 800b0d6 <_fflush_r+0x1a>
 800b0d2:	f7fe fe3b 	bl	8009d4c <__sinit>
 800b0d6:	4b14      	ldr	r3, [pc, #80]	; (800b128 <_fflush_r+0x6c>)
 800b0d8:	429c      	cmp	r4, r3
 800b0da:	d11b      	bne.n	800b114 <_fflush_r+0x58>
 800b0dc:	686c      	ldr	r4, [r5, #4]
 800b0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0ef      	beq.n	800b0c6 <_fflush_r+0xa>
 800b0e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0e8:	07d0      	lsls	r0, r2, #31
 800b0ea:	d404      	bmi.n	800b0f6 <_fflush_r+0x3a>
 800b0ec:	0599      	lsls	r1, r3, #22
 800b0ee:	d402      	bmi.n	800b0f6 <_fflush_r+0x3a>
 800b0f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0f2:	f7fe fece 	bl	8009e92 <__retarget_lock_acquire_recursive>
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	f7ff ff59 	bl	800afb0 <__sflush_r>
 800b0fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b100:	07da      	lsls	r2, r3, #31
 800b102:	4605      	mov	r5, r0
 800b104:	d4e0      	bmi.n	800b0c8 <_fflush_r+0xc>
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	059b      	lsls	r3, r3, #22
 800b10a:	d4dd      	bmi.n	800b0c8 <_fflush_r+0xc>
 800b10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b10e:	f7fe fec1 	bl	8009e94 <__retarget_lock_release_recursive>
 800b112:	e7d9      	b.n	800b0c8 <_fflush_r+0xc>
 800b114:	4b05      	ldr	r3, [pc, #20]	; (800b12c <_fflush_r+0x70>)
 800b116:	429c      	cmp	r4, r3
 800b118:	d101      	bne.n	800b11e <_fflush_r+0x62>
 800b11a:	68ac      	ldr	r4, [r5, #8]
 800b11c:	e7df      	b.n	800b0de <_fflush_r+0x22>
 800b11e:	4b04      	ldr	r3, [pc, #16]	; (800b130 <_fflush_r+0x74>)
 800b120:	429c      	cmp	r4, r3
 800b122:	bf08      	it	eq
 800b124:	68ec      	ldreq	r4, [r5, #12]
 800b126:	e7da      	b.n	800b0de <_fflush_r+0x22>
 800b128:	0800b624 	.word	0x0800b624
 800b12c:	0800b644 	.word	0x0800b644
 800b130:	0800b604 	.word	0x0800b604

0800b134 <fiprintf>:
 800b134:	b40e      	push	{r1, r2, r3}
 800b136:	b503      	push	{r0, r1, lr}
 800b138:	4601      	mov	r1, r0
 800b13a:	ab03      	add	r3, sp, #12
 800b13c:	4805      	ldr	r0, [pc, #20]	; (800b154 <fiprintf+0x20>)
 800b13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b142:	6800      	ldr	r0, [r0, #0]
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	f7ff fcaf 	bl	800aaa8 <_vfiprintf_r>
 800b14a:	b002      	add	sp, #8
 800b14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b150:	b003      	add	sp, #12
 800b152:	4770      	bx	lr
 800b154:	20000030 	.word	0x20000030

0800b158 <_lseek_r>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	4d07      	ldr	r5, [pc, #28]	; (800b178 <_lseek_r+0x20>)
 800b15c:	4604      	mov	r4, r0
 800b15e:	4608      	mov	r0, r1
 800b160:	4611      	mov	r1, r2
 800b162:	2200      	movs	r2, #0
 800b164:	602a      	str	r2, [r5, #0]
 800b166:	461a      	mov	r2, r3
 800b168:	f7f8 fa1a 	bl	80035a0 <_lseek>
 800b16c:	1c43      	adds	r3, r0, #1
 800b16e:	d102      	bne.n	800b176 <_lseek_r+0x1e>
 800b170:	682b      	ldr	r3, [r5, #0]
 800b172:	b103      	cbz	r3, 800b176 <_lseek_r+0x1e>
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	bd38      	pop	{r3, r4, r5, pc}
 800b178:	20000784 	.word	0x20000784

0800b17c <__swhatbuf_r>:
 800b17c:	b570      	push	{r4, r5, r6, lr}
 800b17e:	460e      	mov	r6, r1
 800b180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b184:	2900      	cmp	r1, #0
 800b186:	b096      	sub	sp, #88	; 0x58
 800b188:	4614      	mov	r4, r2
 800b18a:	461d      	mov	r5, r3
 800b18c:	da08      	bge.n	800b1a0 <__swhatbuf_r+0x24>
 800b18e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b192:	2200      	movs	r2, #0
 800b194:	602a      	str	r2, [r5, #0]
 800b196:	061a      	lsls	r2, r3, #24
 800b198:	d410      	bmi.n	800b1bc <__swhatbuf_r+0x40>
 800b19a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b19e:	e00e      	b.n	800b1be <__swhatbuf_r+0x42>
 800b1a0:	466a      	mov	r2, sp
 800b1a2:	f000 f8df 	bl	800b364 <_fstat_r>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	dbf1      	blt.n	800b18e <__swhatbuf_r+0x12>
 800b1aa:	9a01      	ldr	r2, [sp, #4]
 800b1ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1b4:	425a      	negs	r2, r3
 800b1b6:	415a      	adcs	r2, r3
 800b1b8:	602a      	str	r2, [r5, #0]
 800b1ba:	e7ee      	b.n	800b19a <__swhatbuf_r+0x1e>
 800b1bc:	2340      	movs	r3, #64	; 0x40
 800b1be:	2000      	movs	r0, #0
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	b016      	add	sp, #88	; 0x58
 800b1c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b1c8 <__smakebuf_r>:
 800b1c8:	898b      	ldrh	r3, [r1, #12]
 800b1ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1cc:	079d      	lsls	r5, r3, #30
 800b1ce:	4606      	mov	r6, r0
 800b1d0:	460c      	mov	r4, r1
 800b1d2:	d507      	bpl.n	800b1e4 <__smakebuf_r+0x1c>
 800b1d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	6123      	str	r3, [r4, #16]
 800b1dc:	2301      	movs	r3, #1
 800b1de:	6163      	str	r3, [r4, #20]
 800b1e0:	b002      	add	sp, #8
 800b1e2:	bd70      	pop	{r4, r5, r6, pc}
 800b1e4:	ab01      	add	r3, sp, #4
 800b1e6:	466a      	mov	r2, sp
 800b1e8:	f7ff ffc8 	bl	800b17c <__swhatbuf_r>
 800b1ec:	9900      	ldr	r1, [sp, #0]
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f7ff fa5f 	bl	800a6b4 <_malloc_r>
 800b1f6:	b948      	cbnz	r0, 800b20c <__smakebuf_r+0x44>
 800b1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1fc:	059a      	lsls	r2, r3, #22
 800b1fe:	d4ef      	bmi.n	800b1e0 <__smakebuf_r+0x18>
 800b200:	f023 0303 	bic.w	r3, r3, #3
 800b204:	f043 0302 	orr.w	r3, r3, #2
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	e7e3      	b.n	800b1d4 <__smakebuf_r+0xc>
 800b20c:	4b0d      	ldr	r3, [pc, #52]	; (800b244 <__smakebuf_r+0x7c>)
 800b20e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b210:	89a3      	ldrh	r3, [r4, #12]
 800b212:	6020      	str	r0, [r4, #0]
 800b214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b218:	81a3      	strh	r3, [r4, #12]
 800b21a:	9b00      	ldr	r3, [sp, #0]
 800b21c:	6163      	str	r3, [r4, #20]
 800b21e:	9b01      	ldr	r3, [sp, #4]
 800b220:	6120      	str	r0, [r4, #16]
 800b222:	b15b      	cbz	r3, 800b23c <__smakebuf_r+0x74>
 800b224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b228:	4630      	mov	r0, r6
 800b22a:	f000 f8ad 	bl	800b388 <_isatty_r>
 800b22e:	b128      	cbz	r0, 800b23c <__smakebuf_r+0x74>
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	f023 0303 	bic.w	r3, r3, #3
 800b236:	f043 0301 	orr.w	r3, r3, #1
 800b23a:	81a3      	strh	r3, [r4, #12]
 800b23c:	89a0      	ldrh	r0, [r4, #12]
 800b23e:	4305      	orrs	r5, r0
 800b240:	81a5      	strh	r5, [r4, #12]
 800b242:	e7cd      	b.n	800b1e0 <__smakebuf_r+0x18>
 800b244:	08009ce5 	.word	0x08009ce5

0800b248 <__ascii_mbtowc>:
 800b248:	b082      	sub	sp, #8
 800b24a:	b901      	cbnz	r1, 800b24e <__ascii_mbtowc+0x6>
 800b24c:	a901      	add	r1, sp, #4
 800b24e:	b142      	cbz	r2, 800b262 <__ascii_mbtowc+0x1a>
 800b250:	b14b      	cbz	r3, 800b266 <__ascii_mbtowc+0x1e>
 800b252:	7813      	ldrb	r3, [r2, #0]
 800b254:	600b      	str	r3, [r1, #0]
 800b256:	7812      	ldrb	r2, [r2, #0]
 800b258:	1e10      	subs	r0, r2, #0
 800b25a:	bf18      	it	ne
 800b25c:	2001      	movne	r0, #1
 800b25e:	b002      	add	sp, #8
 800b260:	4770      	bx	lr
 800b262:	4610      	mov	r0, r2
 800b264:	e7fb      	b.n	800b25e <__ascii_mbtowc+0x16>
 800b266:	f06f 0001 	mvn.w	r0, #1
 800b26a:	e7f8      	b.n	800b25e <__ascii_mbtowc+0x16>

0800b26c <memmove>:
 800b26c:	4288      	cmp	r0, r1
 800b26e:	b510      	push	{r4, lr}
 800b270:	eb01 0402 	add.w	r4, r1, r2
 800b274:	d902      	bls.n	800b27c <memmove+0x10>
 800b276:	4284      	cmp	r4, r0
 800b278:	4623      	mov	r3, r4
 800b27a:	d807      	bhi.n	800b28c <memmove+0x20>
 800b27c:	1e43      	subs	r3, r0, #1
 800b27e:	42a1      	cmp	r1, r4
 800b280:	d008      	beq.n	800b294 <memmove+0x28>
 800b282:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b28a:	e7f8      	b.n	800b27e <memmove+0x12>
 800b28c:	4402      	add	r2, r0
 800b28e:	4601      	mov	r1, r0
 800b290:	428a      	cmp	r2, r1
 800b292:	d100      	bne.n	800b296 <memmove+0x2a>
 800b294:	bd10      	pop	{r4, pc}
 800b296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b29a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b29e:	e7f7      	b.n	800b290 <memmove+0x24>

0800b2a0 <__malloc_lock>:
 800b2a0:	4801      	ldr	r0, [pc, #4]	; (800b2a8 <__malloc_lock+0x8>)
 800b2a2:	f7fe bdf6 	b.w	8009e92 <__retarget_lock_acquire_recursive>
 800b2a6:	bf00      	nop
 800b2a8:	20000778 	.word	0x20000778

0800b2ac <__malloc_unlock>:
 800b2ac:	4801      	ldr	r0, [pc, #4]	; (800b2b4 <__malloc_unlock+0x8>)
 800b2ae:	f7fe bdf1 	b.w	8009e94 <__retarget_lock_release_recursive>
 800b2b2:	bf00      	nop
 800b2b4:	20000778 	.word	0x20000778

0800b2b8 <_realloc_r>:
 800b2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2bc:	4680      	mov	r8, r0
 800b2be:	4614      	mov	r4, r2
 800b2c0:	460e      	mov	r6, r1
 800b2c2:	b921      	cbnz	r1, 800b2ce <_realloc_r+0x16>
 800b2c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	f7ff b9f3 	b.w	800a6b4 <_malloc_r>
 800b2ce:	b92a      	cbnz	r2, 800b2dc <_realloc_r+0x24>
 800b2d0:	f7ff f984 	bl	800a5dc <_free_r>
 800b2d4:	4625      	mov	r5, r4
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2dc:	f000 f864 	bl	800b3a8 <_malloc_usable_size_r>
 800b2e0:	4284      	cmp	r4, r0
 800b2e2:	4607      	mov	r7, r0
 800b2e4:	d802      	bhi.n	800b2ec <_realloc_r+0x34>
 800b2e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2ea:	d812      	bhi.n	800b312 <_realloc_r+0x5a>
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	4640      	mov	r0, r8
 800b2f0:	f7ff f9e0 	bl	800a6b4 <_malloc_r>
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d0ed      	beq.n	800b2d6 <_realloc_r+0x1e>
 800b2fa:	42bc      	cmp	r4, r7
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	4631      	mov	r1, r6
 800b300:	bf28      	it	cs
 800b302:	463a      	movcs	r2, r7
 800b304:	f7fd f97c 	bl	8008600 <memcpy>
 800b308:	4631      	mov	r1, r6
 800b30a:	4640      	mov	r0, r8
 800b30c:	f7ff f966 	bl	800a5dc <_free_r>
 800b310:	e7e1      	b.n	800b2d6 <_realloc_r+0x1e>
 800b312:	4635      	mov	r5, r6
 800b314:	e7df      	b.n	800b2d6 <_realloc_r+0x1e>
	...

0800b318 <_read_r>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	4d07      	ldr	r5, [pc, #28]	; (800b338 <_read_r+0x20>)
 800b31c:	4604      	mov	r4, r0
 800b31e:	4608      	mov	r0, r1
 800b320:	4611      	mov	r1, r2
 800b322:	2200      	movs	r2, #0
 800b324:	602a      	str	r2, [r5, #0]
 800b326:	461a      	mov	r2, r3
 800b328:	f7f8 f8da 	bl	80034e0 <_read>
 800b32c:	1c43      	adds	r3, r0, #1
 800b32e:	d102      	bne.n	800b336 <_read_r+0x1e>
 800b330:	682b      	ldr	r3, [r5, #0]
 800b332:	b103      	cbz	r3, 800b336 <_read_r+0x1e>
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	bd38      	pop	{r3, r4, r5, pc}
 800b338:	20000784 	.word	0x20000784

0800b33c <__ascii_wctomb>:
 800b33c:	b149      	cbz	r1, 800b352 <__ascii_wctomb+0x16>
 800b33e:	2aff      	cmp	r2, #255	; 0xff
 800b340:	bf85      	ittet	hi
 800b342:	238a      	movhi	r3, #138	; 0x8a
 800b344:	6003      	strhi	r3, [r0, #0]
 800b346:	700a      	strbls	r2, [r1, #0]
 800b348:	f04f 30ff 	movhi.w	r0, #4294967295
 800b34c:	bf98      	it	ls
 800b34e:	2001      	movls	r0, #1
 800b350:	4770      	bx	lr
 800b352:	4608      	mov	r0, r1
 800b354:	4770      	bx	lr

0800b356 <abort>:
 800b356:	b508      	push	{r3, lr}
 800b358:	2006      	movs	r0, #6
 800b35a:	f000 f855 	bl	800b408 <raise>
 800b35e:	2001      	movs	r0, #1
 800b360:	f7f8 f8b4 	bl	80034cc <_exit>

0800b364 <_fstat_r>:
 800b364:	b538      	push	{r3, r4, r5, lr}
 800b366:	4d07      	ldr	r5, [pc, #28]	; (800b384 <_fstat_r+0x20>)
 800b368:	2300      	movs	r3, #0
 800b36a:	4604      	mov	r4, r0
 800b36c:	4608      	mov	r0, r1
 800b36e:	4611      	mov	r1, r2
 800b370:	602b      	str	r3, [r5, #0]
 800b372:	f7f8 f8fa 	bl	800356a <_fstat>
 800b376:	1c43      	adds	r3, r0, #1
 800b378:	d102      	bne.n	800b380 <_fstat_r+0x1c>
 800b37a:	682b      	ldr	r3, [r5, #0]
 800b37c:	b103      	cbz	r3, 800b380 <_fstat_r+0x1c>
 800b37e:	6023      	str	r3, [r4, #0]
 800b380:	bd38      	pop	{r3, r4, r5, pc}
 800b382:	bf00      	nop
 800b384:	20000784 	.word	0x20000784

0800b388 <_isatty_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4d06      	ldr	r5, [pc, #24]	; (800b3a4 <_isatty_r+0x1c>)
 800b38c:	2300      	movs	r3, #0
 800b38e:	4604      	mov	r4, r0
 800b390:	4608      	mov	r0, r1
 800b392:	602b      	str	r3, [r5, #0]
 800b394:	f7f8 f8f9 	bl	800358a <_isatty>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d102      	bne.n	800b3a2 <_isatty_r+0x1a>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	b103      	cbz	r3, 800b3a2 <_isatty_r+0x1a>
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	bd38      	pop	{r3, r4, r5, pc}
 800b3a4:	20000784 	.word	0x20000784

0800b3a8 <_malloc_usable_size_r>:
 800b3a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ac:	1f18      	subs	r0, r3, #4
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bfbc      	itt	lt
 800b3b2:	580b      	ldrlt	r3, [r1, r0]
 800b3b4:	18c0      	addlt	r0, r0, r3
 800b3b6:	4770      	bx	lr

0800b3b8 <_raise_r>:
 800b3b8:	291f      	cmp	r1, #31
 800b3ba:	b538      	push	{r3, r4, r5, lr}
 800b3bc:	4604      	mov	r4, r0
 800b3be:	460d      	mov	r5, r1
 800b3c0:	d904      	bls.n	800b3cc <_raise_r+0x14>
 800b3c2:	2316      	movs	r3, #22
 800b3c4:	6003      	str	r3, [r0, #0]
 800b3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3ce:	b112      	cbz	r2, 800b3d6 <_raise_r+0x1e>
 800b3d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3d4:	b94b      	cbnz	r3, 800b3ea <_raise_r+0x32>
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 f830 	bl	800b43c <_getpid_r>
 800b3dc:	462a      	mov	r2, r5
 800b3de:	4601      	mov	r1, r0
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3e6:	f000 b817 	b.w	800b418 <_kill_r>
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d00a      	beq.n	800b404 <_raise_r+0x4c>
 800b3ee:	1c59      	adds	r1, r3, #1
 800b3f0:	d103      	bne.n	800b3fa <_raise_r+0x42>
 800b3f2:	2316      	movs	r3, #22
 800b3f4:	6003      	str	r3, [r0, #0]
 800b3f6:	2001      	movs	r0, #1
 800b3f8:	e7e7      	b.n	800b3ca <_raise_r+0x12>
 800b3fa:	2400      	movs	r4, #0
 800b3fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b400:	4628      	mov	r0, r5
 800b402:	4798      	blx	r3
 800b404:	2000      	movs	r0, #0
 800b406:	e7e0      	b.n	800b3ca <_raise_r+0x12>

0800b408 <raise>:
 800b408:	4b02      	ldr	r3, [pc, #8]	; (800b414 <raise+0xc>)
 800b40a:	4601      	mov	r1, r0
 800b40c:	6818      	ldr	r0, [r3, #0]
 800b40e:	f7ff bfd3 	b.w	800b3b8 <_raise_r>
 800b412:	bf00      	nop
 800b414:	20000030 	.word	0x20000030

0800b418 <_kill_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4d07      	ldr	r5, [pc, #28]	; (800b438 <_kill_r+0x20>)
 800b41c:	2300      	movs	r3, #0
 800b41e:	4604      	mov	r4, r0
 800b420:	4608      	mov	r0, r1
 800b422:	4611      	mov	r1, r2
 800b424:	602b      	str	r3, [r5, #0]
 800b426:	f7f8 f841 	bl	80034ac <_kill>
 800b42a:	1c43      	adds	r3, r0, #1
 800b42c:	d102      	bne.n	800b434 <_kill_r+0x1c>
 800b42e:	682b      	ldr	r3, [r5, #0]
 800b430:	b103      	cbz	r3, 800b434 <_kill_r+0x1c>
 800b432:	6023      	str	r3, [r4, #0]
 800b434:	bd38      	pop	{r3, r4, r5, pc}
 800b436:	bf00      	nop
 800b438:	20000784 	.word	0x20000784

0800b43c <_getpid_r>:
 800b43c:	f7f8 b82e 	b.w	800349c <_getpid>

0800b440 <_init>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	bf00      	nop
 800b444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b446:	bc08      	pop	{r3}
 800b448:	469e      	mov	lr, r3
 800b44a:	4770      	bx	lr

0800b44c <_fini>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	bf00      	nop
 800b450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b452:	bc08      	pop	{r3}
 800b454:	469e      	mov	lr, r3
 800b456:	4770      	bx	lr
