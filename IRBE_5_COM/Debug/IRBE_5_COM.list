
IRBE_5_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b284  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800b428  0800b428  0001b428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8e4  0800b8e4  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8e4  0800b8e4  0001b8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8ec  0800b8ec  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8ec  0800b8ec  0001b8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8f0  0800b8f0  0001b8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f8  20000204  0800baf8  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008fc  0800baf8  000208fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2b3  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e3  00000000  00000000  0003a4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  0003d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003ea98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a217  00000000  00000000  0003fd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016432  00000000  00000000  00059f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e3e4  00000000  00000000  00070399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e77d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006644  00000000  00000000  0010e7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b40c 	.word	0x0800b40c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0800b40c 	.word	0x0800b40c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

void SX1278_hw_init(SX1278_hw_t * hw) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000f78:	2101      	movs	r1, #1
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f80d 	bl	8000f9a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6858      	ldr	r0, [r3, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f004 fd11 	bl	80059b4 <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <SX1278_hw_SetNSS>:

void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6958      	ldr	r0, [r3, #20]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	b299      	uxth	r1, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	bf0c      	ite	eq
 8000fb4:	2301      	moveq	r3, #1
 8000fb6:	2300      	movne	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f004 fcfa 	bl	80059b4 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <SX1278_hw_Reset>:

void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffe1 	bl	8000f9a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6858      	ldr	r0, [r3, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f004 fce5 	bl	80059b4 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 f856 	bl	800109c <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6858      	ldr	r0, [r3, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f004 fcd9 	bl	80059b4 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001002:	2064      	movs	r0, #100	; 0x64
 8001004:	f000 f84a 	bl	800109c <SX1278_hw_DelayMs>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <SX1278_hw_SPICommand>:

void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800101c:	2100      	movs	r1, #0
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffbb 	bl	8000f9a <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6998      	ldr	r0, [r3, #24]
 8001028:	1cf9      	adds	r1, r7, #3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	2201      	movs	r2, #1
 8001030:	f005 f9ef 	bl	8006412 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001034:	bf00      	nop
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	4618      	mov	r0, r3
 800103c:	f005 fcc7 	bl	80069ce <HAL_SPI_GetState>
 8001040:	4603      	mov	r3, r0
 8001042:	2b01      	cmp	r3, #1
 8001044:	d1f7      	bne.n	8001036 <SX1278_hw_SPICommand+0x26>
		;
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <SX1278_hw_SPIReadByte>:

uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af02      	add	r7, sp, #8
 8001056:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800105c:	2300      	movs	r3, #0
 800105e:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8001060:	2100      	movs	r1, #0
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ff99 	bl	8000f9a <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6998      	ldr	r0, [r3, #24]
 800106c:	f107 020e 	add.w	r2, r7, #14
 8001070:	f107 010f 	add.w	r1, r7, #15
 8001074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	f005 fb05 	bl	800668a <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001080:	bf00      	nop
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4618      	mov	r0, r3
 8001088:	f005 fca1 	bl	80069ce <HAL_SPI_GetState>
 800108c:	4603      	mov	r3, r0
 800108e:	2b01      	cmp	r3, #1
 8001090:	d1f7      	bne.n	8001082 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001092:	7bbb      	ldrb	r3, [r7, #14]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <SX1278_hw_DelayMs>:

void SX1278_hw_DelayMs(uint32_t msec) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f003 f8f7 	bl	8004298 <HAL_Delay>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	78fa      	ldrb	r2, [r7, #3]
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffa2 	bl	8001010 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ffbd 	bl	8001050 <SX1278_hw_SPIReadByte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2101      	movs	r1, #1
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5a 	bl	8000f9a <SX1278_hw_SetNSS>
	return tmp;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
 80010fc:	4613      	mov	r3, r2
 80010fe:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff47 	bl	8000f9a <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4619      	mov	r1, r3
 800111a:	4610      	mov	r0, r2
 800111c:	f7ff ff78 	bl	8001010 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	78ba      	ldrb	r2, [r7, #2]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff71 	bl	8001010 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2101      	movs	r1, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff30 	bl	8000f9a <SX1278_hw_SetNSS>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	461a      	mov	r2, r3
 800114e:	460b      	mov	r3, r1
 8001150:	72fb      	strb	r3, [r7, #11]
 8001152:	4613      	mov	r3, r2
 8001154:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001156:	7abb      	ldrb	r3, [r7, #10]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d929      	bls.n	80011b0 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff19 	bl	8000f9a <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	7afb      	ldrb	r3, [r7, #11]
 800116e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4619      	mov	r1, r3
 8001176:	4610      	mov	r0, r2
 8001178:	f7ff ff4a 	bl	8001010 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800117c:	2300      	movs	r3, #0
 800117e:	75fb      	strb	r3, [r7, #23]
 8001180:	e00b      	b.n	800119a <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff ff3e 	bl	8001010 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	3301      	adds	r3, #1
 8001198:	75fb      	strb	r3, [r7, #23]
 800119a:	7dfa      	ldrb	r2, [r7, #23]
 800119c:	7abb      	ldrb	r3, [r7, #10]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3ef      	bcc.n	8001182 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2101      	movs	r1, #1
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fef6 	bl	8000f9a <SX1278_hw_SetNSS>
 80011ae:	e000      	b.n	80011b2 <SX1278_SPIBurstWrite+0x70>
		return;
 80011b0:	bf00      	nop
	}
}
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af02      	add	r7, sp, #8
 80011be:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7919      	ldrb	r1, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	795a      	ldrb	r2, [r3, #5]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7998      	ldrb	r0, [r3, #6]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	79db      	ldrb	r3, [r3, #7]
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	4603      	mov	r3, r0
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f805 	bl	80011e4 <SX1278_config>
			module->LoRa_BW);
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
	uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	4608      	mov	r0, r1
 80011ee:	4611      	mov	r1, r2
 80011f0:	461a      	mov	r2, r3
 80011f2:	4603      	mov	r3, r0
 80011f4:	70fb      	strb	r3, [r7, #3]
 80011f6:	460b      	mov	r3, r1
 80011f8:	70bb      	strb	r3, [r7, #2]
 80011fa:	4613      	mov	r3, r2
 80011fc:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f976 	bl	80014f0 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001204:	200f      	movs	r0, #15
 8001206:	f7ff ff49 	bl	800109c <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f980 	bl	8001510 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
	(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8001210:	78fa      	ldrb	r2, [r7, #3]
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	4a41      	ldr	r2, [pc, #260]	; (8001320 <SX1278_config+0x13c>)
 800121a:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 800121c:	2303      	movs	r3, #3
 800121e:	2106      	movs	r1, #6
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff8e 	bl	8001142 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, 0b10000000); //Setting output power parameter
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	2109      	movs	r1, #9
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff60 	bl	80010f0 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8001230:	220b      	movs	r2, #11
 8001232:	210b      	movs	r1, #11
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff5b 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800123a:	2223      	movs	r2, #35	; 0x23
 800123c:	210c      	movs	r1, #12
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff56 	bl	80010f0 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	4a37      	ldr	r2, [pc, #220]	; (8001324 <SX1278_config+0x140>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	2b06      	cmp	r3, #6
 800124c:	d131      	bne.n	80012b2 <SX1278_config+0xce>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800124e:	7e3b      	ldrb	r3, [r7, #24]
 8001250:	4a35      	ldr	r2, [pc, #212]	; (8001328 <SX1278_config+0x144>)
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001258:	3303      	adds	r3, #3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	211d      	movs	r1, #29
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff45 	bl	80010f0 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8001266:	787b      	ldrb	r3, [r7, #1]
 8001268:	4a2e      	ldr	r2, [pc, #184]	; (8001324 <SX1278_config+0x140>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001270:	3307      	adds	r3, #7
 8001272:	b2db      	uxtb	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	211e      	movs	r1, #30
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff39 	bl	80010f0 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 800127e:	2131      	movs	r1, #49	; 0x31
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff16 	bl	80010b2 <SX1278_SPIRead>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	f023 0307 	bic.w	r3, r3, #7
 8001290:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	f043 0305 	orr.w	r3, r3, #5
 8001298:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	461a      	mov	r2, r3
 800129e:	2131      	movs	r1, #49	; 0x31
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff25 	bl	80010f0 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80012a6:	220c      	movs	r2, #12
 80012a8:	2137      	movs	r1, #55	; 0x37
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff20 	bl	80010f0 <SX1278_SPIWrite>
 80012b0:	e017      	b.n	80012e2 <SX1278_config+0xfe>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80012b2:	7e3b      	ldrb	r3, [r7, #24]
 80012b4:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <SX1278_config+0x144>)
 80012b6:	5cd3      	ldrb	r3, [r2, r3]
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80012bc:	3302      	adds	r3, #2
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	211d      	movs	r1, #29
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff13 	bl	80010f0 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 80012ca:	787b      	ldrb	r3, [r7, #1]
 80012cc:	4a15      	ldr	r2, [pc, #84]	; (8001324 <SX1278_config+0x140>)
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80012d4:	3307      	adds	r3, #7
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	461a      	mov	r2, r3
 80012da:	211e      	movs	r1, #30
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff07 	bl	80010f0 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 80012e2:	22ff      	movs	r2, #255	; 0xff
 80012e4:	211f      	movs	r1, #31
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff02 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80012ec:	2200      	movs	r2, #0
 80012ee:	2120      	movs	r1, #32
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff fefd 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 80012f6:	220c      	movs	r2, #12
 80012f8:	2121      	movs	r1, #33	; 0x21
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fef8 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001300:	2201      	movs	r2, #1
 8001302:	2141      	movs	r1, #65	; 0x41
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fef3 	bl	80010f0 <SX1278_SPIWrite>
	module->readBytes = 0;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f8dc 	bl	80014d0 <SX1278_standby>
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	0800b4c8 	.word	0x0800b4c8
 8001324:	0800b4cc 	.word	0x0800b4cc
 8001328:	0800b4d4 	.word	0x0800b4d4

0800132c <SX1278_RTTY_Config>:

void SX1278_RTTY_Config(SX1278_t * module){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	SX1278_FSK_Config(module); // set base parameters
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f895 	bl	8001464 <SX1278_FSK_Config>
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f8d8 	bl	80014f0 <SX1278_sleep>

	SX1278_SPIWrite(module, LR_RegPaConfig, 0b11110000);//0x87);	//Normal and RX
 8001340:	22f0      	movs	r2, #240	; 0xf0
 8001342:	2109      	movs	r1, #9
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fed3 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);
 800134a:	2284      	movs	r2, #132	; 0x84
 800134c:	214d      	movs	r1, #77	; 0x4d
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fece 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41);
 8001354:	2241      	movs	r2, #65	; 0x41
 8001356:	2140      	movs	r1, #64	; 0x40
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fec9 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegPayloadLength, 8); //Payload Length 8 bytes
 800135e:	2208      	movs	r2, #8
 8001360:	2132      	movs	r1, #50	; 0x32
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fec4 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegFifoThresh, 8 - 1);     //Fixed length, packetformat = 0
 8001368:	2207      	movs	r2, #7
 800136a:	2135      	movs	r1, #53	; 0x35
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff febf 	bl	80010f0 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, RegFdevLsb, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2105      	movs	r1, #5
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff feba 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_standby(module); //Entry standby mode
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f8a7 	bl	80014d0 <SX1278_standby>
	SX1278_hw_DelayMs(1);
 8001382:	2001      	movs	r0, #1
 8001384:	f7ff fe8a 	bl	800109c <SX1278_hw_DelayMs>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <SX1278_RTTY_Stop>:

void SX1278_RTTY_Stop(SX1278_t * module){
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	//SX1278_SPIWrite(module, LR_RegOpMode, 0b1);
	SX1278_standby(module);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f899 	bl	80014d0 <SX1278_standby>
	uint8_t ret = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 80013a2:	213e      	movs	r1, #62	; 0x3e
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fe84 	bl	80010b2 <SX1278_SPIRead>
 80013aa:	4603      	mov	r3, r0
 80013ac:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db00      	blt.n	80013b8 <SX1278_RTTY_Stop+0x28>
		ret = SX1278_SPIRead(module, 0x3e);
 80013b6:	e7f4      	b.n	80013a2 <SX1278_RTTY_Stop+0x12>
			break;
 80013b8:	bf00      	nop
		}
	}
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <SX1278_RTTY_WriteLow>:

void SX1278_RTTY_WriteLow(SX1278_t * module){
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
	SX1278_RTTY_Stop(module);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffe0 	bl	8001390 <SX1278_RTTY_Stop>
	SX1278_SPIWrite(module, RegFreqLsb, 0); //  LSB
 80013d0:	2200      	movs	r2, #0
 80013d2:	2108      	movs	r1, #8
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fe8b 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1010);
 80013da:	220a      	movs	r2, #10
 80013dc:	2101      	movs	r1, #1
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fe86 	bl	80010f0 <SX1278_SPIWrite>

	uint8_t ret = 1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 80013e8:	213e      	movs	r1, #62	; 0x3e
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fe61 	bl	80010b2 <SX1278_SPIRead>
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 80013f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db00      	blt.n	80013fe <SX1278_RTTY_WriteLow+0x3c>
		ret = SX1278_SPIRead(module, 0x3e);
 80013fc:	e7f4      	b.n	80013e8 <SX1278_RTTY_WriteLow+0x26>
			break;
 80013fe:	bf00      	nop
		}
	}


	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);
 8001400:	220b      	movs	r2, #11
 8001402:	2101      	movs	r1, #1
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fe73 	bl	80010f0 <SX1278_SPIWrite>

}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <SX1278_RTTY_WriteHigh>:

void SX1278_RTTY_WriteHigh(SX1278_t * module){
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
	SX1278_RTTY_Stop(module);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffb8 	bl	8001390 <SX1278_RTTY_Stop>
	SX1278_SPIWrite(module, RegFreqLsb, 10); //  HSB
 8001420:	220a      	movs	r2, #10
 8001422:	2108      	movs	r1, #8
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fe63 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1010);
 800142a:	220a      	movs	r2, #10
 800142c:	2101      	movs	r1, #1
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fe5e 	bl	80010f0 <SX1278_SPIWrite>

	uint8_t ret = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 8001438:	213e      	movs	r1, #62	; 0x3e
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fe39 	bl	80010b2 <SX1278_SPIRead>
 8001440:	4603      	mov	r3, r0
 8001442:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 8001444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db00      	blt.n	800144e <SX1278_RTTY_WriteHigh+0x3c>
		ret = SX1278_SPIRead(module, 0x3e);
 800144c:	e7f4      	b.n	8001438 <SX1278_RTTY_WriteHigh+0x26>
			break;
 800144e:	bf00      	nop
		}
	}
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);
 8001450:	220b      	movs	r2, #11
 8001452:	2101      	movs	r1, #1
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fe4b 	bl	80010f0 <SX1278_SPIWrite>
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <SX1278_FSK_Config>:

void SX1278_FSK_Config(SX1278_t * module) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f83f 	bl	80014f0 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001472:	200f      	movs	r0, #15
 8001474:	f7ff fe12 	bl	800109c <SX1278_hw_DelayMs>

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8001478:	2303      	movs	r3, #3
 800147a:	4a14      	ldr	r2, [pc, #80]	; (80014cc <SX1278_FSK_Config+0x68>)
 800147c:	2106      	movs	r1, #6
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fe5f 	bl	8001142 <SX1278_SPIBurstWrite>
	(uint8_t*) SX1278_Frequency[SX1278_433MHZ], 3); //setting  frequency parameter 434 MHz

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, 0b10000000); //Setting output power parameter
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	2109      	movs	r1, #9
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fe31 	bl	80010f0 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800148e:	220b      	movs	r2, #11
 8001490:	210b      	movs	r1, #11
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fe2c 	bl	80010f0 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001498:	2223      	movs	r2, #35	; 0x23
 800149a:	210c      	movs	r1, #12
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fe27 	bl	80010f0 <SX1278_SPIWrite>

	//SX1278_SPIWrite(module, 0x1f, 0x00);		//disable preamble detect
	//SX1278_SPIWrite(module, 0x27, 0b10000000);		//disable sync word

	SX1278_SPIWrite(module, 0x30, 0b1000);     //Fixed length, packetformat = 0
 80014a2:	2208      	movs	r2, #8
 80014a4:	2130      	movs	r1, #48	; 0x30
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fe22 	bl	80010f0 <SX1278_SPIWrite>
	// set datarate
	//datarate 9c40 = 800bps

	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80014ac:	2201      	movs	r2, #1
 80014ae:	2141      	movs	r1, #65	; 0x41
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fe1d 	bl	80010f0 <SX1278_SPIWrite>
	module->readBytes = 0;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f806 	bl	80014d0 <SX1278_standby>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	0800b4c8 	.word	0x0800b4c8

080014d0 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80014d8:	2209      	movs	r2, #9
 80014da:	2101      	movs	r1, #1
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fe07 	bl	80010f0 <SX1278_SPIWrite>
	module->status = STANDBY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	725a      	strb	r2, [r3, #9]
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80014f8:	2208      	movs	r2, #8
 80014fa:	2101      	movs	r1, #1
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff fdf7 	bl	80010f0 <SX1278_SPIWrite>
	module->status = SLEEP;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	725a      	strb	r2, [r3, #9]
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8001518:	2288      	movs	r2, #136	; 0x88
 800151a:	2101      	movs	r1, #1
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fde7 	bl	80010f0 <SX1278_SPIWrite>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8001532:	22ff      	movs	r2, #255	; 0xff
 8001534:	2112      	movs	r1, #18
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fdda 	bl	80010f0 <SX1278_SPIWrite>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <SX1278_FSK_EntryRx>:

int SX1278_FSK_EntryRx(SX1278_t * module, uint8_t length) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	70fb      	strb	r3, [r7, #3]
	module->packetLength = length;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	721a      	strb	r2, [r3, #8]

	SX1278_FSK_Config(module); // set base parameters
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ff84 	bl	8001464 <SX1278_FSK_Config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800155c:	2284      	movs	r2, #132	; 0x84
 800155e:	214d      	movs	r1, #77	; 0x4d
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fdc5 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001566:	2201      	movs	r2, #1
 8001568:	2140      	movs	r1, #64	; 0x40
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fdc0 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x05, 0x52); // 5kHz freq deviation
 8001570:	2252      	movs	r2, #82	; 0x52
 8001572:	2105      	movs	r1, #5
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fdbb 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x32, length); //Payload Length 8 bytes
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	461a      	mov	r2, r3
 800157e:	2132      	movs	r1, #50	; 0x32
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fdb5 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1101);	//Mode//Low Frequency Mode
 8001586:	220d      	movs	r2, #13
 8001588:	2101      	movs	r1, #1
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fdb0 	bl	80010f0 <SX1278_SPIWrite>
	module->readBytes = 0;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	return 1;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <SX1278_FSK_EntryTx>:

int SX1278_FSK_EntryTx(SX1278_t * module, uint8_t length) {
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	460b      	mov	r3, r1
 80015ac:	70fb      	strb	r3, [r7, #3]
	module->packetLength = length;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	78fa      	ldrb	r2, [r7, #3]
 80015b2:	721a      	strb	r2, [r3, #8]

	SX1278_FSK_Config(module); // set base parameters
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff55 	bl	8001464 <SX1278_FSK_Config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);//0x87);	//Normal and RX
 80015ba:	2284      	movs	r2, #132	; 0x84
 80015bc:	214d      	movs	r1, #77	; 0x4d
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fd96 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41);
 80015c4:	2241      	movs	r2, #65	; 0x41
 80015c6:	2140      	movs	r1, #64	; 0x40
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fd91 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegFdevLsb, 0x52); // 5kHz freq deviation
 80015ce:	2252      	movs	r2, #82	; 0x52
 80015d0:	2105      	movs	r1, #5
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fd8c 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegPayloadLength, length); //Payload Length 8 bytes
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	461a      	mov	r2, r3
 80015dc:	2132      	movs	r1, #50	; 0x32
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fd86 	bl	80010f0 <SX1278_SPIWrite>
	//	SX1278_SPIWrite(module, RegBitRateLsb, 0x2B);	// 1200 bps
	//	SX1278_SPIWrite(module, RegBitRateMsb, 0x68);
	SX1278_SPIWrite(module, RegFifoThresh, length - 1);     //Fixed length, packetformat = 0
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	2135      	movs	r1, #53	; 0x35
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fd7e 	bl	80010f0 <SX1278_SPIWrite>


	module->readBytes = 0;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	SX1278_hw_DelayMs(1);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fd4d 	bl	800109c <SX1278_hw_DelayMs>
	return 1;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	460b      	mov	r3, r1
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	7afa      	ldrb	r2, [r7, #11]
 800161e:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7ff fdc9 	bl	80011b8 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8001626:	2284      	movs	r2, #132	; 0x84
 8001628:	214d      	movs	r1, #77	; 0x4d
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7ff fd60 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8001630:	22ff      	movs	r2, #255	; 0xff
 8001632:	2124      	movs	r1, #36	; 0x24
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff fd5b 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800163a:	2201      	movs	r2, #1
 800163c:	2140      	movs	r1, #64	; 0x40
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f7ff fd56 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8001644:	223f      	movs	r2, #63	; 0x3f
 8001646:	2111      	movs	r1, #17
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff fd51 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff ff6b 	bl	800152a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8001654:	7afb      	ldrb	r3, [r7, #11]
 8001656:	461a      	mov	r2, r3
 8001658:	2122      	movs	r1, #34	; 0x22
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff fd48 	bl	80010f0 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001660:	210f      	movs	r1, #15
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7ff fd25 	bl	80010b2 <SX1278_SPIRead>
 8001668:	4603      	mov	r3, r0
 800166a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	461a      	mov	r2, r3
 8001670:	210d      	movs	r1, #13
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f7ff fd3c 	bl	80010f0 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001678:	228d      	movs	r2, #141	; 0x8d
 800167a:	2101      	movs	r1, #1
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f7ff fd37 	bl	80010f0 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800168a:	2118      	movs	r1, #24
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f7ff fd10 	bl	80010b2 <SX1278_SPIRead>
 8001692:	4603      	mov	r3, r0
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b04      	cmp	r3, #4
 800169a:	d104      	bne.n	80016a6 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2203      	movs	r2, #3
 80016a0:	725a      	strb	r2, [r3, #9]
			return 1;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e013      	b.n	80016ce <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fc86 	bl	8000fc8 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff fd7b 	bl	80011b8 <SX1278_defaultConfig>
			return 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e003      	b.n	80016ce <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7ff fce8 	bl	800109c <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80016cc:	e7dd      	b.n	800168a <SX1278_LoRaEntryRx+0x7e>
	}
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <SX1278_FSK_TxPacket>:
			return 0;
		}
	}
}

int SX1278_FSK_TxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length, uint32_t timeout) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	4613      	mov	r3, r2
 80016e6:	71fb      	strb	r3, [r7, #7]
    uint8_t gotResponse = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	77fb      	strb	r3, [r7, #31]
	uint32_t tickstart = HAL_GetTick();
 80016ec:	f002 fdc8 	bl	8004280 <HAL_GetTick>
 80016f0:	6178      	str	r0, [r7, #20]
	uint32_t wait = timeout;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	61bb      	str	r3, [r7, #24]
	uint8_t temp = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	74fb      	strb	r3, [r7, #19]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY){
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <SX1278_FSK_TxPacket+0x36>
		wait += (uint32_t)(uwTickFreq);
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <SX1278_FSK_TxPacket+0x9c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	4413      	add	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
	}

	SX1278_FSK_EntryTx(module, length);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	4619      	mov	r1, r3
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f7ff ff45 	bl	80015a2 <SX1278_FSK_EntryTx>

	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	2100      	movs	r1, #0
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f7ff fd0f 	bl	8001142 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);	//Mode//Low Frequency Mode
 8001724:	220b      	movs	r2, #11
 8001726:	2101      	movs	r1, #1
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7ff fce1 	bl	80010f0 <SX1278_SPIWrite>

	while(!gotResponse){
 800172e:	e014      	b.n	800175a <SX1278_FSK_TxPacket+0x82>
	    temp = SX1278_SPIRead(module, RegIrqFlags2); // check if fifo sent is set
 8001730:	213f      	movs	r1, #63	; 0x3f
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7ff fcbd 	bl	80010b2 <SX1278_SPIRead>
 8001738:	4603      	mov	r3, r0
 800173a:	74fb      	strb	r3, [r7, #19]
	    if(temp & 0b1000){
 800173c:	7cfb      	ldrb	r3, [r7, #19]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SX1278_FSK_TxPacket+0x72>
	    	gotResponse =  1;
 8001746:	2301      	movs	r3, #1
 8001748:	77fb      	strb	r3, [r7, #31]
	    }
		if((HAL_GetTick() - tickstart) >= wait){
 800174a:	f002 fd99 	bl	8004280 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	429a      	cmp	r2, r3
 8001758:	d903      	bls.n	8001762 <SX1278_FSK_TxPacket+0x8a>
	while(!gotResponse){
 800175a:	7ffb      	ldrb	r3, [r7, #31]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0e7      	beq.n	8001730 <SX1278_FSK_TxPacket+0x58>
 8001760:	e000      	b.n	8001764 <SX1278_FSK_TxPacket+0x8c>
			break;								// timeout happened
 8001762:	bf00      	nop
		}
	}
	SX1278_standby(module);
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7ff feb3 	bl	80014d0 <SX1278_standby>
	return gotResponse;
 800176a:	7ffb      	ldrb	r3, [r7, #31]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000030 	.word	0x20000030

08001778 <SX1278_FSK_RxPacket>:

int SX1278_FSK_RxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length, uint32_t timeout) {
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b08b      	sub	sp, #44	; 0x2c
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	4613      	mov	r3, r2
 8001786:	71fb      	strb	r3, [r7, #7]
    uint8_t gotResponse = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t tickstart = HAL_GetTick();
 800178e:	f002 fd77 	bl	8004280 <HAL_GetTick>
 8001792:	61b8      	str	r0, [r7, #24]
	uint32_t wait = timeout;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	623b      	str	r3, [r7, #32]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY){
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179e:	d005      	beq.n	80017ac <SX1278_FSK_RxPacket+0x34>
		wait += (uint32_t)(uwTickFreq);
 80017a0:	4b23      	ldr	r3, [pc, #140]	; (8001830 <SX1278_FSK_RxPacket+0xb8>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	4413      	add	r3, r2
 80017aa:	623b      	str	r3, [r7, #32]
	}

	uint8_t temp = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	75fb      	strb	r3, [r7, #23]

	while(!gotResponse){
 80017b0:	e031      	b.n	8001816 <SX1278_FSK_RxPacket+0x9e>
		temp = SX1278_SPIRead(module, 0x3f);
 80017b2:	213f      	movs	r1, #63	; 0x3f
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f7ff fc7c 	bl	80010b2 <SX1278_SPIRead>
 80017ba:	4603      	mov	r3, r0
 80017bc:	75fb      	strb	r3, [r7, #23]

	    if((temp & 0b100) && temp != 255){
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d01e      	beq.n	8001806 <SX1278_FSK_RxPacket+0x8e>
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2bff      	cmp	r3, #255	; 0xff
 80017cc:	d01b      	beq.n	8001806 <SX1278_FSK_RxPacket+0x8e>
	    	gotResponse = 1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    	for(uint8_t i = 0; i < length; i++){
 80017d4:	2300      	movs	r3, #0
 80017d6:	77fb      	strb	r3, [r7, #31]
 80017d8:	e00b      	b.n	80017f2 <SX1278_FSK_RxPacket+0x7a>
	    		txBuffer[i] = SX1278_SPIRead(module, RegFIFO);
 80017da:	7ffb      	ldrb	r3, [r7, #31]
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	18d4      	adds	r4, r2, r3
 80017e0:	2100      	movs	r1, #0
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7ff fc65 	bl	80010b2 <SX1278_SPIRead>
 80017e8:	4603      	mov	r3, r0
 80017ea:	7023      	strb	r3, [r4, #0]
	    	for(uint8_t i = 0; i < length; i++){
 80017ec:	7ffb      	ldrb	r3, [r7, #31]
 80017ee:	3301      	adds	r3, #1
 80017f0:	77fb      	strb	r3, [r7, #31]
 80017f2:	7ffa      	ldrb	r2, [r7, #31]
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3ef      	bcc.n	80017da <SX1278_FSK_RxPacket+0x62>
	    	}
	    	temp = SX1278_SPIRead(module, RegIrqFlags2);
 80017fa:	213f      	movs	r1, #63	; 0x3f
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f7ff fc58 	bl	80010b2 <SX1278_SPIRead>
 8001802:	4603      	mov	r3, r0
 8001804:	75fb      	strb	r3, [r7, #23]

	    }

		if((HAL_GetTick() - tickstart) >= wait){
 8001806:	f002 fd3b 	bl	8004280 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	6a3a      	ldr	r2, [r7, #32]
 8001812:	429a      	cmp	r2, r3
 8001814:	d904      	bls.n	8001820 <SX1278_FSK_RxPacket+0xa8>
	while(!gotResponse){
 8001816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0c9      	beq.n	80017b2 <SX1278_FSK_RxPacket+0x3a>
 800181e:	e000      	b.n	8001822 <SX1278_FSK_RxPacket+0xaa>
			break;								// timeout happened
 8001820:	bf00      	nop
		}
	}

	return gotResponse;
 8001822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001826:	4618      	mov	r0, r3
 8001828:	372c      	adds	r7, #44	; 0x2c
 800182a:	46bd      	mov	sp, r7
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	bf00      	nop
 8001830:	20000030 	.word	0x20000030

08001834 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	461a      	mov	r2, r3
 8001842:	4603      	mov	r3, r0
 8001844:	70fb      	strb	r3, [r7, #3]
 8001846:	460b      	mov	r3, r1
 8001848:	70bb      	strb	r3, [r7, #2]
 800184a:	4613      	mov	r3, r2
 800184c:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fb8c 	bl	8000f70 <SX1278_hw_init>
	module->frequency = frequency;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	78fa      	ldrb	r2, [r7, #3]
 800185c:	711a      	strb	r2, [r3, #4]
	module->power = power;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	78ba      	ldrb	r2, [r7, #2]
 8001862:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	787a      	ldrb	r2, [r7, #1]
 8001868:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7c3a      	ldrb	r2, [r7, #16]
 800186e:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7d3a      	ldrb	r2, [r7, #20]
 8001874:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fc9e 	bl	80011b8 <SX1278_defaultConfig>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <GPS_Receive>:
// "00.358"



/* Pass uint8_t of received data */
void GPS_Receive(uint8_t data){
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
	if(data == '$'){
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b24      	cmp	r3, #36	; 0x24
 8001892:	d103      	bne.n	800189c <GPS_Receive+0x18>
		gpsTempLen = 0;
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <GPS_Receive+0x68>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
		gpsTempLen = 255;
	}else if(gpsTempLen != 255){
		gpsTemp[gpsTempLen] = data;
		gpsTempLen++;
	}
}
 800189a:	e023      	b.n	80018e4 <GPS_Receive+0x60>
	}else if((data == 13 || data == 10) && gpsTempLen != 255){ // looks for new_line or vertical tab
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b0d      	cmp	r3, #13
 80018a0:	d002      	beq.n	80018a8 <GPS_Receive+0x24>
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b0a      	cmp	r3, #10
 80018a6:	d10d      	bne.n	80018c4 <GPS_Receive+0x40>
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <GPS_Receive+0x68>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2bff      	cmp	r3, #255	; 0xff
 80018ae:	d009      	beq.n	80018c4 <GPS_Receive+0x40>
		GPS_Parse(gpsTemp, gpsTempLen);
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <GPS_Receive+0x68>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	480e      	ldr	r0, [pc, #56]	; (80018f0 <GPS_Receive+0x6c>)
 80018b8:	f000 f81c 	bl	80018f4 <GPS_Parse>
		gpsTempLen = 255;
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <GPS_Receive+0x68>)
 80018be:	22ff      	movs	r2, #255	; 0xff
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	e00f      	b.n	80018e4 <GPS_Receive+0x60>
	}else if(gpsTempLen != 255){
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <GPS_Receive+0x68>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2bff      	cmp	r3, #255	; 0xff
 80018ca:	d00b      	beq.n	80018e4 <GPS_Receive+0x60>
		gpsTemp[gpsTempLen] = data;
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <GPS_Receive+0x68>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <GPS_Receive+0x6c>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	5453      	strb	r3, [r2, r1]
		gpsTempLen++;
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <GPS_Receive+0x68>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	4b02      	ldr	r3, [pc, #8]	; (80018ec <GPS_Receive+0x68>)
 80018e2:	701a      	strb	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000000 	.word	0x20000000
 80018f0:	2000033c 	.word	0x2000033c

080018f4 <GPS_Parse>:

/* parses received frame */
uint8_t GPS_Parse(uint8_t *buf, uint8_t len){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b098      	sub	sp, #96	; 0x60
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
	if(strncmp("GPGGA", (char *)buf, 5) == 0){ // get coordinates and height
 8001900:	2205      	movs	r2, #5
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	48c7      	ldr	r0, [pc, #796]	; (8001c24 <GPS_Parse+0x330>)
 8001906:	f007 fb51 	bl	8008fac <strncmp>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 8152 	bne.w	8001bb6 <GPS_Parse+0x2c2>
		if(GPS_CheckSum(buf, len) == GPS_OK){
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	4619      	mov	r1, r3
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fba6 	bl	8002068 <GPS_CheckSum>
 800191c:	4603      	mov	r3, r0
 800191e:	2b01      	cmp	r3, #1
 8001920:	f040 8147 	bne.w	8001bb2 <GPS_Parse+0x2be>
			uint8_t step = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			uint8_t i = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			while(step < 8){
 8001930:	e132      	b.n	8001b98 <GPS_Parse+0x2a4>
				if(buf[i] == ','){
 8001932:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b2c      	cmp	r3, #44	; 0x2c
 800193e:	f040 8126 	bne.w	8001b8e <GPS_Parse+0x29a>
					i++;
 8001942:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001946:	3301      	adds	r3, #1
 8001948:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
					step++;
 800194c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001950:	3301      	adds	r3, #1
 8001952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if(step == 1){
 8001956:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800195a:	2b01      	cmp	r3, #1
 800195c:	d13f      	bne.n	80019de <GPS_Parse+0xea>
						uint8_t tempData[6] = {0};
 800195e:	2300      	movs	r3, #0
 8001960:	64bb      	str	r3, [r7, #72]	; 0x48
 8001962:	2300      	movs	r3, #0
 8001964:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
						uint8_t leng = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
						while(buf[i] != '.'){
 800196e:	e015      	b.n	800199c <GPS_Parse+0xa8>
							tempData[leng] = buf[i];
 8001970:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	441a      	add	r2, r3
 8001978:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800197c:	7812      	ldrb	r2, [r2, #0]
 800197e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001982:	440b      	add	r3, r1
 8001984:	f803 2c18 	strb.w	r2, [r3, #-24]
							leng++;
 8001988:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800198c:	3301      	adds	r3, #1
 800198e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
							i++;
 8001992:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001996:	3301      	adds	r3, #1
 8001998:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
						while(buf[i] != '.'){
 800199c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b2e      	cmp	r3, #46	; 0x2e
 80019a8:	d1e2      	bne.n	8001970 <GPS_Parse+0x7c>
						}
						if(leng == 0){
 80019aa:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <GPS_Parse+0xc2>
							return GPS_NOK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e351      	b.n	800205a <GPS_Parse+0x766>
						}
						memset(gpsTime, '0', 6);
 80019b6:	2206      	movs	r2, #6
 80019b8:	2130      	movs	r1, #48	; 0x30
 80019ba:	489b      	ldr	r0, [pc, #620]	; (8001c28 <GPS_Parse+0x334>)
 80019bc:	f006 fe30 	bl	8008620 <memset>
						memcpy(gpsTime + (6-leng), tempData, leng);
 80019c0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80019c4:	f1c3 0306 	rsb	r3, r3, #6
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b97      	ldr	r3, [pc, #604]	; (8001c28 <GPS_Parse+0x334>)
 80019cc:	4413      	add	r3, r2
 80019ce:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80019d2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80019d6:	4618      	mov	r0, r3
 80019d8:	f006 fe14 	bl	8008604 <memcpy>
 80019dc:	e0d7      	b.n	8001b8e <GPS_Parse+0x29a>
					}else if(step == 2 || step == 3){
 80019de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d004      	beq.n	80019f0 <GPS_Parse+0xfc>
 80019e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	f040 8085 	bne.w	8001afa <GPS_Parse+0x206>
						uint8_t tempData[12] = {0};
 80019f0:	2300      	movs	r3, #0
 80019f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
						uint8_t leng = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
						while(buf[i] != ','){
 8001a04:	e015      	b.n	8001a32 <GPS_Parse+0x13e>
							tempData[leng] = buf[i];
 8001a06:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	441a      	add	r2, r3
 8001a0e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001a12:	7812      	ldrb	r2, [r2, #0]
 8001a14:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001a18:	440b      	add	r3, r1
 8001a1a:	f803 2c24 	strb.w	r2, [r3, #-36]
							leng++;
 8001a1e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001a22:	3301      	adds	r3, #1
 8001a24:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
							i++;
 8001a28:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
						while(buf[i] != ','){
 8001a32:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b2c      	cmp	r3, #44	; 0x2c
 8001a3e:	d1e2      	bne.n	8001a06 <GPS_Parse+0x112>
						}
						if(leng == 0){
 8001a40:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <GPS_Parse+0x158>
							return GPS_NOK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e306      	b.n	800205a <GPS_Parse+0x766>
						}
						i++;
 8001a4c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a50:	3301      	adds	r3, #1
 8001a52:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
						if(buf[i] == 'N' || buf[i] == 'S' || buf[i] == 'E' || buf[i] == 'W'){
 8001a56:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b4e      	cmp	r3, #78	; 0x4e
 8001a62:	d014      	beq.n	8001a8e <GPS_Parse+0x19a>
 8001a64:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b53      	cmp	r3, #83	; 0x53
 8001a70:	d00d      	beq.n	8001a8e <GPS_Parse+0x19a>
 8001a72:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b45      	cmp	r3, #69	; 0x45
 8001a7e:	d006      	beq.n	8001a8e <GPS_Parse+0x19a>
 8001a80:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b57      	cmp	r3, #87	; 0x57
 8001a8c:	d133      	bne.n	8001af6 <GPS_Parse+0x202>
							memset((gpsData + (step - 2) * 12), '0', 12);
 8001a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001a92:	1e9a      	subs	r2, r3, #2
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b63      	ldr	r3, [pc, #396]	; (8001c2c <GPS_Parse+0x338>)
 8001aa0:	4413      	add	r3, r2
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	2130      	movs	r1, #48	; 0x30
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f006 fdba 	bl	8008620 <memset>
							gpsData[(step - 2) * 12 + 11] = buf[i];
 8001aac:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	18d1      	adds	r1, r2, r3
 8001ab4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ab8:	1e9a      	subs	r2, r3, #2
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	330b      	adds	r3, #11
 8001ac4:	7809      	ldrb	r1, [r1, #0]
 8001ac6:	4a59      	ldr	r2, [pc, #356]	; (8001c2c <GPS_Parse+0x338>)
 8001ac8:	54d1      	strb	r1, [r2, r3]
						}else{
							return GPS_NOK;
						}
						memcpy(gpsData + (step - 2) * 12 + (11 - leng), tempData, leng);
 8001aca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ace:	1e9a      	subs	r2, r3, #2
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	330b      	adds	r3, #11
 8001ae2:	4a52      	ldr	r2, [pc, #328]	; (8001c2c <GPS_Parse+0x338>)
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001aea:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001aee:	4618      	mov	r0, r3
 8001af0:	f006 fd88 	bl	8008604 <memcpy>
					}else if(step == 2 || step == 3){
 8001af4:	e04b      	b.n	8001b8e <GPS_Parse+0x29a>
							return GPS_NOK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e2af      	b.n	800205a <GPS_Parse+0x766>
					}else if(step == 7){
 8001afa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001afe:	2b07      	cmp	r3, #7
 8001b00:	d145      	bne.n	8001b8e <GPS_Parse+0x29a>
						i++;
 8001b02:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001b06:	3301      	adds	r3, #1
 8001b08:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
						uint8_t tempData[12] = {0};
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
						uint8_t leng = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						while(buf[i] != ','){
 8001b20:	e015      	b.n	8001b4e <GPS_Parse+0x25a>
							tempData[leng] = buf[i];
 8001b22:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	441a      	add	r2, r3
 8001b2a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b2e:	7812      	ldrb	r2, [r2, #0]
 8001b30:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001b34:	440b      	add	r3, r1
 8001b36:	f803 2c30 	strb.w	r2, [r3, #-48]
							leng++;
 8001b3a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
							i++;
 8001b44:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
						while(buf[i] != ','){
 8001b4e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b2c      	cmp	r3, #44	; 0x2c
 8001b5a:	d1e2      	bne.n	8001b22 <GPS_Parse+0x22e>
						}
						if(leng == 0){
 8001b5c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <GPS_Parse+0x274>
							return GPS_NOK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e278      	b.n	800205a <GPS_Parse+0x766>
						}
						memset(gpsHeight, '0', 8);
 8001b68:	2208      	movs	r2, #8
 8001b6a:	2130      	movs	r1, #48	; 0x30
 8001b6c:	4830      	ldr	r0, [pc, #192]	; (8001c30 <GPS_Parse+0x33c>)
 8001b6e:	f006 fd57 	bl	8008620 <memset>
						memcpy(gpsHeight + (8-leng), tempData, leng);
 8001b72:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001b76:	f1c3 0308 	rsb	r3, r3, #8
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <GPS_Parse+0x33c>)
 8001b7e:	4413      	add	r3, r2
 8001b80:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001b84:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f006 fd3b 	bl	8008604 <memcpy>
					}
				}
				i++;
 8001b8e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001b92:	3301      	adds	r3, #1
 8001b94:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			while(step < 8){
 8001b98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001b9c:	2b07      	cmp	r3, #7
 8001b9e:	f67f aec8 	bls.w	8001932 <GPS_Parse+0x3e>
			}
			isNewData = 1;
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <GPS_Parse+0x340>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
			isData = 1;
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <GPS_Parse+0x344>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
			return GPS_OK;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e253      	b.n	800205a <GPS_Parse+0x766>
		}else{
			return GPS_NOK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e251      	b.n	800205a <GPS_Parse+0x766>
		}


	}else if(strncmp("GPVTG", (char *)buf, 5) == 0){ // get speed in km/h
 8001bb6:	2205      	movs	r2, #5
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4820      	ldr	r0, [pc, #128]	; (8001c3c <GPS_Parse+0x348>)
 8001bbc:	f007 f9f6 	bl	8008fac <strncmp>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d17f      	bne.n	8001cc6 <GPS_Parse+0x3d2>
		if(GPS_CheckSum(buf, len) == GPS_OK){
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fa4c 	bl	8002068 <GPS_CheckSum>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d175      	bne.n	8001cc2 <GPS_Parse+0x3ce>
			uint8_t step = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
			uint8_t i = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			while(step < 8){
 8001be2:	e068      	b.n	8001cb6 <GPS_Parse+0x3c2>
				if(buf[i] == ','){
 8001be4:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b2c      	cmp	r3, #44	; 0x2c
 8001bf0:	d15c      	bne.n	8001cac <GPS_Parse+0x3b8>
					step++;
 8001bf2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
					if(step == 7){
 8001bfc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001c00:	2b07      	cmp	r3, #7
 8001c02:	d153      	bne.n	8001cac <GPS_Parse+0x3b8>
						i++;
 8001c04:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
						uint8_t tempData[12] = {0};
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
						uint8_t leng = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
						while(buf[i] != ','){
 8001c22:	e023      	b.n	8001c6c <GPS_Parse+0x378>
 8001c24:	0800b428 	.word	0x0800b428
 8001c28:	20000248 	.word	0x20000248
 8001c2c:	20000220 	.word	0x20000220
 8001c30:	20000238 	.word	0x20000238
 8001c34:	20000274 	.word	0x20000274
 8001c38:	20000273 	.word	0x20000273
 8001c3c:	0800b430 	.word	0x0800b430
							tempData[leng] = buf[i];
 8001c40:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	441a      	add	r2, r3
 8001c48:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c52:	440b      	add	r3, r1
 8001c54:	f803 2c3c 	strb.w	r2, [r3, #-60]
							leng++;
 8001c58:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
							i++;
 8001c62:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001c66:	3301      	adds	r3, #1
 8001c68:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
						while(buf[i] != ','){
 8001c6c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b2c      	cmp	r3, #44	; 0x2c
 8001c78:	d1e2      	bne.n	8001c40 <GPS_Parse+0x34c>
						}
						if(leng == 0){
 8001c7a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <GPS_Parse+0x392>
							return GPS_NOK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e1e9      	b.n	800205a <GPS_Parse+0x766>
						}
						memset(gpsSpeed, '0', 6);
 8001c86:	2206      	movs	r2, #6
 8001c88:	2130      	movs	r1, #48	; 0x30
 8001c8a:	48ca      	ldr	r0, [pc, #808]	; (8001fb4 <GPS_Parse+0x6c0>)
 8001c8c:	f006 fcc8 	bl	8008620 <memset>
						memcpy(gpsSpeed + (6-leng), tempData, leng);
 8001c90:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001c94:	f1c3 0306 	rsb	r3, r3, #6
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4bc6      	ldr	r3, [pc, #792]	; (8001fb4 <GPS_Parse+0x6c0>)
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8001ca2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f006 fcac 	bl	8008604 <memcpy>
					}
				}
				i++;
 8001cac:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
			while(step < 8){
 8001cb6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001cba:	2b07      	cmp	r3, #7
 8001cbc:	d992      	bls.n	8001be4 <GPS_Parse+0x2f0>
			}
			return GPS_OK;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e1cb      	b.n	800205a <GPS_Parse+0x766>
		}else{
			return GPS_NOK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e1c9      	b.n	800205a <GPS_Parse+0x766>
		}
	}else if(strncmp("GPZDA", (char *)buf, 5) == 0){ // get precise time
 8001cc6:	2205      	movs	r2, #5
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	48bb      	ldr	r0, [pc, #748]	; (8001fb8 <GPS_Parse+0x6c4>)
 8001ccc:	f007 f96e 	bl	8008fac <strncmp>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 81c0 	bne.w	8002058 <GPS_Parse+0x764>
		if(GPS_CheckSum(buf, len) == GPS_OK){
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f9c3 	bl	8002068 <GPS_CheckSum>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	f040 81b5 	bne.w	8002054 <GPS_Parse+0x760>
				uint8_t step = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				uint8_t i = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				while(step < 6){
 8001cf6:	e1a6      	b.n	8002046 <GPS_Parse+0x752>
					if(buf[i] == ','){
 8001cf8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b2c      	cmp	r3, #44	; 0x2c
 8001d04:	f040 819a 	bne.w	800203c <GPS_Parse+0x748>
						step++;
 8001d08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						if(step == 1){
 8001d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d13e      	bne.n	8001d98 <GPS_Parse+0x4a4>
							uint8_t tempData[8] = {0};
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
							uint8_t leng = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
							while(buf[i] != ','){
 8001d28:	e015      	b.n	8001d56 <GPS_Parse+0x462>
								tempData[leng] = buf[i];
 8001d2a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	441a      	add	r2, r3
 8001d32:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d36:	7812      	ldrb	r2, [r2, #0]
 8001d38:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001d3c:	440b      	add	r3, r1
 8001d3e:	f803 2c44 	strb.w	r2, [r3, #-68]
								leng++;
 8001d42:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d46:	3301      	adds	r3, #1
 8001d48:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								i++;
 8001d4c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001d50:	3301      	adds	r3, #1
 8001d52:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							while(buf[i] != ','){
 8001d56:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b2c      	cmp	r3, #44	; 0x2c
 8001d62:	d1e2      	bne.n	8001d2a <GPS_Parse+0x436>
							}
							if(leng == 0){
 8001d64:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <GPS_Parse+0x47c>
								return GPS_NOK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e174      	b.n	800205a <GPS_Parse+0x766>
							}
							memset(gpsTime_UTC, '0', 9);
 8001d70:	2209      	movs	r2, #9
 8001d72:	2130      	movs	r1, #48	; 0x30
 8001d74:	4891      	ldr	r0, [pc, #580]	; (8001fbc <GPS_Parse+0x6c8>)
 8001d76:	f006 fc53 	bl	8008620 <memset>
							memcpy(gpsTime_UTC + (8-leng), tempData, leng);
 8001d7a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001d7e:	f1c3 0308 	rsb	r3, r3, #8
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b8d      	ldr	r3, [pc, #564]	; (8001fbc <GPS_Parse+0x6c8>)
 8001d86:	4413      	add	r3, r2
 8001d88:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001d8c:	f107 011c 	add.w	r1, r7, #28
 8001d90:	4618      	mov	r0, r3
 8001d92:	f006 fc37 	bl	8008604 <memcpy>
 8001d96:	e151      	b.n	800203c <GPS_Parse+0x748>
						}else if(step == 2){
 8001d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d13c      	bne.n	8001e1a <GPS_Parse+0x526>
							uint8_t tempData[2] = {0};
 8001da0:	2300      	movs	r3, #0
 8001da2:	833b      	strh	r3, [r7, #24]
							uint8_t leng = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
							while(buf[i] != ','){
 8001daa:	e015      	b.n	8001dd8 <GPS_Parse+0x4e4>
								tempData[leng] = buf[i];
 8001dac:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	441a      	add	r2, r3
 8001db4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001db8:	7812      	ldrb	r2, [r2, #0]
 8001dba:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f803 2c48 	strb.w	r2, [r3, #-72]
								leng++;
 8001dc4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
								i++;
 8001dce:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							while(buf[i] != ','){
 8001dd8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b2c      	cmp	r3, #44	; 0x2c
 8001de4:	d1e2      	bne.n	8001dac <GPS_Parse+0x4b8>
							}
							if(leng == 0){
 8001de6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <GPS_Parse+0x4fe>
								return GPS_NOK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e133      	b.n	800205a <GPS_Parse+0x766>
							}
							memset(gps_date, '0', 3);
 8001df2:	2203      	movs	r2, #3
 8001df4:	2130      	movs	r1, #48	; 0x30
 8001df6:	4872      	ldr	r0, [pc, #456]	; (8001fc0 <GPS_Parse+0x6cc>)
 8001df8:	f006 fc12 	bl	8008620 <memset>
							memcpy(gps_date + (2-leng), tempData, leng);
 8001dfc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001e00:	f1c3 0302 	rsb	r3, r3, #2
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b6e      	ldr	r3, [pc, #440]	; (8001fc0 <GPS_Parse+0x6cc>)
 8001e08:	4413      	add	r3, r2
 8001e0a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8001e0e:	f107 0118 	add.w	r1, r7, #24
 8001e12:	4618      	mov	r0, r3
 8001e14:	f006 fbf6 	bl	8008604 <memcpy>
 8001e18:	e110      	b.n	800203c <GPS_Parse+0x748>
						}else if(step == 3){
 8001e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d13c      	bne.n	8001e9c <GPS_Parse+0x5a8>
							uint8_t tempData[2] = {0};
 8001e22:	2300      	movs	r3, #0
 8001e24:	82bb      	strh	r3, [r7, #20]
							uint8_t leng = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
							while(buf[i] != ','){
 8001e2c:	e015      	b.n	8001e5a <GPS_Parse+0x566>
								tempData[leng] = buf[i];
 8001e2e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	441a      	add	r2, r3
 8001e36:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001e3a:	7812      	ldrb	r2, [r2, #0]
 8001e3c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001e40:	440b      	add	r3, r1
 8001e42:	f803 2c4c 	strb.w	r2, [r3, #-76]
								leng++;
 8001e46:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
								i++;
 8001e50:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001e54:	3301      	adds	r3, #1
 8001e56:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							while(buf[i] != ','){
 8001e5a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b2c      	cmp	r3, #44	; 0x2c
 8001e66:	d1e2      	bne.n	8001e2e <GPS_Parse+0x53a>
							}
							if(leng == 0){
 8001e68:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <GPS_Parse+0x580>
								return GPS_NOK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e0f2      	b.n	800205a <GPS_Parse+0x766>
							}
							memset(gps_month, '0', 3);
 8001e74:	2203      	movs	r2, #3
 8001e76:	2130      	movs	r1, #48	; 0x30
 8001e78:	4852      	ldr	r0, [pc, #328]	; (8001fc4 <GPS_Parse+0x6d0>)
 8001e7a:	f006 fbd1 	bl	8008620 <memset>
							memcpy(gps_month + (2-leng), tempData, leng);
 8001e7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001e82:	f1c3 0302 	rsb	r3, r3, #2
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b4e      	ldr	r3, [pc, #312]	; (8001fc4 <GPS_Parse+0x6d0>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8001e90:	f107 0114 	add.w	r1, r7, #20
 8001e94:	4618      	mov	r0, r3
 8001e96:	f006 fbb5 	bl	8008604 <memcpy>
 8001e9a:	e0cf      	b.n	800203c <GPS_Parse+0x748>
						}else if(step == 4){
 8001e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d13c      	bne.n	8001f1e <GPS_Parse+0x62a>
							uint8_t tempData[4] = {0};
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
							uint8_t leng = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
							while(buf[i] != ','){
 8001eae:	e015      	b.n	8001edc <GPS_Parse+0x5e8>
								tempData[leng] = buf[i];
 8001eb0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001ebc:	7812      	ldrb	r2, [r2, #0]
 8001ebe:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f803 2c50 	strb.w	r2, [r3, #-80]
								leng++;
 8001ec8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
								i++;
 8001ed2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							while(buf[i] != ','){
 8001edc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b2c      	cmp	r3, #44	; 0x2c
 8001ee8:	d1e2      	bne.n	8001eb0 <GPS_Parse+0x5bc>
							}
							if(leng == 0){
 8001eea:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <GPS_Parse+0x602>
								return GPS_NOK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e0b1      	b.n	800205a <GPS_Parse+0x766>
							}
							memset(gps_year, '0', 5);
 8001ef6:	2205      	movs	r2, #5
 8001ef8:	2130      	movs	r1, #48	; 0x30
 8001efa:	4833      	ldr	r0, [pc, #204]	; (8001fc8 <GPS_Parse+0x6d4>)
 8001efc:	f006 fb90 	bl	8008620 <memset>
							memcpy(gps_year + (4-leng), tempData, leng);
 8001f00:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001f04:	f1c3 0304 	rsb	r3, r3, #4
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <GPS_Parse+0x6d4>)
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8001f12:	f107 0110 	add.w	r1, r7, #16
 8001f16:	4618      	mov	r0, r3
 8001f18:	f006 fb74 	bl	8008604 <memcpy>
 8001f1c:	e08e      	b.n	800203c <GPS_Parse+0x748>
						}else if(step == 5){
 8001f1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d13c      	bne.n	8001fa0 <GPS_Parse+0x6ac>
							uint8_t tempData[2] = {0};
 8001f26:	2300      	movs	r3, #0
 8001f28:	81bb      	strh	r3, [r7, #12]
							uint8_t leng = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
							while(buf[i] != ','){
 8001f30:	e015      	b.n	8001f5e <GPS_Parse+0x66a>
								tempData[leng] = buf[i];
 8001f32:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	441a      	add	r2, r3
 8001f3a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001f3e:	7812      	ldrb	r2, [r2, #0]
 8001f40:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001f44:	440b      	add	r3, r1
 8001f46:	f803 2c54 	strb.w	r2, [r3, #-84]
								leng++;
 8001f4a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
								i++;
 8001f54:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							while(buf[i] != ','){
 8001f5e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b2c      	cmp	r3, #44	; 0x2c
 8001f6a:	d1e2      	bne.n	8001f32 <GPS_Parse+0x63e>
							}
							if(leng == 0){
 8001f6c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <GPS_Parse+0x684>
								return GPS_NOK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e070      	b.n	800205a <GPS_Parse+0x766>
							}
							memset(local_zone_desc, '0', 3);
 8001f78:	2203      	movs	r2, #3
 8001f7a:	2130      	movs	r1, #48	; 0x30
 8001f7c:	4813      	ldr	r0, [pc, #76]	; (8001fcc <GPS_Parse+0x6d8>)
 8001f7e:	f006 fb4f 	bl	8008620 <memset>
							memcpy(local_zone_desc + (2-leng), tempData, leng);
 8001f82:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001f86:	f1c3 0302 	rsb	r3, r3, #2
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <GPS_Parse+0x6d8>)
 8001f8e:	4413      	add	r3, r2
 8001f90:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8001f94:	f107 010c 	add.w	r1, r7, #12
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f006 fb33 	bl	8008604 <memcpy>
 8001f9e:	e04d      	b.n	800203c <GPS_Parse+0x748>
						}
						else if(step == 5){
 8001fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d149      	bne.n	800203c <GPS_Parse+0x748>
							uint8_t tempData[2] = {0};
 8001fa8:	2300      	movs	r3, #0
 8001faa:	813b      	strh	r3, [r7, #8]
							uint8_t leng = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
							while(buf[i] != ','){
 8001fb2:	e023      	b.n	8001ffc <GPS_Parse+0x708>
 8001fb4:	20000240 	.word	0x20000240
 8001fb8:	0800b438 	.word	0x0800b438
 8001fbc:	20000250 	.word	0x20000250
 8001fc0:	2000025c 	.word	0x2000025c
 8001fc4:	20000260 	.word	0x20000260
 8001fc8:	20000264 	.word	0x20000264
 8001fcc:	2000026c 	.word	0x2000026c
								tempData[leng] = buf[i];
 8001fd0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	441a      	add	r2, r3
 8001fd8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f803 2c58 	strb.w	r2, [r3, #-88]
								leng++;
 8001fe8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001fec:	3301      	adds	r3, #1
 8001fee:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
								i++;
 8001ff2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							while(buf[i] != ','){
 8001ffc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b2c      	cmp	r3, #44	; 0x2c
 8002008:	d1e2      	bne.n	8001fd0 <GPS_Parse+0x6dc>
							}
							if(leng == 0){
 800200a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <GPS_Parse+0x722>
								return GPS_NOK;
 8002012:	2300      	movs	r3, #0
 8002014:	e021      	b.n	800205a <GPS_Parse+0x766>
							}
							memset(local_zone_min_desc, '0', 3);
 8002016:	2203      	movs	r2, #3
 8002018:	2130      	movs	r1, #48	; 0x30
 800201a:	4812      	ldr	r0, [pc, #72]	; (8002064 <GPS_Parse+0x770>)
 800201c:	f006 fb00 	bl	8008620 <memset>
							memcpy(local_zone_min_desc + (2-leng), tempData, leng);
 8002020:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002024:	f1c3 0302 	rsb	r3, r3, #2
 8002028:	461a      	mov	r2, r3
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <GPS_Parse+0x770>)
 800202c:	4413      	add	r3, r2
 800202e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8002032:	f107 0108 	add.w	r1, r7, #8
 8002036:	4618      	mov	r0, r3
 8002038:	f006 fae4 	bl	8008604 <memcpy>
						}
					}
					i++;
 800203c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002040:	3301      	adds	r3, #1
 8002042:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				while(step < 6){
 8002046:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800204a:	2b05      	cmp	r3, #5
 800204c:	f67f ae54 	bls.w	8001cf8 <GPS_Parse+0x404>
				}
			return GPS_OK;
 8002050:	2301      	movs	r3, #1
 8002052:	e002      	b.n	800205a <GPS_Parse+0x766>
		}else{
			return GPS_NOK;
 8002054:	2300      	movs	r3, #0
 8002056:	e000      	b.n	800205a <GPS_Parse+0x766>
		}
	}else{
		return GPS_NOK;
 8002058:	2300      	movs	r3, #0
	}
	return GPS_NOK;
}
 800205a:	4618      	mov	r0, r3
 800205c:	3760      	adds	r7, #96	; 0x60
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000270 	.word	0x20000270

08002068 <GPS_CheckSum>:

/* checks checksum returns GPS_ok if data is valid*/
uint8_t GPS_CheckSum(uint8_t *buf, uint8_t len){
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
	uint8_t sum;
	uint8_t check = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]

	if(GPS_HexToByte((buf + len - 2), &sum) != GPS_OK){
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	3b02      	subs	r3, #2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	f107 020d 	add.w	r2, r7, #13
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f822 	bl	80020d0 <GPS_HexToByte>
 800208c:	4603      	mov	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <GPS_CheckSum+0x2e>
		return GPS_NOK;
 8002092:	2300      	movs	r3, #0
 8002094:	e018      	b.n	80020c8 <GPS_CheckSum+0x60>
	}

	for(uint8_t i = 0; i < (len - 3); i++){
 8002096:	2300      	movs	r3, #0
 8002098:	73bb      	strb	r3, [r7, #14]
 800209a:	e009      	b.n	80020b0 <GPS_CheckSum+0x48>
		check ^= buf[i];
 800209c:	7bbb      	ldrb	r3, [r7, #14]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	781a      	ldrb	r2, [r3, #0]
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	4053      	eors	r3, r2
 80020a8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < (len - 3); i++){
 80020aa:	7bbb      	ldrb	r3, [r7, #14]
 80020ac:	3301      	adds	r3, #1
 80020ae:	73bb      	strb	r3, [r7, #14]
 80020b0:	7bba      	ldrb	r2, [r7, #14]
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	429a      	cmp	r2, r3
 80020b8:	dbf0      	blt.n	800209c <GPS_CheckSum+0x34>
	}

	if(check == sum){
 80020ba:	7b7b      	ldrb	r3, [r7, #13]
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d101      	bne.n	80020c6 <GPS_CheckSum+0x5e>
		return GPS_OK;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <GPS_CheckSum+0x60>
	}

	return GPS_NOK;
 80020c6:	2300      	movs	r3, #0

}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <GPS_HexToByte>:

/* converts hex string e.g. AB (0xAB) to byte value writes to value, returns GPS_OK if valid hex */
uint8_t GPS_HexToByte(uint8_t *hex, uint8_t *value){
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
	uint8_t temp[2];

	for(uint8_t i = 0; i < 2; i++){
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
 80020de:	e04c      	b.n	800217a <GPS_HexToByte+0xaa>
		temp[i] = hex[i];
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	441a      	add	r2, r3
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	f107 0110 	add.w	r1, r7, #16
 80020ee:	440b      	add	r3, r1
 80020f0:	f803 2c04 	strb.w	r2, [r3, #-4]
		if(temp[i] > 47 && temp[i] < 58){
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	f107 0210 	add.w	r2, r7, #16
 80020fa:	4413      	add	r3, r2
 80020fc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8002100:	2b2f      	cmp	r3, #47	; 0x2f
 8002102:	d916      	bls.n	8002132 <GPS_HexToByte+0x62>
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	f107 0210 	add.w	r2, r7, #16
 800210a:	4413      	add	r3, r2
 800210c:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8002110:	2b39      	cmp	r3, #57	; 0x39
 8002112:	d80e      	bhi.n	8002132 <GPS_HexToByte+0x62>
			temp[i] -= 48;
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	f107 0210 	add.w	r2, r7, #16
 800211a:	4413      	add	r3, r2
 800211c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3a30      	subs	r2, #48	; 0x30
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	f107 0110 	add.w	r1, r7, #16
 800212a:	440b      	add	r3, r1
 800212c:	f803 2c04 	strb.w	r2, [r3, #-4]
 8002130:	e020      	b.n	8002174 <GPS_HexToByte+0xa4>
		}else if(temp[i] > 64 && temp[i] < 71){
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	f107 0210 	add.w	r2, r7, #16
 8002138:	4413      	add	r3, r2
 800213a:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 800213e:	2b40      	cmp	r3, #64	; 0x40
 8002140:	d916      	bls.n	8002170 <GPS_HexToByte+0xa0>
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	f107 0210 	add.w	r2, r7, #16
 8002148:	4413      	add	r3, r2
 800214a:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 800214e:	2b46      	cmp	r3, #70	; 0x46
 8002150:	d80e      	bhi.n	8002170 <GPS_HexToByte+0xa0>
			temp[i] -= 55;
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	f107 0210 	add.w	r2, r7, #16
 8002158:	4413      	add	r3, r2
 800215a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	3a37      	subs	r2, #55	; 0x37
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	f107 0110 	add.w	r1, r7, #16
 8002168:	440b      	add	r3, r1
 800216a:	f803 2c04 	strb.w	r2, [r3, #-4]
 800216e:	e001      	b.n	8002174 <GPS_HexToByte+0xa4>
		}else{
			return GPS_NOK;
 8002170:	2300      	movs	r3, #0
 8002172:	e00e      	b.n	8002192 <GPS_HexToByte+0xc2>
	for(uint8_t i = 0; i < 2; i++){
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	3301      	adds	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d9af      	bls.n	80020e0 <GPS_HexToByte+0x10>
		}
	}

	*value = (temp[0] << 4) + temp[1];
 8002180:	7b3b      	ldrb	r3, [r7, #12]
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	b2da      	uxtb	r2, r3
 8002186:	7b7b      	ldrb	r3, [r7, #13]
 8002188:	4413      	add	r3, r2
 800218a:	b2da      	uxtb	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	701a      	strb	r2, [r3, #0]

	return GPS_OK;
 8002190:	2301      	movs	r3, #1
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <GPS_GetLat>:

/* Returns latitude of length 12...9*/
void GPS_GetLat(uint8_t *buf){
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <GPS_GetLat+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	e00a      	b.n	80021ca <GPS_GetLat+0x2a>
		buf[i - 1] = gpsData[i];
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	440b      	add	r3, r1
 80021be:	4909      	ldr	r1, [pc, #36]	; (80021e4 <GPS_GetLat+0x44>)
 80021c0:	5c8a      	ldrb	r2, [r1, r2]
 80021c2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	3301      	adds	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	2b09      	cmp	r3, #9
 80021ce:	d9f1      	bls.n	80021b4 <GPS_GetLat+0x14>
	}
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000274 	.word	0x20000274
 80021e4:	20000220 	.word	0x20000220

080021e8 <GPS_GetLon>:

/* Returns longitude of length 12...9*/
void GPS_GetLon(uint8_t *buf){
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <GPS_GetLon+0x44>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 80021f6:	2301      	movs	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
 80021fa:	e00c      	b.n	8002216 <GPS_GetLon+0x2e>
		buf[i - 1] = gpsData[i + 12];
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	f103 020c 	add.w	r2, r3, #12
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	3b01      	subs	r3, #1
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	440b      	add	r3, r1
 800220a:	4909      	ldr	r1, [pc, #36]	; (8002230 <GPS_GetLon+0x48>)
 800220c:	5c8a      	ldrb	r2, [r1, r2]
 800220e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	3301      	adds	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b09      	cmp	r3, #9
 800221a:	d9ef      	bls.n	80021fc <GPS_GetLon+0x14>
	}
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000274 	.word	0x20000274
 8002230:	20000220 	.word	0x20000220

08002234 <GPS_GetSpe>:

/* Returns speed of length 6*/
void GPS_GetSpe(uint8_t *buf){
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <GPS_GetSpe+0x3c>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++){
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	e009      	b.n	800225c <GPS_GetSpe+0x28>
		buf[i] = gpsSpeed[i];
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	440b      	add	r3, r1
 8002250:	4908      	ldr	r1, [pc, #32]	; (8002274 <GPS_GetSpe+0x40>)
 8002252:	5c8a      	ldrb	r2, [r1, r2]
 8002254:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++){
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	3301      	adds	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d9f2      	bls.n	8002248 <GPS_GetSpe+0x14>
	}
}
 8002262:	bf00      	nop
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	20000274 	.word	0x20000274
 8002274:	20000240 	.word	0x20000240

08002278 <GPS_GetHei>:

/* Returns height of length 8*/
void GPS_GetHei(uint8_t *buf){
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <GPS_GetHei+0x3c>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
	for(; i < 8; i++){
 800228a:	e009      	b.n	80022a0 <GPS_GetHei+0x28>
		buf[i] = gpsHeight[i];
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	440b      	add	r3, r1
 8002294:	4908      	ldr	r1, [pc, #32]	; (80022b8 <GPS_GetHei+0x40>)
 8002296:	5c8a      	ldrb	r2, [r1, r2]
 8002298:	701a      	strb	r2, [r3, #0]
	for(; i < 8; i++){
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	3301      	adds	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b07      	cmp	r3, #7
 80022a4:	d9f2      	bls.n	800228c <GPS_GetHei+0x14>
	}
}
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	20000274 	.word	0x20000274
 80022b8:	20000238 	.word	0x20000238

080022bc <GPS_GetTime>:

/* Returns time of length 9 in format "hh:mm:ss.msms" */
void GPS_GetTime(uint8_t *buf){
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <GPS_GetTime+0x70>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
	buf[2] = ':';
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3302      	adds	r3, #2
 80022ce:	223a      	movs	r2, #58	; 0x3a
 80022d0:	701a      	strb	r2, [r3, #0]
	buf[5] = ':';
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3305      	adds	r3, #5
 80022d6:	223a      	movs	r2, #58	; 0x3a
 80022d8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++){
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	e01b      	b.n	8002318 <GPS_GetTime+0x5c>
		buf[i] = gpsTime[i];
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	440b      	add	r3, r1
 80022e8:	4911      	ldr	r1, [pc, #68]	; (8002330 <GPS_GetTime+0x74>)
 80022ea:	5c8a      	ldrb	r2, [r1, r2]
 80022ec:	701a      	strb	r2, [r3, #0]
		buf[i + 3] = gpsTime[i + 2];
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	1c9a      	adds	r2, r3, #2
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	3303      	adds	r3, #3
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	440b      	add	r3, r1
 80022fa:	490d      	ldr	r1, [pc, #52]	; (8002330 <GPS_GetTime+0x74>)
 80022fc:	5c8a      	ldrb	r2, [r1, r2]
 80022fe:	701a      	strb	r2, [r3, #0]
		buf[i + 6] = gpsTime[i + 4];
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	1d1a      	adds	r2, r3, #4
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	3306      	adds	r3, #6
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	440b      	add	r3, r1
 800230c:	4908      	ldr	r1, [pc, #32]	; (8002330 <GPS_GetTime+0x74>)
 800230e:	5c8a      	ldrb	r2, [r1, r2]
 8002310:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++){
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	3301      	adds	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d9e0      	bls.n	80022e0 <GPS_GetTime+0x24>
	}
}
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	20000274 	.word	0x20000274
 8002330:	20000248 	.word	0x20000248

08002334 <GPS_IsData>:
		buf[i] = gps_date[i];
	}
}

/* Returns GPS_OK if got any data */
uint8_t GPS_IsData(){
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
	if(isData){
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <GPS_IsData+0x24>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <GPS_IsData+0x16>
		isData = 0;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <GPS_IsData+0x24>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
		return GPS_OK;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <GPS_IsData+0x18>
	}else{
		return GPS_NOK;
 800234a:	2300      	movs	r3, #0
	}
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000273 	.word	0x20000273

0800235c <GSM_InitUart>:
#define GSM_MSG_SEND										26				//CTRL + Z
//#define GSM_MSG_SPACE										32				//SPACE


/* pass UART handle that will communicate with GSM module*/
uint8_t GSM_InitUart(UART_HandleTypeDef *huart){
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	uart = huart;
 8002364:	4a08      	ldr	r2, [pc, #32]	; (8002388 <GSM_InitUart+0x2c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6013      	str	r3, [r2, #0]
	if(huart != uart){
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <GSM_InitUart+0x2c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <GSM_InitUart+0x1c>
		return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <GSM_InitUart+0x1e>
	}else{
		return HAL_OK;
 8002378:	2300      	movs	r3, #0
	}
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	2000038c 	.word	0x2000038c

0800238c <GSM_Check_Signal>:

uint8_t GSM_Check_Signal(){
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
	uint8_t buf[32] = {0};
 8002392:	2300      	movs	r3, #0
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
 80023a4:	615a      	str	r2, [r3, #20]
 80023a6:	619a      	str	r2, [r3, #24]
	buf[0] = 'A';
 80023a8:	2341      	movs	r3, #65	; 0x41
 80023aa:	703b      	strb	r3, [r7, #0]
	buf[1] = 'T';
 80023ac:	2354      	movs	r3, #84	; 0x54
 80023ae:	707b      	strb	r3, [r7, #1]

	GSM_Send(buf, 2);
 80023b0:	463b      	mov	r3, r7
 80023b2:	2102      	movs	r1, #2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f969 	bl	800268c <GSM_Send>
	GSM_Receive(buf, 9);
 80023ba:	463b      	mov	r3, r7
 80023bc:	2109      	movs	r1, #9
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f982 	bl	80026c8 <GSM_Receive>

	if(GSM_IsOk(buf, 9)){
 80023c4:	463b      	mov	r3, r7
 80023c6:	2109      	movs	r1, #9
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f80a 	bl	80023e2 <GSM_IsOk>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <GSM_Check_Signal+0x4c>
		return 1;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <GSM_Check_Signal+0x4e>
	}

	return 0;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <GSM_IsOk>:

uint8_t GSM_IsOk(uint8_t *dataBuf, uint8_t size){
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	70fb      	strb	r3, [r7, #3]

	uint8_t i = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]

	for(; i < size; i++){
 80023f2:	e012      	b.n	800241a <GSM_IsOk+0x38>
		if(*dataBuf == 'O'){
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b4f      	cmp	r3, #79	; 0x4f
 80023fa:	d108      	bne.n	800240e <GSM_IsOk+0x2c>
			dataBuf++;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3301      	adds	r3, #1
 8002400:	607b      	str	r3, [r7, #4]
			if(*dataBuf == 'K'){
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b4b      	cmp	r3, #75	; 0x4b
 8002408:	d101      	bne.n	800240e <GSM_IsOk+0x2c>
				return 1;
 800240a:	2301      	movs	r3, #1
 800240c:	e00a      	b.n	8002424 <GSM_IsOk+0x42>
			}
		}
		dataBuf++;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3301      	adds	r3, #1
 8002412:	607b      	str	r3, [r7, #4]
	for(; i < size; i++){
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	3301      	adds	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	429a      	cmp	r2, r3
 8002420:	d3e8      	bcc.n	80023f4 <GSM_IsOk+0x12>
	}
	return 0;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <GSM_Find>:

uint8_t GSM_Find(uint8_t *dataBuf, uint8_t size, uint8_t *toFind, uint8_t tSize){
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	461a      	mov	r2, r3
 800243c:	460b      	mov	r3, r1
 800243e:	72fb      	strb	r3, [r7, #11]
 8002440:	4613      	mov	r3, r2
 8002442:	72bb      	strb	r3, [r7, #10]
	uint8_t i = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t f = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t temp[16];

	memcpy(temp, toFind, tSize);
 8002450:	7aba      	ldrb	r2, [r7, #10]
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	f006 f8d3 	bl	8008604 <memcpy>

	for(; i < size; i++){
 800245e:	e022      	b.n	80024a6 <GSM_Find+0x76>

		if(*dataBuf == temp[f]){
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	781a      	ldrb	r2, [r3, #0]
 8002464:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002468:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800246c:	440b      	add	r3, r1
 800246e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002472:	429a      	cmp	r2, r3
 8002474:	d105      	bne.n	8002482 <GSM_Find+0x52>
			f++;
 8002476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800247a:	3301      	adds	r3, #1
 800247c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002480:	e002      	b.n	8002488 <GSM_Find+0x58>
		}else{
			f = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if(f == tSize){
 8002488:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800248c:	7abb      	ldrb	r3, [r7, #10]
 800248e:	429a      	cmp	r2, r3
 8002490:	d101      	bne.n	8002496 <GSM_Find+0x66>
			return 1;
 8002492:	2301      	movs	r3, #1
 8002494:	e00d      	b.n	80024b2 <GSM_Find+0x82>
		}
		dataBuf++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
	for(; i < size; i++){
 800249c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a0:	3301      	adds	r3, #1
 80024a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80024a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80024aa:	7afb      	ldrb	r3, [r7, #11]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d3d7      	bcc.n	8002460 <GSM_Find+0x30>
	}

	return 0;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <GSM_On>:

void GSM_On(){
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_SET);
 80024c0:	2201      	movs	r2, #1
 80024c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024c6:	480b      	ldr	r0, [pc, #44]	; (80024f4 <GSM_On+0x38>)
 80024c8:	f003 fa74 	bl	80059b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RST_GPIO_Port, GSM_RST_Pin ,GPIO_PIN_SET);
 80024cc:	2201      	movs	r2, #1
 80024ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024d2:	4809      	ldr	r0, [pc, #36]	; (80024f8 <GSM_On+0x3c>)
 80024d4:	f003 fa6e 	bl	80059b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <GSM_On+0x3c>)
 80024e0:	f003 fa68 	bl	80059b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_RESET);
 80024e4:	2200      	movs	r2, #0
 80024e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ea:	4802      	ldr	r0, [pc, #8]	; (80024f4 <GSM_On+0x38>)
 80024ec:	f003 fa62 	bl	80059b4 <HAL_GPIO_WritePin>
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40020800 	.word	0x40020800
 80024f8:	40020400 	.word	0x40020400

080024fc <GSM_Off>:

void GSM_Off(){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 8002500:	2200      	movs	r2, #0
 8002502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002506:	480b      	ldr	r0, [pc, #44]	; (8002534 <GSM_Off+0x38>)
 8002508:	f003 fa54 	bl	80059b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RST_GPIO_Port, GSM_RST_Pin ,GPIO_PIN_RESET);
 800250c:	2200      	movs	r2, #0
 800250e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002512:	4809      	ldr	r0, [pc, #36]	; (8002538 <GSM_Off+0x3c>)
 8002514:	f003 fa4e 	bl	80059b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_SET);
 8002518:	2201      	movs	r2, #1
 800251a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800251e:	4806      	ldr	r0, [pc, #24]	; (8002538 <GSM_Off+0x3c>)
 8002520:	f003 fa48 	bl	80059b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
 8002524:	2201      	movs	r2, #1
 8002526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800252a:	4802      	ldr	r0, [pc, #8]	; (8002534 <GSM_Off+0x38>)
 800252c:	f003 fa42 	bl	80059b4 <HAL_GPIO_WritePin>
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40020800 	.word	0x40020800
 8002538:	40020400 	.word	0x40020400

0800253c <GSM_Message_Send>:

uint8_t GSM_Message_Send(uint8_t *dataBuf, uint8_t size, uint32_t number){
 800253c:	b580      	push	{r7, lr}
 800253e:	b0c4      	sub	sp, #272	; 0x110
 8002540:	af00      	add	r7, sp, #0
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	6018      	str	r0, [r3, #0]
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f107 030b 	add.w	r3, r7, #11
 8002550:	460a      	mov	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
	uint8_t temp[256];

	if(GSM_Check_Signal() == 0){
 8002554:	f7ff ff1a 	bl	800238c <GSM_Check_Signal>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <GSM_Message_Send+0x26>
		return 0;
 800255e:	2300      	movs	r3, #0
 8002560:	e082      	b.n	8002668 <GSM_Message_Send+0x12c>
	}

	memcpy(temp, GSM_MODE_TEXT, 9);
 8002562:	f107 0310 	add.w	r3, r7, #16
 8002566:	2209      	movs	r2, #9
 8002568:	4942      	ldr	r1, [pc, #264]	; (8002674 <GSM_Message_Send+0x138>)
 800256a:	4618      	mov	r0, r3
 800256c:	f006 f84a 	bl	8008604 <memcpy>
	GSM_Send(temp, 9);
 8002570:	f107 0310 	add.w	r3, r7, #16
 8002574:	2109      	movs	r1, #9
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f888 	bl	800268c <GSM_Send>
	GSM_Receive(temp, 20);
 800257c:	f107 0310 	add.w	r3, r7, #16
 8002580:	2114      	movs	r1, #20
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f8a0 	bl	80026c8 <GSM_Receive>
	if(GSM_IsOk(temp, 20) == 0){
 8002588:	f107 0310 	add.w	r3, r7, #16
 800258c:	2114      	movs	r1, #20
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff27 	bl	80023e2 <GSM_IsOk>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <GSM_Message_Send+0x62>
		return 0;
 800259a:	2300      	movs	r3, #0
 800259c:	e064      	b.n	8002668 <GSM_Message_Send+0x12c>
	}

	memcpy(temp, GSM_SET_NUMBER, 9);
 800259e:	f107 0310 	add.w	r3, r7, #16
 80025a2:	2209      	movs	r2, #9
 80025a4:	4934      	ldr	r1, [pc, #208]	; (8002678 <GSM_Message_Send+0x13c>)
 80025a6:	4618      	mov	r0, r3
 80025a8:	f006 f82c 	bl	8008604 <memcpy>
	sprintf((char *)(temp + 9), "%lu", number);
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	3309      	adds	r3, #9
 80025b2:	1d3a      	adds	r2, r7, #4
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4931      	ldr	r1, [pc, #196]	; (800267c <GSM_Message_Send+0x140>)
 80025b8:	4618      	mov	r0, r3
 80025ba:	f006 fcd7 	bl	8008f6c <siprintf>
	memcpy(temp + 17, "\"", 1);
 80025be:	f107 0310 	add.w	r3, r7, #16
 80025c2:	3311      	adds	r3, #17
 80025c4:	2201      	movs	r2, #1
 80025c6:	492e      	ldr	r1, [pc, #184]	; (8002680 <GSM_Message_Send+0x144>)
 80025c8:	4618      	mov	r0, r3
 80025ca:	f006 f81b 	bl	8008604 <memcpy>
	GSM_Send(temp, 17);
 80025ce:	f107 0310 	add.w	r3, r7, #16
 80025d2:	2111      	movs	r1, #17
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f859 	bl	800268c <GSM_Send>
	GSM_Receive(temp, 40);
 80025da:	f107 0310 	add.w	r3, r7, #16
 80025de:	2128      	movs	r1, #40	; 0x28
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f871 	bl	80026c8 <GSM_Receive>
	if(GSM_Find(temp, 40, (uint8_t *)">", 1) == 0){
 80025e6:	f107 0010 	add.w	r0, r7, #16
 80025ea:	2301      	movs	r3, #1
 80025ec:	4a25      	ldr	r2, [pc, #148]	; (8002684 <GSM_Message_Send+0x148>)
 80025ee:	2128      	movs	r1, #40	; 0x28
 80025f0:	f7ff ff1e 	bl	8002430 <GSM_Find>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <GSM_Message_Send+0xc2>
		return 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e034      	b.n	8002668 <GSM_Message_Send+0x12c>
	}

	temp[0] = GSM_MSG_SEND;
 80025fe:	f107 0310 	add.w	r3, r7, #16
 8002602:	221a      	movs	r2, #26
 8002604:	701a      	strb	r2, [r3, #0]
	GSM_Send(dataBuf, size);
 8002606:	f107 030b 	add.w	r3, r7, #11
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	4611      	mov	r1, r2
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	f000 f83a 	bl	800268c <GSM_Send>
	GSM_Send(temp, 1);
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	2101      	movs	r1, #1
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f834 	bl	800268c <GSM_Send>


	HAL_UART_Receive(uart, temp, 255, 100);
 8002624:	4b18      	ldr	r3, [pc, #96]	; (8002688 <GSM_Message_Send+0x14c>)
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	f107 0110 	add.w	r1, r7, #16
 800262c:	2364      	movs	r3, #100	; 0x64
 800262e:	22ff      	movs	r2, #255	; 0xff
 8002630:	f004 fff9 	bl	8007626 <HAL_UART_Receive>
	HAL_UART_Receive(uart, temp, 17, 5000);
 8002634:	4b14      	ldr	r3, [pc, #80]	; (8002688 <GSM_Message_Send+0x14c>)
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	f107 0110 	add.w	r1, r7, #16
 800263c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002640:	2211      	movs	r2, #17
 8002642:	f004 fff0 	bl	8007626 <HAL_UART_Receive>
	if(GSM_IsOk(temp, size + 40) == 0){
 8002646:	f107 030b 	add.w	r3, r7, #11
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	3328      	adds	r3, #40	; 0x28
 800264e:	b2da      	uxtb	r2, r3
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fec3 	bl	80023e2 <GSM_IsOk>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <GSM_Message_Send+0x12a>
		return 0;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <GSM_Message_Send+0x12c>
	}

	return 1;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	0800b440 	.word	0x0800b440
 8002678:	0800b44c 	.word	0x0800b44c
 800267c:	0800b458 	.word	0x0800b458
 8002680:	0800b45c 	.word	0x0800b45c
 8002684:	0800b460 	.word	0x0800b460
 8002688:	2000038c 	.word	0x2000038c

0800268c <GSM_Send>:

void GSM_Send(uint8_t *dataBuf, uint8_t size){
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	70fb      	strb	r3, [r7, #3]
	uint8_t temp = GSM_MSG_END;
 8002698:	230d      	movs	r3, #13
 800269a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(uart, dataBuf, size, 50);
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <GSM_Send+0x38>)
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	2332      	movs	r3, #50	; 0x32
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	f004 ff2b 	bl	8007502 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, &temp, 1, 50);
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <GSM_Send+0x38>)
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	f107 010f 	add.w	r1, r7, #15
 80026b4:	2332      	movs	r3, #50	; 0x32
 80026b6:	2201      	movs	r2, #1
 80026b8:	f004 ff23 	bl	8007502 <HAL_UART_Transmit>
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	2000038c 	.word	0x2000038c

080026c8 <GSM_Receive>:

void GSM_Receive(uint8_t *dataBuf, uint8_t size){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Receive(uart, dataBuf, size, 100);
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <GSM_Receive+0x24>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	2364      	movs	r3, #100	; 0x64
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	f004 ffa1 	bl	8007626 <HAL_UART_Receive>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2000038c 	.word	0x2000038c

080026f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b0e2      	sub	sp, #392	; 0x188
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026f6:	f001 fd5d 	bl	80041b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026fa:	f000 fa37 	bl	8002b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026fe:	f000 fd11 	bl	8003124 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002702:	f000 fc71 	bl	8002fe8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002706:	f000 fc99 	bl	800303c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800270a:	f000 fcc1 	bl	8003090 <MX_USART6_UART_Init>
  MX_DMA_Init();
 800270e:	f000 fce9 	bl	80030e4 <MX_DMA_Init>
  MX_SPI1_Init();
 8002712:	f000 fafb 	bl	8002d0c <MX_SPI1_Init>
  MX_TIM2_Init();
 8002716:	f000 fb2f 	bl	8002d78 <MX_TIM2_Init>
  MX_TIM3_Init();
 800271a:	f000 fb7b 	bl	8002e14 <MX_TIM3_Init>
  MX_CRC_Init();
 800271e:	f000 fae1 	bl	8002ce4 <MX_CRC_Init>
  MX_TIM4_Init();
 8002722:	f000 fbc3 	bl	8002eac <MX_TIM4_Init>
  MX_TIM5_Init();
 8002726:	f000 fc0f 	bl	8002f48 <MX_TIM5_Init>
  MX_ADC1_Init();
 800272a:	f000 fa89 	bl	8002c40 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim5);
 800272e:	48be      	ldr	r0, [pc, #760]	; (8002a28 <main+0x338>)
 8002730:	f004 fa76 	bl	8006c20 <HAL_TIM_Base_Start_IT>

  SX1278_hw_t SX1278_hw;
  SX1278_t SX1278;

 //initialize LoRa module
 SX1278_hw.dio0.port = RF_DIO0_GPIO_Port;
 8002734:	4bbd      	ldr	r3, [pc, #756]	; (8002a2c <main+0x33c>)
 8002736:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 SX1278_hw.dio0.pin = RF_DIO0_Pin;
 800273a:	2320      	movs	r3, #32
 800273c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 SX1278_hw.nss.port = RF_NSS_GPIO_Port;
 8002740:	4bbb      	ldr	r3, [pc, #748]	; (8002a30 <main+0x340>)
 8002742:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 SX1278_hw.nss.pin = RF_NSS_Pin;
 8002746:	2310      	movs	r3, #16
 8002748:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 SX1278_hw.reset.port = RF_RST_GPIO_Port;
 800274c:	4bb7      	ldr	r3, [pc, #732]	; (8002a2c <main+0x33c>)
 800274e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 SX1278_hw.reset.pin = RF_RST_Pin;
 8002752:	2340      	movs	r3, #64	; 0x40
 8002754:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 SX1278_hw.spi = &hspi1;
 8002758:	4bb6      	ldr	r3, [pc, #728]	; (8002a34 <main+0x344>)
 800275a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 SX1278.hw = &SX1278_hw;
 800275e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002762:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8002766:	601a      	str	r2, [r3, #0]

 //HAL_UART_Receive_DMA(&huart1, &rxBuf, 1); DOESN"T work for some reason
 HAL_UART_Receive_IT(&huart1, &rxBuf, 1); // Works like a charm, but not as good as DMA
 8002768:	2201      	movs	r2, #1
 800276a:	49b3      	ldr	r1, [pc, #716]	; (8002a38 <main+0x348>)
 800276c:	48b3      	ldr	r0, [pc, #716]	; (8002a3c <main+0x34c>)
 800276e:	f005 f841 	bl	80077f4 <HAL_UART_Receive_IT>
 while(HAL_GPIO_ReadPin(RX_GPIO_Port, RX_Pin) == 0);
 8002772:	bf00      	nop
 8002774:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002778:	48ad      	ldr	r0, [pc, #692]	; (8002a30 <main+0x340>)
 800277a:	f003 f903 	bl	8005984 <HAL_GPIO_ReadPin>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f7      	beq.n	8002774 <main+0x84>
 HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 8002784:	4bae      	ldr	r3, [pc, #696]	; (8002a40 <main+0x350>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	49ad      	ldr	r1, [pc, #692]	; (8002a44 <main+0x354>)
 800278e:	48ae      	ldr	r0, [pc, #696]	; (8002a48 <main+0x358>)
 8002790:	f005 f830 	bl	80077f4 <HAL_UART_Receive_IT>

 //HAL_UART_Receive_IT(&huart2, UART6_RxBuf, 2);

 HAL_GPIO_WritePin(RF_RST_GPIO_Port, RF_RST_Pin, GPIO_PIN_SET); // very important.
 8002794:	2201      	movs	r2, #1
 8002796:	2140      	movs	r1, #64	; 0x40
 8002798:	48a4      	ldr	r0, [pc, #656]	; (8002a2c <main+0x33c>)
 800279a:	f003 f90b 	bl	80059b4 <HAL_GPIO_WritePin>

 SX1278_hw_Reset(&SX1278_hw);
 800279e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fc10 	bl	8000fc8 <SX1278_hw_Reset>
//      SX1278_begin(&SX1278, SX1278_433MHZ, MIN_POWER, SX1278_LORA_SF_8, // air time ~ 495ms
//      SX1278_LORA_BW_20_8KHZ, 10);

  	//uint8_t GSM_STATE = 0;

  	GSM_Off();
 80027a8:	f7ff fea8 	bl	80024fc <GSM_Off>

  	if(GSM_InitUart(&huart2)){ // if failed, then gg
 80027ac:	48a7      	ldr	r0, [pc, #668]	; (8002a4c <main+0x35c>)
 80027ae:	f7ff fdd5 	bl	800235c <GSM_InitUart>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <main+0xcc>
  		return 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e1b7      	b.n	8002b2c <main+0x43c>
  	}

	MODE_Set(&SX1278, mode);
 80027bc:	4ba4      	ldr	r3, [pc, #656]	; (8002a50 <main+0x360>)
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027c4:	4611      	mov	r1, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fe72 	bl	80034b0 <MODE_Set>
	if(mode == 0){
 80027cc:	4ba0      	ldr	r3, [pc, #640]	; (8002a50 <main+0x360>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10c      	bne.n	80027ee <main+0xfe>
		ret = SX1278_LoRaEntryRx(&SX1278, MIN_PACKETLENGTH, 2000);
 80027d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80027dc:	2108      	movs	r1, #8
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe ff14 	bl	800160c <SX1278_LoRaEntryRx>
 80027e4:	4603      	mov	r3, r0
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b9a      	ldr	r3, [pc, #616]	; (8002a54 <main+0x364>)
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	e009      	b.n	8002802 <main+0x112>
	}else{
		ret = SX1278_FSK_EntryRx(&SX1278, 8);
 80027ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80027f2:	2108      	movs	r1, #8
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fea5 	bl	8001544 <SX1278_FSK_EntryRx>
 80027fa:	4603      	mov	r3, r0
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4b95      	ldr	r3, [pc, #596]	; (8002a54 <main+0x364>)
 8002800:	701a      	strb	r2, [r3, #0]
	 //HAL_UART_Receive_DMA(&huart6, &cmd_rx_buffer, cmd_rx_buffer_size);
	//	uint8_t check_sum;
	//	uint8_t check_sum_arr[4] = {0, 0, 0, 0};

	uint8_t gsm_dataBuf[80];
	memset(tel_dataBuf, 0, sizeof(tel_dataBuf));
 8002802:	226e      	movs	r2, #110	; 0x6e
 8002804:	2100      	movs	r1, #0
 8002806:	4894      	ldr	r0, [pc, #592]	; (8002a58 <main+0x368>)
 8002808:	f005 ff0a 	bl	8008620 <memset>

	//HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);
	while(GPS_IsData() == GPS_NOK);
 800280c:	bf00      	nop
 800280e:	f7ff fd91 	bl	8002334 <GPS_IsData>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0fa      	beq.n	800280e <main+0x11e>
//	uint8_t date[2];
	uint8_t time[9];
//	GPS_GetYear(year);
//	GPS_GetMonth(month);
//	GPS_GetDate(date);
	GPS_GetTime(time);
 8002818:	463b      	mov	r3, r7
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fd4e 	bl	80022bc <GPS_GetTime>
	UART6_TxBuf[0] = 0x02;
 8002820:	4b8e      	ldr	r3, [pc, #568]	; (8002a5c <main+0x36c>)
 8002822:	2202      	movs	r2, #2
 8002824:	701a      	strb	r2, [r3, #0]
	UART6_TxBuf[1] = 5;
 8002826:	4b8d      	ldr	r3, [pc, #564]	; (8002a5c <main+0x36c>)
 8002828:	2205      	movs	r2, #5
 800282a:	705a      	strb	r2, [r3, #1]
	UART6_TxBuf[2] = '*';
 800282c:	4b8b      	ldr	r3, [pc, #556]	; (8002a5c <main+0x36c>)
 800282e:	222a      	movs	r2, #42	; 0x2a
 8002830:	709a      	strb	r2, [r3, #2]
	UART6_TxBuf[3] = get_check_sum((char *)UART6_TxBuf);
 8002832:	488a      	ldr	r0, [pc, #552]	; (8002a5c <main+0x36c>)
 8002834:	f000 ff19 	bl	800366a <get_check_sum>
 8002838:	4603      	mov	r3, r0
 800283a:	461a      	mov	r2, r3
 800283c:	4b87      	ldr	r3, [pc, #540]	; (8002a5c <main+0x36c>)
 800283e:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 4);
 8002840:	2204      	movs	r2, #4
 8002842:	4986      	ldr	r1, [pc, #536]	; (8002a5c <main+0x36c>)
 8002844:	4880      	ldr	r0, [pc, #512]	; (8002a48 <main+0x358>)
 8002846:	f004 ff90 	bl	800776a <HAL_UART_Transmit_IT>
	memset(UART6_TxBuf, 0, sizeof(UART6_TxBuf));
 800284a:	2232      	movs	r2, #50	; 0x32
 800284c:	2100      	movs	r1, #0
 800284e:	4883      	ldr	r0, [pc, #524]	; (8002a5c <main+0x36c>)
 8002850:	f005 fee6 	bl	8008620 <memset>
	UART6_TxBuf[0] = charToInt((char *)&(time[6]));
 8002854:	463b      	mov	r3, r7
 8002856:	3306      	adds	r3, #6
 8002858:	4618      	mov	r0, r3
 800285a:	f001 f8b1 	bl	80039c0 <charToInt>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	4b7e      	ldr	r3, [pc, #504]	; (8002a5c <main+0x36c>)
 8002864:	701a      	strb	r2, [r3, #0]
	UART6_TxBuf[1] = charToInt((char *)&(time[3]));
 8002866:	463b      	mov	r3, r7
 8002868:	3303      	adds	r3, #3
 800286a:	4618      	mov	r0, r3
 800286c:	f001 f8a8 	bl	80039c0 <charToInt>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	4b79      	ldr	r3, [pc, #484]	; (8002a5c <main+0x36c>)
 8002876:	705a      	strb	r2, [r3, #1]
	UART6_TxBuf[2] = charToInt((char *)&(time[0]));
 8002878:	463b      	mov	r3, r7
 800287a:	4618      	mov	r0, r3
 800287c:	f001 f8a0 	bl	80039c0 <charToInt>
 8002880:	4603      	mov	r3, r0
 8002882:	461a      	mov	r2, r3
 8002884:	4b75      	ldr	r3, [pc, #468]	; (8002a5c <main+0x36c>)
 8002886:	709a      	strb	r2, [r3, #2]
	UART6_TxBuf[3] = '*';
 8002888:	4b74      	ldr	r3, [pc, #464]	; (8002a5c <main+0x36c>)
 800288a:	222a      	movs	r2, #42	; 0x2a
 800288c:	70da      	strb	r2, [r3, #3]
	UART6_TxBuf[4] = get_check_sum((char *)UART6_TxBuf);
 800288e:	4873      	ldr	r0, [pc, #460]	; (8002a5c <main+0x36c>)
 8002890:	f000 feeb 	bl	800366a <get_check_sum>
 8002894:	4603      	mov	r3, r0
 8002896:	461a      	mov	r2, r3
 8002898:	4b70      	ldr	r3, [pc, #448]	; (8002a5c <main+0x36c>)
 800289a:	711a      	strb	r2, [r3, #4]
	//snprintf(UART6_TxBuf, sizeof(UART6_TxBuf), "*%s%s%s", charToInt(&(time[6])), charToInt(&(time[3])), charToInt(&(time[0]))/*, charToInt(date), charToInt(month), charToInt(year)*/);
	//snprintf(UART6_TxBuf + strlen((char *) UART6_TxBuf), sizeof(UART6_TxBuf) - strlen((char *) UART6_TxBuf), "*%s", get_check_sum(UART6_TxBuf));
	HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, strlen((char *)UART6_TxBuf));
 800289c:	486f      	ldr	r0, [pc, #444]	; (8002a5c <main+0x36c>)
 800289e:	f7fd fca9 	bl	80001f4 <strlen>
 80028a2:	4603      	mov	r3, r0
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	496c      	ldr	r1, [pc, #432]	; (8002a5c <main+0x36c>)
 80028aa:	4867      	ldr	r0, [pc, #412]	; (8002a48 <main+0x358>)
 80028ac:	f004 ff5d 	bl	800776a <HAL_UART_Transmit_IT>
	memset(UART6_TxBuf, 0, sizeof(UART6_TxBuf));
 80028b0:	2232      	movs	r2, #50	; 0x32
 80028b2:	2100      	movs	r1, #0
 80028b4:	4869      	ldr	r0, [pc, #420]	; (8002a5c <main+0x36c>)
 80028b6:	f005 feb3 	bl	8008620 <memset>
	UART6_TxBuf[0] = 0x42;
 80028ba:	4b68      	ldr	r3, [pc, #416]	; (8002a5c <main+0x36c>)
 80028bc:	2242      	movs	r2, #66	; 0x42
 80028be:	701a      	strb	r2, [r3, #0]
	UART6_TxBuf[1] = 0x88;
 80028c0:	4b66      	ldr	r3, [pc, #408]	; (8002a5c <main+0x36c>)
 80028c2:	2288      	movs	r2, #136	; 0x88
 80028c4:	705a      	strb	r2, [r3, #1]
	UART6_TxBuf[2] = '*';
 80028c6:	4b65      	ldr	r3, [pc, #404]	; (8002a5c <main+0x36c>)
 80028c8:	222a      	movs	r2, #42	; 0x2a
 80028ca:	709a      	strb	r2, [r3, #2]
	UART6_TxBuf[3] = get_check_sum((char *)UART6_TxBuf);
 80028cc:	4863      	ldr	r0, [pc, #396]	; (8002a5c <main+0x36c>)
 80028ce:	f000 fecc 	bl	800366a <get_check_sum>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b61      	ldr	r3, [pc, #388]	; (8002a5c <main+0x36c>)
 80028d8:	70da      	strb	r2, [r3, #3]
	//HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, strlen((char *)UART6_TxBuf));
	memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 80028da:	2232      	movs	r2, #50	; 0x32
 80028dc:	2100      	movs	r1, #0
 80028de:	4859      	ldr	r0, [pc, #356]	; (8002a44 <main+0x354>)
 80028e0:	f005 fe9e 	bl	8008620 <memset>
	HAL_ADC_MspInit(&hadc1);
 80028e4:	485e      	ldr	r0, [pc, #376]	; (8002a60 <main+0x370>)
 80028e6:	f001 f8c9 	bl	8003a7c <HAL_ADC_MspInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(gsmRec){
 80028ea:	4b5e      	ldr	r3, [pc, #376]	; (8002a64 <main+0x374>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01f      	beq.n	8002932 <main+0x242>
		//HAL_GPIO_ReadPin(GSM_GPIO1INT_GPIO_Port, GSM_GPIO1INT_Pin) < parbauda vai GSM ir gatavs rukat
		make_string_gsm((char *)gsm_dataBuf, sizeof(gsm_dataBuf));
 80028f2:	f107 030c 	add.w	r3, r7, #12
 80028f6:	2150      	movs	r1, #80	; 0x50
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 ff93 	bl	8003824 <make_string_gsm>
		if(GSM_Check_Signal()){
 80028fe:	f7ff fd45 	bl	800238c <GSM_Check_Signal>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00c      	beq.n	8002922 <main+0x232>
			GSM_Message_Send(gsm_dataBuf, strlen((char *)gsm_dataBuf), 28654641);
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fc71 	bl	80001f4 <strlen>
 8002912:	4603      	mov	r3, r0
 8002914:	b2d9      	uxtb	r1, r3
 8002916:	f107 030c 	add.w	r3, r7, #12
 800291a:	4a53      	ldr	r2, [pc, #332]	; (8002a68 <main+0x378>)
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fe0d 	bl	800253c <GSM_Message_Send>
		}

		GSM_Off();
 8002922:	f7ff fdeb 	bl	80024fc <GSM_Off>

		gsmRec = 0;
 8002926:	4b4f      	ldr	r3, [pc, #316]	; (8002a64 <main+0x374>)
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim5);
 800292c:	483e      	ldr	r0, [pc, #248]	; (8002a28 <main+0x338>)
 800292e:	f004 f977 	bl	8006c20 <HAL_TIM_Base_Start_IT>
	}
	if(do_send_tm){ // its time to send gps coordinates
 8002932:	4b4e      	ldr	r3, [pc, #312]	; (8002a6c <main+0x37c>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d058      	beq.n	80029ec <main+0x2fc>
		 for(uint8_t tries = 0; tries < 5; tries++){
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8002940:	e047      	b.n	80029d2 <main+0x2e2>
			 UART6_RxIsData = 0;
 8002942:	4b4b      	ldr	r3, [pc, #300]	; (8002a70 <main+0x380>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
			 UART6_RxBytes = 4;
 8002948:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <main+0x350>)
 800294a:	2204      	movs	r2, #4
 800294c:	701a      	strb	r2, [r3, #0]
			 memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 800294e:	2232      	movs	r2, #50	; 0x32
 8002950:	2100      	movs	r1, #0
 8002952:	483c      	ldr	r0, [pc, #240]	; (8002a44 <main+0x354>)
 8002954:	f005 fe64 	bl	8008620 <memset>
			 HAL_UART_Receive_IT(&huart2, UART6_RxBuf, 4);
 8002958:	2204      	movs	r2, #4
 800295a:	493a      	ldr	r1, [pc, #232]	; (8002a44 <main+0x354>)
 800295c:	483b      	ldr	r0, [pc, #236]	; (8002a4c <main+0x35c>)
 800295e:	f004 ff49 	bl	80077f4 <HAL_UART_Receive_IT>
			 memset(UART6_TxBuf, 0, sizeof(UART6_TxBuf));
 8002962:	2232      	movs	r2, #50	; 0x32
 8002964:	2100      	movs	r1, #0
 8002966:	483d      	ldr	r0, [pc, #244]	; (8002a5c <main+0x36c>)
 8002968:	f005 fe5a 	bl	8008620 <memset>
			 UART6_TxBuf[0] = 0x03;
 800296c:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <main+0x36c>)
 800296e:	2203      	movs	r2, #3
 8002970:	701a      	strb	r2, [r3, #0]
			 UART6_TxBuf[1] = 0x99;
 8002972:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <main+0x36c>)
 8002974:	2299      	movs	r2, #153	; 0x99
 8002976:	705a      	strb	r2, [r3, #1]
			 UART6_TxBuf[2] = '*';
 8002978:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <main+0x36c>)
 800297a:	222a      	movs	r2, #42	; 0x2a
 800297c:	709a      	strb	r2, [r3, #2]
			 UART6_TxBuf[3] = crc_xor((char *)UART6_TxBuf);
 800297e:	4837      	ldr	r0, [pc, #220]	; (8002a5c <main+0x36c>)
 8002980:	f000 fe92 	bl	80036a8 <crc_xor>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <main+0x36c>)
 800298a:	70da      	strb	r2, [r3, #3]
			 HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 4);
 800298c:	2204      	movs	r2, #4
 800298e:	4933      	ldr	r1, [pc, #204]	; (8002a5c <main+0x36c>)
 8002990:	482d      	ldr	r0, [pc, #180]	; (8002a48 <main+0x358>)
 8002992:	f004 feea 	bl	800776a <HAL_UART_Transmit_IT>
			 //snprintf(UART6_TxBuf + strlen((char *) UART6_TxBuf), sizeof(UART6_TxBuf) - strlen((char *) UART6_TxBuf), "*%d", crc_xor(UART6_TxBuf));
			 HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8002996:	2201      	movs	r2, #1
 8002998:	2101      	movs	r1, #1
 800299a:	4824      	ldr	r0, [pc, #144]	; (8002a2c <main+0x33c>)
 800299c:	f003 f80a 	bl	80059b4 <HAL_GPIO_WritePin>
			 make_string((char *)tel_dataBuf, sizeof(tel_dataBuf));
 80029a0:	216e      	movs	r1, #110	; 0x6e
 80029a2:	482d      	ldr	r0, [pc, #180]	; (8002a58 <main+0x368>)
 80029a4:	f000 fea6 	bl	80036f4 <make_string>
			 RTTY_Send(&SX1278, tel_dataBuf, strlen((char *)tel_dataBuf));
 80029a8:	482b      	ldr	r0, [pc, #172]	; (8002a58 <main+0x368>)
 80029aa:	f7fd fc23 	bl	80001f4 <strlen>
 80029ae:	4603      	mov	r3, r0
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029b6:	4928      	ldr	r1, [pc, #160]	; (8002a58 <main+0x368>)
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fdf5 	bl	80035a8 <RTTY_Send>
			 HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80029be:	2200      	movs	r2, #0
 80029c0:	2101      	movs	r1, #1
 80029c2:	481a      	ldr	r0, [pc, #104]	; (8002a2c <main+0x33c>)
 80029c4:	f002 fff6 	bl	80059b4 <HAL_GPIO_WritePin>
		 for(uint8_t tries = 0; tries < 5; tries++){
 80029c8:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80029cc:	3301      	adds	r3, #1
 80029ce:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80029d2:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d9b3      	bls.n	8002942 <main+0x252>
		 }
		 do_send_tm = 0;
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <main+0x37c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
		 receive_data = 1;
 80029e0:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <main+0x384>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Start_IT(&htim2);
 80029e6:	4824      	ldr	r0, [pc, #144]	; (8002a78 <main+0x388>)
 80029e8:	f004 f91a 	bl	8006c20 <HAL_TIM_Base_Start_IT>
	}
	if(receive_data){
 80029ec:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <main+0x384>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f43f af7a 	beq.w	80028ea <main+0x1fa>
		if(sec_gps == 0){
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <main+0x38c>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d142      	bne.n	8002a84 <main+0x394>
			SX1278_FSK_TxPacket(&SX1278, ready_to_receive, 8, 100);
 80029fe:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002a02:	2364      	movs	r3, #100	; 0x64
 8002a04:	2208      	movs	r2, #8
 8002a06:	491e      	ldr	r1, [pc, #120]	; (8002a80 <main+0x390>)
 8002a08:	f7fe fe66 	bl	80016d8 <SX1278_FSK_TxPacket>
			SX1278_FSK_EntryRx(&SX1278, 8);
 8002a0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a10:	2108      	movs	r1, #8
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fd96 	bl	8001544 <SX1278_FSK_EntryRx>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a1e:	4803      	ldr	r0, [pc, #12]	; (8002a2c <main+0x33c>)
 8002a20:	f002 ffc8 	bl	80059b4 <HAL_GPIO_WritePin>
 8002a24:	e04b      	b.n	8002abe <main+0x3ce>
 8002a26:	bf00      	nop
 8002a28:	200003e0 	.word	0x200003e0
 8002a2c:	40020400 	.word	0x40020400
 8002a30:	40020000 	.word	0x40020000
 8002a34:	200006dc 	.word	0x200006dc
 8002a38:	20000588 	.word	0x20000588
 8002a3c:	2000058c 	.word	0x2000058c
 8002a40:	20000026 	.word	0x20000026
 8002a44:	200002fc 	.word	0x200002fc
 8002a48:	20000634 	.word	0x20000634
 8002a4c:	2000077c 	.word	0x2000077c
 8002a50:	20000024 	.word	0x20000024
 8002a54:	2000027c 	.word	0x2000027c
 8002a58:	20000470 	.word	0x20000470
 8002a5c:	20000294 	.word	0x20000294
 8002a60:	200004e0 	.word	0x200004e0
 8002a64:	20000290 	.word	0x20000290
 8002a68:	01b53c31 	.word	0x01b53c31
 8002a6c:	20000025 	.word	0x20000025
 8002a70:	20000293 	.word	0x20000293
 8002a74:	20000291 	.word	0x20000291
 8002a78:	20000734 	.word	0x20000734
 8002a7c:	20000292 	.word	0x20000292
 8002a80:	20000004 	.word	0x20000004
		}else if(sec_gps >= 5){
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <main+0x448>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d918      	bls.n	8002abe <main+0x3ce>
			do_send_tm = 1;		// should send TM data
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <main+0x44c>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
			receive_data = 0;
 8002a92:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <main+0x450>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
			sec_gps = 0;
 8002a98:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <main+0x448>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aa4:	4827      	ldr	r0, [pc, #156]	; (8002b44 <main+0x454>)
 8002aa6:	f002 ff85 	bl	80059b4 <HAL_GPIO_WritePin>
			SX1278_FSK_TxPacket(&SX1278, not_to_receive, 8, 100);
 8002aaa:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002aae:	2364      	movs	r3, #100	; 0x64
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	4925      	ldr	r1, [pc, #148]	; (8002b48 <main+0x458>)
 8002ab4:	f7fe fe10 	bl	80016d8 <SX1278_FSK_TxPacket>
			HAL_TIM_Base_Stop_IT(&htim2);
 8002ab8:	4824      	ldr	r0, [pc, #144]	; (8002b4c <main+0x45c>)
 8002aba:	f004 f913 	bl	8006ce4 <HAL_TIM_Base_Stop_IT>
		}
		if(loraModuleIrq){
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <main+0x460>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f43f af11 	beq.w	80028ea <main+0x1fa>
			SX1278_FSK_RxPacket(&SX1278, loraBuf, 8, 1000);
 8002ac8:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	4920      	ldr	r1, [pc, #128]	; (8002b54 <main+0x464>)
 8002ad4:	f7fe fe50 	bl	8001778 <SX1278_FSK_RxPacket>
			if(strcmp((char *)loraBuf, "cutropeN") == 0){
 8002ad8:	491f      	ldr	r1, [pc, #124]	; (8002b58 <main+0x468>)
 8002ada:	481e      	ldr	r0, [pc, #120]	; (8002b54 <main+0x464>)
 8002adc:	f7fd fb80 	bl	80001e0 <strcmp>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d117      	bne.n	8002b16 <main+0x426>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2104      	movs	r1, #4
 8002aea:	4816      	ldr	r0, [pc, #88]	; (8002b44 <main+0x454>)
 8002aec:	f002 ff62 	bl	80059b4 <HAL_GPIO_WritePin>

				// SENDING COMMAND TO MCU TO CUT THE ROPE
				UART6_TxBuf[0] = 0x4f;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <main+0x46c>)
 8002af2:	224f      	movs	r2, #79	; 0x4f
 8002af4:	701a      	strb	r2, [r3, #0]
				UART6_TxBuf[1] = 0xcc;
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <main+0x46c>)
 8002af8:	22cc      	movs	r2, #204	; 0xcc
 8002afa:	705a      	strb	r2, [r3, #1]
				HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);
 8002afc:	2202      	movs	r2, #2
 8002afe:	4917      	ldr	r1, [pc, #92]	; (8002b5c <main+0x46c>)
 8002b00:	4817      	ldr	r0, [pc, #92]	; (8002b60 <main+0x470>)
 8002b02:	f004 fe32 	bl	800776a <HAL_UART_Transmit_IT>
				// SENDING COMMAND TO MCU TO CUT THE ROPE

				SX1278_FSK_TxPacket(&SX1278, ok_ack_message, 8, 100);
 8002b06:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002b0a:	2364      	movs	r3, #100	; 0x64
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	4915      	ldr	r1, [pc, #84]	; (8002b64 <main+0x474>)
 8002b10:	f7fe fde2 	bl	80016d8 <SX1278_FSK_TxPacket>
 8002b14:	e006      	b.n	8002b24 <main+0x434>
			}else{
				SX1278_FSK_TxPacket(&SX1278, nok_ack_message, 8, 100);
 8002b16:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002b1a:	2364      	movs	r3, #100	; 0x64
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	4912      	ldr	r1, [pc, #72]	; (8002b68 <main+0x478>)
 8002b20:	f7fe fdda 	bl	80016d8 <SX1278_FSK_TxPacket>
			}
			loraModuleIrq = 0;
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <main+0x460>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
	if(gsmRec){
 8002b2a:	e6de      	b.n	80028ea <main+0x1fa>
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000292 	.word	0x20000292
 8002b3c:	20000025 	.word	0x20000025
 8002b40:	20000291 	.word	0x20000291
 8002b44:	40020400 	.word	0x40020400
 8002b48:	2000000c 	.word	0x2000000c
 8002b4c:	20000734 	.word	0x20000734
 8002b50:	2000028a 	.word	0x2000028a
 8002b54:	20000280 	.word	0x20000280
 8002b58:	0800b464 	.word	0x0800b464
 8002b5c:	20000294 	.word	0x20000294
 8002b60:	20000634 	.word	0x20000634
 8002b64:	20000014 	.word	0x20000014
 8002b68:	2000001c 	.word	0x2000001c

08002b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b094      	sub	sp, #80	; 0x50
 8002b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b72:	f107 0320 	add.w	r3, r7, #32
 8002b76:	2230      	movs	r2, #48	; 0x30
 8002b78:	2100      	movs	r1, #0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f005 fd50 	bl	8008620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <SystemClock_Config+0xcc>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	4a27      	ldr	r2, [pc, #156]	; (8002c38 <SystemClock_Config+0xcc>)
 8002b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <SystemClock_Config+0xcc>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bac:	2300      	movs	r3, #0
 8002bae:	607b      	str	r3, [r7, #4]
 8002bb0:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <SystemClock_Config+0xd0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002bb8:	4a20      	ldr	r2, [pc, #128]	; (8002c3c <SystemClock_Config+0xd0>)
 8002bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <SystemClock_Config+0xd0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002be0:	2304      	movs	r3, #4
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002be4:	2354      	movs	r3, #84	; 0x54
 8002be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002be8:	2302      	movs	r3, #2
 8002bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bec:	2304      	movs	r3, #4
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bf0:	f107 0320 	add.w	r3, r7, #32
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f002 ff0f 	bl	8005a18 <HAL_RCC_OscConfig>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002c00:	f000 ff0f 	bl	8003a22 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c04:	230f      	movs	r3, #15
 8002c06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c1a:	f107 030c 	add.w	r3, r7, #12
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 f971 	bl	8005f08 <HAL_RCC_ClockConfig>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002c2c:	f000 fef9 	bl	8003a22 <Error_Handler>
  }
}
 8002c30:	bf00      	nop
 8002c32:	3750      	adds	r7, #80	; 0x50
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40007000 	.word	0x40007000

08002c40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c46:	463b      	mov	r3, r7
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002c54:	4a21      	ldr	r2, [pc, #132]	; (8002cdc <MX_ADC1_Init+0x9c>)
 8002c56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c58:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002c5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002c66:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002c82:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <MX_ADC1_Init+0xa0>)
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ca0:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002ca2:	f001 fb1d 	bl	80042e0 <HAL_ADC_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002cac:	f000 feb9 	bl	8003a22 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002cb0:	2310      	movs	r3, #16
 8002cb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <MX_ADC1_Init+0x98>)
 8002cc2:	f001 fdfd 	bl	80048c0 <HAL_ADC_ConfigChannel>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ccc:	f000 fea9 	bl	8003a22 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cd0:	bf00      	nop
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	200004e0 	.word	0x200004e0
 8002cdc:	40012000 	.word	0x40012000
 8002ce0:	0f000001 	.word	0x0f000001

08002ce4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_CRC_Init+0x20>)
 8002cea:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <MX_CRC_Init+0x24>)
 8002cec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002cee:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_CRC_Init+0x20>)
 8002cf0:	f002 f92b 	bl	8004f4a <HAL_CRC_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002cfa:	f000 fe92 	bl	8003a22 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200003d8 	.word	0x200003d8
 8002d08:	40023000 	.word	0x40023000

08002d0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d12:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <MX_SPI1_Init+0x68>)
 8002d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d16:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d1e:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d40:	2220      	movs	r2, #32
 8002d42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d58:	220a      	movs	r2, #10
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d5c:	4804      	ldr	r0, [pc, #16]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d5e:	f003 facf 	bl	8006300 <HAL_SPI_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d68:	f000 fe5b 	bl	8003a22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200006dc 	.word	0x200006dc
 8002d74:	40013000 	.word	0x40013000

08002d78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d7e:	f107 0308 	add.w	r3, r7, #8
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d94:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002d96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8002d9c:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002d9e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002da2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2625;
 8002daa:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002dac:	f640 2241 	movw	r2, #2625	; 0xa41
 8002db0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dbe:	4814      	ldr	r0, [pc, #80]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002dc0:	f003 fede 	bl	8006b80 <HAL_TIM_Base_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002dca:	f000 fe2a 	bl	8003a22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dd4:	f107 0308 	add.w	r3, r7, #8
 8002dd8:	4619      	mov	r1, r3
 8002dda:	480d      	ldr	r0, [pc, #52]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002ddc:	f004 f8b9 	bl	8006f52 <HAL_TIM_ConfigClockSource>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002de6:	f000 fe1c 	bl	8003a22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002df2:	463b      	mov	r3, r7
 8002df4:	4619      	mov	r1, r3
 8002df6:	4806      	ldr	r0, [pc, #24]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002df8:	f004 fab4 	bl	8007364 <HAL_TIMEx_MasterConfigSynchronization>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e02:	f000 fe0e 	bl	8003a22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000734 	.word	0x20000734

08002e14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e1a:	f107 0308 	add.w	r3, r7, #8
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e28:	463b      	mov	r3, r7
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e30:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <MX_TIM3_Init+0x90>)
 8002e32:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8002e36:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <MX_TIM3_Init+0x90>)
 8002e38:	2254      	movs	r2, #84	; 0x54
 8002e3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <MX_TIM3_Init+0x90>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <MX_TIM3_Init+0x90>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <MX_TIM3_Init+0x90>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <MX_TIM3_Init+0x90>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e54:	4813      	ldr	r0, [pc, #76]	; (8002ea4 <MX_TIM3_Init+0x90>)
 8002e56:	f003 fe93 	bl	8006b80 <HAL_TIM_Base_Init>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002e60:	f000 fddf 	bl	8003a22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e6a:	f107 0308 	add.w	r3, r7, #8
 8002e6e:	4619      	mov	r1, r3
 8002e70:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <MX_TIM3_Init+0x90>)
 8002e72:	f004 f86e 	bl	8006f52 <HAL_TIM_ConfigClockSource>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002e7c:	f000 fdd1 	bl	8003a22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e80:	2300      	movs	r3, #0
 8002e82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e88:	463b      	mov	r3, r7
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4805      	ldr	r0, [pc, #20]	; (8002ea4 <MX_TIM3_Init+0x90>)
 8002e8e:	f004 fa69 	bl	8007364 <HAL_TIMEx_MasterConfigSynchronization>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002e98:	f000 fdc3 	bl	8003a22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e9c:	bf00      	nop
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000428 	.word	0x20000428
 8002ea8:	40000400 	.word	0x40000400

08002eac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <MX_TIM4_Init+0x94>)
 8002eca:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <MX_TIM4_Init+0x98>)
 8002ecc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000;
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <MX_TIM4_Init+0x94>)
 8002ed0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002ed4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <MX_TIM4_Init+0x94>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7875;
 8002edc:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <MX_TIM4_Init+0x94>)
 8002ede:	f641 62c3 	movw	r2, #7875	; 0x1ec3
 8002ee2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <MX_TIM4_Init+0x94>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <MX_TIM4_Init+0x94>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ef0:	4813      	ldr	r0, [pc, #76]	; (8002f40 <MX_TIM4_Init+0x94>)
 8002ef2:	f003 fe45 	bl	8006b80 <HAL_TIM_Base_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002efc:	f000 fd91 	bl	8003a22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f06:	f107 0308 	add.w	r3, r7, #8
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	480c      	ldr	r0, [pc, #48]	; (8002f40 <MX_TIM4_Init+0x94>)
 8002f0e:	f004 f820 	bl	8006f52 <HAL_TIM_ConfigClockSource>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002f18:	f000 fd83 	bl	8003a22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f24:	463b      	mov	r3, r7
 8002f26:	4619      	mov	r1, r3
 8002f28:	4805      	ldr	r0, [pc, #20]	; (8002f40 <MX_TIM4_Init+0x94>)
 8002f2a:	f004 fa1b 	bl	8007364 <HAL_TIMEx_MasterConfigSynchronization>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002f34:	f000 fd75 	bl	8003a22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f38:	bf00      	nop
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000390 	.word	0x20000390
 8002f44:	40000800 	.word	0x40000800

08002f48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f4e:	f107 0308 	add.w	r3, r7, #8
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	605a      	str	r2, [r3, #4]
 8002f58:	609a      	str	r2, [r3, #8]
 8002f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f5c:	463b      	mov	r3, r7
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f64:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <MX_TIM5_Init+0x94>)
 8002f66:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <MX_TIM5_Init+0x98>)
 8002f68:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <MX_TIM5_Init+0x94>)
 8002f6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f70:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f72:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <MX_TIM5_Init+0x94>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 384300;
 8002f78:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <MX_TIM5_Init+0x94>)
 8002f7a:	4a1a      	ldr	r2, [pc, #104]	; (8002fe4 <MX_TIM5_Init+0x9c>)
 8002f7c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f7e:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <MX_TIM5_Init+0x94>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f84:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <MX_TIM5_Init+0x94>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f8a:	4814      	ldr	r0, [pc, #80]	; (8002fdc <MX_TIM5_Init+0x94>)
 8002f8c:	f003 fdf8 	bl	8006b80 <HAL_TIM_Base_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002f96:	f000 fd44 	bl	8003a22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002fa0:	f107 0308 	add.w	r3, r7, #8
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	480d      	ldr	r0, [pc, #52]	; (8002fdc <MX_TIM5_Init+0x94>)
 8002fa8:	f003 ffd3 	bl	8006f52 <HAL_TIM_ConfigClockSource>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002fb2:	f000 fd36 	bl	8003a22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fbe:	463b      	mov	r3, r7
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4806      	ldr	r0, [pc, #24]	; (8002fdc <MX_TIM5_Init+0x94>)
 8002fc4:	f004 f9ce 	bl	8007364 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002fce:	f000 fd28 	bl	8003a22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002fd2:	bf00      	nop
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200003e0 	.word	0x200003e0
 8002fe0:	40000c00 	.word	0x40000c00
 8002fe4:	0005dd2c 	.word	0x0005dd2c

08002fe8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <MX_USART1_UART_Init+0x4c>)
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <MX_USART1_UART_Init+0x50>)
 8002ff0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <MX_USART1_UART_Init+0x4c>)
 8002ff4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ff8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <MX_USART1_UART_Init+0x4c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <MX_USART1_UART_Init+0x4c>)
 8003002:	2200      	movs	r2, #0
 8003004:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <MX_USART1_UART_Init+0x4c>)
 8003008:	2200      	movs	r2, #0
 800300a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800300c:	4b09      	ldr	r3, [pc, #36]	; (8003034 <MX_USART1_UART_Init+0x4c>)
 800300e:	220c      	movs	r2, #12
 8003010:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <MX_USART1_UART_Init+0x4c>)
 8003014:	2200      	movs	r2, #0
 8003016:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <MX_USART1_UART_Init+0x4c>)
 800301a:	2200      	movs	r2, #0
 800301c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800301e:	4805      	ldr	r0, [pc, #20]	; (8003034 <MX_USART1_UART_Init+0x4c>)
 8003020:	f004 fa22 	bl	8007468 <HAL_UART_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800302a:	f000 fcfa 	bl	8003a22 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2000058c 	.word	0x2000058c
 8003038:	40011000 	.word	0x40011000

0800303c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <MX_USART2_UART_Init+0x4c>)
 8003042:	4a12      	ldr	r2, [pc, #72]	; (800308c <MX_USART2_UART_Init+0x50>)
 8003044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <MX_USART2_UART_Init+0x4c>)
 8003048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800304c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800304e:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <MX_USART2_UART_Init+0x4c>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <MX_USART2_UART_Init+0x4c>)
 8003056:	2200      	movs	r2, #0
 8003058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <MX_USART2_UART_Init+0x4c>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <MX_USART2_UART_Init+0x4c>)
 8003062:	220c      	movs	r2, #12
 8003064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <MX_USART2_UART_Init+0x4c>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <MX_USART2_UART_Init+0x4c>)
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003072:	4805      	ldr	r0, [pc, #20]	; (8003088 <MX_USART2_UART_Init+0x4c>)
 8003074:	f004 f9f8 	bl	8007468 <HAL_UART_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800307e:	f000 fcd0 	bl	8003a22 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	2000077c 	.word	0x2000077c
 800308c:	40004400 	.word	0x40004400

08003090 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <MX_USART6_UART_Init+0x4c>)
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <MX_USART6_UART_Init+0x50>)
 8003098:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <MX_USART6_UART_Init+0x4c>)
 800309c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80030a2:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <MX_USART6_UART_Init+0x4c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <MX_USART6_UART_Init+0x4c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <MX_USART6_UART_Init+0x4c>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <MX_USART6_UART_Init+0x4c>)
 80030b6:	220c      	movs	r2, #12
 80030b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <MX_USART6_UART_Init+0x4c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <MX_USART6_UART_Init+0x4c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80030c6:	4805      	ldr	r0, [pc, #20]	; (80030dc <MX_USART6_UART_Init+0x4c>)
 80030c8:	f004 f9ce 	bl	8007468 <HAL_UART_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80030d2:	f000 fca6 	bl	8003a22 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000634 	.word	0x20000634
 80030e0:	40011400 	.word	0x40011400

080030e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <MX_DMA_Init+0x3c>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <MX_DMA_Init+0x3c>)
 80030f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030f8:	6313      	str	r3, [r2, #48]	; 0x30
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <MX_DMA_Init+0x3c>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003106:	2200      	movs	r2, #0
 8003108:	2100      	movs	r1, #0
 800310a:	203a      	movs	r0, #58	; 0x3a
 800310c:	f001 fee7 	bl	8004ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003110:	203a      	movs	r0, #58	; 0x3a
 8003112:	f001 ff00 	bl	8004f16 <HAL_NVIC_EnableIRQ>

}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800

08003124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	60da      	str	r2, [r3, #12]
 8003138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	4b5d      	ldr	r3, [pc, #372]	; (80032b4 <MX_GPIO_Init+0x190>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a5c      	ldr	r2, [pc, #368]	; (80032b4 <MX_GPIO_Init+0x190>)
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b5a      	ldr	r3, [pc, #360]	; (80032b4 <MX_GPIO_Init+0x190>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	4b56      	ldr	r3, [pc, #344]	; (80032b4 <MX_GPIO_Init+0x190>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a55      	ldr	r2, [pc, #340]	; (80032b4 <MX_GPIO_Init+0x190>)
 8003160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <MX_GPIO_Init+0x190>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	4b4f      	ldr	r3, [pc, #316]	; (80032b4 <MX_GPIO_Init+0x190>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	4a4e      	ldr	r2, [pc, #312]	; (80032b4 <MX_GPIO_Init+0x190>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6313      	str	r3, [r2, #48]	; 0x30
 8003182:	4b4c      	ldr	r3, [pc, #304]	; (80032b4 <MX_GPIO_Init+0x190>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	4b48      	ldr	r3, [pc, #288]	; (80032b4 <MX_GPIO_Init+0x190>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a47      	ldr	r2, [pc, #284]	; (80032b4 <MX_GPIO_Init+0x190>)
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b45      	ldr	r3, [pc, #276]	; (80032b4 <MX_GPIO_Init+0x190>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
 80031aa:	2201      	movs	r2, #1
 80031ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031b0:	4841      	ldr	r0, [pc, #260]	; (80032b8 <MX_GPIO_Init+0x194>)
 80031b2:	f002 fbff 	bl	80059b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 80031b6:	2200      	movs	r2, #0
 80031b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031bc:	483e      	ldr	r0, [pc, #248]	; (80032b8 <MX_GPIO_Init+0x194>)
 80031be:	f002 fbf9 	bl	80059b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NSS_GPIO_Port, RF_NSS_Pin, GPIO_PIN_RESET);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2110      	movs	r1, #16
 80031c6:	483d      	ldr	r0, [pc, #244]	; (80032bc <MX_GPIO_Init+0x198>)
 80031c8:	f002 fbf4 	bl	80059b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 80031cc:	2200      	movs	r2, #0
 80031ce:	f240 7117 	movw	r1, #1815	; 0x717
 80031d2:	483b      	ldr	r0, [pc, #236]	; (80032c0 <MX_GPIO_Init+0x19c>)
 80031d4:	f002 fbee 	bl	80059b4 <HAL_GPIO_WritePin>
                          |RF_DIO1_Pin|GSM_RST_Pin|GSM_RTS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GSM_CTS_Pin GSM_PWR_Pin */
  GPIO_InitStruct.Pin = GSM_CTS_Pin|GSM_PWR_Pin;
 80031d8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80031dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031de:	2301      	movs	r3, #1
 80031e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e6:	2300      	movs	r3, #0
 80031e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ea:	f107 0314 	add.w	r3, r7, #20
 80031ee:	4619      	mov	r1, r3
 80031f0:	4831      	ldr	r0, [pc, #196]	; (80032b8 <MX_GPIO_Init+0x194>)
 80031f2:	f002 fa43 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_GPIO1INT_Pin */
  GPIO_InitStruct.Pin = GSM_GPIO1INT_Pin;
 80031f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GSM_GPIO1INT_GPIO_Port, &GPIO_InitStruct);
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	4619      	mov	r1, r3
 800320a:	482b      	ldr	r0, [pc, #172]	; (80032b8 <MX_GPIO_Init+0x194>)
 800320c:	f002 fa36 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NSS_Pin */
  GPIO_InitStruct.Pin = RF_NSS_Pin;
 8003210:	2310      	movs	r3, #16
 8003212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003214:	2301      	movs	r3, #1
 8003216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	2300      	movs	r3, #0
 800321e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_NSS_GPIO_Port, &GPIO_InitStruct);
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	4619      	mov	r1, r3
 8003226:	4825      	ldr	r0, [pc, #148]	; (80032bc <MX_GPIO_Init+0x198>)
 8003228:	f002 fa28 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin
                           RF_DIO1_Pin GSM_RTS_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 800322c:	f240 6317 	movw	r3, #1559	; 0x617
 8003230:	617b      	str	r3, [r7, #20]
                          |RF_DIO1_Pin|GSM_RTS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003232:	2301      	movs	r3, #1
 8003234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323a:	2300      	movs	r3, #0
 800323c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	4619      	mov	r1, r3
 8003244:	481e      	ldr	r0, [pc, #120]	; (80032c0 <MX_GPIO_Init+0x19c>)
 8003246:	f002 fa19 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DIO0_Pin */
  GPIO_InitStruct.Pin = RF_DIO0_Pin;
 800324a:	2320      	movs	r3, #32
 800324c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800324e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_DIO0_GPIO_Port, &GPIO_InitStruct);
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	4619      	mov	r1, r3
 800325e:	4818      	ldr	r0, [pc, #96]	; (80032c0 <MX_GPIO_Init+0x19c>)
 8003260:	f002 fa0c 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_RST_Pin */
  GPIO_InitStruct.Pin = RF_RST_Pin;
 8003264:	2340      	movs	r3, #64	; 0x40
 8003266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_RST_GPIO_Port, &GPIO_InitStruct);
 8003270:	f107 0314 	add.w	r3, r7, #20
 8003274:	4619      	mov	r1, r3
 8003276:	4812      	ldr	r0, [pc, #72]	; (80032c0 <MX_GPIO_Init+0x19c>)
 8003278:	f002 fa00 	bl	800567c <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_RST_Pin */
  GPIO_InitStruct.Pin = GSM_RST_Pin;
 800327c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003282:	2301      	movs	r3, #1
 8003284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003286:	2302      	movs	r3, #2
 8003288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2300      	movs	r3, #0
 800328c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GSM_RST_GPIO_Port, &GPIO_InitStruct);
 800328e:	f107 0314 	add.w	r3, r7, #20
 8003292:	4619      	mov	r1, r3
 8003294:	480a      	ldr	r0, [pc, #40]	; (80032c0 <MX_GPIO_Init+0x19c>)
 8003296:	f002 f9f1 	bl	800567c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800329a:	2200      	movs	r2, #0
 800329c:	2100      	movs	r1, #0
 800329e:	2017      	movs	r0, #23
 80032a0:	f001 fe1d 	bl	8004ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80032a4:	2017      	movs	r0, #23
 80032a6:	f001 fe36 	bl	8004f16 <HAL_NVIC_EnableIRQ>

}
 80032aa:	bf00      	nop
 80032ac:	3728      	adds	r7, #40	; 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40020800 	.word	0x40020800
 80032bc:	40020000 	.word	0x40020000
 80032c0:	40020400 	.word	0x40020400

080032c4 <HAL_UART_RxCpltCallback>:
	}else{
		return CMD_ERROR;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a59      	ldr	r2, [pc, #356]	; (8003434 <HAL_UART_RxCpltCallback+0x170>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d109      	bne.n	80032e8 <HAL_UART_RxCpltCallback+0x24>
		HAL_UART_Receive_IT(&huart1, &rxBuf, 1);
 80032d4:	2201      	movs	r2, #1
 80032d6:	4958      	ldr	r1, [pc, #352]	; (8003438 <HAL_UART_RxCpltCallback+0x174>)
 80032d8:	4856      	ldr	r0, [pc, #344]	; (8003434 <HAL_UART_RxCpltCallback+0x170>)
 80032da:	f004 fa8b 	bl	80077f4 <HAL_UART_Receive_IT>
		GPS_Receive(rxBuf);
 80032de:	4b56      	ldr	r3, [pc, #344]	; (8003438 <HAL_UART_RxCpltCallback+0x174>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe face 	bl	8001884 <GPS_Receive>
		//HAL_UART_Receive_DMA(&huart1, &rxBuf, 1);
	}

	if(huart == &huart6){
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a54      	ldr	r2, [pc, #336]	; (800343c <HAL_UART_RxCpltCallback+0x178>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	f040 809c 	bne.w	800342a <HAL_UART_RxCpltCallback+0x166>
			uint8_t Command = UART6_RxBuf[0];
 80032f2:	4b53      	ldr	r3, [pc, #332]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	73bb      	strb	r3, [r7, #14]
			uint8_t Parameter = UART6_RxBuf[1];
 80032f8:	4b51      	ldr	r3, [pc, #324]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 80032fa:	785b      	ldrb	r3, [r3, #1]
 80032fc:	737b      	strb	r3, [r7, #13]

			if (UART6_RxIsData == 1){
 80032fe:	4b51      	ldr	r3, [pc, #324]	; (8003444 <HAL_UART_RxCpltCallback+0x180>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d133      	bne.n	800336e <HAL_UART_RxCpltCallback+0xaa>

				UART6_RxIsData = 0;
 8003306:	4b4f      	ldr	r3, [pc, #316]	; (8003444 <HAL_UART_RxCpltCallback+0x180>)
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
				UART6_RxBytes = 4;
 800330c:	4b4e      	ldr	r3, [pc, #312]	; (8003448 <HAL_UART_RxCpltCallback+0x184>)
 800330e:	2204      	movs	r2, #4
 8003310:	701a      	strb	r2, [r3, #0]
				uint8_t msg_len = strlen((char *)UART6_RxBuf);
 8003312:	484b      	ldr	r0, [pc, #300]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 8003314:	f7fc ff6e 	bl	80001f4 <strlen>
 8003318:	4603      	mov	r3, r0
 800331a:	733b      	strb	r3, [r7, #12]

				if(UART6_RxBuf[msg_len-1] == crc_xor((char *)UART6_RxBuf))
 800331c:	7b3b      	ldrb	r3, [r7, #12]
 800331e:	3b01      	subs	r3, #1
 8003320:	4a47      	ldr	r2, [pc, #284]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 8003322:	5cd4      	ldrb	r4, [r2, r3]
 8003324:	4846      	ldr	r0, [pc, #280]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 8003326:	f000 f9bf 	bl	80036a8 <crc_xor>
 800332a:	4603      	mov	r3, r0
 800332c:	429c      	cmp	r4, r3
 800332e:	d110      	bne.n	8003352 <HAL_UART_RxCpltCallback+0x8e>
						for (uint8_t i = 0; i < (msg_len-2); i++)
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]
 8003334:	e008      	b.n	8003348 <HAL_UART_RxCpltCallback+0x84>
							UART6_DataBuf[i] = UART6_RxBuf[i];
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	7bfb      	ldrb	r3, [r7, #15]
 800333a:	4941      	ldr	r1, [pc, #260]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 800333c:	5c89      	ldrb	r1, [r1, r2]
 800333e:	4a43      	ldr	r2, [pc, #268]	; (800344c <HAL_UART_RxCpltCallback+0x188>)
 8003340:	54d1      	strb	r1, [r2, r3]
						for (uint8_t i = 0; i < (msg_len-2); i++)
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	3301      	adds	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	7b3b      	ldrb	r3, [r7, #12]
 800334c:	3b02      	subs	r3, #2
 800334e:	429a      	cmp	r2, r3
 8003350:	dbf1      	blt.n	8003336 <HAL_UART_RxCpltCallback+0x72>

				memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 8003352:	2232      	movs	r2, #50	; 0x32
 8003354:	2100      	movs	r1, #0
 8003356:	483a      	ldr	r0, [pc, #232]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 8003358:	f005 f962 	bl	8008620 <memset>
				HAL_UART_Receive_IT(&huart2, UART6_RxBuf, UART6_RxBytes);
 800335c:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_UART_RxCpltCallback+0x184>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b29b      	uxth	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	4936      	ldr	r1, [pc, #216]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 8003366:	483a      	ldr	r0, [pc, #232]	; (8003450 <HAL_UART_RxCpltCallback+0x18c>)
 8003368:	f004 fa44 	bl	80077f4 <HAL_UART_Receive_IT>
 800336c:	e04a      	b.n	8003404 <HAL_UART_RxCpltCallback+0x140>


			}else{
				switch(Command){
 800336e:	7bbb      	ldrb	r3, [r7, #14]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d03d      	beq.n	80033f0 <HAL_UART_RxCpltCallback+0x12c>
 8003374:	2b03      	cmp	r3, #3
 8003376:	dc42      	bgt.n	80033fe <HAL_UART_RxCpltCallback+0x13a>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d042      	beq.n	8003402 <HAL_UART_RxCpltCallback+0x13e>
 800337c:	2b02      	cmp	r3, #2
 800337e:	d000      	beq.n	8003382 <HAL_UART_RxCpltCallback+0xbe>
						UART6_TxBuf[1] = Parameter;
					break;
					default:
						//nothing happens
						//HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
					break;
 8003380:	e03d      	b.n	80033fe <HAL_UART_RxCpltCallback+0x13a>
						if(crc_xor((char *)UART6_RxBuf) == UART6_RxBuf[3]){
 8003382:	482f      	ldr	r0, [pc, #188]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 8003384:	f000 f990 	bl	80036a8 <crc_xor>
 8003388:	4603      	mov	r3, r0
 800338a:	461a      	mov	r2, r3
 800338c:	4b2c      	ldr	r3, [pc, #176]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 800338e:	78db      	ldrb	r3, [r3, #3]
 8003390:	429a      	cmp	r2, r3
 8003392:	d107      	bne.n	80033a4 <HAL_UART_RxCpltCallback+0xe0>
							UART6_RxIsData = 1;
 8003394:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_UART_RxCpltCallback+0x180>)
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
							UART6_RxBytes = UART6_RxBuf[1];
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 800339c:	785a      	ldrb	r2, [r3, #1]
 800339e:	4b2a      	ldr	r3, [pc, #168]	; (8003448 <HAL_UART_RxCpltCallback+0x184>)
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e01c      	b.n	80033de <HAL_UART_RxCpltCallback+0x11a>
							UART6_RxBytes = 4;
 80033a4:	4b28      	ldr	r3, [pc, #160]	; (8003448 <HAL_UART_RxCpltCallback+0x184>)
 80033a6:	2204      	movs	r2, #4
 80033a8:	701a      	strb	r2, [r3, #0]
							 UART6_TxBuf[0] = 0x03;
 80033aa:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <HAL_UART_RxCpltCallback+0x190>)
 80033ac:	2203      	movs	r2, #3
 80033ae:	701a      	strb	r2, [r3, #0]
							 UART6_TxBuf[1] = 0x99;
 80033b0:	4b28      	ldr	r3, [pc, #160]	; (8003454 <HAL_UART_RxCpltCallback+0x190>)
 80033b2:	2299      	movs	r2, #153	; 0x99
 80033b4:	705a      	strb	r2, [r3, #1]
							 UART6_TxBuf[2] = '*';
 80033b6:	4b27      	ldr	r3, [pc, #156]	; (8003454 <HAL_UART_RxCpltCallback+0x190>)
 80033b8:	222a      	movs	r2, #42	; 0x2a
 80033ba:	709a      	strb	r2, [r3, #2]
							 UART6_TxBuf[3] = crc_xor((char *)UART6_TxBuf);
 80033bc:	4825      	ldr	r0, [pc, #148]	; (8003454 <HAL_UART_RxCpltCallback+0x190>)
 80033be:	f000 f973 	bl	80036a8 <crc_xor>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461a      	mov	r2, r3
 80033c6:	4b23      	ldr	r3, [pc, #140]	; (8003454 <HAL_UART_RxCpltCallback+0x190>)
 80033c8:	70da      	strb	r2, [r3, #3]
							HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 4);
 80033ca:	2204      	movs	r2, #4
 80033cc:	4921      	ldr	r1, [pc, #132]	; (8003454 <HAL_UART_RxCpltCallback+0x190>)
 80033ce:	481b      	ldr	r0, [pc, #108]	; (800343c <HAL_UART_RxCpltCallback+0x178>)
 80033d0:	f004 f9cb 	bl	800776a <HAL_UART_Transmit_IT>
							memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 80033d4:	2232      	movs	r2, #50	; 0x32
 80033d6:	2100      	movs	r1, #0
 80033d8:	4819      	ldr	r0, [pc, #100]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 80033da:	f005 f921 	bl	8008620 <memset>
						HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 80033de:	4b1a      	ldr	r3, [pc, #104]	; (8003448 <HAL_UART_RxCpltCallback+0x184>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	4916      	ldr	r1, [pc, #88]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 80033e8:	4814      	ldr	r0, [pc, #80]	; (800343c <HAL_UART_RxCpltCallback+0x178>)
 80033ea:	f004 fa03 	bl	80077f4 <HAL_UART_Receive_IT>
					break;
 80033ee:	e009      	b.n	8003404 <HAL_UART_RxCpltCallback+0x140>
						UART6_TxBuf[0] = 0x02;
 80033f0:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_UART_RxCpltCallback+0x190>)
 80033f2:	2202      	movs	r2, #2
 80033f4:	701a      	strb	r2, [r3, #0]
						UART6_TxBuf[1] = Parameter;
 80033f6:	4a17      	ldr	r2, [pc, #92]	; (8003454 <HAL_UART_RxCpltCallback+0x190>)
 80033f8:	7b7b      	ldrb	r3, [r7, #13]
 80033fa:	7053      	strb	r3, [r2, #1]
					break;
 80033fc:	e002      	b.n	8003404 <HAL_UART_RxCpltCallback+0x140>
					break;
 80033fe:	bf00      	nop
 8003400:	e000      	b.n	8003404 <HAL_UART_RxCpltCallback+0x140>
					break;
 8003402:	bf00      	nop
				}
			}
			if(Command != 0x02){
 8003404:	7bbb      	ldrb	r3, [r7, #14]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d00f      	beq.n	800342a <HAL_UART_RxCpltCallback+0x166>
				UART6_RxBytes = 4;
 800340a:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <HAL_UART_RxCpltCallback+0x184>)
 800340c:	2204      	movs	r2, #4
 800340e:	701a      	strb	r2, [r3, #0]
				memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 8003410:	2232      	movs	r2, #50	; 0x32
 8003412:	2100      	movs	r1, #0
 8003414:	480a      	ldr	r0, [pc, #40]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 8003416:	f005 f903 	bl	8008620 <memset>
				HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_UART_RxCpltCallback+0x184>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	4907      	ldr	r1, [pc, #28]	; (8003440 <HAL_UART_RxCpltCallback+0x17c>)
 8003424:	4805      	ldr	r0, [pc, #20]	; (800343c <HAL_UART_RxCpltCallback+0x178>)
 8003426:	f004 f9e5 	bl	80077f4 <HAL_UART_Receive_IT>
			}
	}
}
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bd90      	pop	{r4, r7, pc}
 8003432:	bf00      	nop
 8003434:	2000058c 	.word	0x2000058c
 8003438:	20000588 	.word	0x20000588
 800343c:	20000634 	.word	0x20000634
 8003440:	200002fc 	.word	0x200002fc
 8003444:	20000293 	.word	0x20000293
 8003448:	20000026 	.word	0x20000026
 800344c:	200002c8 	.word	0x200002c8
 8003450:	2000077c 	.word	0x2000077c
 8003454:	20000294 	.word	0x20000294

08003458 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart1, &rxBuf, 1); doesn't work for some reason...
	if(huart == &huart1){
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a0e      	ldr	r2, [pc, #56]	; (800349c <HAL_UART_ErrorCallback+0x44>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d104      	bne.n	8003472 <HAL_UART_ErrorCallback+0x1a>
		HAL_UART_Receive_IT(&huart1, &rxBuf, 1);
 8003468:	2201      	movs	r2, #1
 800346a:	490d      	ldr	r1, [pc, #52]	; (80034a0 <HAL_UART_ErrorCallback+0x48>)
 800346c:	480b      	ldr	r0, [pc, #44]	; (800349c <HAL_UART_ErrorCallback+0x44>)
 800346e:	f004 f9c1 	bl	80077f4 <HAL_UART_Receive_IT>
	}
	if(huart == &huart6){
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a0b      	ldr	r2, [pc, #44]	; (80034a4 <HAL_UART_ErrorCallback+0x4c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d10c      	bne.n	8003494 <HAL_UART_ErrorCallback+0x3c>
		memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 800347a:	2232      	movs	r2, #50	; 0x32
 800347c:	2100      	movs	r1, #0
 800347e:	480a      	ldr	r0, [pc, #40]	; (80034a8 <HAL_UART_ErrorCallback+0x50>)
 8003480:	f005 f8ce 	bl	8008620 <memset>
		HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_UART_ErrorCallback+0x54>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	4906      	ldr	r1, [pc, #24]	; (80034a8 <HAL_UART_ErrorCallback+0x50>)
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <HAL_UART_ErrorCallback+0x4c>)
 8003490:	f004 f9b0 	bl	80077f4 <HAL_UART_Receive_IT>
	}
}
 8003494:	bf00      	nop
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	2000058c 	.word	0x2000058c
 80034a0:	20000588 	.word	0x20000588
 80034a4:	20000634 	.word	0x20000634
 80034a8:	200002fc 	.word	0x200002fc
 80034ac:	20000026 	.word	0x20000026

080034b0 <MODE_Set>:

void MODE_Set(SX1278_t * module, uint8_t mode){
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
	  switch(mode){
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d015      	beq.n	80034ee <MODE_Set+0x3e>
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	dc17      	bgt.n	80034f6 <MODE_Set+0x46>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <MODE_Set+0x20>
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d00b      	beq.n	80034e6 <MODE_Set+0x36>
		  case 2: // RTTY config
			  SX1278_RTTY_Config(module);
		  break;

		  default: // lets ignore that one
		  break;
 80034ce:	e012      	b.n	80034f6 <MODE_Set+0x46>
			  SX1278_begin(module, SX1278_433MHZ, MIN_POWER, SX1278_LORA_SF_8, // air time ~ 495ms
 80034d0:	2308      	movs	r3, #8
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	2303      	movs	r3, #3
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	2302      	movs	r3, #2
 80034da:	2203      	movs	r2, #3
 80034dc:	2100      	movs	r1, #0
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe f9a8 	bl	8001834 <SX1278_begin>
		  break;
 80034e4:	e008      	b.n	80034f8 <MODE_Set+0x48>
			  SX1278_FSK_Config(module);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd ffbc 	bl	8001464 <SX1278_FSK_Config>
		  break;
 80034ec:	e004      	b.n	80034f8 <MODE_Set+0x48>
			  SX1278_RTTY_Config(module);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd ff1c 	bl	800132c <SX1278_RTTY_Config>
		  break;
 80034f4:	e000      	b.n	80034f8 <MODE_Set+0x48>
		  break;
 80034f6:	bf00      	nop
	  }
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003510:	d105      	bne.n	800351e <HAL_TIM_PeriodElapsedCallback+0x1e>
		sec_gps++;
 8003512:	4b15      	ldr	r3, [pc, #84]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800351c:	701a      	strb	r2, [r3, #0]
	}

	if(htim->Instance == TIM3){
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a12      	ldr	r2, [pc, #72]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d102      	bne.n	800352e <HAL_TIM_PeriodElapsedCallback+0x2e>
		u_sec_delay = 1;
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM4){
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a10      	ldr	r2, [pc, #64]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d105      	bne.n	8003544 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_TIM_Base_Stop_IT(&htim4);
 8003538:	480f      	ldr	r0, [pc, #60]	; (8003578 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800353a:	f003 fbd3 	bl	8006ce4 <HAL_TIM_Base_Stop_IT>
		gsmRec = 1;
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == TIM5){
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a0d      	ldr	r2, [pc, #52]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d107      	bne.n	800355e <HAL_TIM_PeriodElapsedCallback+0x5e>
		HAL_TIM_Base_Stop_IT(&htim5);
 800354e:	480d      	ldr	r0, [pc, #52]	; (8003584 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003550:	f003 fbc8 	bl	8006ce4 <HAL_TIM_Base_Stop_IT>
		GSM_On();
 8003554:	f7fe ffb2 	bl	80024bc <GSM_On>
		HAL_TIM_Base_Start_IT(&htim4);
 8003558:	4807      	ldr	r0, [pc, #28]	; (8003578 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800355a:	f003 fb61 	bl	8006c20 <HAL_TIM_Base_Start_IT>
	}
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000292 	.word	0x20000292
 800356c:	40000400 	.word	0x40000400
 8003570:	2000028c 	.word	0x2000028c
 8003574:	40000800 	.word	0x40000800
 8003578:	20000390 	.word	0x20000390
 800357c:	20000290 	.word	0x20000290
 8003580:	40000c00 	.word	0x40000c00
 8003584:	200003e0 	.word	0x200003e0

08003588 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin){
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	80fb      	strh	r3, [r7, #6]
	loraModuleIrq = 1;
 8003592:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <HAL_GPIO_EXTI_Callback+0x1c>)
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	2000028a 	.word	0x2000028a

080035a8 <RTTY_Send>:

void RTTY_Send(SX1278_t * module, uint8_t *buf, uint8_t len){
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	71fb      	strb	r3, [r7, #7]
	uint16_t baudTimeout = 20;
 80035b6:	2314      	movs	r3, #20
 80035b8:	82bb      	strh	r3, [r7, #20]
	uint8_t i;
	uint8_t curChar = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	74fb      	strb	r3, [r7, #19]

	SX1278_RTTY_Config(module);
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7fd feb4 	bl	800132c <SX1278_RTTY_Config>

	for(i = 0; i < len; i++){
 80035c4:	2300      	movs	r3, #0
 80035c6:	75fb      	strb	r3, [r7, #23]
 80035c8:	e00e      	b.n	80035e8 <RTTY_Send+0x40>
		curChar = buf[i];
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	4413      	add	r3, r2
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	74fb      	strb	r3, [r7, #19]
		RTTY_SendSingle(module, curChar, baudTimeout);
 80035d4:	8abb      	ldrh	r3, [r7, #20]
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	7cfb      	ldrb	r3, [r7, #19]
 80035da:	4619      	mov	r1, r3
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f80c 	bl	80035fa <RTTY_SendSingle>
	for(i = 0; i < len; i++){
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	3301      	adds	r3, #1
 80035e6:	75fb      	strb	r3, [r7, #23]
 80035e8:	7dfa      	ldrb	r2, [r7, #23]
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d3ec      	bcc.n	80035ca <RTTY_Send+0x22>
	}
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <RTTY_SendSingle>:

void RTTY_SendSingle(SX1278_t * module, uint8_t buf, uint8_t timeout){
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
 8003606:	4613      	mov	r3, r2
 8003608:	70bb      	strb	r3, [r7, #2]
	SX1278_RTTY_WriteLow(module); //start bit
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd fed9 	bl	80013c2 <SX1278_RTTY_WriteLow>
	HAL_Delay(timeout);
 8003610:	78bb      	ldrb	r3, [r7, #2]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fe40 	bl	8004298 <HAL_Delay>
	for(uint8_t j = 0; j < 8; j++){
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	e015      	b.n	800364a <RTTY_SendSingle+0x50>
		if(bit_set(buf, j)){
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	fa42 f303 	asr.w	r3, r2, r3
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <RTTY_SendSingle+0x3c>
			SX1278_RTTY_WriteHigh(module);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd feef 	bl	8001412 <SX1278_RTTY_WriteHigh>
 8003634:	e002      	b.n	800363c <RTTY_SendSingle+0x42>
		}else{
			SX1278_RTTY_WriteLow(module);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fd fec3 	bl	80013c2 <SX1278_RTTY_WriteLow>
		}
		HAL_Delay(timeout);
 800363c:	78bb      	ldrb	r3, [r7, #2]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 fe2a 	bl	8004298 <HAL_Delay>
	for(uint8_t j = 0; j < 8; j++){
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	3301      	adds	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b07      	cmp	r3, #7
 800364e:	d9e6      	bls.n	800361e <RTTY_SendSingle+0x24>
	}
	SX1278_RTTY_WriteHigh(module); // stop bit
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fd fede 	bl	8001412 <SX1278_RTTY_WriteHigh>
	HAL_Delay(30);
 8003656:	201e      	movs	r0, #30
 8003658:	f000 fe1e 	bl	8004298 <HAL_Delay>
	SX1278_RTTY_Stop(module);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fd fe97 	bl	8001390 <SX1278_RTTY_Stop>
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <get_check_sum>:

uint8_t get_check_sum(char *string){
 800366a:	b590      	push	{r4, r7, lr}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
	uint8_t XOR = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 1; i < strlen(string); i++) {
 8003676:	2301      	movs	r3, #1
 8003678:	73bb      	strb	r3, [r7, #14]
 800367a:	e009      	b.n	8003690 <get_check_sum+0x26>
		XOR = XOR ^ string[i];
 800367c:	7bbb      	ldrb	r3, [r7, #14]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	781a      	ldrb	r2, [r3, #0]
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	4053      	eors	r3, r2
 8003688:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 1; i < strlen(string); i++) {
 800368a:	7bbb      	ldrb	r3, [r7, #14]
 800368c:	3301      	adds	r3, #1
 800368e:	73bb      	strb	r3, [r7, #14]
 8003690:	7bbc      	ldrb	r4, [r7, #14]
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fc fdae 	bl	80001f4 <strlen>
 8003698:	4603      	mov	r3, r0
 800369a:	429c      	cmp	r4, r3
 800369c:	d3ee      	bcc.n	800367c <get_check_sum+0x12>
	}
	return XOR;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd90      	pop	{r4, r7, pc}

080036a8 <crc_xor>:
uint8_t crc_xor(char *string){
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	uint8_t XOR = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; string[i] != '*' && i < strlen(string); i++){
 80036b4:	2300      	movs	r3, #0
 80036b6:	73bb      	strb	r3, [r7, #14]
 80036b8:	e009      	b.n	80036ce <crc_xor+0x26>
		XOR = XOR ^ string[i];
 80036ba:	7bbb      	ldrb	r3, [r7, #14]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	4053      	eors	r3, r2
 80036c6:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; string[i] != '*' && i < strlen(string); i++){
 80036c8:	7bbb      	ldrb	r3, [r7, #14]
 80036ca:	3301      	adds	r3, #1
 80036cc:	73bb      	strb	r3, [r7, #14]
 80036ce:	7bbb      	ldrb	r3, [r7, #14]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b2a      	cmp	r3, #42	; 0x2a
 80036d8:	d006      	beq.n	80036e8 <crc_xor+0x40>
 80036da:	7bbc      	ldrb	r4, [r7, #14]
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7fc fd89 	bl	80001f4 <strlen>
 80036e2:	4603      	mov	r3, r0
 80036e4:	429c      	cmp	r4, r3
 80036e6:	d3e8      	bcc.n	80036ba <crc_xor+0x12>
	}
	return XOR;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd90      	pop	{r4, r7, pc}
	...

080036f4 <make_string>:

void make_string(char *s, uint8_t size){
 80036f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f6:	b09b      	sub	sp, #108	; 0x6c
 80036f8:	af08      	add	r7, sp, #32
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
	uint8_t lon[10];
	uint8_t hei[9];
	uint8_t spe[7];

	//CLEAR TEMP BUFFERS (SOMETIMES IT HAS INFORMATION IN IT, BECAUSE IT USES MEMORY LOCATION THAT WERE TEMP USED FOR OTHER STUFF) ONLY WHEN THERE IS +1 elemt in array
	memset(time, 0, sizeof(time));
 8003700:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003704:	220b      	movs	r2, #11
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f004 ff89 	bl	8008620 <memset>
	memset(lat, 0, sizeof(lat));
 800370e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003712:	220a      	movs	r2, #10
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f004 ff82 	bl	8008620 <memset>
	memset(lon, 0, sizeof(lon));
 800371c:	f107 031c 	add.w	r3, r7, #28
 8003720:	220a      	movs	r2, #10
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f004 ff7b 	bl	8008620 <memset>
	memset(hei, 0, sizeof(hei));
 800372a:	f107 0310 	add.w	r3, r7, #16
 800372e:	2209      	movs	r2, #9
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f004 ff74 	bl	8008620 <memset>
	memset(spe, 0, sizeof(spe));
 8003738:	f107 0308 	add.w	r3, r7, #8
 800373c:	2207      	movs	r2, #7
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f004 ff6d 	bl	8008620 <memset>

	//Get all params from satalites data
	GPS_GetTime(time);
 8003746:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe fdb6 	bl	80022bc <GPS_GetTime>
	GPS_GetLat(lat);
 8003750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fd23 	bl	80021a0 <GPS_GetLat>
	GPS_GetLon(lon);
 800375a:	f107 031c 	add.w	r3, r7, #28
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fd42 	bl	80021e8 <GPS_GetLon>
	GPS_GetHei(hei);
 8003764:	f107 0310 	add.w	r3, r7, #16
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe fd85 	bl	8002278 <GPS_GetHei>
	GPS_GetSpe(spe);
 800376e:	f107 0308 	add.w	r3, r7, #8
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fd5e 	bl	8002234 <GPS_GetSpe>

	snprintf(s, size, "\r\n$$IRBE5,%li,%s,%s,%s,%s,%s,%s,%.2f", ++num, time, lat, lon, hei, spe, UART6_DataBuf, temp_mcu());
 8003778:	78fc      	ldrb	r4, [r7, #3]
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <make_string+0x120>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3301      	adds	r3, #1
 8003780:	4a24      	ldr	r2, [pc, #144]	; (8003814 <make_string+0x120>)
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b23      	ldr	r3, [pc, #140]	; (8003814 <make_string+0x120>)
 8003786:	681d      	ldr	r5, [r3, #0]
 8003788:	f000 f88a 	bl	80038a0 <temp_mcu>
 800378c:	ee10 3a10 	vmov	r3, s0
 8003790:	4618      	mov	r0, r3
 8003792:	f7fc fef1 	bl	8000578 <__aeabi_f2d>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800379e:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <make_string+0x124>)
 80037a0:	9305      	str	r3, [sp, #20]
 80037a2:	f107 0308 	add.w	r3, r7, #8
 80037a6:	9304      	str	r3, [sp, #16]
 80037a8:	f107 0310 	add.w	r3, r7, #16
 80037ac:	9303      	str	r3, [sp, #12]
 80037ae:	f107 031c 	add.w	r3, r7, #28
 80037b2:	9302      	str	r3, [sp, #8]
 80037b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	462b      	mov	r3, r5
 80037c2:	4a16      	ldr	r2, [pc, #88]	; (800381c <make_string+0x128>)
 80037c4:	4621      	mov	r1, r4
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f005 fb9c 	bl	8008f04 <sniprintf>
	uint8_t l = strlen((char *)s);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fc fd11 	bl	80001f4 <strlen>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char *ptr = strrchr(s, '$');
 80037d8:	2124      	movs	r1, #36	; 0x24
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f005 fbf8 	bl	8008fd0 <strrchr>
 80037e0:	6438      	str	r0, [r7, #64]	; 0x40
	if(snprintf(s + l, size - l, "*%02x\r\n", get_check_sum(ptr))  > size - 4 - 1){
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	1f1c      	subs	r4, r3, #4
 80037e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	18d5      	adds	r5, r2, r3
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	461e      	mov	r6, r3
 80037f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80037fa:	f7ff ff36 	bl	800366a <get_check_sum>
 80037fe:	4603      	mov	r3, r0
 8003800:	4a07      	ldr	r2, [pc, #28]	; (8003820 <make_string+0x12c>)
 8003802:	4631      	mov	r1, r6
 8003804:	4628      	mov	r0, r5
 8003806:	f005 fb7d 	bl	8008f04 <sniprintf>
 800380a:	4603      	mov	r3, r0
 800380c:	429c      	cmp	r4, r3
		//buffer overflow
		return;
	}
}
 800380e:	374c      	adds	r7, #76	; 0x4c
 8003810:	46bd      	mov	sp, r7
 8003812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003814:	20000278 	.word	0x20000278
 8003818:	200002c8 	.word	0x200002c8
 800381c:	0800b470 	.word	0x0800b470
 8003820:	0800b498 	.word	0x0800b498

08003824 <make_string_gsm>:

void make_string_gsm(char *s, uint8_t size){
 8003824:	b580      	push	{r7, lr}
 8003826:	b08e      	sub	sp, #56	; 0x38
 8003828:	af02      	add	r7, sp, #8
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
	uint8_t lat[10];
	uint8_t lon[10];
	uint8_t hei[9];

	//CLEAR TEMP BUFFERS (SOMETIMES IT HAS INFORMATION IN IT, BECAUSE IT USES MEMORY LOCATION THAT WERE TEMP USED FOR OTHER STUFF) ONLY WHEN THERE IS +1 elemt in array
	memset(lat, 0, sizeof(lat));
 8003830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003834:	220a      	movs	r2, #10
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f004 fef1 	bl	8008620 <memset>
	memset(lon, 0, sizeof(lon));
 800383e:	f107 0318 	add.w	r3, r7, #24
 8003842:	220a      	movs	r2, #10
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f004 feea 	bl	8008620 <memset>
	memset(hei, 0, sizeof(hei));
 800384c:	f107 030c 	add.w	r3, r7, #12
 8003850:	2209      	movs	r2, #9
 8003852:	2100      	movs	r1, #0
 8003854:	4618      	mov	r0, r3
 8003856:	f004 fee3 	bl	8008620 <memset>

	//Get all params from satalites data
	GPS_GetLat(lat);
 800385a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fc9e 	bl	80021a0 <GPS_GetLat>
	GPS_GetLon(lon);
 8003864:	f107 0318 	add.w	r3, r7, #24
 8003868:	4618      	mov	r0, r3
 800386a:	f7fe fcbd 	bl	80021e8 <GPS_GetLon>
	GPS_GetHei(hei);
 800386e:	f107 030c 	add.w	r3, r7, #12
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fd00 	bl	8002278 <GPS_GetHei>

	snprintf(s, size, "Latitude:%s\nLongitude:%s\nHeight ASL:%s",lat, lon, hei);
 8003878:	78f9      	ldrb	r1, [r7, #3]
 800387a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800387e:	f107 030c 	add.w	r3, r7, #12
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	f107 0318 	add.w	r3, r7, #24
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	4a03      	ldr	r2, [pc, #12]	; (800389c <make_string_gsm+0x78>)
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f005 fb38 	bl	8008f04 <sniprintf>
}
 8003894:	bf00      	nop
 8003896:	3730      	adds	r7, #48	; 0x30
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	0800b4a0 	.word	0x0800b4a0

080038a0 <temp_mcu>:

float temp_mcu(void){
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
	  float TemperatureValue = 0;
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	607b      	str	r3, [r7, #4]
	  uint16_t value = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	807b      	strh	r3, [r7, #2]
	  if (HAL_ADC_Start(&hadc1) != HAL_OK){
 80038b0:	483f      	ldr	r0, [pc, #252]	; (80039b0 <temp_mcu+0x110>)
 80038b2:	f000 fd59 	bl	8004368 <HAL_ADC_Start>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <temp_mcu+0x22>
		return HAL_ERROR;
 80038bc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80038c0:	e065      	b.n	800398e <temp_mcu+0xee>
	  }
	  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 80038c2:	f04f 31ff 	mov.w	r1, #4294967295
 80038c6:	483a      	ldr	r0, [pc, #232]	; (80039b0 <temp_mcu+0x110>)
 80038c8:	f000 fe02 	bl	80044d0 <HAL_ADC_PollForConversion>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <temp_mcu+0x38>
	  return HAL_ERROR;
 80038d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80038d6:	e05a      	b.n	800398e <temp_mcu+0xee>
	  }
	  if((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_REG_EOC) !=  HAL_ADC_STATE_REG_EOC){
 80038d8:	4835      	ldr	r0, [pc, #212]	; (80039b0 <temp_mcu+0x110>)
 80038da:	f001 f913 	bl	8004b04 <HAL_ADC_GetState>
 80038de:	4603      	mov	r3, r0
 80038e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e8:	d002      	beq.n	80038f0 <temp_mcu+0x50>
	  return HAL_ERROR;
 80038ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80038ee:	e04e      	b.n	800398e <temp_mcu+0xee>
	  }
	  value = HAL_ADC_GetValue(&hadc1);
 80038f0:	482f      	ldr	r0, [pc, #188]	; (80039b0 <temp_mcu+0x110>)
 80038f2:	f000 ffb9 	bl	8004868 <HAL_ADC_GetValue>
 80038f6:	4603      	mov	r3, r0
 80038f8:	807b      	strh	r3, [r7, #2]
	  TemperatureValue = value & 0x0fff;// 12 bit result
 80038fa:	887b      	ldrh	r3, [r7, #2]
 80038fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003908:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue *= 3300;
 800390c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003910:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80039b4 <temp_mcu+0x114>
 8003914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003918:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue /= 0xfff; //Reading in mV
 800391c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003920:	eddf 6a25 	vldr	s13, [pc, #148]	; 80039b8 <temp_mcu+0x118>
 8003924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003928:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue /= 1000.0; //Reading in Volts
 800392c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003930:	eddf 6a22 	vldr	s13, [pc, #136]	; 80039bc <temp_mcu+0x11c>
 8003934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003938:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue -= 0.760; // Subtract the reference voltage at 25�C
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fc fe1b 	bl	8000578 <__aeabi_f2d>
 8003942:	a317      	add	r3, pc, #92	; (adr r3, 80039a0 <temp_mcu+0x100>)
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f7fc fcb6 	bl	80002b8 <__aeabi_dsub>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	f7fd f940 	bl	8000bd8 <__aeabi_d2f>
 8003958:	4603      	mov	r3, r0
 800395a:	607b      	str	r3, [r7, #4]
	  TemperatureValue /= .0025; // Divide by slope 2.5mV
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7fc fe0b 	bl	8000578 <__aeabi_f2d>
 8003962:	a311      	add	r3, pc, #68	; (adr r3, 80039a8 <temp_mcu+0x108>)
 8003964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003968:	f7fc ff88 	bl	800087c <__aeabi_ddiv>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4610      	mov	r0, r2
 8003972:	4619      	mov	r1, r3
 8003974:	f7fd f930 	bl	8000bd8 <__aeabi_d2f>
 8003978:	4603      	mov	r3, r0
 800397a:	607b      	str	r3, [r7, #4]
	  TemperatureValue += 25.0; // Add the 25�C
 800397c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003980:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003984:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003988:	edc7 7a01 	vstr	s15, [r7, #4]
	  return TemperatureValue;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	ee07 3a90 	vmov	s15, r3
  }
 8003992:	eeb0 0a67 	vmov.f32	s0, s15
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	f3af 8000 	nop.w
 80039a0:	851eb852 	.word	0x851eb852
 80039a4:	3fe851eb 	.word	0x3fe851eb
 80039a8:	47ae147b 	.word	0x47ae147b
 80039ac:	3f647ae1 	.word	0x3f647ae1
 80039b0:	200004e0 	.word	0x200004e0
 80039b4:	454e4000 	.word	0x454e4000
 80039b8:	457ff000 	.word	0x457ff000
 80039bc:	447a0000 	.word	0x447a0000

080039c0 <charToInt>:
uint8_t charToInt(char* c){
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	uint8_t num = {0};
 80039c8:	2300      	movs	r3, #0
 80039ca:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; 2 > i; i++){
 80039cc:	2300      	movs	r3, #0
 80039ce:	73bb      	strb	r3, [r7, #14]
 80039d0:	e01d      	b.n	8003a0e <charToInt+0x4e>
		if(i == 0){
 80039d2:	7bbb      	ldrb	r3, [r7, #14]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10e      	bne.n	80039f6 <charToInt+0x36>
			num += (c[i] - '0') * 10;
 80039d8:	7bbb      	ldrb	r3, [r7, #14]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	3b30      	subs	r3, #48	; 0x30
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	0092      	lsls	r2, r2, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	4413      	add	r3, r2
 80039f2:	73fb      	strb	r3, [r7, #15]
 80039f4:	e008      	b.n	8003a08 <charToInt+0x48>
		}else{
			num += c[i] - '0';
 80039f6:	7bbb      	ldrb	r3, [r7, #14]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	4413      	add	r3, r2
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	3b30      	subs	r3, #48	; 0x30
 8003a06:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; 2 > i; i++){
 8003a08:	7bbb      	ldrb	r3, [r7, #14]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	73bb      	strb	r3, [r7, #14]
 8003a0e:	7bbb      	ldrb	r3, [r7, #14]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d9de      	bls.n	80039d2 <charToInt+0x12>
		}
	}
	return num;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a22:	b480      	push	{r7}
 8003a24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a26:	b672      	cpsid	i
}
 8003a28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a2a:	e7fe      	b.n	8003a2a <Error_Handler+0x8>

08003a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_MspInit+0x4c>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	4a0f      	ldr	r2, [pc, #60]	; (8003a78 <HAL_MspInit+0x4c>)
 8003a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a40:	6453      	str	r3, [r2, #68]	; 0x44
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <HAL_MspInit+0x4c>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_MspInit+0x4c>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <HAL_MspInit+0x4c>)
 8003a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_MspInit+0x4c>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800

08003a7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <HAL_ADC_MspInit+0x48>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d115      	bne.n	8003aba <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <HAL_ADC_MspInit+0x4c>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	4a0c      	ldr	r2, [pc, #48]	; (8003ac8 <HAL_ADC_MspInit+0x4c>)
 8003a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_ADC_MspInit+0x4c>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	2012      	movs	r0, #18
 8003ab0:	f001 fa15 	bl	8004ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003ab4:	2012      	movs	r0, #18
 8003ab6:	f001 fa2e 	bl	8004f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40012000 	.word	0x40012000
 8003ac8:	40023800 	.word	0x40023800

08003acc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <HAL_CRC_MspInit+0x3c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10d      	bne.n	8003afa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <HAL_CRC_MspInit+0x40>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <HAL_CRC_MspInit+0x40>)
 8003ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <HAL_CRC_MspInit+0x40>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40023000 	.word	0x40023000
 8003b0c:	40023800 	.word	0x40023800

08003b10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <HAL_SPI_MspInit+0x84>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d12b      	bne.n	8003b8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	4b18      	ldr	r3, [pc, #96]	; (8003b98 <HAL_SPI_MspInit+0x88>)
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <HAL_SPI_MspInit+0x88>)
 8003b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b40:	6453      	str	r3, [r2, #68]	; 0x44
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_SPI_MspInit+0x88>)
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_SPI_MspInit+0x88>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a10      	ldr	r2, [pc, #64]	; (8003b98 <HAL_SPI_MspInit+0x88>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <HAL_SPI_MspInit+0x88>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 8003b6a:	23e0      	movs	r3, #224	; 0xe0
 8003b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b76:	2303      	movs	r3, #3
 8003b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b7a:	2305      	movs	r3, #5
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b7e:	f107 0314 	add.w	r3, r7, #20
 8003b82:	4619      	mov	r1, r3
 8003b84:	4805      	ldr	r0, [pc, #20]	; (8003b9c <HAL_SPI_MspInit+0x8c>)
 8003b86:	f001 fd79 	bl	800567c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b8a:	bf00      	nop
 8003b8c:	3728      	adds	r7, #40	; 0x28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40013000 	.word	0x40013000
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40020000 	.word	0x40020000

08003ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb0:	d116      	bne.n	8003be0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	4b36      	ldr	r3, [pc, #216]	; (8003c90 <HAL_TIM_Base_MspInit+0xf0>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	4a35      	ldr	r2, [pc, #212]	; (8003c90 <HAL_TIM_Base_MspInit+0xf0>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc2:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_TIM_Base_MspInit+0xf0>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	201c      	movs	r0, #28
 8003bd4:	f001 f983 	bl	8004ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003bd8:	201c      	movs	r0, #28
 8003bda:	f001 f99c 	bl	8004f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003bde:	e052      	b.n	8003c86 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2b      	ldr	r2, [pc, #172]	; (8003c94 <HAL_TIM_Base_MspInit+0xf4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d116      	bne.n	8003c18 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <HAL_TIM_Base_MspInit+0xf0>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <HAL_TIM_Base_MspInit+0xf0>)
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_TIM_Base_MspInit+0xf0>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003c06:	2200      	movs	r2, #0
 8003c08:	2100      	movs	r1, #0
 8003c0a:	201d      	movs	r0, #29
 8003c0c:	f001 f967 	bl	8004ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c10:	201d      	movs	r0, #29
 8003c12:	f001 f980 	bl	8004f16 <HAL_NVIC_EnableIRQ>
}
 8003c16:	e036      	b.n	8003c86 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <HAL_TIM_Base_MspInit+0xf8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d116      	bne.n	8003c50 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_TIM_Base_MspInit+0xf0>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	4a19      	ldr	r2, [pc, #100]	; (8003c90 <HAL_TIM_Base_MspInit+0xf0>)
 8003c2c:	f043 0304 	orr.w	r3, r3, #4
 8003c30:	6413      	str	r3, [r2, #64]	; 0x40
 8003c32:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <HAL_TIM_Base_MspInit+0xf0>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2100      	movs	r1, #0
 8003c42:	201e      	movs	r0, #30
 8003c44:	f001 f94b 	bl	8004ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003c48:	201e      	movs	r0, #30
 8003c4a:	f001 f964 	bl	8004f16 <HAL_NVIC_EnableIRQ>
}
 8003c4e:	e01a      	b.n	8003c86 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <HAL_TIM_Base_MspInit+0xfc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d115      	bne.n	8003c86 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <HAL_TIM_Base_MspInit+0xf0>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4a0b      	ldr	r2, [pc, #44]	; (8003c90 <HAL_TIM_Base_MspInit+0xf0>)
 8003c64:	f043 0308 	orr.w	r3, r3, #8
 8003c68:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_TIM_Base_MspInit+0xf0>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003c76:	2200      	movs	r2, #0
 8003c78:	2100      	movs	r1, #0
 8003c7a:	2032      	movs	r0, #50	; 0x32
 8003c7c:	f001 f92f 	bl	8004ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003c80:	2032      	movs	r0, #50	; 0x32
 8003c82:	f001 f948 	bl	8004f16 <HAL_NVIC_EnableIRQ>
}
 8003c86:	bf00      	nop
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40023800 	.word	0x40023800
 8003c94:	40000400 	.word	0x40000400
 8003c98:	40000800 	.word	0x40000800
 8003c9c:	40000c00 	.word	0x40000c00

08003ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08e      	sub	sp, #56	; 0x38
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
 8003cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a6f      	ldr	r2, [pc, #444]	; (8003e7c <HAL_UART_MspInit+0x1dc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d164      	bne.n	8003d8c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	4b6e      	ldr	r3, [pc, #440]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	4a6d      	ldr	r2, [pc, #436]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003ccc:	f043 0310 	orr.w	r3, r3, #16
 8003cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd2:	4b6b      	ldr	r3, [pc, #428]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	4b67      	ldr	r3, [pc, #412]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	4a66      	ldr	r2, [pc, #408]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6313      	str	r3, [r2, #48]	; 0x30
 8003cee:	4b64      	ldr	r3, [pc, #400]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8003cfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	2302      	movs	r3, #2
 8003d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d0c:	2307      	movs	r3, #7
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d14:	4619      	mov	r1, r3
 8003d16:	485b      	ldr	r0, [pc, #364]	; (8003e84 <HAL_UART_MspInit+0x1e4>)
 8003d18:	f001 fcb0 	bl	800567c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003d1c:	4b5a      	ldr	r3, [pc, #360]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d1e:	4a5b      	ldr	r2, [pc, #364]	; (8003e8c <HAL_UART_MspInit+0x1ec>)
 8003d20:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003d22:	4b59      	ldr	r3, [pc, #356]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d28:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d2a:	4b57      	ldr	r3, [pc, #348]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d30:	4b55      	ldr	r3, [pc, #340]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d36:	4b54      	ldr	r3, [pc, #336]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d3c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d3e:	4b52      	ldr	r3, [pc, #328]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d44:	4b50      	ldr	r3, [pc, #320]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003d4a:	4b4f      	ldr	r3, [pc, #316]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d50:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d52:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d58:	4b4b      	ldr	r3, [pc, #300]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003d5e:	484a      	ldr	r0, [pc, #296]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d60:	f001 f910 	bl	8004f84 <HAL_DMA_Init>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003d6a:	f7ff fe5a 	bl	8003a22 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a45      	ldr	r2, [pc, #276]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
 8003d74:	4a44      	ldr	r2, [pc, #272]	; (8003e88 <HAL_UART_MspInit+0x1e8>)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	2025      	movs	r0, #37	; 0x25
 8003d80:	f001 f8ad 	bl	8004ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d84:	2025      	movs	r0, #37	; 0x25
 8003d86:	f001 f8c6 	bl	8004f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003d8a:	e073      	b.n	8003e74 <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a3f      	ldr	r2, [pc, #252]	; (8003e90 <HAL_UART_MspInit+0x1f0>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d134      	bne.n	8003e00 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a38      	ldr	r2, [pc, #224]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	4a31      	ldr	r2, [pc, #196]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GSM_TX_Pin|GSM_RX_Pin;
 8003dce:	230c      	movs	r3, #12
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dde:	2307      	movs	r3, #7
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003de6:	4619      	mov	r1, r3
 8003de8:	4826      	ldr	r0, [pc, #152]	; (8003e84 <HAL_UART_MspInit+0x1e4>)
 8003dea:	f001 fc47 	bl	800567c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003dee:	2200      	movs	r2, #0
 8003df0:	2100      	movs	r1, #0
 8003df2:	2026      	movs	r0, #38	; 0x26
 8003df4:	f001 f873 	bl	8004ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003df8:	2026      	movs	r0, #38	; 0x26
 8003dfa:	f001 f88c 	bl	8004f16 <HAL_NVIC_EnableIRQ>
}
 8003dfe:	e039      	b.n	8003e74 <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART6)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a23      	ldr	r2, [pc, #140]	; (8003e94 <HAL_UART_MspInit+0x1f4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d134      	bne.n	8003e74 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003e14:	f043 0320 	orr.w	r3, r3, #32
 8003e18:	6453      	str	r3, [r2, #68]	; 0x44
 8003e1a:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <HAL_UART_MspInit+0x1e0>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8003e42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e50:	2303      	movs	r3, #3
 8003e52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003e54:	2308      	movs	r3, #8
 8003e56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4809      	ldr	r0, [pc, #36]	; (8003e84 <HAL_UART_MspInit+0x1e4>)
 8003e60:	f001 fc0c 	bl	800567c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003e64:	2200      	movs	r2, #0
 8003e66:	2100      	movs	r1, #0
 8003e68:	2047      	movs	r0, #71	; 0x47
 8003e6a:	f001 f838 	bl	8004ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003e6e:	2047      	movs	r0, #71	; 0x47
 8003e70:	f001 f851 	bl	8004f16 <HAL_NVIC_EnableIRQ>
}
 8003e74:	bf00      	nop
 8003e76:	3738      	adds	r7, #56	; 0x38
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40011000 	.word	0x40011000
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40020000 	.word	0x40020000
 8003e88:	20000528 	.word	0x20000528
 8003e8c:	40026440 	.word	0x40026440
 8003e90:	40004400 	.word	0x40004400
 8003e94:	40011400 	.word	0x40011400

08003e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e9c:	e7fe      	b.n	8003e9c <NMI_Handler+0x4>

08003e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ea2:	e7fe      	b.n	8003ea2 <HardFault_Handler+0x4>

08003ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ea8:	e7fe      	b.n	8003ea8 <MemManage_Handler+0x4>

08003eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eae:	e7fe      	b.n	8003eae <BusFault_Handler+0x4>

08003eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003eb4:	e7fe      	b.n	8003eb4 <UsageFault_Handler+0x4>

08003eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ee4:	f000 f9b8 	bl	8004258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}

08003eec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ef0:	4802      	ldr	r0, [pc, #8]	; (8003efc <ADC_IRQHandler+0x10>)
 8003ef2:	f000 fb78 	bl	80045e6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200004e0 	.word	0x200004e0

08003f00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_SCK_Pin);
 8003f04:	2020      	movs	r0, #32
 8003f06:	f001 fd6f 	bl	80059e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f14:	4802      	ldr	r0, [pc, #8]	; (8003f20 <TIM2_IRQHandler+0x10>)
 8003f16:	f002 ff14 	bl	8006d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000734 	.word	0x20000734

08003f24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f28:	4802      	ldr	r0, [pc, #8]	; (8003f34 <TIM3_IRQHandler+0x10>)
 8003f2a:	f002 ff0a 	bl	8006d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000428 	.word	0x20000428

08003f38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f3c:	4802      	ldr	r0, [pc, #8]	; (8003f48 <TIM4_IRQHandler+0x10>)
 8003f3e:	f002 ff00 	bl	8006d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000390 	.word	0x20000390

08003f4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f50:	4802      	ldr	r0, [pc, #8]	; (8003f5c <USART1_IRQHandler+0x10>)
 8003f52:	f003 fc7f 	bl	8007854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	2000058c 	.word	0x2000058c

08003f60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f64:	4802      	ldr	r0, [pc, #8]	; (8003f70 <USART2_IRQHandler+0x10>)
 8003f66:	f003 fc75 	bl	8007854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	2000077c 	.word	0x2000077c

08003f74 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003f78:	4802      	ldr	r0, [pc, #8]	; (8003f84 <TIM5_IRQHandler+0x10>)
 8003f7a:	f002 fee2 	bl	8006d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200003e0 	.word	0x200003e0

08003f88 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003f8c:	4802      	ldr	r0, [pc, #8]	; (8003f98 <DMA2_Stream2_IRQHandler+0x10>)
 8003f8e:	f001 f939 	bl	8005204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003f92:	bf00      	nop
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000528 	.word	0x20000528

08003f9c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003fa0:	4802      	ldr	r0, [pc, #8]	; (8003fac <USART6_IRQHandler+0x10>)
 8003fa2:	f003 fc57 	bl	8007854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000634 	.word	0x20000634

08003fb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
	return 1;
 8003fb4:	2301      	movs	r3, #1
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <_kill>:

int _kill(int pid, int sig)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003fca:	f004 faf1 	bl	80085b0 <__errno>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2216      	movs	r2, #22
 8003fd2:	601a      	str	r2, [r3, #0]
	return -1;
 8003fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <_exit>:

void _exit (int status)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ffe7 	bl	8003fc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ff2:	e7fe      	b.n	8003ff2 <_exit+0x12>

08003ff4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e00a      	b.n	800401c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004006:	f3af 8000 	nop.w
 800400a:	4601      	mov	r1, r0
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	60ba      	str	r2, [r7, #8]
 8004012:	b2ca      	uxtb	r2, r1
 8004014:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	3301      	adds	r3, #1
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	429a      	cmp	r2, r3
 8004022:	dbf0      	blt.n	8004006 <_read+0x12>
	}

return len;
 8004024:	687b      	ldr	r3, [r7, #4]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e009      	b.n	8004054 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	60ba      	str	r2, [r7, #8]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	3301      	adds	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	429a      	cmp	r2, r3
 800405a:	dbf1      	blt.n	8004040 <_write+0x12>
	}
	return len;
 800405c:	687b      	ldr	r3, [r7, #4]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <_close>:

int _close(int file)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
	return -1;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800408e:	605a      	str	r2, [r3, #4]
	return 0;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <_isatty>:

int _isatty(int file)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
	return 1;
 80040a6:	2301      	movs	r3, #1
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
	return 0;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
	...

080040d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040d8:	4a14      	ldr	r2, [pc, #80]	; (800412c <_sbrk+0x5c>)
 80040da:	4b15      	ldr	r3, [pc, #84]	; (8004130 <_sbrk+0x60>)
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040e4:	4b13      	ldr	r3, [pc, #76]	; (8004134 <_sbrk+0x64>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <_sbrk+0x64>)
 80040ee:	4a12      	ldr	r2, [pc, #72]	; (8004138 <_sbrk+0x68>)
 80040f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <_sbrk+0x64>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d207      	bcs.n	8004110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004100:	f004 fa56 	bl	80085b0 <__errno>
 8004104:	4603      	mov	r3, r0
 8004106:	220c      	movs	r2, #12
 8004108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800410a:	f04f 33ff 	mov.w	r3, #4294967295
 800410e:	e009      	b.n	8004124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004110:	4b08      	ldr	r3, [pc, #32]	; (8004134 <_sbrk+0x64>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004116:	4b07      	ldr	r3, [pc, #28]	; (8004134 <_sbrk+0x64>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4413      	add	r3, r2
 800411e:	4a05      	ldr	r2, [pc, #20]	; (8004134 <_sbrk+0x64>)
 8004120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004122:	68fb      	ldr	r3, [r7, #12]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20018000 	.word	0x20018000
 8004130:	00000400 	.word	0x00000400
 8004134:	20000330 	.word	0x20000330
 8004138:	20000900 	.word	0x20000900

0800413c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <SystemInit+0x20>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	4a05      	ldr	r2, [pc, #20]	; (800415c <SystemInit+0x20>)
 8004148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800414c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	e000ed00 	.word	0xe000ed00

08004160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004198 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004164:	480d      	ldr	r0, [pc, #52]	; (800419c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004166:	490e      	ldr	r1, [pc, #56]	; (80041a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004168:	4a0e      	ldr	r2, [pc, #56]	; (80041a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800416a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800416c:	e002      	b.n	8004174 <LoopCopyDataInit>

0800416e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800416e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004172:	3304      	adds	r3, #4

08004174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004178:	d3f9      	bcc.n	800416e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800417a:	4a0b      	ldr	r2, [pc, #44]	; (80041a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800417c:	4c0b      	ldr	r4, [pc, #44]	; (80041ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800417e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004180:	e001      	b.n	8004186 <LoopFillZerobss>

08004182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004184:	3204      	adds	r2, #4

08004186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004188:	d3fb      	bcc.n	8004182 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800418a:	f7ff ffd7 	bl	800413c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800418e:	f004 fa15 	bl	80085bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004192:	f7fe faad 	bl	80026f0 <main>
  bx  lr    
 8004196:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004198:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800419c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041a0:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80041a4:	0800b8f4 	.word	0x0800b8f4
  ldr r2, =_sbss
 80041a8:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80041ac:	200008fc 	.word	0x200008fc

080041b0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041b0:	e7fe      	b.n	80041b0 <DMA1_Stream0_IRQHandler>
	...

080041b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041b8:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <HAL_Init+0x40>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a0d      	ldr	r2, [pc, #52]	; (80041f4 <HAL_Init+0x40>)
 80041be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_Init+0x40>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <HAL_Init+0x40>)
 80041ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041d0:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <HAL_Init+0x40>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a07      	ldr	r2, [pc, #28]	; (80041f4 <HAL_Init+0x40>)
 80041d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041dc:	2003      	movs	r0, #3
 80041de:	f000 fe73 	bl	8004ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041e2:	200f      	movs	r0, #15
 80041e4:	f000 f808 	bl	80041f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041e8:	f7ff fc20 	bl	8003a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023c00 	.word	0x40023c00

080041f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_InitTick+0x54>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_InitTick+0x58>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	4619      	mov	r1, r3
 800420a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800420e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004212:	fbb2 f3f3 	udiv	r3, r2, r3
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fe8b 	bl	8004f32 <HAL_SYSTICK_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e00e      	b.n	8004244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b0f      	cmp	r3, #15
 800422a:	d80a      	bhi.n	8004242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800422c:	2200      	movs	r2, #0
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	f000 fe53 	bl	8004ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004238:	4a06      	ldr	r2, [pc, #24]	; (8004254 <HAL_InitTick+0x5c>)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e000      	b.n	8004244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20000028 	.word	0x20000028
 8004250:	20000030 	.word	0x20000030
 8004254:	2000002c 	.word	0x2000002c

08004258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_IncTick+0x20>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_IncTick+0x24>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4413      	add	r3, r2
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <HAL_IncTick+0x24>)
 800426a:	6013      	str	r3, [r2, #0]
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000030 	.word	0x20000030
 800427c:	200008e8 	.word	0x200008e8

08004280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return uwTick;
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_GetTick+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	200008e8 	.word	0x200008e8

08004298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042a0:	f7ff ffee 	bl	8004280 <HAL_GetTick>
 80042a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d005      	beq.n	80042be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042b2:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <HAL_Delay+0x44>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042be:	bf00      	nop
 80042c0:	f7ff ffde 	bl	8004280 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d8f7      	bhi.n	80042c0 <HAL_Delay+0x28>
  {
  }
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000030 	.word	0x20000030

080042e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e033      	b.n	800435e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d109      	bne.n	8004312 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff fbbc 	bl	8003a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b00      	cmp	r3, #0
 800431c:	d118      	bne.n	8004350 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004326:	f023 0302 	bic.w	r3, r3, #2
 800432a:	f043 0202 	orr.w	r2, r3, #2
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fbf2 	bl	8004b1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f023 0303 	bic.w	r3, r3, #3
 8004346:	f043 0201 	orr.w	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
 800434e:	e001      	b.n	8004354 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_ADC_Start+0x1a>
 800437e:	2302      	movs	r3, #2
 8004380:	e097      	b.n	80044b2 <HAL_ADC_Start+0x14a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b01      	cmp	r3, #1
 8004396:	d018      	beq.n	80043ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043a8:	4b45      	ldr	r3, [pc, #276]	; (80044c0 <HAL_ADC_Start+0x158>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a45      	ldr	r2, [pc, #276]	; (80044c4 <HAL_ADC_Start+0x15c>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	0c9a      	lsrs	r2, r3, #18
 80043b4:	4613      	mov	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80043bc:	e002      	b.n	80043c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f9      	bne.n	80043be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d15f      	bne.n	8004498 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004402:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004416:	d106      	bne.n	8004426 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441c:	f023 0206 	bic.w	r2, r3, #6
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	645a      	str	r2, [r3, #68]	; 0x44
 8004424:	e002      	b.n	800442c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004434:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_ADC_Start+0x160>)
 8004436:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004440:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10f      	bne.n	800446e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d129      	bne.n	80044b0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	e020      	b.n	80044b0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a16      	ldr	r2, [pc, #88]	; (80044cc <HAL_ADC_Start+0x164>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d11b      	bne.n	80044b0 <HAL_ADC_Start+0x148>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d114      	bne.n	80044b0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004494:	609a      	str	r2, [r3, #8]
 8004496:	e00b      	b.n	80044b0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f043 0210 	orr.w	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a8:	f043 0201 	orr.w	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000028 	.word	0x20000028
 80044c4:	431bde83 	.word	0x431bde83
 80044c8:	40012300 	.word	0x40012300
 80044cc:	40012000 	.word	0x40012000

080044d0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ec:	d113      	bne.n	8004516 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fc:	d10b      	bne.n	8004516 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e063      	b.n	80045de <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004516:	f7ff feb3 	bl	8004280 <HAL_GetTick>
 800451a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800451c:	e021      	b.n	8004562 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d01d      	beq.n	8004562 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_ADC_PollForConversion+0x6c>
 800452c:	f7ff fea8 	bl	8004280 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d212      	bcs.n	8004562 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d00b      	beq.n	8004562 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f043 0204 	orr.w	r2, r3, #4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e03d      	b.n	80045de <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b02      	cmp	r3, #2
 800456e:	d1d6      	bne.n	800451e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0212 	mvn.w	r2, #18
 8004578:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d123      	bne.n	80045dc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004598:	2b00      	cmp	r3, #0
 800459a:	d11f      	bne.n	80045dc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d006      	beq.n	80045b8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d111      	bne.n	80045dc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f043 0201 	orr.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b02      	cmp	r3, #2
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b20      	cmp	r3, #32
 8004618:	bf0c      	ite	eq
 800461a:	2301      	moveq	r3, #1
 800461c:	2300      	movne	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d049      	beq.n	80046bc <HAL_ADC_IRQHandler+0xd6>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d046      	beq.n	80046bc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f003 0310 	and.w	r3, r3, #16
 8004636:	2b00      	cmp	r3, #0
 8004638:	d105      	bne.n	8004646 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d12b      	bne.n	80046ac <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004658:	2b00      	cmp	r3, #0
 800465a:	d127      	bne.n	80046ac <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004666:	2b00      	cmp	r3, #0
 8004668:	d006      	beq.n	8004678 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004674:	2b00      	cmp	r3, #0
 8004676:	d119      	bne.n	80046ac <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0220 	bic.w	r2, r2, #32
 8004686:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	f043 0201 	orr.w	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f8e8 	bl	8004882 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f06f 0212 	mvn.w	r2, #18
 80046ba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	bf0c      	ite	eq
 80046ca:	2301      	moveq	r3, #1
 80046cc:	2300      	movne	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046dc:	2b80      	cmp	r3, #128	; 0x80
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d057      	beq.n	800479e <HAL_ADC_IRQHandler+0x1b8>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d054      	beq.n	800479e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d105      	bne.n	800470c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d139      	bne.n	800478e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004724:	2b00      	cmp	r3, #0
 8004726:	d006      	beq.n	8004736 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004732:	2b00      	cmp	r3, #0
 8004734:	d12b      	bne.n	800478e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004740:	2b00      	cmp	r3, #0
 8004742:	d124      	bne.n	800478e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800474e:	2b00      	cmp	r3, #0
 8004750:	d11d      	bne.n	800478e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004756:	2b00      	cmp	r3, #0
 8004758:	d119      	bne.n	800478e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004768:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d105      	bne.n	800478e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f043 0201 	orr.w	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fac0 	bl	8004d14 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 020c 	mvn.w	r2, #12
 800479c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	bf0c      	ite	eq
 80047c2:	2301      	moveq	r3, #1
 80047c4:	2300      	movne	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d017      	beq.n	8004800 <HAL_ADC_IRQHandler+0x21a>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d014      	beq.n	8004800 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d10d      	bne.n	8004800 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f850 	bl	8004896 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f06f 0201 	mvn.w	r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b20      	cmp	r3, #32
 800480c:	bf0c      	ite	eq
 800480e:	2301      	moveq	r3, #1
 8004810:	2300      	movne	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004824:	bf0c      	ite	eq
 8004826:	2301      	moveq	r3, #1
 8004828:	2300      	movne	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d015      	beq.n	8004860 <HAL_ADC_IRQHandler+0x27a>
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d012      	beq.n	8004860 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	f043 0202 	orr.w	r2, r3, #2
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f06f 0220 	mvn.w	r2, #32
 800484e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f82a 	bl	80048aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f06f 0220 	mvn.w	r2, #32
 800485e:	601a      	str	r2, [r3, #0]
  }
}
 8004860:	bf00      	nop
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x1c>
 80048d8:	2302      	movs	r3, #2
 80048da:	e105      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x228>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b09      	cmp	r3, #9
 80048ea:	d925      	bls.n	8004938 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68d9      	ldr	r1, [r3, #12]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	4613      	mov	r3, r2
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	4413      	add	r3, r2
 8004900:	3b1e      	subs	r3, #30
 8004902:	2207      	movs	r2, #7
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43da      	mvns	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	400a      	ands	r2, r1
 8004910:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68d9      	ldr	r1, [r3, #12]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	b29b      	uxth	r3, r3
 8004922:	4618      	mov	r0, r3
 8004924:	4603      	mov	r3, r0
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	4403      	add	r3, r0
 800492a:	3b1e      	subs	r3, #30
 800492c:	409a      	lsls	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	60da      	str	r2, [r3, #12]
 8004936:	e022      	b.n	800497e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6919      	ldr	r1, [r3, #16]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	2207      	movs	r2, #7
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43da      	mvns	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	400a      	ands	r2, r1
 800495a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6919      	ldr	r1, [r3, #16]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	4618      	mov	r0, r3
 800496e:	4603      	mov	r3, r0
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	4403      	add	r3, r0
 8004974:	409a      	lsls	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b06      	cmp	r3, #6
 8004984:	d824      	bhi.n	80049d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	3b05      	subs	r3, #5
 8004998:	221f      	movs	r2, #31
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	43da      	mvns	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	400a      	ands	r2, r1
 80049a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	4618      	mov	r0, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	3b05      	subs	r3, #5
 80049c2:	fa00 f203 	lsl.w	r2, r0, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	635a      	str	r2, [r3, #52]	; 0x34
 80049ce:	e04c      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b0c      	cmp	r3, #12
 80049d6:	d824      	bhi.n	8004a22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	3b23      	subs	r3, #35	; 0x23
 80049ea:	221f      	movs	r2, #31
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	43da      	mvns	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	400a      	ands	r2, r1
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	4618      	mov	r0, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	3b23      	subs	r3, #35	; 0x23
 8004a14:	fa00 f203 	lsl.w	r2, r0, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a20:	e023      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	3b41      	subs	r3, #65	; 0x41
 8004a34:	221f      	movs	r2, #31
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	400a      	ands	r2, r1
 8004a42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4618      	mov	r0, r3
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3b41      	subs	r3, #65	; 0x41
 8004a5e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a6a:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <HAL_ADC_ConfigChannel+0x234>)
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <HAL_ADC_ConfigChannel+0x238>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d109      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x1cc>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b12      	cmp	r3, #18
 8004a7e:	d105      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <HAL_ADC_ConfigChannel+0x238>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d123      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x21e>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d003      	beq.n	8004aa6 <HAL_ADC_ConfigChannel+0x1e6>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b11      	cmp	r3, #17
 8004aa4:	d11b      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d111      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004aba:	4b10      	ldr	r3, [pc, #64]	; (8004afc <HAL_ADC_ConfigChannel+0x23c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a10      	ldr	r2, [pc, #64]	; (8004b00 <HAL_ADC_ConfigChannel+0x240>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	0c9a      	lsrs	r2, r3, #18
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ad0:	e002      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f9      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	40012300 	.word	0x40012300
 8004af8:	40012000 	.word	0x40012000
 8004afc:	20000028 	.word	0x20000028
 8004b00:	431bde83 	.word	0x431bde83

08004b04 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b24:	4b79      	ldr	r3, [pc, #484]	; (8004d0c <ADC_Init+0x1f0>)
 8004b26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	021a      	lsls	r2, r3, #8
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6899      	ldr	r1, [r3, #8]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	4a58      	ldr	r2, [pc, #352]	; (8004d10 <ADC_Init+0x1f4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6899      	ldr	r1, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6899      	ldr	r1, [r3, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]
 8004bf8:	e00f      	b.n	8004c1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0202 	bic.w	r2, r2, #2
 8004c28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6899      	ldr	r1, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	7e1b      	ldrb	r3, [r3, #24]
 8004c34:	005a      	lsls	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	3b01      	subs	r3, #1
 8004c74:	035a      	lsls	r2, r3, #13
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	e007      	b.n	8004c90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	051a      	lsls	r2, r3, #20
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6899      	ldr	r1, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cd2:	025a      	lsls	r2, r3, #9
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6899      	ldr	r1, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	029a      	lsls	r2, r3, #10
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	609a      	str	r2, [r3, #8]
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40012300 	.word	0x40012300
 8004d10:	0f000001 	.word	0x0f000001

08004d14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <__NVIC_SetPriorityGrouping+0x44>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d44:	4013      	ands	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d5a:	4a04      	ldr	r2, [pc, #16]	; (8004d6c <__NVIC_SetPriorityGrouping+0x44>)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	60d3      	str	r3, [r2, #12]
}
 8004d60:	bf00      	nop
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	e000ed00 	.word	0xe000ed00

08004d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <__NVIC_GetPriorityGrouping+0x18>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	0a1b      	lsrs	r3, r3, #8
 8004d7a:	f003 0307 	and.w	r3, r3, #7
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	db0b      	blt.n	8004db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	f003 021f 	and.w	r2, r3, #31
 8004da4:	4907      	ldr	r1, [pc, #28]	; (8004dc4 <__NVIC_EnableIRQ+0x38>)
 8004da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2001      	movs	r0, #1
 8004dae:	fa00 f202 	lsl.w	r2, r0, r2
 8004db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	e000e100 	.word	0xe000e100

08004dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	6039      	str	r1, [r7, #0]
 8004dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	db0a      	blt.n	8004df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	490c      	ldr	r1, [pc, #48]	; (8004e14 <__NVIC_SetPriority+0x4c>)
 8004de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de6:	0112      	lsls	r2, r2, #4
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	440b      	add	r3, r1
 8004dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004df0:	e00a      	b.n	8004e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	4908      	ldr	r1, [pc, #32]	; (8004e18 <__NVIC_SetPriority+0x50>)
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	3b04      	subs	r3, #4
 8004e00:	0112      	lsls	r2, r2, #4
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	440b      	add	r3, r1
 8004e06:	761a      	strb	r2, [r3, #24]
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	e000e100 	.word	0xe000e100
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b089      	sub	sp, #36	; 0x24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f1c3 0307 	rsb	r3, r3, #7
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	bf28      	it	cs
 8004e3a:	2304      	movcs	r3, #4
 8004e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3304      	adds	r3, #4
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d902      	bls.n	8004e4c <NVIC_EncodePriority+0x30>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3b03      	subs	r3, #3
 8004e4a:	e000      	b.n	8004e4e <NVIC_EncodePriority+0x32>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e50:	f04f 32ff 	mov.w	r2, #4294967295
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43da      	mvns	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	401a      	ands	r2, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e64:	f04f 31ff 	mov.w	r1, #4294967295
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6e:	43d9      	mvns	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e74:	4313      	orrs	r3, r2
         );
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3724      	adds	r7, #36	; 0x24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e94:	d301      	bcc.n	8004e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e96:	2301      	movs	r3, #1
 8004e98:	e00f      	b.n	8004eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ec4 <SysTick_Config+0x40>)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ea2:	210f      	movs	r1, #15
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea8:	f7ff ff8e 	bl	8004dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <SysTick_Config+0x40>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <SysTick_Config+0x40>)
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	e000e010 	.word	0xe000e010

08004ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff ff29 	bl	8004d28 <__NVIC_SetPriorityGrouping>
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b086      	sub	sp, #24
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ef0:	f7ff ff3e 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 8004ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	6978      	ldr	r0, [r7, #20]
 8004efc:	f7ff ff8e 	bl	8004e1c <NVIC_EncodePriority>
 8004f00:	4602      	mov	r2, r0
 8004f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f06:	4611      	mov	r1, r2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff ff5d 	bl	8004dc8 <__NVIC_SetPriority>
}
 8004f0e:	bf00      	nop
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff ff31 	bl	8004d8c <__NVIC_EnableIRQ>
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff ffa2 	bl	8004e84 <SysTick_Config>
 8004f40:	4603      	mov	r3, r0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e00e      	b.n	8004f7a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	795b      	ldrb	r3, [r3, #5]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d105      	bne.n	8004f72 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7fe fdad 	bl	8003acc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f90:	f7ff f976 	bl	8004280 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e099      	b.n	80050d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0201 	bic.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fc0:	e00f      	b.n	8004fe2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fc2:	f7ff f95d 	bl	8004280 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b05      	cmp	r3, #5
 8004fce:	d908      	bls.n	8004fe2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e078      	b.n	80050d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e8      	bne.n	8004fc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4b38      	ldr	r3, [pc, #224]	; (80050dc <HAL_DMA_Init+0x158>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800500e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800501a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b04      	cmp	r3, #4
 800503a:	d107      	bne.n	800504c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	4313      	orrs	r3, r2
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0307 	bic.w	r3, r3, #7
 8005062:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	2b04      	cmp	r3, #4
 8005074:	d117      	bne.n	80050a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00e      	beq.n	80050a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fa7b 	bl	8005584 <DMA_CheckFifoParam>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2240      	movs	r2, #64	; 0x40
 8005098:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80050a2:	2301      	movs	r3, #1
 80050a4:	e016      	b.n	80050d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fa32 	bl	8005518 <DMA_CalcBaseAndBitshift>
 80050b4:	4603      	mov	r3, r0
 80050b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050bc:	223f      	movs	r2, #63	; 0x3f
 80050be:	409a      	lsls	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	f010803f 	.word	0xf010803f

080050e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050ee:	f7ff f8c7 	bl	8004280 <HAL_GetTick>
 80050f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d008      	beq.n	8005112 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2280      	movs	r2, #128	; 0x80
 8005104:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e052      	b.n	80051b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0216 	bic.w	r2, r2, #22
 8005120:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695a      	ldr	r2, [r3, #20]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005130:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <HAL_DMA_Abort+0x62>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800513e:	2b00      	cmp	r3, #0
 8005140:	d007      	beq.n	8005152 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0208 	bic.w	r2, r2, #8
 8005150:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005162:	e013      	b.n	800518c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005164:	f7ff f88c 	bl	8004280 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b05      	cmp	r3, #5
 8005170:	d90c      	bls.n	800518c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2203      	movs	r2, #3
 800517c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e015      	b.n	80051b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e4      	bne.n	8005164 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519e:	223f      	movs	r2, #63	; 0x3f
 80051a0:	409a      	lsls	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d004      	beq.n	80051de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2280      	movs	r2, #128	; 0x80
 80051d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e00c      	b.n	80051f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2205      	movs	r2, #5
 80051e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0201 	bic.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005210:	4b92      	ldr	r3, [pc, #584]	; (800545c <HAL_DMA_IRQHandler+0x258>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a92      	ldr	r2, [pc, #584]	; (8005460 <HAL_DMA_IRQHandler+0x25c>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	0a9b      	lsrs	r3, r3, #10
 800521c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005222:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522e:	2208      	movs	r2, #8
 8005230:	409a      	lsls	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4013      	ands	r3, r2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d01a      	beq.n	8005270 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d013      	beq.n	8005270 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0204 	bic.w	r2, r2, #4
 8005256:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525c:	2208      	movs	r2, #8
 800525e:	409a      	lsls	r2, r3
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005268:	f043 0201 	orr.w	r2, r3, #1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005274:	2201      	movs	r2, #1
 8005276:	409a      	lsls	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d012      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00b      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005292:	2201      	movs	r2, #1
 8005294:	409a      	lsls	r2, r3
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	f043 0202 	orr.w	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052aa:	2204      	movs	r2, #4
 80052ac:	409a      	lsls	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d012      	beq.n	80052dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00b      	beq.n	80052dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c8:	2204      	movs	r2, #4
 80052ca:	409a      	lsls	r2, r3
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	f043 0204 	orr.w	r2, r3, #4
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e0:	2210      	movs	r2, #16
 80052e2:	409a      	lsls	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4013      	ands	r3, r2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d043      	beq.n	8005374 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0308 	and.w	r3, r3, #8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d03c      	beq.n	8005374 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fe:	2210      	movs	r2, #16
 8005300:	409a      	lsls	r2, r3
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d018      	beq.n	8005346 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d108      	bne.n	8005334 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d024      	beq.n	8005374 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	4798      	blx	r3
 8005332:	e01f      	b.n	8005374 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01b      	beq.n	8005374 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4798      	blx	r3
 8005344:	e016      	b.n	8005374 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d107      	bne.n	8005364 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0208 	bic.w	r2, r2, #8
 8005362:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005378:	2220      	movs	r2, #32
 800537a:	409a      	lsls	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 808e 	beq.w	80054a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0310 	and.w	r3, r3, #16
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8086 	beq.w	80054a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539a:	2220      	movs	r2, #32
 800539c:	409a      	lsls	r2, r3
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d136      	bne.n	800541c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0216 	bic.w	r2, r2, #22
 80053bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695a      	ldr	r2, [r3, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <HAL_DMA_IRQHandler+0x1da>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0208 	bic.w	r2, r2, #8
 80053ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f2:	223f      	movs	r2, #63	; 0x3f
 80053f4:	409a      	lsls	r2, r3
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540e:	2b00      	cmp	r3, #0
 8005410:	d07d      	beq.n	800550e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
        }
        return;
 800541a:	e078      	b.n	800550e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d01c      	beq.n	8005464 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d108      	bne.n	800544a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543c:	2b00      	cmp	r3, #0
 800543e:	d030      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	4798      	blx	r3
 8005448:	e02b      	b.n	80054a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d027      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	4798      	blx	r3
 800545a:	e022      	b.n	80054a2 <HAL_DMA_IRQHandler+0x29e>
 800545c:	20000028 	.word	0x20000028
 8005460:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10f      	bne.n	8005492 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0210 	bic.w	r2, r2, #16
 8005480:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d032      	beq.n	8005510 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d022      	beq.n	80054fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2205      	movs	r2, #5
 80054ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	3301      	adds	r3, #1
 80054d2:	60bb      	str	r3, [r7, #8]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d307      	bcc.n	80054ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f2      	bne.n	80054ce <HAL_DMA_IRQHandler+0x2ca>
 80054e8:	e000      	b.n	80054ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80054ea:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
 800550c:	e000      	b.n	8005510 <HAL_DMA_IRQHandler+0x30c>
        return;
 800550e:	bf00      	nop
    }
  }
}
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop

08005518 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	3b10      	subs	r3, #16
 8005528:	4a14      	ldr	r2, [pc, #80]	; (800557c <DMA_CalcBaseAndBitshift+0x64>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	091b      	lsrs	r3, r3, #4
 8005530:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005532:	4a13      	ldr	r2, [pc, #76]	; (8005580 <DMA_CalcBaseAndBitshift+0x68>)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b03      	cmp	r3, #3
 8005544:	d909      	bls.n	800555a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800554e:	f023 0303 	bic.w	r3, r3, #3
 8005552:	1d1a      	adds	r2, r3, #4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	659a      	str	r2, [r3, #88]	; 0x58
 8005558:	e007      	b.n	800556a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005562:	f023 0303 	bic.w	r3, r3, #3
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	aaaaaaab 	.word	0xaaaaaaab
 8005580:	0800b4f8 	.word	0x0800b4f8

08005584 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005594:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d11f      	bne.n	80055de <DMA_CheckFifoParam+0x5a>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d856      	bhi.n	8005652 <DMA_CheckFifoParam+0xce>
 80055a4:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <DMA_CheckFifoParam+0x28>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055bd 	.word	0x080055bd
 80055b0:	080055cf 	.word	0x080055cf
 80055b4:	080055bd 	.word	0x080055bd
 80055b8:	08005653 	.word	0x08005653
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d046      	beq.n	8005656 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055cc:	e043      	b.n	8005656 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055d6:	d140      	bne.n	800565a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055dc:	e03d      	b.n	800565a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e6:	d121      	bne.n	800562c <DMA_CheckFifoParam+0xa8>
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d837      	bhi.n	800565e <DMA_CheckFifoParam+0xda>
 80055ee:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <DMA_CheckFifoParam+0x70>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	08005605 	.word	0x08005605
 80055f8:	0800560b 	.word	0x0800560b
 80055fc:	08005605 	.word	0x08005605
 8005600:	0800561d 	.word	0x0800561d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	73fb      	strb	r3, [r7, #15]
      break;
 8005608:	e030      	b.n	800566c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d025      	beq.n	8005662 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800561a:	e022      	b.n	8005662 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005624:	d11f      	bne.n	8005666 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800562a:	e01c      	b.n	8005666 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d903      	bls.n	800563a <DMA_CheckFifoParam+0xb6>
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b03      	cmp	r3, #3
 8005636:	d003      	beq.n	8005640 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005638:	e018      	b.n	800566c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	73fb      	strb	r3, [r7, #15]
      break;
 800563e:	e015      	b.n	800566c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00e      	beq.n	800566a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
      break;
 8005650:	e00b      	b.n	800566a <DMA_CheckFifoParam+0xe6>
      break;
 8005652:	bf00      	nop
 8005654:	e00a      	b.n	800566c <DMA_CheckFifoParam+0xe8>
      break;
 8005656:	bf00      	nop
 8005658:	e008      	b.n	800566c <DMA_CheckFifoParam+0xe8>
      break;
 800565a:	bf00      	nop
 800565c:	e006      	b.n	800566c <DMA_CheckFifoParam+0xe8>
      break;
 800565e:	bf00      	nop
 8005660:	e004      	b.n	800566c <DMA_CheckFifoParam+0xe8>
      break;
 8005662:	bf00      	nop
 8005664:	e002      	b.n	800566c <DMA_CheckFifoParam+0xe8>
      break;   
 8005666:	bf00      	nop
 8005668:	e000      	b.n	800566c <DMA_CheckFifoParam+0xe8>
      break;
 800566a:	bf00      	nop
    }
  } 
  
  return status; 
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop

0800567c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800567c:	b480      	push	{r7}
 800567e:	b089      	sub	sp, #36	; 0x24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005686:	2300      	movs	r3, #0
 8005688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800568e:	2300      	movs	r3, #0
 8005690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005692:	2300      	movs	r3, #0
 8005694:	61fb      	str	r3, [r7, #28]
 8005696:	e159      	b.n	800594c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005698:	2201      	movs	r2, #1
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4013      	ands	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	f040 8148 	bne.w	8005946 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d005      	beq.n	80056ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d130      	bne.n	8005730 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	2203      	movs	r2, #3
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	fa02 f303 	lsl.w	r3, r2, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005704:	2201      	movs	r2, #1
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	43db      	mvns	r3, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4013      	ands	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f003 0201 	and.w	r2, r3, #1
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	4313      	orrs	r3, r2
 8005728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	2b03      	cmp	r3, #3
 800573a:	d017      	beq.n	800576c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	2203      	movs	r2, #3
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	43db      	mvns	r3, r3
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	4013      	ands	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4313      	orrs	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d123      	bne.n	80057c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	08da      	lsrs	r2, r3, #3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3208      	adds	r2, #8
 8005780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	220f      	movs	r2, #15
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	43db      	mvns	r3, r3
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4013      	ands	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	08da      	lsrs	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3208      	adds	r2, #8
 80057ba:	69b9      	ldr	r1, [r7, #24]
 80057bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	2203      	movs	r2, #3
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f003 0203 	and.w	r2, r3, #3
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 80a2 	beq.w	8005946 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	4b57      	ldr	r3, [pc, #348]	; (8005964 <HAL_GPIO_Init+0x2e8>)
 8005808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580a:	4a56      	ldr	r2, [pc, #344]	; (8005964 <HAL_GPIO_Init+0x2e8>)
 800580c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005810:	6453      	str	r3, [r2, #68]	; 0x44
 8005812:	4b54      	ldr	r3, [pc, #336]	; (8005964 <HAL_GPIO_Init+0x2e8>)
 8005814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800581e:	4a52      	ldr	r2, [pc, #328]	; (8005968 <HAL_GPIO_Init+0x2ec>)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	089b      	lsrs	r3, r3, #2
 8005824:	3302      	adds	r3, #2
 8005826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800582a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	220f      	movs	r2, #15
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43db      	mvns	r3, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4013      	ands	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a49      	ldr	r2, [pc, #292]	; (800596c <HAL_GPIO_Init+0x2f0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d019      	beq.n	800587e <HAL_GPIO_Init+0x202>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a48      	ldr	r2, [pc, #288]	; (8005970 <HAL_GPIO_Init+0x2f4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <HAL_GPIO_Init+0x1fe>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a47      	ldr	r2, [pc, #284]	; (8005974 <HAL_GPIO_Init+0x2f8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00d      	beq.n	8005876 <HAL_GPIO_Init+0x1fa>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a46      	ldr	r2, [pc, #280]	; (8005978 <HAL_GPIO_Init+0x2fc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d007      	beq.n	8005872 <HAL_GPIO_Init+0x1f6>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a45      	ldr	r2, [pc, #276]	; (800597c <HAL_GPIO_Init+0x300>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d101      	bne.n	800586e <HAL_GPIO_Init+0x1f2>
 800586a:	2304      	movs	r3, #4
 800586c:	e008      	b.n	8005880 <HAL_GPIO_Init+0x204>
 800586e:	2307      	movs	r3, #7
 8005870:	e006      	b.n	8005880 <HAL_GPIO_Init+0x204>
 8005872:	2303      	movs	r3, #3
 8005874:	e004      	b.n	8005880 <HAL_GPIO_Init+0x204>
 8005876:	2302      	movs	r3, #2
 8005878:	e002      	b.n	8005880 <HAL_GPIO_Init+0x204>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <HAL_GPIO_Init+0x204>
 800587e:	2300      	movs	r3, #0
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	f002 0203 	and.w	r2, r2, #3
 8005886:	0092      	lsls	r2, r2, #2
 8005888:	4093      	lsls	r3, r2
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4313      	orrs	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005890:	4935      	ldr	r1, [pc, #212]	; (8005968 <HAL_GPIO_Init+0x2ec>)
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	089b      	lsrs	r3, r3, #2
 8005896:	3302      	adds	r3, #2
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800589e:	4b38      	ldr	r3, [pc, #224]	; (8005980 <HAL_GPIO_Init+0x304>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	43db      	mvns	r3, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4013      	ands	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058c2:	4a2f      	ldr	r2, [pc, #188]	; (8005980 <HAL_GPIO_Init+0x304>)
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80058c8:	4b2d      	ldr	r3, [pc, #180]	; (8005980 <HAL_GPIO_Init+0x304>)
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4013      	ands	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058ec:	4a24      	ldr	r2, [pc, #144]	; (8005980 <HAL_GPIO_Init+0x304>)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058f2:	4b23      	ldr	r3, [pc, #140]	; (8005980 <HAL_GPIO_Init+0x304>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	43db      	mvns	r3, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4013      	ands	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005916:	4a1a      	ldr	r2, [pc, #104]	; (8005980 <HAL_GPIO_Init+0x304>)
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800591c:	4b18      	ldr	r3, [pc, #96]	; (8005980 <HAL_GPIO_Init+0x304>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	43db      	mvns	r3, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4013      	ands	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005940:	4a0f      	ldr	r2, [pc, #60]	; (8005980 <HAL_GPIO_Init+0x304>)
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	3301      	adds	r3, #1
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	2b0f      	cmp	r3, #15
 8005950:	f67f aea2 	bls.w	8005698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop
 8005958:	3724      	adds	r7, #36	; 0x24
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40023800 	.word	0x40023800
 8005968:	40013800 	.word	0x40013800
 800596c:	40020000 	.word	0x40020000
 8005970:	40020400 	.word	0x40020400
 8005974:	40020800 	.word	0x40020800
 8005978:	40020c00 	.word	0x40020c00
 800597c:	40021000 	.word	0x40021000
 8005980:	40013c00 	.word	0x40013c00

08005984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	887b      	ldrh	r3, [r7, #2]
 8005996:	4013      	ands	r3, r2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
 80059a0:	e001      	b.n	80059a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	807b      	strh	r3, [r7, #2]
 80059c0:	4613      	mov	r3, r2
 80059c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059c4:	787b      	ldrb	r3, [r7, #1]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059ca:	887a      	ldrh	r2, [r7, #2]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059d0:	e003      	b.n	80059da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059d2:	887b      	ldrh	r3, [r7, #2]
 80059d4:	041a      	lsls	r2, r3, #16
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	619a      	str	r2, [r3, #24]
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059f2:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d006      	beq.n	8005a0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059fe:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fd fdbe 	bl	8003588 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40013c00 	.word	0x40013c00

08005a18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e264      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d075      	beq.n	8005b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a36:	4ba3      	ldr	r3, [pc, #652]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d00c      	beq.n	8005a5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a42:	4ba0      	ldr	r3, [pc, #640]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d112      	bne.n	8005a74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a4e:	4b9d      	ldr	r3, [pc, #628]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a5a:	d10b      	bne.n	8005a74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a5c:	4b99      	ldr	r3, [pc, #612]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d05b      	beq.n	8005b20 <HAL_RCC_OscConfig+0x108>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d157      	bne.n	8005b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e23f      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7c:	d106      	bne.n	8005a8c <HAL_RCC_OscConfig+0x74>
 8005a7e:	4b91      	ldr	r3, [pc, #580]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a90      	ldr	r2, [pc, #576]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	e01d      	b.n	8005ac8 <HAL_RCC_OscConfig+0xb0>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x98>
 8005a96:	4b8b      	ldr	r3, [pc, #556]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a8a      	ldr	r2, [pc, #552]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	4b88      	ldr	r3, [pc, #544]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a87      	ldr	r2, [pc, #540]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e00b      	b.n	8005ac8 <HAL_RCC_OscConfig+0xb0>
 8005ab0:	4b84      	ldr	r3, [pc, #528]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a83      	ldr	r2, [pc, #524]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	4b81      	ldr	r3, [pc, #516]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a80      	ldr	r2, [pc, #512]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d013      	beq.n	8005af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad0:	f7fe fbd6 	bl	8004280 <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ad8:	f7fe fbd2 	bl	8004280 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b64      	cmp	r3, #100	; 0x64
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e204      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aea:	4b76      	ldr	r3, [pc, #472]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0xc0>
 8005af6:	e014      	b.n	8005b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af8:	f7fe fbc2 	bl	8004280 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b00:	f7fe fbbe 	bl	8004280 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b64      	cmp	r3, #100	; 0x64
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e1f0      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b12:	4b6c      	ldr	r3, [pc, #432]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0xe8>
 8005b1e:	e000      	b.n	8005b22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d063      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b2e:	4b65      	ldr	r3, [pc, #404]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f003 030c 	and.w	r3, r3, #12
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b3a:	4b62      	ldr	r3, [pc, #392]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d11c      	bne.n	8005b80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b46:	4b5f      	ldr	r3, [pc, #380]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d116      	bne.n	8005b80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b52:	4b5c      	ldr	r3, [pc, #368]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <HAL_RCC_OscConfig+0x152>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d001      	beq.n	8005b6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e1c4      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6a:	4b56      	ldr	r3, [pc, #344]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	4952      	ldr	r1, [pc, #328]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7e:	e03a      	b.n	8005bf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d020      	beq.n	8005bca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b88:	4b4f      	ldr	r3, [pc, #316]	; (8005cc8 <HAL_RCC_OscConfig+0x2b0>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8e:	f7fe fb77 	bl	8004280 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b96:	f7fe fb73 	bl	8004280 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e1a5      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba8:	4b46      	ldr	r3, [pc, #280]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb4:	4b43      	ldr	r3, [pc, #268]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	4940      	ldr	r1, [pc, #256]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	600b      	str	r3, [r1, #0]
 8005bc8:	e015      	b.n	8005bf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bca:	4b3f      	ldr	r3, [pc, #252]	; (8005cc8 <HAL_RCC_OscConfig+0x2b0>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd0:	f7fe fb56 	bl	8004280 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bd8:	f7fe fb52 	bl	8004280 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e184      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bea:	4b36      	ldr	r3, [pc, #216]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f0      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d030      	beq.n	8005c64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d016      	beq.n	8005c38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c0a:	4b30      	ldr	r3, [pc, #192]	; (8005ccc <HAL_RCC_OscConfig+0x2b4>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c10:	f7fe fb36 	bl	8004280 <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c18:	f7fe fb32 	bl	8004280 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e164      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c2a:	4b26      	ldr	r3, [pc, #152]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f0      	beq.n	8005c18 <HAL_RCC_OscConfig+0x200>
 8005c36:	e015      	b.n	8005c64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c38:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <HAL_RCC_OscConfig+0x2b4>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c3e:	f7fe fb1f 	bl	8004280 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c46:	f7fe fb1b 	bl	8004280 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e14d      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c58:	4b1a      	ldr	r3, [pc, #104]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f0      	bne.n	8005c46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 80a0 	beq.w	8005db2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c72:	2300      	movs	r3, #0
 8005c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10f      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c82:	2300      	movs	r3, #0
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	4a0e      	ldr	r2, [pc, #56]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c90:	6413      	str	r3, [r2, #64]	; 0x40
 8005c92:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <HAL_RCC_OscConfig+0x2ac>)
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9a:	60bb      	str	r3, [r7, #8]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca2:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <HAL_RCC_OscConfig+0x2b8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d121      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cae:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <HAL_RCC_OscConfig+0x2b8>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a07      	ldr	r2, [pc, #28]	; (8005cd0 <HAL_RCC_OscConfig+0x2b8>)
 8005cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cba:	f7fe fae1 	bl	8004280 <HAL_GetTick>
 8005cbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc0:	e011      	b.n	8005ce6 <HAL_RCC_OscConfig+0x2ce>
 8005cc2:	bf00      	nop
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	42470000 	.word	0x42470000
 8005ccc:	42470e80 	.word	0x42470e80
 8005cd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd4:	f7fe fad4 	bl	8004280 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e106      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce6:	4b85      	ldr	r3, [pc, #532]	; (8005efc <HAL_RCC_OscConfig+0x4e4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f0      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d106      	bne.n	8005d08 <HAL_RCC_OscConfig+0x2f0>
 8005cfa:	4b81      	ldr	r3, [pc, #516]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	4a80      	ldr	r2, [pc, #512]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	6713      	str	r3, [r2, #112]	; 0x70
 8005d06:	e01c      	b.n	8005d42 <HAL_RCC_OscConfig+0x32a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b05      	cmp	r3, #5
 8005d0e:	d10c      	bne.n	8005d2a <HAL_RCC_OscConfig+0x312>
 8005d10:	4b7b      	ldr	r3, [pc, #492]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d14:	4a7a      	ldr	r2, [pc, #488]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005d16:	f043 0304 	orr.w	r3, r3, #4
 8005d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1c:	4b78      	ldr	r3, [pc, #480]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d20:	4a77      	ldr	r2, [pc, #476]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005d22:	f043 0301 	orr.w	r3, r3, #1
 8005d26:	6713      	str	r3, [r2, #112]	; 0x70
 8005d28:	e00b      	b.n	8005d42 <HAL_RCC_OscConfig+0x32a>
 8005d2a:	4b75      	ldr	r3, [pc, #468]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	4a74      	ldr	r2, [pc, #464]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005d30:	f023 0301 	bic.w	r3, r3, #1
 8005d34:	6713      	str	r3, [r2, #112]	; 0x70
 8005d36:	4b72      	ldr	r3, [pc, #456]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3a:	4a71      	ldr	r2, [pc, #452]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005d3c:	f023 0304 	bic.w	r3, r3, #4
 8005d40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d015      	beq.n	8005d76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4a:	f7fe fa99 	bl	8004280 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d50:	e00a      	b.n	8005d68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d52:	f7fe fa95 	bl	8004280 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e0c5      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d68:	4b65      	ldr	r3, [pc, #404]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0ee      	beq.n	8005d52 <HAL_RCC_OscConfig+0x33a>
 8005d74:	e014      	b.n	8005da0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d76:	f7fe fa83 	bl	8004280 <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d7c:	e00a      	b.n	8005d94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d7e:	f7fe fa7f 	bl	8004280 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e0af      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d94:	4b5a      	ldr	r3, [pc, #360]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1ee      	bne.n	8005d7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d105      	bne.n	8005db2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da6:	4b56      	ldr	r3, [pc, #344]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	4a55      	ldr	r2, [pc, #340]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 809b 	beq.w	8005ef2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dbc:	4b50      	ldr	r3, [pc, #320]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 030c 	and.w	r3, r3, #12
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d05c      	beq.n	8005e82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d141      	bne.n	8005e54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd0:	4b4c      	ldr	r3, [pc, #304]	; (8005f04 <HAL_RCC_OscConfig+0x4ec>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd6:	f7fe fa53 	bl	8004280 <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dde:	f7fe fa4f 	bl	8004280 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e081      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df0:	4b43      	ldr	r3, [pc, #268]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1f0      	bne.n	8005dde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	019b      	lsls	r3, r3, #6
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	3b01      	subs	r3, #1
 8005e16:	041b      	lsls	r3, r3, #16
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	4937      	ldr	r1, [pc, #220]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e26:	4b37      	ldr	r3, [pc, #220]	; (8005f04 <HAL_RCC_OscConfig+0x4ec>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2c:	f7fe fa28 	bl	8004280 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e34:	f7fe fa24 	bl	8004280 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e056      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e46:	4b2e      	ldr	r3, [pc, #184]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0f0      	beq.n	8005e34 <HAL_RCC_OscConfig+0x41c>
 8005e52:	e04e      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e54:	4b2b      	ldr	r3, [pc, #172]	; (8005f04 <HAL_RCC_OscConfig+0x4ec>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5a:	f7fe fa11 	bl	8004280 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e62:	f7fe fa0d 	bl	8004280 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e03f      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e74:	4b22      	ldr	r3, [pc, #136]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1f0      	bne.n	8005e62 <HAL_RCC_OscConfig+0x44a>
 8005e80:	e037      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e032      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e8e:	4b1c      	ldr	r3, [pc, #112]	; (8005f00 <HAL_RCC_OscConfig+0x4e8>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d028      	beq.n	8005eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d121      	bne.n	8005eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d11a      	bne.n	8005eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ec4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d111      	bne.n	8005eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d107      	bne.n	8005eee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d001      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40007000 	.word	0x40007000
 8005f00:	40023800 	.word	0x40023800
 8005f04:	42470060 	.word	0x42470060

08005f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e0cc      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f1c:	4b68      	ldr	r3, [pc, #416]	; (80060c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d90c      	bls.n	8005f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2a:	4b65      	ldr	r3, [pc, #404]	; (80060c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f32:	4b63      	ldr	r3, [pc, #396]	; (80060c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d001      	beq.n	8005f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e0b8      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d020      	beq.n	8005f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f5c:	4b59      	ldr	r3, [pc, #356]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	4a58      	ldr	r2, [pc, #352]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f74:	4b53      	ldr	r3, [pc, #332]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	4a52      	ldr	r2, [pc, #328]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f80:	4b50      	ldr	r3, [pc, #320]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	494d      	ldr	r1, [pc, #308]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d044      	beq.n	8006028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d107      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fa6:	4b47      	ldr	r3, [pc, #284]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d119      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e07f      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d003      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d107      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc6:	4b3f      	ldr	r3, [pc, #252]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e06f      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd6:	4b3b      	ldr	r3, [pc, #236]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e067      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fe6:	4b37      	ldr	r3, [pc, #220]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f023 0203 	bic.w	r2, r3, #3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	4934      	ldr	r1, [pc, #208]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ff8:	f7fe f942 	bl	8004280 <HAL_GetTick>
 8005ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ffe:	e00a      	b.n	8006016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006000:	f7fe f93e 	bl	8004280 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	f241 3288 	movw	r2, #5000	; 0x1388
 800600e:	4293      	cmp	r3, r2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e04f      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006016:	4b2b      	ldr	r3, [pc, #172]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 020c 	and.w	r2, r3, #12
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	429a      	cmp	r2, r3
 8006026:	d1eb      	bne.n	8006000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006028:	4b25      	ldr	r3, [pc, #148]	; (80060c0 <HAL_RCC_ClockConfig+0x1b8>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d20c      	bcs.n	8006050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006036:	4b22      	ldr	r3, [pc, #136]	; (80060c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800603e:	4b20      	ldr	r3, [pc, #128]	; (80060c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d001      	beq.n	8006050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e032      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800605c:	4b19      	ldr	r3, [pc, #100]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4916      	ldr	r1, [pc, #88]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 800606a:	4313      	orrs	r3, r2
 800606c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800607a:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	490e      	ldr	r1, [pc, #56]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 800608a:	4313      	orrs	r3, r2
 800608c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800608e:	f000 f821 	bl	80060d4 <HAL_RCC_GetSysClockFreq>
 8006092:	4602      	mov	r2, r0
 8006094:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	091b      	lsrs	r3, r3, #4
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	490a      	ldr	r1, [pc, #40]	; (80060c8 <HAL_RCC_ClockConfig+0x1c0>)
 80060a0:	5ccb      	ldrb	r3, [r1, r3]
 80060a2:	fa22 f303 	lsr.w	r3, r2, r3
 80060a6:	4a09      	ldr	r2, [pc, #36]	; (80060cc <HAL_RCC_ClockConfig+0x1c4>)
 80060a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060aa:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <HAL_RCC_ClockConfig+0x1c8>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe f8a2 	bl	80041f8 <HAL_InitTick>

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	40023c00 	.word	0x40023c00
 80060c4:	40023800 	.word	0x40023800
 80060c8:	0800b4e0 	.word	0x0800b4e0
 80060cc:	20000028 	.word	0x20000028
 80060d0:	2000002c 	.word	0x2000002c

080060d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	607b      	str	r3, [r7, #4]
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	2300      	movs	r3, #0
 80060e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060ec:	4b67      	ldr	r3, [pc, #412]	; (800628c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f003 030c 	and.w	r3, r3, #12
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d00d      	beq.n	8006114 <HAL_RCC_GetSysClockFreq+0x40>
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	f200 80bd 	bhi.w	8006278 <HAL_RCC_GetSysClockFreq+0x1a4>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <HAL_RCC_GetSysClockFreq+0x34>
 8006102:	2b04      	cmp	r3, #4
 8006104:	d003      	beq.n	800610e <HAL_RCC_GetSysClockFreq+0x3a>
 8006106:	e0b7      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006108:	4b61      	ldr	r3, [pc, #388]	; (8006290 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800610a:	60bb      	str	r3, [r7, #8]
       break;
 800610c:	e0b7      	b.n	800627e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800610e:	4b61      	ldr	r3, [pc, #388]	; (8006294 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006110:	60bb      	str	r3, [r7, #8]
      break;
 8006112:	e0b4      	b.n	800627e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006114:	4b5d      	ldr	r3, [pc, #372]	; (800628c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800611c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800611e:	4b5b      	ldr	r3, [pc, #364]	; (800628c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d04d      	beq.n	80061c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800612a:	4b58      	ldr	r3, [pc, #352]	; (800628c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	099b      	lsrs	r3, r3, #6
 8006130:	461a      	mov	r2, r3
 8006132:	f04f 0300 	mov.w	r3, #0
 8006136:	f240 10ff 	movw	r0, #511	; 0x1ff
 800613a:	f04f 0100 	mov.w	r1, #0
 800613e:	ea02 0800 	and.w	r8, r2, r0
 8006142:	ea03 0901 	and.w	r9, r3, r1
 8006146:	4640      	mov	r0, r8
 8006148:	4649      	mov	r1, r9
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	f04f 0300 	mov.w	r3, #0
 8006152:	014b      	lsls	r3, r1, #5
 8006154:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006158:	0142      	lsls	r2, r0, #5
 800615a:	4610      	mov	r0, r2
 800615c:	4619      	mov	r1, r3
 800615e:	ebb0 0008 	subs.w	r0, r0, r8
 8006162:	eb61 0109 	sbc.w	r1, r1, r9
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	018b      	lsls	r3, r1, #6
 8006170:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006174:	0182      	lsls	r2, r0, #6
 8006176:	1a12      	subs	r2, r2, r0
 8006178:	eb63 0301 	sbc.w	r3, r3, r1
 800617c:	f04f 0000 	mov.w	r0, #0
 8006180:	f04f 0100 	mov.w	r1, #0
 8006184:	00d9      	lsls	r1, r3, #3
 8006186:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800618a:	00d0      	lsls	r0, r2, #3
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	eb12 0208 	adds.w	r2, r2, r8
 8006194:	eb43 0309 	adc.w	r3, r3, r9
 8006198:	f04f 0000 	mov.w	r0, #0
 800619c:	f04f 0100 	mov.w	r1, #0
 80061a0:	0259      	lsls	r1, r3, #9
 80061a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80061a6:	0250      	lsls	r0, r2, #9
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4610      	mov	r0, r2
 80061ae:	4619      	mov	r1, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	461a      	mov	r2, r3
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	f7fa fd5e 	bl	8000c78 <__aeabi_uldivmod>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4613      	mov	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e04a      	b.n	800625c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061c6:	4b31      	ldr	r3, [pc, #196]	; (800628c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	099b      	lsrs	r3, r3, #6
 80061cc:	461a      	mov	r2, r3
 80061ce:	f04f 0300 	mov.w	r3, #0
 80061d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061d6:	f04f 0100 	mov.w	r1, #0
 80061da:	ea02 0400 	and.w	r4, r2, r0
 80061de:	ea03 0501 	and.w	r5, r3, r1
 80061e2:	4620      	mov	r0, r4
 80061e4:	4629      	mov	r1, r5
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	014b      	lsls	r3, r1, #5
 80061f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061f4:	0142      	lsls	r2, r0, #5
 80061f6:	4610      	mov	r0, r2
 80061f8:	4619      	mov	r1, r3
 80061fa:	1b00      	subs	r0, r0, r4
 80061fc:	eb61 0105 	sbc.w	r1, r1, r5
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	018b      	lsls	r3, r1, #6
 800620a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800620e:	0182      	lsls	r2, r0, #6
 8006210:	1a12      	subs	r2, r2, r0
 8006212:	eb63 0301 	sbc.w	r3, r3, r1
 8006216:	f04f 0000 	mov.w	r0, #0
 800621a:	f04f 0100 	mov.w	r1, #0
 800621e:	00d9      	lsls	r1, r3, #3
 8006220:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006224:	00d0      	lsls	r0, r2, #3
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	1912      	adds	r2, r2, r4
 800622c:	eb45 0303 	adc.w	r3, r5, r3
 8006230:	f04f 0000 	mov.w	r0, #0
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	0299      	lsls	r1, r3, #10
 800623a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800623e:	0290      	lsls	r0, r2, #10
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4610      	mov	r0, r2
 8006246:	4619      	mov	r1, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	461a      	mov	r2, r3
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	f7fa fd12 	bl	8000c78 <__aeabi_uldivmod>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4613      	mov	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	0c1b      	lsrs	r3, r3, #16
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	3301      	adds	r3, #1
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	fbb2 f3f3 	udiv	r3, r2, r3
 8006274:	60bb      	str	r3, [r7, #8]
      break;
 8006276:	e002      	b.n	800627e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006278:	4b05      	ldr	r3, [pc, #20]	; (8006290 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800627a:	60bb      	str	r3, [r7, #8]
      break;
 800627c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800627e:	68bb      	ldr	r3, [r7, #8]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800628a:	bf00      	nop
 800628c:	40023800 	.word	0x40023800
 8006290:	00f42400 	.word	0x00f42400
 8006294:	007a1200 	.word	0x007a1200

08006298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800629c:	4b03      	ldr	r3, [pc, #12]	; (80062ac <HAL_RCC_GetHCLKFreq+0x14>)
 800629e:	681b      	ldr	r3, [r3, #0]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	20000028 	.word	0x20000028

080062b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062b4:	f7ff fff0 	bl	8006298 <HAL_RCC_GetHCLKFreq>
 80062b8:	4602      	mov	r2, r0
 80062ba:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	0a9b      	lsrs	r3, r3, #10
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	4903      	ldr	r1, [pc, #12]	; (80062d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062c6:	5ccb      	ldrb	r3, [r1, r3]
 80062c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40023800 	.word	0x40023800
 80062d4:	0800b4f0 	.word	0x0800b4f0

080062d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062dc:	f7ff ffdc 	bl	8006298 <HAL_RCC_GetHCLKFreq>
 80062e0:	4602      	mov	r2, r0
 80062e2:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	0b5b      	lsrs	r3, r3, #13
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	4903      	ldr	r1, [pc, #12]	; (80062fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80062ee:	5ccb      	ldrb	r3, [r1, r3]
 80062f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	40023800 	.word	0x40023800
 80062fc:	0800b4f0 	.word	0x0800b4f0

08006300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e07b      	b.n	800640a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d108      	bne.n	800632c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006322:	d009      	beq.n	8006338 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	61da      	str	r2, [r3, #28]
 800632a:	e005      	b.n	8006338 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fd fbdc 	bl	8003b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800636e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063bc:	ea42 0103 	orr.w	r1, r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	0c1b      	lsrs	r3, r3, #16
 80063d6:	f003 0104 	and.w	r1, r3, #4
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	f003 0210 	and.w	r2, r3, #16
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b088      	sub	sp, #32
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	603b      	str	r3, [r7, #0]
 800641e:	4613      	mov	r3, r2
 8006420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_SPI_Transmit+0x22>
 8006430:	2302      	movs	r3, #2
 8006432:	e126      	b.n	8006682 <HAL_SPI_Transmit+0x270>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800643c:	f7fd ff20 	bl	8004280 <HAL_GetTick>
 8006440:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b01      	cmp	r3, #1
 8006450:	d002      	beq.n	8006458 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006452:	2302      	movs	r3, #2
 8006454:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006456:	e10b      	b.n	8006670 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_SPI_Transmit+0x52>
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006468:	e102      	b.n	8006670 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2203      	movs	r2, #3
 800646e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	88fa      	ldrh	r2, [r7, #6]
 8006482:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b0:	d10f      	bne.n	80064d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	d007      	beq.n	80064f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f8:	d14b      	bne.n	8006592 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_SPI_Transmit+0xf6>
 8006502:	8afb      	ldrh	r3, [r7, #22]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d13e      	bne.n	8006586 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650c:	881a      	ldrh	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	1c9a      	adds	r2, r3, #2
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800652c:	e02b      	b.n	8006586 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b02      	cmp	r3, #2
 800653a:	d112      	bne.n	8006562 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	881a      	ldrh	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	1c9a      	adds	r2, r3, #2
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006556:	b29b      	uxth	r3, r3
 8006558:	3b01      	subs	r3, #1
 800655a:	b29a      	uxth	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006560:	e011      	b.n	8006586 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006562:	f7fd fe8d 	bl	8004280 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d803      	bhi.n	800657a <HAL_SPI_Transmit+0x168>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006578:	d102      	bne.n	8006580 <HAL_SPI_Transmit+0x16e>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d102      	bne.n	8006586 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006584:	e074      	b.n	8006670 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658a:	b29b      	uxth	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1ce      	bne.n	800652e <HAL_SPI_Transmit+0x11c>
 8006590:	e04c      	b.n	800662c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <HAL_SPI_Transmit+0x18e>
 800659a:	8afb      	ldrh	r3, [r7, #22]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d140      	bne.n	8006622 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	330c      	adds	r3, #12
 80065aa:	7812      	ldrb	r2, [r2, #0]
 80065ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065c6:	e02c      	b.n	8006622 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d113      	bne.n	80065fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	330c      	adds	r3, #12
 80065e0:	7812      	ldrb	r2, [r2, #0]
 80065e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80065fc:	e011      	b.n	8006622 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065fe:	f7fd fe3f 	bl	8004280 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	429a      	cmp	r2, r3
 800660c:	d803      	bhi.n	8006616 <HAL_SPI_Transmit+0x204>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d102      	bne.n	800661c <HAL_SPI_Transmit+0x20a>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006620:	e026      	b.n	8006670 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1cd      	bne.n	80065c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 fa63 	bl	8006afc <SPI_EndRxTxTransaction>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10a      	bne.n	8006660 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800664a:	2300      	movs	r3, #0
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e000      	b.n	8006670 <HAL_SPI_Transmit+0x25e>
  }

error:
 800666e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006680:	7ffb      	ldrb	r3, [r7, #31]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3720      	adds	r7, #32
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b08c      	sub	sp, #48	; 0x30
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
 8006696:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006698:	2301      	movs	r3, #1
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d101      	bne.n	80066b0 <HAL_SPI_TransmitReceive+0x26>
 80066ac:	2302      	movs	r3, #2
 80066ae:	e18a      	b.n	80069c6 <HAL_SPI_TransmitReceive+0x33c>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066b8:	f7fd fde2 	bl	8004280 <HAL_GetTick>
 80066bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80066ce:	887b      	ldrh	r3, [r7, #2]
 80066d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d00f      	beq.n	80066fa <HAL_SPI_TransmitReceive+0x70>
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066e0:	d107      	bne.n	80066f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <HAL_SPI_TransmitReceive+0x68>
 80066ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d003      	beq.n	80066fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80066f2:	2302      	movs	r3, #2
 80066f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066f8:	e15b      	b.n	80069b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_SPI_TransmitReceive+0x82>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <HAL_SPI_TransmitReceive+0x82>
 8006706:	887b      	ldrh	r3, [r7, #2]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d103      	bne.n	8006714 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006712:	e14e      	b.n	80069b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b04      	cmp	r3, #4
 800671e:	d003      	beq.n	8006728 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2205      	movs	r2, #5
 8006724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	887a      	ldrh	r2, [r7, #2]
 8006738:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	887a      	ldrh	r2, [r7, #2]
 800673e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	887a      	ldrh	r2, [r7, #2]
 800674a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	887a      	ldrh	r2, [r7, #2]
 8006750:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b40      	cmp	r3, #64	; 0x40
 800676a:	d007      	beq.n	800677c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800677a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006784:	d178      	bne.n	8006878 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d002      	beq.n	8006794 <HAL_SPI_TransmitReceive+0x10a>
 800678e:	8b7b      	ldrh	r3, [r7, #26]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d166      	bne.n	8006862 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	881a      	ldrh	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	1c9a      	adds	r2, r3, #2
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067b8:	e053      	b.n	8006862 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d11b      	bne.n	8006800 <HAL_SPI_TransmitReceive+0x176>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d016      	beq.n	8006800 <HAL_SPI_TransmitReceive+0x176>
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d113      	bne.n	8006800 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	881a      	ldrh	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	1c9a      	adds	r2, r3, #2
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b01      	cmp	r3, #1
 800680c:	d119      	bne.n	8006842 <HAL_SPI_TransmitReceive+0x1b8>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006812:	b29b      	uxth	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d014      	beq.n	8006842 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	b292      	uxth	r2, r2
 8006824:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	1c9a      	adds	r2, r3, #2
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800683e:	2301      	movs	r3, #1
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006842:	f7fd fd1d 	bl	8004280 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800684e:	429a      	cmp	r2, r3
 8006850:	d807      	bhi.n	8006862 <HAL_SPI_TransmitReceive+0x1d8>
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d003      	beq.n	8006862 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006860:	e0a7      	b.n	80069b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1a6      	bne.n	80067ba <HAL_SPI_TransmitReceive+0x130>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1a1      	bne.n	80067ba <HAL_SPI_TransmitReceive+0x130>
 8006876:	e07c      	b.n	8006972 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <HAL_SPI_TransmitReceive+0x1fc>
 8006880:	8b7b      	ldrh	r3, [r7, #26]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d16b      	bne.n	800695e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	330c      	adds	r3, #12
 8006890:	7812      	ldrb	r2, [r2, #0]
 8006892:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068ac:	e057      	b.n	800695e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d11c      	bne.n	80068f6 <HAL_SPI_TransmitReceive+0x26c>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d017      	beq.n	80068f6 <HAL_SPI_TransmitReceive+0x26c>
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d114      	bne.n	80068f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	330c      	adds	r3, #12
 80068d6:	7812      	ldrb	r2, [r2, #0]
 80068d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	2b01      	cmp	r3, #1
 8006902:	d119      	bne.n	8006938 <HAL_SPI_TransmitReceive+0x2ae>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d014      	beq.n	8006938 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006934:	2301      	movs	r3, #1
 8006936:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006938:	f7fd fca2 	bl	8004280 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006944:	429a      	cmp	r2, r3
 8006946:	d803      	bhi.n	8006950 <HAL_SPI_TransmitReceive+0x2c6>
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d102      	bne.n	8006956 <HAL_SPI_TransmitReceive+0x2cc>
 8006950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006952:	2b00      	cmp	r3, #0
 8006954:	d103      	bne.n	800695e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800695c:	e029      	b.n	80069b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006962:	b29b      	uxth	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1a2      	bne.n	80068ae <HAL_SPI_TransmitReceive+0x224>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d19d      	bne.n	80068ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006974:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 f8c0 	bl	8006afc <SPI_EndRxTxTransaction>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d006      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800698e:	e010      	b.n	80069b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10b      	bne.n	80069b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	e000      	b.n	80069b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80069b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3730      	adds	r7, #48	; 0x30
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069dc:	b2db      	uxtb	r3, r3
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
	...

080069ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069fc:	f7fd fc40 	bl	8004280 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	4413      	add	r3, r2
 8006a0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a0c:	f7fd fc38 	bl	8004280 <HAL_GetTick>
 8006a10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a12:	4b39      	ldr	r3, [pc, #228]	; (8006af8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	015b      	lsls	r3, r3, #5
 8006a18:	0d1b      	lsrs	r3, r3, #20
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	fb02 f303 	mul.w	r3, r2, r3
 8006a20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a22:	e054      	b.n	8006ace <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d050      	beq.n	8006ace <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a2c:	f7fd fc28 	bl	8004280 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d902      	bls.n	8006a42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d13d      	bne.n	8006abe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a5a:	d111      	bne.n	8006a80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a64:	d004      	beq.n	8006a70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a6e:	d107      	bne.n	8006a80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a88:	d10f      	bne.n	8006aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e017      	b.n	8006aee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	bf0c      	ite	eq
 8006ade:	2301      	moveq	r3, #1
 8006ae0:	2300      	movne	r3, #0
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	79fb      	ldrb	r3, [r7, #7]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d19b      	bne.n	8006a24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3720      	adds	r7, #32
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000028 	.word	0x20000028

08006afc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b08:	4b1b      	ldr	r3, [pc, #108]	; (8006b78 <SPI_EndRxTxTransaction+0x7c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a1b      	ldr	r2, [pc, #108]	; (8006b7c <SPI_EndRxTxTransaction+0x80>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	0d5b      	lsrs	r3, r3, #21
 8006b14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b18:	fb02 f303 	mul.w	r3, r2, r3
 8006b1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b26:	d112      	bne.n	8006b4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2180      	movs	r1, #128	; 0x80
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7ff ff5a 	bl	80069ec <SPI_WaitFlagStateUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d016      	beq.n	8006b6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	f043 0220 	orr.w	r2, r3, #32
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e00f      	b.n	8006b6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b64:	2b80      	cmp	r3, #128	; 0x80
 8006b66:	d0f2      	beq.n	8006b4e <SPI_EndRxTxTransaction+0x52>
 8006b68:	e000      	b.n	8006b6c <SPI_EndRxTxTransaction+0x70>
        break;
 8006b6a:	bf00      	nop
  }

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000028 	.word	0x20000028
 8006b7c:	165e9f81 	.word	0x165e9f81

08006b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e041      	b.n	8006c16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fc fffa 	bl	8003ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f000 fab6 	bl	8007130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d001      	beq.n	8006c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e044      	b.n	8006cc2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a1e      	ldr	r2, [pc, #120]	; (8006cd0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d018      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0x6c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c62:	d013      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0x6c>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1a      	ldr	r2, [pc, #104]	; (8006cd4 <HAL_TIM_Base_Start_IT+0xb4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00e      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0x6c>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a19      	ldr	r2, [pc, #100]	; (8006cd8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d009      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0x6c>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a17      	ldr	r2, [pc, #92]	; (8006cdc <HAL_TIM_Base_Start_IT+0xbc>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d004      	beq.n	8006c8c <HAL_TIM_Base_Start_IT+0x6c>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a16      	ldr	r2, [pc, #88]	; (8006ce0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d111      	bne.n	8006cb0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b06      	cmp	r3, #6
 8006c9c:	d010      	beq.n	8006cc0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0201 	orr.w	r2, r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cae:	e007      	b.n	8006cc0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40010000 	.word	0x40010000
 8006cd4:	40000400 	.word	0x40000400
 8006cd8:	40000800 	.word	0x40000800
 8006cdc:	40000c00 	.word	0x40000c00
 8006ce0:	40014000 	.word	0x40014000

08006ce4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0201 	bic.w	r2, r2, #1
 8006cfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6a1a      	ldr	r2, [r3, #32]
 8006d02:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d06:	4013      	ands	r3, r2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10f      	bne.n	8006d2c <HAL_TIM_Base_Stop_IT+0x48>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6a1a      	ldr	r2, [r3, #32]
 8006d12:	f240 4344 	movw	r3, #1092	; 0x444
 8006d16:	4013      	ands	r3, r2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d107      	bne.n	8006d2c <HAL_TIM_Base_Stop_IT+0x48>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0201 	bic.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0302 	and.w	r3, r3, #2
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d122      	bne.n	8006d9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d11b      	bne.n	8006d9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f06f 0202 	mvn.w	r2, #2
 8006d6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f003 0303 	and.w	r3, r3, #3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f9b5 	bl	80070f4 <HAL_TIM_IC_CaptureCallback>
 8006d8a:	e005      	b.n	8006d98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f9a7 	bl	80070e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f9b8 	bl	8007108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	d122      	bne.n	8006df2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d11b      	bne.n	8006df2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f06f 0204 	mvn.w	r2, #4
 8006dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f98b 	bl	80070f4 <HAL_TIM_IC_CaptureCallback>
 8006dde:	e005      	b.n	8006dec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f97d 	bl	80070e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f98e 	bl	8007108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d122      	bne.n	8006e46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d11b      	bne.n	8006e46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f06f 0208 	mvn.w	r2, #8
 8006e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	f003 0303 	and.w	r3, r3, #3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f961 	bl	80070f4 <HAL_TIM_IC_CaptureCallback>
 8006e32:	e005      	b.n	8006e40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f953 	bl	80070e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f964 	bl	8007108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	2b10      	cmp	r3, #16
 8006e52:	d122      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b10      	cmp	r3, #16
 8006e60:	d11b      	bne.n	8006e9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f06f 0210 	mvn.w	r2, #16
 8006e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2208      	movs	r2, #8
 8006e70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f937 	bl	80070f4 <HAL_TIM_IC_CaptureCallback>
 8006e86:	e005      	b.n	8006e94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f929 	bl	80070e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f93a 	bl	8007108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d10e      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d107      	bne.n	8006ec6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f06f 0201 	mvn.w	r2, #1
 8006ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7fc fb1d 	bl	8003500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed0:	2b80      	cmp	r3, #128	; 0x80
 8006ed2:	d10e      	bne.n	8006ef2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ede:	2b80      	cmp	r3, #128	; 0x80
 8006ee0:	d107      	bne.n	8006ef2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fab1 	bl	8007454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efc:	2b40      	cmp	r3, #64	; 0x40
 8006efe:	d10e      	bne.n	8006f1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0a:	2b40      	cmp	r3, #64	; 0x40
 8006f0c:	d107      	bne.n	8006f1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f8ff 	bl	800711c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d10e      	bne.n	8006f4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f003 0320 	and.w	r3, r3, #32
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d107      	bne.n	8006f4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f06f 0220 	mvn.w	r2, #32
 8006f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fa7b 	bl	8007440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d101      	bne.n	8006f6e <HAL_TIM_ConfigClockSource+0x1c>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e0b4      	b.n	80070d8 <HAL_TIM_ConfigClockSource+0x186>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f94:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fa6:	d03e      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0xd4>
 8006fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fac:	f200 8087 	bhi.w	80070be <HAL_TIM_ConfigClockSource+0x16c>
 8006fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb4:	f000 8086 	beq.w	80070c4 <HAL_TIM_ConfigClockSource+0x172>
 8006fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fbc:	d87f      	bhi.n	80070be <HAL_TIM_ConfigClockSource+0x16c>
 8006fbe:	2b70      	cmp	r3, #112	; 0x70
 8006fc0:	d01a      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0xa6>
 8006fc2:	2b70      	cmp	r3, #112	; 0x70
 8006fc4:	d87b      	bhi.n	80070be <HAL_TIM_ConfigClockSource+0x16c>
 8006fc6:	2b60      	cmp	r3, #96	; 0x60
 8006fc8:	d050      	beq.n	800706c <HAL_TIM_ConfigClockSource+0x11a>
 8006fca:	2b60      	cmp	r3, #96	; 0x60
 8006fcc:	d877      	bhi.n	80070be <HAL_TIM_ConfigClockSource+0x16c>
 8006fce:	2b50      	cmp	r3, #80	; 0x50
 8006fd0:	d03c      	beq.n	800704c <HAL_TIM_ConfigClockSource+0xfa>
 8006fd2:	2b50      	cmp	r3, #80	; 0x50
 8006fd4:	d873      	bhi.n	80070be <HAL_TIM_ConfigClockSource+0x16c>
 8006fd6:	2b40      	cmp	r3, #64	; 0x40
 8006fd8:	d058      	beq.n	800708c <HAL_TIM_ConfigClockSource+0x13a>
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	d86f      	bhi.n	80070be <HAL_TIM_ConfigClockSource+0x16c>
 8006fde:	2b30      	cmp	r3, #48	; 0x30
 8006fe0:	d064      	beq.n	80070ac <HAL_TIM_ConfigClockSource+0x15a>
 8006fe2:	2b30      	cmp	r3, #48	; 0x30
 8006fe4:	d86b      	bhi.n	80070be <HAL_TIM_ConfigClockSource+0x16c>
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d060      	beq.n	80070ac <HAL_TIM_ConfigClockSource+0x15a>
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d867      	bhi.n	80070be <HAL_TIM_ConfigClockSource+0x16c>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d05c      	beq.n	80070ac <HAL_TIM_ConfigClockSource+0x15a>
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d05a      	beq.n	80070ac <HAL_TIM_ConfigClockSource+0x15a>
 8006ff6:	e062      	b.n	80070be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	6899      	ldr	r1, [r3, #8]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f000 f98c 	bl	8007324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800701a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	609a      	str	r2, [r3, #8]
      break;
 8007024:	e04f      	b.n	80070c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6899      	ldr	r1, [r3, #8]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f000 f975 	bl	8007324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007048:	609a      	str	r2, [r3, #8]
      break;
 800704a:	e03c      	b.n	80070c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	6859      	ldr	r1, [r3, #4]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	461a      	mov	r2, r3
 800705a:	f000 f8e9 	bl	8007230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2150      	movs	r1, #80	; 0x50
 8007064:	4618      	mov	r0, r3
 8007066:	f000 f942 	bl	80072ee <TIM_ITRx_SetConfig>
      break;
 800706a:	e02c      	b.n	80070c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	6859      	ldr	r1, [r3, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	461a      	mov	r2, r3
 800707a:	f000 f908 	bl	800728e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2160      	movs	r1, #96	; 0x60
 8007084:	4618      	mov	r0, r3
 8007086:	f000 f932 	bl	80072ee <TIM_ITRx_SetConfig>
      break;
 800708a:	e01c      	b.n	80070c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	6859      	ldr	r1, [r3, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	461a      	mov	r2, r3
 800709a:	f000 f8c9 	bl	8007230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2140      	movs	r1, #64	; 0x40
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 f922 	bl	80072ee <TIM_ITRx_SetConfig>
      break;
 80070aa:	e00c      	b.n	80070c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4619      	mov	r1, r3
 80070b6:	4610      	mov	r0, r2
 80070b8:	f000 f919 	bl	80072ee <TIM_ITRx_SetConfig>
      break;
 80070bc:	e003      	b.n	80070c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	73fb      	strb	r3, [r7, #15]
      break;
 80070c2:	e000      	b.n	80070c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a34      	ldr	r2, [pc, #208]	; (8007214 <TIM_Base_SetConfig+0xe4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00f      	beq.n	8007168 <TIM_Base_SetConfig+0x38>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800714e:	d00b      	beq.n	8007168 <TIM_Base_SetConfig+0x38>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a31      	ldr	r2, [pc, #196]	; (8007218 <TIM_Base_SetConfig+0xe8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d007      	beq.n	8007168 <TIM_Base_SetConfig+0x38>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a30      	ldr	r2, [pc, #192]	; (800721c <TIM_Base_SetConfig+0xec>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d003      	beq.n	8007168 <TIM_Base_SetConfig+0x38>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a2f      	ldr	r2, [pc, #188]	; (8007220 <TIM_Base_SetConfig+0xf0>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d108      	bne.n	800717a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a25      	ldr	r2, [pc, #148]	; (8007214 <TIM_Base_SetConfig+0xe4>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d01b      	beq.n	80071ba <TIM_Base_SetConfig+0x8a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007188:	d017      	beq.n	80071ba <TIM_Base_SetConfig+0x8a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a22      	ldr	r2, [pc, #136]	; (8007218 <TIM_Base_SetConfig+0xe8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d013      	beq.n	80071ba <TIM_Base_SetConfig+0x8a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a21      	ldr	r2, [pc, #132]	; (800721c <TIM_Base_SetConfig+0xec>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00f      	beq.n	80071ba <TIM_Base_SetConfig+0x8a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a20      	ldr	r2, [pc, #128]	; (8007220 <TIM_Base_SetConfig+0xf0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00b      	beq.n	80071ba <TIM_Base_SetConfig+0x8a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a1f      	ldr	r2, [pc, #124]	; (8007224 <TIM_Base_SetConfig+0xf4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d007      	beq.n	80071ba <TIM_Base_SetConfig+0x8a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a1e      	ldr	r2, [pc, #120]	; (8007228 <TIM_Base_SetConfig+0xf8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d003      	beq.n	80071ba <TIM_Base_SetConfig+0x8a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a1d      	ldr	r2, [pc, #116]	; (800722c <TIM_Base_SetConfig+0xfc>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d108      	bne.n	80071cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a08      	ldr	r2, [pc, #32]	; (8007214 <TIM_Base_SetConfig+0xe4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d103      	bne.n	8007200 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	615a      	str	r2, [r3, #20]
}
 8007206:	bf00      	nop
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40010000 	.word	0x40010000
 8007218:	40000400 	.word	0x40000400
 800721c:	40000800 	.word	0x40000800
 8007220:	40000c00 	.word	0x40000c00
 8007224:	40014000 	.word	0x40014000
 8007228:	40014400 	.word	0x40014400
 800722c:	40014800 	.word	0x40014800

08007230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	f023 0201 	bic.w	r2, r3, #1
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800725a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	4313      	orrs	r3, r2
 8007264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f023 030a 	bic.w	r3, r3, #10
 800726c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	621a      	str	r2, [r3, #32]
}
 8007282:	bf00      	nop
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800728e:	b480      	push	{r7}
 8007290:	b087      	sub	sp, #28
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	f023 0210 	bic.w	r2, r3, #16
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	031b      	lsls	r3, r3, #12
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	621a      	str	r2, [r3, #32]
}
 80072e2:	bf00      	nop
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b085      	sub	sp, #20
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4313      	orrs	r3, r2
 800730c:	f043 0307 	orr.w	r3, r3, #7
 8007310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	609a      	str	r2, [r3, #8]
}
 8007318:	bf00      	nop
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800733e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	021a      	lsls	r2, r3, #8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	431a      	orrs	r2, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4313      	orrs	r3, r2
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	4313      	orrs	r3, r2
 8007350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	609a      	str	r2, [r3, #8]
}
 8007358:	bf00      	nop
 800735a:	371c      	adds	r7, #28
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007374:	2b01      	cmp	r3, #1
 8007376:	d101      	bne.n	800737c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007378:	2302      	movs	r3, #2
 800737a:	e050      	b.n	800741e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a1c      	ldr	r2, [pc, #112]	; (800742c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d018      	beq.n	80073f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c8:	d013      	beq.n	80073f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a18      	ldr	r2, [pc, #96]	; (8007430 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d00e      	beq.n	80073f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a16      	ldr	r2, [pc, #88]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d009      	beq.n	80073f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a15      	ldr	r2, [pc, #84]	; (8007438 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d004      	beq.n	80073f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a13      	ldr	r2, [pc, #76]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d10c      	bne.n	800740c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	4313      	orrs	r3, r2
 8007402:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40010000 	.word	0x40010000
 8007430:	40000400 	.word	0x40000400
 8007434:	40000800 	.word	0x40000800
 8007438:	40000c00 	.word	0x40000c00
 800743c:	40014000 	.word	0x40014000

08007440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e03f      	b.n	80074fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d106      	bne.n	8007494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fc fc06 	bl	8003ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2224      	movs	r2, #36	; 0x24
 8007498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 feb7 	bl	8008220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	695a      	ldr	r2, [r3, #20]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b08a      	sub	sp, #40	; 0x28
 8007506:	af02      	add	r7, sp, #8
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	603b      	str	r3, [r7, #0]
 800750e:	4613      	mov	r3, r2
 8007510:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b20      	cmp	r3, #32
 8007520:	d17c      	bne.n	800761c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_UART_Transmit+0x2c>
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e075      	b.n	800761e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007538:	2b01      	cmp	r3, #1
 800753a:	d101      	bne.n	8007540 <HAL_UART_Transmit+0x3e>
 800753c:	2302      	movs	r3, #2
 800753e:	e06e      	b.n	800761e <HAL_UART_Transmit+0x11c>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2221      	movs	r2, #33	; 0x21
 8007552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007556:	f7fc fe93 	bl	8004280 <HAL_GetTick>
 800755a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	88fa      	ldrh	r2, [r7, #6]
 8007560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	88fa      	ldrh	r2, [r7, #6]
 8007566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007570:	d108      	bne.n	8007584 <HAL_UART_Transmit+0x82>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d104      	bne.n	8007584 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	61bb      	str	r3, [r7, #24]
 8007582:	e003      	b.n	800758c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007588:	2300      	movs	r3, #0
 800758a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007594:	e02a      	b.n	80075ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2200      	movs	r2, #0
 800759e:	2180      	movs	r1, #128	; 0x80
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 fbfb 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e036      	b.n	800761e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10b      	bne.n	80075ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	3302      	adds	r3, #2
 80075ca:	61bb      	str	r3, [r7, #24]
 80075cc:	e007      	b.n	80075de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	781a      	ldrb	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	3301      	adds	r3, #1
 80075dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1cf      	bne.n	8007596 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2200      	movs	r2, #0
 80075fe:	2140      	movs	r1, #64	; 0x40
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fbcb 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e006      	b.n	800761e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	e000      	b.n	800761e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800761c:	2302      	movs	r3, #2
  }
}
 800761e:	4618      	mov	r0, r3
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b08a      	sub	sp, #40	; 0x28
 800762a:	af02      	add	r7, sp, #8
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	603b      	str	r3, [r7, #0]
 8007632:	4613      	mov	r3, r2
 8007634:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b20      	cmp	r3, #32
 8007644:	f040 808c 	bne.w	8007760 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <HAL_UART_Receive+0x2e>
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e084      	b.n	8007762 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_UART_Receive+0x40>
 8007662:	2302      	movs	r3, #2
 8007664:	e07d      	b.n	8007762 <HAL_UART_Receive+0x13c>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2222      	movs	r2, #34	; 0x22
 8007678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007682:	f7fc fdfd 	bl	8004280 <HAL_GetTick>
 8007686:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	88fa      	ldrh	r2, [r7, #6]
 800768c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	88fa      	ldrh	r2, [r7, #6]
 8007692:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800769c:	d108      	bne.n	80076b0 <HAL_UART_Receive+0x8a>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d104      	bne.n	80076b0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	61bb      	str	r3, [r7, #24]
 80076ae:	e003      	b.n	80076b8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076b4:	2300      	movs	r3, #0
 80076b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80076c0:	e043      	b.n	800774a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2200      	movs	r2, #0
 80076ca:	2120      	movs	r1, #32
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fb65 	bl	8007d9c <UART_WaitOnFlagUntilTimeout>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e042      	b.n	8007762 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d10c      	bne.n	80076fc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	3302      	adds	r3, #2
 80076f8:	61bb      	str	r3, [r7, #24]
 80076fa:	e01f      	b.n	800773c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007704:	d007      	beq.n	8007716 <HAL_UART_Receive+0xf0>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <HAL_UART_Receive+0xfe>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	b2da      	uxtb	r2, r3
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	e008      	b.n	8007736 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	b2db      	uxtb	r3, r3
 800772c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007730:	b2da      	uxtb	r2, r3
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	3301      	adds	r3, #1
 800773a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800774e:	b29b      	uxth	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1b6      	bne.n	80076c2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	e000      	b.n	8007762 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007760:	2302      	movs	r3, #2
  }
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	4613      	mov	r3, r2
 8007776:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b20      	cmp	r3, #32
 8007782:	d130      	bne.n	80077e6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <HAL_UART_Transmit_IT+0x26>
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e029      	b.n	80077e8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d101      	bne.n	80077a2 <HAL_UART_Transmit_IT+0x38>
 800779e:	2302      	movs	r3, #2
 80077a0:	e022      	b.n	80077e8 <HAL_UART_Transmit_IT+0x7e>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	88fa      	ldrh	r2, [r7, #6]
 80077ba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2221      	movs	r2, #33	; 0x21
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68da      	ldr	r2, [r3, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80077e0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	e000      	b.n	80077e8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80077e6:	2302      	movs	r3, #2
  }
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b20      	cmp	r3, #32
 800780c:	d11d      	bne.n	800784a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <HAL_UART_Receive_IT+0x26>
 8007814:	88fb      	ldrh	r3, [r7, #6]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e016      	b.n	800784c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <HAL_UART_Receive_IT+0x38>
 8007828:	2302      	movs	r3, #2
 800782a:	e00f      	b.n	800784c <HAL_UART_Receive_IT+0x58>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800783a:	88fb      	ldrh	r3, [r7, #6]
 800783c:	461a      	mov	r2, r3
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 fb19 	bl	8007e78 <UART_Start_Receive_IT>
 8007846:	4603      	mov	r3, r0
 8007848:	e000      	b.n	800784c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800784a:	2302      	movs	r3, #2
  }
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b0ba      	sub	sp, #232	; 0xe8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800787a:	2300      	movs	r3, #0
 800787c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007880:	2300      	movs	r3, #0
 8007882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10f      	bne.n	80078ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800789a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d009      	beq.n	80078ba <HAL_UART_IRQHandler+0x66>
 80078a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fbf9 	bl	80080aa <UART_Receive_IT>
      return;
 80078b8:	e256      	b.n	8007d68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 80de 	beq.w	8007a80 <HAL_UART_IRQHandler+0x22c>
 80078c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 80d1 	beq.w	8007a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00b      	beq.n	8007902 <HAL_UART_IRQHandler+0xae>
 80078ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	f043 0201 	orr.w	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <HAL_UART_IRQHandler+0xd2>
 800790e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	f043 0202 	orr.w	r2, r3, #2
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00b      	beq.n	800794a <HAL_UART_IRQHandler+0xf6>
 8007932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d005      	beq.n	800794a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	f043 0204 	orr.w	r2, r3, #4
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800794a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794e:	f003 0308 	and.w	r3, r3, #8
 8007952:	2b00      	cmp	r3, #0
 8007954:	d011      	beq.n	800797a <HAL_UART_IRQHandler+0x126>
 8007956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	f043 0208 	orr.w	r2, r3, #8
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 81ed 	beq.w	8007d5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d008      	beq.n	80079a2 <HAL_UART_IRQHandler+0x14e>
 8007990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb84 	bl	80080aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ac:	2b40      	cmp	r3, #64	; 0x40
 80079ae:	bf0c      	ite	eq
 80079b0:	2301      	moveq	r3, #1
 80079b2:	2300      	movne	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	f003 0308 	and.w	r3, r3, #8
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d103      	bne.n	80079ce <HAL_UART_IRQHandler+0x17a>
 80079c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d04f      	beq.n	8007a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa8c 	bl	8007eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d141      	bne.n	8007a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3314      	adds	r3, #20
 80079e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3314      	adds	r3, #20
 8007a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1d9      	bne.n	80079e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d013      	beq.n	8007a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	4a7d      	ldr	r2, [pc, #500]	; (8007c30 <HAL_UART_IRQHandler+0x3dc>)
 8007a3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fd fbbc 	bl	80051c0 <HAL_DMA_Abort_IT>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d016      	beq.n	8007a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a5c:	e00e      	b.n	8007a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7fb fcfa 	bl	8003458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a64:	e00a      	b.n	8007a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fb fcf6 	bl	8003458 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6c:	e006      	b.n	8007a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f7fb fcf2 	bl	8003458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a7a:	e170      	b.n	8007d5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a7c:	bf00      	nop
    return;
 8007a7e:	e16e      	b.n	8007d5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	f040 814a 	bne.w	8007d1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 8143 	beq.w	8007d1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 813c 	beq.w	8007d1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60bb      	str	r3, [r7, #8]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60bb      	str	r3, [r7, #8]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	60bb      	str	r3, [r7, #8]
 8007aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac6:	2b40      	cmp	r3, #64	; 0x40
 8007ac8:	f040 80b4 	bne.w	8007c34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8140 	beq.w	8007d62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aea:	429a      	cmp	r2, r3
 8007aec:	f080 8139 	bcs.w	8007d62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007af6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b02:	f000 8088 	beq.w	8007c16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1d9      	bne.n	8007b06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3314      	adds	r3, #20
 8007b58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3314      	adds	r3, #20
 8007b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b82:	e841 2300 	strex	r3, r2, [r1]
 8007b86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1e1      	bne.n	8007b52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3314      	adds	r3, #20
 8007b94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3314      	adds	r3, #20
 8007bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e3      	bne.n	8007b8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	330c      	adds	r3, #12
 8007bda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007be6:	f023 0310 	bic.w	r3, r3, #16
 8007bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	330c      	adds	r3, #12
 8007bf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007bf8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e3      	bne.n	8007bd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fd fa65 	bl	80050e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f8ac 	bl	8007d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c2c:	e099      	b.n	8007d62 <HAL_UART_IRQHandler+0x50e>
 8007c2e:	bf00      	nop
 8007c30:	08007fb3 	.word	0x08007fb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 808b 	beq.w	8007d66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 8086 	beq.w	8007d66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	330c      	adds	r3, #12
 8007c60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	330c      	adds	r3, #12
 8007c7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c7e:	647a      	str	r2, [r7, #68]	; 0x44
 8007c80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1e3      	bne.n	8007c5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3314      	adds	r3, #20
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	f023 0301 	bic.w	r3, r3, #1
 8007ca8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3314      	adds	r3, #20
 8007cb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007cb6:	633a      	str	r2, [r7, #48]	; 0x30
 8007cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e3      	bne.n	8007c92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	330c      	adds	r3, #12
 8007cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0310 	bic.w	r3, r3, #16
 8007cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	330c      	adds	r3, #12
 8007cf8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007cfc:	61fa      	str	r2, [r7, #28]
 8007cfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	69b9      	ldr	r1, [r7, #24]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	617b      	str	r3, [r7, #20]
   return(result);
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e3      	bne.n	8007cd8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f834 	bl	8007d84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d1c:	e023      	b.n	8007d66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d009      	beq.n	8007d3e <HAL_UART_IRQHandler+0x4ea>
 8007d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f94f 	bl	8007fda <UART_Transmit_IT>
    return;
 8007d3c:	e014      	b.n	8007d68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00e      	beq.n	8007d68 <HAL_UART_IRQHandler+0x514>
 8007d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d008      	beq.n	8007d68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f98f 	bl	800807a <UART_EndTransmit_IT>
    return;
 8007d5c:	e004      	b.n	8007d68 <HAL_UART_IRQHandler+0x514>
    return;
 8007d5e:	bf00      	nop
 8007d60:	e002      	b.n	8007d68 <HAL_UART_IRQHandler+0x514>
      return;
 8007d62:	bf00      	nop
 8007d64:	e000      	b.n	8007d68 <HAL_UART_IRQHandler+0x514>
      return;
 8007d66:	bf00      	nop
  }
}
 8007d68:	37e8      	adds	r7, #232	; 0xe8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop

08007d70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b090      	sub	sp, #64	; 0x40
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dac:	e050      	b.n	8007e50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db4:	d04c      	beq.n	8007e50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d007      	beq.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8007dbc:	f7fc fa60 	bl	8004280 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d241      	bcs.n	8007e50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	330c      	adds	r3, #12
 8007dea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dec:	637a      	str	r2, [r7, #52]	; 0x34
 8007dee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e5      	bne.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3314      	adds	r3, #20
 8007e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f023 0301 	bic.w	r3, r3, #1
 8007e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3314      	adds	r3, #20
 8007e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e20:	623a      	str	r2, [r7, #32]
 8007e22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	69f9      	ldr	r1, [r7, #28]
 8007e26:	6a3a      	ldr	r2, [r7, #32]
 8007e28:	e841 2300 	strex	r3, r2, [r1]
 8007e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e5      	bne.n	8007e00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e00f      	b.n	8007e70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	bf0c      	ite	eq
 8007e60:	2301      	moveq	r3, #1
 8007e62:	2300      	movne	r3, #0
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	461a      	mov	r2, r3
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d09f      	beq.n	8007dae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3740      	adds	r7, #64	; 0x40
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4613      	mov	r3, r2
 8007e84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	88fa      	ldrh	r2, [r7, #6]
 8007e90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	88fa      	ldrh	r2, [r7, #6]
 8007e96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2222      	movs	r2, #34	; 0x22
 8007ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ebc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	695a      	ldr	r2, [r3, #20]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0201 	orr.w	r2, r2, #1
 8007ecc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0220 	orr.w	r2, r2, #32
 8007edc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b095      	sub	sp, #84	; 0x54
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	330c      	adds	r3, #12
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	330c      	adds	r3, #12
 8007f12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f14:	643a      	str	r2, [r7, #64]	; 0x40
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e5      	bne.n	8007ef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3314      	adds	r3, #20
 8007f2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f023 0301 	bic.w	r3, r3, #1
 8007f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3314      	adds	r3, #20
 8007f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e5      	bne.n	8007f28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d119      	bne.n	8007f98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	330c      	adds	r3, #12
 8007f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f023 0310 	bic.w	r3, r3, #16
 8007f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	330c      	adds	r3, #12
 8007f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f84:	61ba      	str	r2, [r7, #24]
 8007f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6979      	ldr	r1, [r7, #20]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	613b      	str	r3, [r7, #16]
   return(result);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e5      	bne.n	8007f64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007fa6:	bf00      	nop
 8007fa8:	3754      	adds	r7, #84	; 0x54
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7fb fa43 	bl	8003458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b21      	cmp	r3, #33	; 0x21
 8007fec:	d13e      	bne.n	800806c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff6:	d114      	bne.n	8008022 <UART_Transmit_IT+0x48>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d110      	bne.n	8008022 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008014:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	1c9a      	adds	r2, r3, #2
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	621a      	str	r2, [r3, #32]
 8008020:	e008      	b.n	8008034 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	1c59      	adds	r1, r3, #1
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	6211      	str	r1, [r2, #32]
 800802c:	781a      	ldrb	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008038:	b29b      	uxth	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	b29b      	uxth	r3, r3
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	4619      	mov	r1, r3
 8008042:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10f      	bne.n	8008068 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008056:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008066:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	e000      	b.n	800806e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800806c:	2302      	movs	r3, #2
  }
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008090:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2220      	movs	r2, #32
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff fe68 	bl	8007d70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b08c      	sub	sp, #48	; 0x30
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b22      	cmp	r3, #34	; 0x22
 80080bc:	f040 80ab 	bne.w	8008216 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c8:	d117      	bne.n	80080fa <UART_Receive_IT+0x50>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d113      	bne.n	80080fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f2:	1c9a      	adds	r2, r3, #2
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	629a      	str	r2, [r3, #40]	; 0x28
 80080f8:	e026      	b.n	8008148 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008100:	2300      	movs	r3, #0
 8008102:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810c:	d007      	beq.n	800811e <UART_Receive_IT+0x74>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10a      	bne.n	800812c <UART_Receive_IT+0x82>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d106      	bne.n	800812c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	b2da      	uxtb	r2, r3
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	e008      	b.n	800813e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008138:	b2da      	uxtb	r2, r3
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800814c:	b29b      	uxth	r3, r3
 800814e:	3b01      	subs	r3, #1
 8008150:	b29b      	uxth	r3, r3
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	4619      	mov	r1, r3
 8008156:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008158:	2b00      	cmp	r3, #0
 800815a:	d15a      	bne.n	8008212 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0220 	bic.w	r2, r2, #32
 800816a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800817a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695a      	ldr	r2, [r3, #20]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0201 	bic.w	r2, r2, #1
 800818a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2220      	movs	r2, #32
 8008190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008198:	2b01      	cmp	r3, #1
 800819a:	d135      	bne.n	8008208 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	330c      	adds	r3, #12
 80081a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	613b      	str	r3, [r7, #16]
   return(result);
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f023 0310 	bic.w	r3, r3, #16
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	330c      	adds	r3, #12
 80081c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c2:	623a      	str	r2, [r7, #32]
 80081c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	69f9      	ldr	r1, [r7, #28]
 80081c8:	6a3a      	ldr	r2, [r7, #32]
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e5      	bne.n	80081a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0310 	and.w	r3, r3, #16
 80081e0:	2b10      	cmp	r3, #16
 80081e2:	d10a      	bne.n	80081fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081e4:	2300      	movs	r3, #0
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff fdbf 	bl	8007d84 <HAL_UARTEx_RxEventCallback>
 8008206:	e002      	b.n	800820e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7fb f85b 	bl	80032c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	e002      	b.n	8008218 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	e000      	b.n	8008218 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008216:	2302      	movs	r3, #2
  }
}
 8008218:	4618      	mov	r0, r3
 800821a:	3730      	adds	r7, #48	; 0x30
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008224:	b09f      	sub	sp, #124	; 0x7c
 8008226:	af00      	add	r7, sp, #0
 8008228:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800822a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008236:	68d9      	ldr	r1, [r3, #12]
 8008238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	ea40 0301 	orr.w	r3, r0, r1
 8008240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	431a      	orrs	r2, r3
 800824c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	431a      	orrs	r2, r3
 8008252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	4313      	orrs	r3, r2
 8008258:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800825a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008264:	f021 010c 	bic.w	r1, r1, #12
 8008268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800826e:	430b      	orrs	r3, r1
 8008270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	695b      	ldr	r3, [r3, #20]
 8008278:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800827c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800827e:	6999      	ldr	r1, [r3, #24]
 8008280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	ea40 0301 	orr.w	r3, r0, r1
 8008288:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800828a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	4bc5      	ldr	r3, [pc, #788]	; (80085a4 <UART_SetConfig+0x384>)
 8008290:	429a      	cmp	r2, r3
 8008292:	d004      	beq.n	800829e <UART_SetConfig+0x7e>
 8008294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	4bc3      	ldr	r3, [pc, #780]	; (80085a8 <UART_SetConfig+0x388>)
 800829a:	429a      	cmp	r2, r3
 800829c:	d103      	bne.n	80082a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800829e:	f7fe f81b 	bl	80062d8 <HAL_RCC_GetPCLK2Freq>
 80082a2:	6778      	str	r0, [r7, #116]	; 0x74
 80082a4:	e002      	b.n	80082ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082a6:	f7fe f803 	bl	80062b0 <HAL_RCC_GetPCLK1Freq>
 80082aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b4:	f040 80b6 	bne.w	8008424 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082ba:	461c      	mov	r4, r3
 80082bc:	f04f 0500 	mov.w	r5, #0
 80082c0:	4622      	mov	r2, r4
 80082c2:	462b      	mov	r3, r5
 80082c4:	1891      	adds	r1, r2, r2
 80082c6:	6439      	str	r1, [r7, #64]	; 0x40
 80082c8:	415b      	adcs	r3, r3
 80082ca:	647b      	str	r3, [r7, #68]	; 0x44
 80082cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082d0:	1912      	adds	r2, r2, r4
 80082d2:	eb45 0303 	adc.w	r3, r5, r3
 80082d6:	f04f 0000 	mov.w	r0, #0
 80082da:	f04f 0100 	mov.w	r1, #0
 80082de:	00d9      	lsls	r1, r3, #3
 80082e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082e4:	00d0      	lsls	r0, r2, #3
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	1911      	adds	r1, r2, r4
 80082ec:	6639      	str	r1, [r7, #96]	; 0x60
 80082ee:	416b      	adcs	r3, r5
 80082f0:	667b      	str	r3, [r7, #100]	; 0x64
 80082f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	461a      	mov	r2, r3
 80082f8:	f04f 0300 	mov.w	r3, #0
 80082fc:	1891      	adds	r1, r2, r2
 80082fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008300:	415b      	adcs	r3, r3
 8008302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008308:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800830c:	f7f8 fcb4 	bl	8000c78 <__aeabi_uldivmod>
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	4ba5      	ldr	r3, [pc, #660]	; (80085ac <UART_SetConfig+0x38c>)
 8008316:	fba3 2302 	umull	r2, r3, r3, r2
 800831a:	095b      	lsrs	r3, r3, #5
 800831c:	011e      	lsls	r6, r3, #4
 800831e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008320:	461c      	mov	r4, r3
 8008322:	f04f 0500 	mov.w	r5, #0
 8008326:	4622      	mov	r2, r4
 8008328:	462b      	mov	r3, r5
 800832a:	1891      	adds	r1, r2, r2
 800832c:	6339      	str	r1, [r7, #48]	; 0x30
 800832e:	415b      	adcs	r3, r3
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
 8008332:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008336:	1912      	adds	r2, r2, r4
 8008338:	eb45 0303 	adc.w	r3, r5, r3
 800833c:	f04f 0000 	mov.w	r0, #0
 8008340:	f04f 0100 	mov.w	r1, #0
 8008344:	00d9      	lsls	r1, r3, #3
 8008346:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800834a:	00d0      	lsls	r0, r2, #3
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	1911      	adds	r1, r2, r4
 8008352:	65b9      	str	r1, [r7, #88]	; 0x58
 8008354:	416b      	adcs	r3, r5
 8008356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	461a      	mov	r2, r3
 800835e:	f04f 0300 	mov.w	r3, #0
 8008362:	1891      	adds	r1, r2, r2
 8008364:	62b9      	str	r1, [r7, #40]	; 0x28
 8008366:	415b      	adcs	r3, r3
 8008368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800836a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800836e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008372:	f7f8 fc81 	bl	8000c78 <__aeabi_uldivmod>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4b8c      	ldr	r3, [pc, #560]	; (80085ac <UART_SetConfig+0x38c>)
 800837c:	fba3 1302 	umull	r1, r3, r3, r2
 8008380:	095b      	lsrs	r3, r3, #5
 8008382:	2164      	movs	r1, #100	; 0x64
 8008384:	fb01 f303 	mul.w	r3, r1, r3
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	00db      	lsls	r3, r3, #3
 800838c:	3332      	adds	r3, #50	; 0x32
 800838e:	4a87      	ldr	r2, [pc, #540]	; (80085ac <UART_SetConfig+0x38c>)
 8008390:	fba2 2303 	umull	r2, r3, r2, r3
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800839c:	441e      	add	r6, r3
 800839e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083a0:	4618      	mov	r0, r3
 80083a2:	f04f 0100 	mov.w	r1, #0
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	1894      	adds	r4, r2, r2
 80083ac:	623c      	str	r4, [r7, #32]
 80083ae:	415b      	adcs	r3, r3
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24
 80083b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083b6:	1812      	adds	r2, r2, r0
 80083b8:	eb41 0303 	adc.w	r3, r1, r3
 80083bc:	f04f 0400 	mov.w	r4, #0
 80083c0:	f04f 0500 	mov.w	r5, #0
 80083c4:	00dd      	lsls	r5, r3, #3
 80083c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083ca:	00d4      	lsls	r4, r2, #3
 80083cc:	4622      	mov	r2, r4
 80083ce:	462b      	mov	r3, r5
 80083d0:	1814      	adds	r4, r2, r0
 80083d2:	653c      	str	r4, [r7, #80]	; 0x50
 80083d4:	414b      	adcs	r3, r1
 80083d6:	657b      	str	r3, [r7, #84]	; 0x54
 80083d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	461a      	mov	r2, r3
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	1891      	adds	r1, r2, r2
 80083e4:	61b9      	str	r1, [r7, #24]
 80083e6:	415b      	adcs	r3, r3
 80083e8:	61fb      	str	r3, [r7, #28]
 80083ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80083f2:	f7f8 fc41 	bl	8000c78 <__aeabi_uldivmod>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4b6c      	ldr	r3, [pc, #432]	; (80085ac <UART_SetConfig+0x38c>)
 80083fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008400:	095b      	lsrs	r3, r3, #5
 8008402:	2164      	movs	r1, #100	; 0x64
 8008404:	fb01 f303 	mul.w	r3, r1, r3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	3332      	adds	r3, #50	; 0x32
 800840e:	4a67      	ldr	r2, [pc, #412]	; (80085ac <UART_SetConfig+0x38c>)
 8008410:	fba2 2303 	umull	r2, r3, r2, r3
 8008414:	095b      	lsrs	r3, r3, #5
 8008416:	f003 0207 	and.w	r2, r3, #7
 800841a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4432      	add	r2, r6
 8008420:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008422:	e0b9      	b.n	8008598 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008426:	461c      	mov	r4, r3
 8008428:	f04f 0500 	mov.w	r5, #0
 800842c:	4622      	mov	r2, r4
 800842e:	462b      	mov	r3, r5
 8008430:	1891      	adds	r1, r2, r2
 8008432:	6139      	str	r1, [r7, #16]
 8008434:	415b      	adcs	r3, r3
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800843c:	1912      	adds	r2, r2, r4
 800843e:	eb45 0303 	adc.w	r3, r5, r3
 8008442:	f04f 0000 	mov.w	r0, #0
 8008446:	f04f 0100 	mov.w	r1, #0
 800844a:	00d9      	lsls	r1, r3, #3
 800844c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008450:	00d0      	lsls	r0, r2, #3
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	eb12 0804 	adds.w	r8, r2, r4
 800845a:	eb43 0905 	adc.w	r9, r3, r5
 800845e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	4618      	mov	r0, r3
 8008464:	f04f 0100 	mov.w	r1, #0
 8008468:	f04f 0200 	mov.w	r2, #0
 800846c:	f04f 0300 	mov.w	r3, #0
 8008470:	008b      	lsls	r3, r1, #2
 8008472:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008476:	0082      	lsls	r2, r0, #2
 8008478:	4640      	mov	r0, r8
 800847a:	4649      	mov	r1, r9
 800847c:	f7f8 fbfc 	bl	8000c78 <__aeabi_uldivmod>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	4b49      	ldr	r3, [pc, #292]	; (80085ac <UART_SetConfig+0x38c>)
 8008486:	fba3 2302 	umull	r2, r3, r3, r2
 800848a:	095b      	lsrs	r3, r3, #5
 800848c:	011e      	lsls	r6, r3, #4
 800848e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008490:	4618      	mov	r0, r3
 8008492:	f04f 0100 	mov.w	r1, #0
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	1894      	adds	r4, r2, r2
 800849c:	60bc      	str	r4, [r7, #8]
 800849e:	415b      	adcs	r3, r3
 80084a0:	60fb      	str	r3, [r7, #12]
 80084a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084a6:	1812      	adds	r2, r2, r0
 80084a8:	eb41 0303 	adc.w	r3, r1, r3
 80084ac:	f04f 0400 	mov.w	r4, #0
 80084b0:	f04f 0500 	mov.w	r5, #0
 80084b4:	00dd      	lsls	r5, r3, #3
 80084b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084ba:	00d4      	lsls	r4, r2, #3
 80084bc:	4622      	mov	r2, r4
 80084be:	462b      	mov	r3, r5
 80084c0:	1814      	adds	r4, r2, r0
 80084c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80084c4:	414b      	adcs	r3, r1
 80084c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f04f 0100 	mov.w	r1, #0
 80084d2:	f04f 0200 	mov.w	r2, #0
 80084d6:	f04f 0300 	mov.w	r3, #0
 80084da:	008b      	lsls	r3, r1, #2
 80084dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80084e0:	0082      	lsls	r2, r0, #2
 80084e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80084e6:	f7f8 fbc7 	bl	8000c78 <__aeabi_uldivmod>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	4b2f      	ldr	r3, [pc, #188]	; (80085ac <UART_SetConfig+0x38c>)
 80084f0:	fba3 1302 	umull	r1, r3, r3, r2
 80084f4:	095b      	lsrs	r3, r3, #5
 80084f6:	2164      	movs	r1, #100	; 0x64
 80084f8:	fb01 f303 	mul.w	r3, r1, r3
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	011b      	lsls	r3, r3, #4
 8008500:	3332      	adds	r3, #50	; 0x32
 8008502:	4a2a      	ldr	r2, [pc, #168]	; (80085ac <UART_SetConfig+0x38c>)
 8008504:	fba2 2303 	umull	r2, r3, r2, r3
 8008508:	095b      	lsrs	r3, r3, #5
 800850a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800850e:	441e      	add	r6, r3
 8008510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008512:	4618      	mov	r0, r3
 8008514:	f04f 0100 	mov.w	r1, #0
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	1894      	adds	r4, r2, r2
 800851e:	603c      	str	r4, [r7, #0]
 8008520:	415b      	adcs	r3, r3
 8008522:	607b      	str	r3, [r7, #4]
 8008524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008528:	1812      	adds	r2, r2, r0
 800852a:	eb41 0303 	adc.w	r3, r1, r3
 800852e:	f04f 0400 	mov.w	r4, #0
 8008532:	f04f 0500 	mov.w	r5, #0
 8008536:	00dd      	lsls	r5, r3, #3
 8008538:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800853c:	00d4      	lsls	r4, r2, #3
 800853e:	4622      	mov	r2, r4
 8008540:	462b      	mov	r3, r5
 8008542:	eb12 0a00 	adds.w	sl, r2, r0
 8008546:	eb43 0b01 	adc.w	fp, r3, r1
 800854a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	4618      	mov	r0, r3
 8008550:	f04f 0100 	mov.w	r1, #0
 8008554:	f04f 0200 	mov.w	r2, #0
 8008558:	f04f 0300 	mov.w	r3, #0
 800855c:	008b      	lsls	r3, r1, #2
 800855e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008562:	0082      	lsls	r2, r0, #2
 8008564:	4650      	mov	r0, sl
 8008566:	4659      	mov	r1, fp
 8008568:	f7f8 fb86 	bl	8000c78 <__aeabi_uldivmod>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4b0e      	ldr	r3, [pc, #56]	; (80085ac <UART_SetConfig+0x38c>)
 8008572:	fba3 1302 	umull	r1, r3, r3, r2
 8008576:	095b      	lsrs	r3, r3, #5
 8008578:	2164      	movs	r1, #100	; 0x64
 800857a:	fb01 f303 	mul.w	r3, r1, r3
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	3332      	adds	r3, #50	; 0x32
 8008584:	4a09      	ldr	r2, [pc, #36]	; (80085ac <UART_SetConfig+0x38c>)
 8008586:	fba2 2303 	umull	r2, r3, r2, r3
 800858a:	095b      	lsrs	r3, r3, #5
 800858c:	f003 020f 	and.w	r2, r3, #15
 8008590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4432      	add	r2, r6
 8008596:	609a      	str	r2, [r3, #8]
}
 8008598:	bf00      	nop
 800859a:	377c      	adds	r7, #124	; 0x7c
 800859c:	46bd      	mov	sp, r7
 800859e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a2:	bf00      	nop
 80085a4:	40011000 	.word	0x40011000
 80085a8:	40011400 	.word	0x40011400
 80085ac:	51eb851f 	.word	0x51eb851f

080085b0 <__errno>:
 80085b0:	4b01      	ldr	r3, [pc, #4]	; (80085b8 <__errno+0x8>)
 80085b2:	6818      	ldr	r0, [r3, #0]
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	20000034 	.word	0x20000034

080085bc <__libc_init_array>:
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	4d0d      	ldr	r5, [pc, #52]	; (80085f4 <__libc_init_array+0x38>)
 80085c0:	4c0d      	ldr	r4, [pc, #52]	; (80085f8 <__libc_init_array+0x3c>)
 80085c2:	1b64      	subs	r4, r4, r5
 80085c4:	10a4      	asrs	r4, r4, #2
 80085c6:	2600      	movs	r6, #0
 80085c8:	42a6      	cmp	r6, r4
 80085ca:	d109      	bne.n	80085e0 <__libc_init_array+0x24>
 80085cc:	4d0b      	ldr	r5, [pc, #44]	; (80085fc <__libc_init_array+0x40>)
 80085ce:	4c0c      	ldr	r4, [pc, #48]	; (8008600 <__libc_init_array+0x44>)
 80085d0:	f002 ff1c 	bl	800b40c <_init>
 80085d4:	1b64      	subs	r4, r4, r5
 80085d6:	10a4      	asrs	r4, r4, #2
 80085d8:	2600      	movs	r6, #0
 80085da:	42a6      	cmp	r6, r4
 80085dc:	d105      	bne.n	80085ea <__libc_init_array+0x2e>
 80085de:	bd70      	pop	{r4, r5, r6, pc}
 80085e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e4:	4798      	blx	r3
 80085e6:	3601      	adds	r6, #1
 80085e8:	e7ee      	b.n	80085c8 <__libc_init_array+0xc>
 80085ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ee:	4798      	blx	r3
 80085f0:	3601      	adds	r6, #1
 80085f2:	e7f2      	b.n	80085da <__libc_init_array+0x1e>
 80085f4:	0800b8ec 	.word	0x0800b8ec
 80085f8:	0800b8ec 	.word	0x0800b8ec
 80085fc:	0800b8ec 	.word	0x0800b8ec
 8008600:	0800b8f0 	.word	0x0800b8f0

08008604 <memcpy>:
 8008604:	440a      	add	r2, r1
 8008606:	4291      	cmp	r1, r2
 8008608:	f100 33ff 	add.w	r3, r0, #4294967295
 800860c:	d100      	bne.n	8008610 <memcpy+0xc>
 800860e:	4770      	bx	lr
 8008610:	b510      	push	{r4, lr}
 8008612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800861a:	4291      	cmp	r1, r2
 800861c:	d1f9      	bne.n	8008612 <memcpy+0xe>
 800861e:	bd10      	pop	{r4, pc}

08008620 <memset>:
 8008620:	4402      	add	r2, r0
 8008622:	4603      	mov	r3, r0
 8008624:	4293      	cmp	r3, r2
 8008626:	d100      	bne.n	800862a <memset+0xa>
 8008628:	4770      	bx	lr
 800862a:	f803 1b01 	strb.w	r1, [r3], #1
 800862e:	e7f9      	b.n	8008624 <memset+0x4>

08008630 <__cvt>:
 8008630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008634:	ec55 4b10 	vmov	r4, r5, d0
 8008638:	2d00      	cmp	r5, #0
 800863a:	460e      	mov	r6, r1
 800863c:	4619      	mov	r1, r3
 800863e:	462b      	mov	r3, r5
 8008640:	bfbb      	ittet	lt
 8008642:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008646:	461d      	movlt	r5, r3
 8008648:	2300      	movge	r3, #0
 800864a:	232d      	movlt	r3, #45	; 0x2d
 800864c:	700b      	strb	r3, [r1, #0]
 800864e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008650:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008654:	4691      	mov	r9, r2
 8008656:	f023 0820 	bic.w	r8, r3, #32
 800865a:	bfbc      	itt	lt
 800865c:	4622      	movlt	r2, r4
 800865e:	4614      	movlt	r4, r2
 8008660:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008664:	d005      	beq.n	8008672 <__cvt+0x42>
 8008666:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800866a:	d100      	bne.n	800866e <__cvt+0x3e>
 800866c:	3601      	adds	r6, #1
 800866e:	2102      	movs	r1, #2
 8008670:	e000      	b.n	8008674 <__cvt+0x44>
 8008672:	2103      	movs	r1, #3
 8008674:	ab03      	add	r3, sp, #12
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	ab02      	add	r3, sp, #8
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	ec45 4b10 	vmov	d0, r4, r5
 8008680:	4653      	mov	r3, sl
 8008682:	4632      	mov	r2, r6
 8008684:	f000 fd44 	bl	8009110 <_dtoa_r>
 8008688:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800868c:	4607      	mov	r7, r0
 800868e:	d102      	bne.n	8008696 <__cvt+0x66>
 8008690:	f019 0f01 	tst.w	r9, #1
 8008694:	d022      	beq.n	80086dc <__cvt+0xac>
 8008696:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800869a:	eb07 0906 	add.w	r9, r7, r6
 800869e:	d110      	bne.n	80086c2 <__cvt+0x92>
 80086a0:	783b      	ldrb	r3, [r7, #0]
 80086a2:	2b30      	cmp	r3, #48	; 0x30
 80086a4:	d10a      	bne.n	80086bc <__cvt+0x8c>
 80086a6:	2200      	movs	r2, #0
 80086a8:	2300      	movs	r3, #0
 80086aa:	4620      	mov	r0, r4
 80086ac:	4629      	mov	r1, r5
 80086ae:	f7f8 fa23 	bl	8000af8 <__aeabi_dcmpeq>
 80086b2:	b918      	cbnz	r0, 80086bc <__cvt+0x8c>
 80086b4:	f1c6 0601 	rsb	r6, r6, #1
 80086b8:	f8ca 6000 	str.w	r6, [sl]
 80086bc:	f8da 3000 	ldr.w	r3, [sl]
 80086c0:	4499      	add	r9, r3
 80086c2:	2200      	movs	r2, #0
 80086c4:	2300      	movs	r3, #0
 80086c6:	4620      	mov	r0, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7f8 fa15 	bl	8000af8 <__aeabi_dcmpeq>
 80086ce:	b108      	cbz	r0, 80086d4 <__cvt+0xa4>
 80086d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80086d4:	2230      	movs	r2, #48	; 0x30
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	454b      	cmp	r3, r9
 80086da:	d307      	bcc.n	80086ec <__cvt+0xbc>
 80086dc:	9b03      	ldr	r3, [sp, #12]
 80086de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086e0:	1bdb      	subs	r3, r3, r7
 80086e2:	4638      	mov	r0, r7
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	b004      	add	sp, #16
 80086e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ec:	1c59      	adds	r1, r3, #1
 80086ee:	9103      	str	r1, [sp, #12]
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	e7f0      	b.n	80086d6 <__cvt+0xa6>

080086f4 <__exponent>:
 80086f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086f6:	4603      	mov	r3, r0
 80086f8:	2900      	cmp	r1, #0
 80086fa:	bfb8      	it	lt
 80086fc:	4249      	neglt	r1, r1
 80086fe:	f803 2b02 	strb.w	r2, [r3], #2
 8008702:	bfb4      	ite	lt
 8008704:	222d      	movlt	r2, #45	; 0x2d
 8008706:	222b      	movge	r2, #43	; 0x2b
 8008708:	2909      	cmp	r1, #9
 800870a:	7042      	strb	r2, [r0, #1]
 800870c:	dd2a      	ble.n	8008764 <__exponent+0x70>
 800870e:	f10d 0407 	add.w	r4, sp, #7
 8008712:	46a4      	mov	ip, r4
 8008714:	270a      	movs	r7, #10
 8008716:	46a6      	mov	lr, r4
 8008718:	460a      	mov	r2, r1
 800871a:	fb91 f6f7 	sdiv	r6, r1, r7
 800871e:	fb07 1516 	mls	r5, r7, r6, r1
 8008722:	3530      	adds	r5, #48	; 0x30
 8008724:	2a63      	cmp	r2, #99	; 0x63
 8008726:	f104 34ff 	add.w	r4, r4, #4294967295
 800872a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800872e:	4631      	mov	r1, r6
 8008730:	dcf1      	bgt.n	8008716 <__exponent+0x22>
 8008732:	3130      	adds	r1, #48	; 0x30
 8008734:	f1ae 0502 	sub.w	r5, lr, #2
 8008738:	f804 1c01 	strb.w	r1, [r4, #-1]
 800873c:	1c44      	adds	r4, r0, #1
 800873e:	4629      	mov	r1, r5
 8008740:	4561      	cmp	r1, ip
 8008742:	d30a      	bcc.n	800875a <__exponent+0x66>
 8008744:	f10d 0209 	add.w	r2, sp, #9
 8008748:	eba2 020e 	sub.w	r2, r2, lr
 800874c:	4565      	cmp	r5, ip
 800874e:	bf88      	it	hi
 8008750:	2200      	movhi	r2, #0
 8008752:	4413      	add	r3, r2
 8008754:	1a18      	subs	r0, r3, r0
 8008756:	b003      	add	sp, #12
 8008758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800875e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008762:	e7ed      	b.n	8008740 <__exponent+0x4c>
 8008764:	2330      	movs	r3, #48	; 0x30
 8008766:	3130      	adds	r1, #48	; 0x30
 8008768:	7083      	strb	r3, [r0, #2]
 800876a:	70c1      	strb	r1, [r0, #3]
 800876c:	1d03      	adds	r3, r0, #4
 800876e:	e7f1      	b.n	8008754 <__exponent+0x60>

08008770 <_printf_float>:
 8008770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	ed2d 8b02 	vpush	{d8}
 8008778:	b08d      	sub	sp, #52	; 0x34
 800877a:	460c      	mov	r4, r1
 800877c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008780:	4616      	mov	r6, r2
 8008782:	461f      	mov	r7, r3
 8008784:	4605      	mov	r5, r0
 8008786:	f001 faaf 	bl	8009ce8 <_localeconv_r>
 800878a:	f8d0 a000 	ldr.w	sl, [r0]
 800878e:	4650      	mov	r0, sl
 8008790:	f7f7 fd30 	bl	80001f4 <strlen>
 8008794:	2300      	movs	r3, #0
 8008796:	930a      	str	r3, [sp, #40]	; 0x28
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	9305      	str	r3, [sp, #20]
 800879c:	f8d8 3000 	ldr.w	r3, [r8]
 80087a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087a4:	3307      	adds	r3, #7
 80087a6:	f023 0307 	bic.w	r3, r3, #7
 80087aa:	f103 0208 	add.w	r2, r3, #8
 80087ae:	f8c8 2000 	str.w	r2, [r8]
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80087ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80087be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087c2:	9307      	str	r3, [sp, #28]
 80087c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80087c8:	ee08 0a10 	vmov	s16, r0
 80087cc:	4b9f      	ldr	r3, [pc, #636]	; (8008a4c <_printf_float+0x2dc>)
 80087ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087d2:	f04f 32ff 	mov.w	r2, #4294967295
 80087d6:	f7f8 f9c1 	bl	8000b5c <__aeabi_dcmpun>
 80087da:	bb88      	cbnz	r0, 8008840 <_printf_float+0xd0>
 80087dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087e0:	4b9a      	ldr	r3, [pc, #616]	; (8008a4c <_printf_float+0x2dc>)
 80087e2:	f04f 32ff 	mov.w	r2, #4294967295
 80087e6:	f7f8 f99b 	bl	8000b20 <__aeabi_dcmple>
 80087ea:	bb48      	cbnz	r0, 8008840 <_printf_float+0xd0>
 80087ec:	2200      	movs	r2, #0
 80087ee:	2300      	movs	r3, #0
 80087f0:	4640      	mov	r0, r8
 80087f2:	4649      	mov	r1, r9
 80087f4:	f7f8 f98a 	bl	8000b0c <__aeabi_dcmplt>
 80087f8:	b110      	cbz	r0, 8008800 <_printf_float+0x90>
 80087fa:	232d      	movs	r3, #45	; 0x2d
 80087fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008800:	4b93      	ldr	r3, [pc, #588]	; (8008a50 <_printf_float+0x2e0>)
 8008802:	4894      	ldr	r0, [pc, #592]	; (8008a54 <_printf_float+0x2e4>)
 8008804:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008808:	bf94      	ite	ls
 800880a:	4698      	movls	r8, r3
 800880c:	4680      	movhi	r8, r0
 800880e:	2303      	movs	r3, #3
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	9b05      	ldr	r3, [sp, #20]
 8008814:	f023 0204 	bic.w	r2, r3, #4
 8008818:	6022      	str	r2, [r4, #0]
 800881a:	f04f 0900 	mov.w	r9, #0
 800881e:	9700      	str	r7, [sp, #0]
 8008820:	4633      	mov	r3, r6
 8008822:	aa0b      	add	r2, sp, #44	; 0x2c
 8008824:	4621      	mov	r1, r4
 8008826:	4628      	mov	r0, r5
 8008828:	f000 f9d8 	bl	8008bdc <_printf_common>
 800882c:	3001      	adds	r0, #1
 800882e:	f040 8090 	bne.w	8008952 <_printf_float+0x1e2>
 8008832:	f04f 30ff 	mov.w	r0, #4294967295
 8008836:	b00d      	add	sp, #52	; 0x34
 8008838:	ecbd 8b02 	vpop	{d8}
 800883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008840:	4642      	mov	r2, r8
 8008842:	464b      	mov	r3, r9
 8008844:	4640      	mov	r0, r8
 8008846:	4649      	mov	r1, r9
 8008848:	f7f8 f988 	bl	8000b5c <__aeabi_dcmpun>
 800884c:	b140      	cbz	r0, 8008860 <_printf_float+0xf0>
 800884e:	464b      	mov	r3, r9
 8008850:	2b00      	cmp	r3, #0
 8008852:	bfbc      	itt	lt
 8008854:	232d      	movlt	r3, #45	; 0x2d
 8008856:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800885a:	487f      	ldr	r0, [pc, #508]	; (8008a58 <_printf_float+0x2e8>)
 800885c:	4b7f      	ldr	r3, [pc, #508]	; (8008a5c <_printf_float+0x2ec>)
 800885e:	e7d1      	b.n	8008804 <_printf_float+0x94>
 8008860:	6863      	ldr	r3, [r4, #4]
 8008862:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008866:	9206      	str	r2, [sp, #24]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	d13f      	bne.n	80088ec <_printf_float+0x17c>
 800886c:	2306      	movs	r3, #6
 800886e:	6063      	str	r3, [r4, #4]
 8008870:	9b05      	ldr	r3, [sp, #20]
 8008872:	6861      	ldr	r1, [r4, #4]
 8008874:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008878:	2300      	movs	r3, #0
 800887a:	9303      	str	r3, [sp, #12]
 800887c:	ab0a      	add	r3, sp, #40	; 0x28
 800887e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008882:	ab09      	add	r3, sp, #36	; 0x24
 8008884:	ec49 8b10 	vmov	d0, r8, r9
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	6022      	str	r2, [r4, #0]
 800888c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008890:	4628      	mov	r0, r5
 8008892:	f7ff fecd 	bl	8008630 <__cvt>
 8008896:	9b06      	ldr	r3, [sp, #24]
 8008898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800889a:	2b47      	cmp	r3, #71	; 0x47
 800889c:	4680      	mov	r8, r0
 800889e:	d108      	bne.n	80088b2 <_printf_float+0x142>
 80088a0:	1cc8      	adds	r0, r1, #3
 80088a2:	db02      	blt.n	80088aa <_printf_float+0x13a>
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	4299      	cmp	r1, r3
 80088a8:	dd41      	ble.n	800892e <_printf_float+0x1be>
 80088aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80088ae:	fa5f fb8b 	uxtb.w	fp, fp
 80088b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088b6:	d820      	bhi.n	80088fa <_printf_float+0x18a>
 80088b8:	3901      	subs	r1, #1
 80088ba:	465a      	mov	r2, fp
 80088bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088c0:	9109      	str	r1, [sp, #36]	; 0x24
 80088c2:	f7ff ff17 	bl	80086f4 <__exponent>
 80088c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088c8:	1813      	adds	r3, r2, r0
 80088ca:	2a01      	cmp	r2, #1
 80088cc:	4681      	mov	r9, r0
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	dc02      	bgt.n	80088d8 <_printf_float+0x168>
 80088d2:	6822      	ldr	r2, [r4, #0]
 80088d4:	07d2      	lsls	r2, r2, #31
 80088d6:	d501      	bpl.n	80088dc <_printf_float+0x16c>
 80088d8:	3301      	adds	r3, #1
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d09c      	beq.n	800881e <_printf_float+0xae>
 80088e4:	232d      	movs	r3, #45	; 0x2d
 80088e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ea:	e798      	b.n	800881e <_printf_float+0xae>
 80088ec:	9a06      	ldr	r2, [sp, #24]
 80088ee:	2a47      	cmp	r2, #71	; 0x47
 80088f0:	d1be      	bne.n	8008870 <_printf_float+0x100>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1bc      	bne.n	8008870 <_printf_float+0x100>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e7b9      	b.n	800886e <_printf_float+0xfe>
 80088fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80088fe:	d118      	bne.n	8008932 <_printf_float+0x1c2>
 8008900:	2900      	cmp	r1, #0
 8008902:	6863      	ldr	r3, [r4, #4]
 8008904:	dd0b      	ble.n	800891e <_printf_float+0x1ae>
 8008906:	6121      	str	r1, [r4, #16]
 8008908:	b913      	cbnz	r3, 8008910 <_printf_float+0x1a0>
 800890a:	6822      	ldr	r2, [r4, #0]
 800890c:	07d0      	lsls	r0, r2, #31
 800890e:	d502      	bpl.n	8008916 <_printf_float+0x1a6>
 8008910:	3301      	adds	r3, #1
 8008912:	440b      	add	r3, r1
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	65a1      	str	r1, [r4, #88]	; 0x58
 8008918:	f04f 0900 	mov.w	r9, #0
 800891c:	e7de      	b.n	80088dc <_printf_float+0x16c>
 800891e:	b913      	cbnz	r3, 8008926 <_printf_float+0x1b6>
 8008920:	6822      	ldr	r2, [r4, #0]
 8008922:	07d2      	lsls	r2, r2, #31
 8008924:	d501      	bpl.n	800892a <_printf_float+0x1ba>
 8008926:	3302      	adds	r3, #2
 8008928:	e7f4      	b.n	8008914 <_printf_float+0x1a4>
 800892a:	2301      	movs	r3, #1
 800892c:	e7f2      	b.n	8008914 <_printf_float+0x1a4>
 800892e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008934:	4299      	cmp	r1, r3
 8008936:	db05      	blt.n	8008944 <_printf_float+0x1d4>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	6121      	str	r1, [r4, #16]
 800893c:	07d8      	lsls	r0, r3, #31
 800893e:	d5ea      	bpl.n	8008916 <_printf_float+0x1a6>
 8008940:	1c4b      	adds	r3, r1, #1
 8008942:	e7e7      	b.n	8008914 <_printf_float+0x1a4>
 8008944:	2900      	cmp	r1, #0
 8008946:	bfd4      	ite	le
 8008948:	f1c1 0202 	rsble	r2, r1, #2
 800894c:	2201      	movgt	r2, #1
 800894e:	4413      	add	r3, r2
 8008950:	e7e0      	b.n	8008914 <_printf_float+0x1a4>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	055a      	lsls	r2, r3, #21
 8008956:	d407      	bmi.n	8008968 <_printf_float+0x1f8>
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	4642      	mov	r2, r8
 800895c:	4631      	mov	r1, r6
 800895e:	4628      	mov	r0, r5
 8008960:	47b8      	blx	r7
 8008962:	3001      	adds	r0, #1
 8008964:	d12c      	bne.n	80089c0 <_printf_float+0x250>
 8008966:	e764      	b.n	8008832 <_printf_float+0xc2>
 8008968:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800896c:	f240 80e0 	bls.w	8008b30 <_printf_float+0x3c0>
 8008970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008974:	2200      	movs	r2, #0
 8008976:	2300      	movs	r3, #0
 8008978:	f7f8 f8be 	bl	8000af8 <__aeabi_dcmpeq>
 800897c:	2800      	cmp	r0, #0
 800897e:	d034      	beq.n	80089ea <_printf_float+0x27a>
 8008980:	4a37      	ldr	r2, [pc, #220]	; (8008a60 <_printf_float+0x2f0>)
 8008982:	2301      	movs	r3, #1
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	47b8      	blx	r7
 800898a:	3001      	adds	r0, #1
 800898c:	f43f af51 	beq.w	8008832 <_printf_float+0xc2>
 8008990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008994:	429a      	cmp	r2, r3
 8008996:	db02      	blt.n	800899e <_printf_float+0x22e>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	07d8      	lsls	r0, r3, #31
 800899c:	d510      	bpl.n	80089c0 <_printf_float+0x250>
 800899e:	ee18 3a10 	vmov	r3, s16
 80089a2:	4652      	mov	r2, sl
 80089a4:	4631      	mov	r1, r6
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b8      	blx	r7
 80089aa:	3001      	adds	r0, #1
 80089ac:	f43f af41 	beq.w	8008832 <_printf_float+0xc2>
 80089b0:	f04f 0800 	mov.w	r8, #0
 80089b4:	f104 091a 	add.w	r9, r4, #26
 80089b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ba:	3b01      	subs	r3, #1
 80089bc:	4543      	cmp	r3, r8
 80089be:	dc09      	bgt.n	80089d4 <_printf_float+0x264>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	079b      	lsls	r3, r3, #30
 80089c4:	f100 8105 	bmi.w	8008bd2 <_printf_float+0x462>
 80089c8:	68e0      	ldr	r0, [r4, #12]
 80089ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089cc:	4298      	cmp	r0, r3
 80089ce:	bfb8      	it	lt
 80089d0:	4618      	movlt	r0, r3
 80089d2:	e730      	b.n	8008836 <_printf_float+0xc6>
 80089d4:	2301      	movs	r3, #1
 80089d6:	464a      	mov	r2, r9
 80089d8:	4631      	mov	r1, r6
 80089da:	4628      	mov	r0, r5
 80089dc:	47b8      	blx	r7
 80089de:	3001      	adds	r0, #1
 80089e0:	f43f af27 	beq.w	8008832 <_printf_float+0xc2>
 80089e4:	f108 0801 	add.w	r8, r8, #1
 80089e8:	e7e6      	b.n	80089b8 <_printf_float+0x248>
 80089ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dc39      	bgt.n	8008a64 <_printf_float+0x2f4>
 80089f0:	4a1b      	ldr	r2, [pc, #108]	; (8008a60 <_printf_float+0x2f0>)
 80089f2:	2301      	movs	r3, #1
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	f43f af19 	beq.w	8008832 <_printf_float+0xc2>
 8008a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a04:	4313      	orrs	r3, r2
 8008a06:	d102      	bne.n	8008a0e <_printf_float+0x29e>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	07d9      	lsls	r1, r3, #31
 8008a0c:	d5d8      	bpl.n	80089c0 <_printf_float+0x250>
 8008a0e:	ee18 3a10 	vmov	r3, s16
 8008a12:	4652      	mov	r2, sl
 8008a14:	4631      	mov	r1, r6
 8008a16:	4628      	mov	r0, r5
 8008a18:	47b8      	blx	r7
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	f43f af09 	beq.w	8008832 <_printf_float+0xc2>
 8008a20:	f04f 0900 	mov.w	r9, #0
 8008a24:	f104 0a1a 	add.w	sl, r4, #26
 8008a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2a:	425b      	negs	r3, r3
 8008a2c:	454b      	cmp	r3, r9
 8008a2e:	dc01      	bgt.n	8008a34 <_printf_float+0x2c4>
 8008a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a32:	e792      	b.n	800895a <_printf_float+0x1ea>
 8008a34:	2301      	movs	r3, #1
 8008a36:	4652      	mov	r2, sl
 8008a38:	4631      	mov	r1, r6
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	f43f aef7 	beq.w	8008832 <_printf_float+0xc2>
 8008a44:	f109 0901 	add.w	r9, r9, #1
 8008a48:	e7ee      	b.n	8008a28 <_printf_float+0x2b8>
 8008a4a:	bf00      	nop
 8008a4c:	7fefffff 	.word	0x7fefffff
 8008a50:	0800b504 	.word	0x0800b504
 8008a54:	0800b508 	.word	0x0800b508
 8008a58:	0800b510 	.word	0x0800b510
 8008a5c:	0800b50c 	.word	0x0800b50c
 8008a60:	0800b514 	.word	0x0800b514
 8008a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	bfa8      	it	ge
 8008a6c:	461a      	movge	r2, r3
 8008a6e:	2a00      	cmp	r2, #0
 8008a70:	4691      	mov	r9, r2
 8008a72:	dc37      	bgt.n	8008ae4 <_printf_float+0x374>
 8008a74:	f04f 0b00 	mov.w	fp, #0
 8008a78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a7c:	f104 021a 	add.w	r2, r4, #26
 8008a80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a82:	9305      	str	r3, [sp, #20]
 8008a84:	eba3 0309 	sub.w	r3, r3, r9
 8008a88:	455b      	cmp	r3, fp
 8008a8a:	dc33      	bgt.n	8008af4 <_printf_float+0x384>
 8008a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a90:	429a      	cmp	r2, r3
 8008a92:	db3b      	blt.n	8008b0c <_printf_float+0x39c>
 8008a94:	6823      	ldr	r3, [r4, #0]
 8008a96:	07da      	lsls	r2, r3, #31
 8008a98:	d438      	bmi.n	8008b0c <_printf_float+0x39c>
 8008a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a9c:	9b05      	ldr	r3, [sp, #20]
 8008a9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	eba2 0901 	sub.w	r9, r2, r1
 8008aa6:	4599      	cmp	r9, r3
 8008aa8:	bfa8      	it	ge
 8008aaa:	4699      	movge	r9, r3
 8008aac:	f1b9 0f00 	cmp.w	r9, #0
 8008ab0:	dc35      	bgt.n	8008b1e <_printf_float+0x3ae>
 8008ab2:	f04f 0800 	mov.w	r8, #0
 8008ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008aba:	f104 0a1a 	add.w	sl, r4, #26
 8008abe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ac2:	1a9b      	subs	r3, r3, r2
 8008ac4:	eba3 0309 	sub.w	r3, r3, r9
 8008ac8:	4543      	cmp	r3, r8
 8008aca:	f77f af79 	ble.w	80089c0 <_printf_float+0x250>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4652      	mov	r2, sl
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f43f aeaa 	beq.w	8008832 <_printf_float+0xc2>
 8008ade:	f108 0801 	add.w	r8, r8, #1
 8008ae2:	e7ec      	b.n	8008abe <_printf_float+0x34e>
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	4642      	mov	r2, r8
 8008aea:	4628      	mov	r0, r5
 8008aec:	47b8      	blx	r7
 8008aee:	3001      	adds	r0, #1
 8008af0:	d1c0      	bne.n	8008a74 <_printf_float+0x304>
 8008af2:	e69e      	b.n	8008832 <_printf_float+0xc2>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4631      	mov	r1, r6
 8008af8:	4628      	mov	r0, r5
 8008afa:	9205      	str	r2, [sp, #20]
 8008afc:	47b8      	blx	r7
 8008afe:	3001      	adds	r0, #1
 8008b00:	f43f ae97 	beq.w	8008832 <_printf_float+0xc2>
 8008b04:	9a05      	ldr	r2, [sp, #20]
 8008b06:	f10b 0b01 	add.w	fp, fp, #1
 8008b0a:	e7b9      	b.n	8008a80 <_printf_float+0x310>
 8008b0c:	ee18 3a10 	vmov	r3, s16
 8008b10:	4652      	mov	r2, sl
 8008b12:	4631      	mov	r1, r6
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b8      	blx	r7
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d1be      	bne.n	8008a9a <_printf_float+0x32a>
 8008b1c:	e689      	b.n	8008832 <_printf_float+0xc2>
 8008b1e:	9a05      	ldr	r2, [sp, #20]
 8008b20:	464b      	mov	r3, r9
 8008b22:	4442      	add	r2, r8
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d1c1      	bne.n	8008ab2 <_printf_float+0x342>
 8008b2e:	e680      	b.n	8008832 <_printf_float+0xc2>
 8008b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b32:	2a01      	cmp	r2, #1
 8008b34:	dc01      	bgt.n	8008b3a <_printf_float+0x3ca>
 8008b36:	07db      	lsls	r3, r3, #31
 8008b38:	d538      	bpl.n	8008bac <_printf_float+0x43c>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4642      	mov	r2, r8
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b8      	blx	r7
 8008b44:	3001      	adds	r0, #1
 8008b46:	f43f ae74 	beq.w	8008832 <_printf_float+0xc2>
 8008b4a:	ee18 3a10 	vmov	r3, s16
 8008b4e:	4652      	mov	r2, sl
 8008b50:	4631      	mov	r1, r6
 8008b52:	4628      	mov	r0, r5
 8008b54:	47b8      	blx	r7
 8008b56:	3001      	adds	r0, #1
 8008b58:	f43f ae6b 	beq.w	8008832 <_printf_float+0xc2>
 8008b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b60:	2200      	movs	r2, #0
 8008b62:	2300      	movs	r3, #0
 8008b64:	f7f7 ffc8 	bl	8000af8 <__aeabi_dcmpeq>
 8008b68:	b9d8      	cbnz	r0, 8008ba2 <_printf_float+0x432>
 8008b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6c:	f108 0201 	add.w	r2, r8, #1
 8008b70:	3b01      	subs	r3, #1
 8008b72:	4631      	mov	r1, r6
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b8      	blx	r7
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d10e      	bne.n	8008b9a <_printf_float+0x42a>
 8008b7c:	e659      	b.n	8008832 <_printf_float+0xc2>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	4652      	mov	r2, sl
 8008b82:	4631      	mov	r1, r6
 8008b84:	4628      	mov	r0, r5
 8008b86:	47b8      	blx	r7
 8008b88:	3001      	adds	r0, #1
 8008b8a:	f43f ae52 	beq.w	8008832 <_printf_float+0xc2>
 8008b8e:	f108 0801 	add.w	r8, r8, #1
 8008b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b94:	3b01      	subs	r3, #1
 8008b96:	4543      	cmp	r3, r8
 8008b98:	dcf1      	bgt.n	8008b7e <_printf_float+0x40e>
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ba0:	e6dc      	b.n	800895c <_printf_float+0x1ec>
 8008ba2:	f04f 0800 	mov.w	r8, #0
 8008ba6:	f104 0a1a 	add.w	sl, r4, #26
 8008baa:	e7f2      	b.n	8008b92 <_printf_float+0x422>
 8008bac:	2301      	movs	r3, #1
 8008bae:	4642      	mov	r2, r8
 8008bb0:	e7df      	b.n	8008b72 <_printf_float+0x402>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	464a      	mov	r2, r9
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4628      	mov	r0, r5
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	f43f ae38 	beq.w	8008832 <_printf_float+0xc2>
 8008bc2:	f108 0801 	add.w	r8, r8, #1
 8008bc6:	68e3      	ldr	r3, [r4, #12]
 8008bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bca:	1a5b      	subs	r3, r3, r1
 8008bcc:	4543      	cmp	r3, r8
 8008bce:	dcf0      	bgt.n	8008bb2 <_printf_float+0x442>
 8008bd0:	e6fa      	b.n	80089c8 <_printf_float+0x258>
 8008bd2:	f04f 0800 	mov.w	r8, #0
 8008bd6:	f104 0919 	add.w	r9, r4, #25
 8008bda:	e7f4      	b.n	8008bc6 <_printf_float+0x456>

08008bdc <_printf_common>:
 8008bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be0:	4616      	mov	r6, r2
 8008be2:	4699      	mov	r9, r3
 8008be4:	688a      	ldr	r2, [r1, #8]
 8008be6:	690b      	ldr	r3, [r1, #16]
 8008be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bec:	4293      	cmp	r3, r2
 8008bee:	bfb8      	it	lt
 8008bf0:	4613      	movlt	r3, r2
 8008bf2:	6033      	str	r3, [r6, #0]
 8008bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	b10a      	cbz	r2, 8008c02 <_printf_common+0x26>
 8008bfe:	3301      	adds	r3, #1
 8008c00:	6033      	str	r3, [r6, #0]
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	0699      	lsls	r1, r3, #26
 8008c06:	bf42      	ittt	mi
 8008c08:	6833      	ldrmi	r3, [r6, #0]
 8008c0a:	3302      	addmi	r3, #2
 8008c0c:	6033      	strmi	r3, [r6, #0]
 8008c0e:	6825      	ldr	r5, [r4, #0]
 8008c10:	f015 0506 	ands.w	r5, r5, #6
 8008c14:	d106      	bne.n	8008c24 <_printf_common+0x48>
 8008c16:	f104 0a19 	add.w	sl, r4, #25
 8008c1a:	68e3      	ldr	r3, [r4, #12]
 8008c1c:	6832      	ldr	r2, [r6, #0]
 8008c1e:	1a9b      	subs	r3, r3, r2
 8008c20:	42ab      	cmp	r3, r5
 8008c22:	dc26      	bgt.n	8008c72 <_printf_common+0x96>
 8008c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c28:	1e13      	subs	r3, r2, #0
 8008c2a:	6822      	ldr	r2, [r4, #0]
 8008c2c:	bf18      	it	ne
 8008c2e:	2301      	movne	r3, #1
 8008c30:	0692      	lsls	r2, r2, #26
 8008c32:	d42b      	bmi.n	8008c8c <_printf_common+0xb0>
 8008c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c38:	4649      	mov	r1, r9
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	47c0      	blx	r8
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d01e      	beq.n	8008c80 <_printf_common+0xa4>
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	68e5      	ldr	r5, [r4, #12]
 8008c46:	6832      	ldr	r2, [r6, #0]
 8008c48:	f003 0306 	and.w	r3, r3, #6
 8008c4c:	2b04      	cmp	r3, #4
 8008c4e:	bf08      	it	eq
 8008c50:	1aad      	subeq	r5, r5, r2
 8008c52:	68a3      	ldr	r3, [r4, #8]
 8008c54:	6922      	ldr	r2, [r4, #16]
 8008c56:	bf0c      	ite	eq
 8008c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c5c:	2500      	movne	r5, #0
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	bfc4      	itt	gt
 8008c62:	1a9b      	subgt	r3, r3, r2
 8008c64:	18ed      	addgt	r5, r5, r3
 8008c66:	2600      	movs	r6, #0
 8008c68:	341a      	adds	r4, #26
 8008c6a:	42b5      	cmp	r5, r6
 8008c6c:	d11a      	bne.n	8008ca4 <_printf_common+0xc8>
 8008c6e:	2000      	movs	r0, #0
 8008c70:	e008      	b.n	8008c84 <_printf_common+0xa8>
 8008c72:	2301      	movs	r3, #1
 8008c74:	4652      	mov	r2, sl
 8008c76:	4649      	mov	r1, r9
 8008c78:	4638      	mov	r0, r7
 8008c7a:	47c0      	blx	r8
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d103      	bne.n	8008c88 <_printf_common+0xac>
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c88:	3501      	adds	r5, #1
 8008c8a:	e7c6      	b.n	8008c1a <_printf_common+0x3e>
 8008c8c:	18e1      	adds	r1, r4, r3
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	2030      	movs	r0, #48	; 0x30
 8008c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c96:	4422      	add	r2, r4
 8008c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ca0:	3302      	adds	r3, #2
 8008ca2:	e7c7      	b.n	8008c34 <_printf_common+0x58>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	4649      	mov	r1, r9
 8008caa:	4638      	mov	r0, r7
 8008cac:	47c0      	blx	r8
 8008cae:	3001      	adds	r0, #1
 8008cb0:	d0e6      	beq.n	8008c80 <_printf_common+0xa4>
 8008cb2:	3601      	adds	r6, #1
 8008cb4:	e7d9      	b.n	8008c6a <_printf_common+0x8e>
	...

08008cb8 <_printf_i>:
 8008cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	4691      	mov	r9, r2
 8008cc0:	7e27      	ldrb	r7, [r4, #24]
 8008cc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008cc4:	2f78      	cmp	r7, #120	; 0x78
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	469a      	mov	sl, r3
 8008cca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cce:	d807      	bhi.n	8008ce0 <_printf_i+0x28>
 8008cd0:	2f62      	cmp	r7, #98	; 0x62
 8008cd2:	d80a      	bhi.n	8008cea <_printf_i+0x32>
 8008cd4:	2f00      	cmp	r7, #0
 8008cd6:	f000 80d8 	beq.w	8008e8a <_printf_i+0x1d2>
 8008cda:	2f58      	cmp	r7, #88	; 0x58
 8008cdc:	f000 80a3 	beq.w	8008e26 <_printf_i+0x16e>
 8008ce0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ce8:	e03a      	b.n	8008d60 <_printf_i+0xa8>
 8008cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cee:	2b15      	cmp	r3, #21
 8008cf0:	d8f6      	bhi.n	8008ce0 <_printf_i+0x28>
 8008cf2:	a001      	add	r0, pc, #4	; (adr r0, 8008cf8 <_printf_i+0x40>)
 8008cf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008cf8:	08008d51 	.word	0x08008d51
 8008cfc:	08008d65 	.word	0x08008d65
 8008d00:	08008ce1 	.word	0x08008ce1
 8008d04:	08008ce1 	.word	0x08008ce1
 8008d08:	08008ce1 	.word	0x08008ce1
 8008d0c:	08008ce1 	.word	0x08008ce1
 8008d10:	08008d65 	.word	0x08008d65
 8008d14:	08008ce1 	.word	0x08008ce1
 8008d18:	08008ce1 	.word	0x08008ce1
 8008d1c:	08008ce1 	.word	0x08008ce1
 8008d20:	08008ce1 	.word	0x08008ce1
 8008d24:	08008e71 	.word	0x08008e71
 8008d28:	08008d95 	.word	0x08008d95
 8008d2c:	08008e53 	.word	0x08008e53
 8008d30:	08008ce1 	.word	0x08008ce1
 8008d34:	08008ce1 	.word	0x08008ce1
 8008d38:	08008e93 	.word	0x08008e93
 8008d3c:	08008ce1 	.word	0x08008ce1
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008ce1 	.word	0x08008ce1
 8008d48:	08008ce1 	.word	0x08008ce1
 8008d4c:	08008e5b 	.word	0x08008e5b
 8008d50:	680b      	ldr	r3, [r1, #0]
 8008d52:	1d1a      	adds	r2, r3, #4
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	600a      	str	r2, [r1, #0]
 8008d58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d60:	2301      	movs	r3, #1
 8008d62:	e0a3      	b.n	8008eac <_printf_i+0x1f4>
 8008d64:	6825      	ldr	r5, [r4, #0]
 8008d66:	6808      	ldr	r0, [r1, #0]
 8008d68:	062e      	lsls	r6, r5, #24
 8008d6a:	f100 0304 	add.w	r3, r0, #4
 8008d6e:	d50a      	bpl.n	8008d86 <_printf_i+0xce>
 8008d70:	6805      	ldr	r5, [r0, #0]
 8008d72:	600b      	str	r3, [r1, #0]
 8008d74:	2d00      	cmp	r5, #0
 8008d76:	da03      	bge.n	8008d80 <_printf_i+0xc8>
 8008d78:	232d      	movs	r3, #45	; 0x2d
 8008d7a:	426d      	negs	r5, r5
 8008d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d80:	485e      	ldr	r0, [pc, #376]	; (8008efc <_printf_i+0x244>)
 8008d82:	230a      	movs	r3, #10
 8008d84:	e019      	b.n	8008dba <_printf_i+0x102>
 8008d86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d8a:	6805      	ldr	r5, [r0, #0]
 8008d8c:	600b      	str	r3, [r1, #0]
 8008d8e:	bf18      	it	ne
 8008d90:	b22d      	sxthne	r5, r5
 8008d92:	e7ef      	b.n	8008d74 <_printf_i+0xbc>
 8008d94:	680b      	ldr	r3, [r1, #0]
 8008d96:	6825      	ldr	r5, [r4, #0]
 8008d98:	1d18      	adds	r0, r3, #4
 8008d9a:	6008      	str	r0, [r1, #0]
 8008d9c:	0628      	lsls	r0, r5, #24
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0xec>
 8008da0:	681d      	ldr	r5, [r3, #0]
 8008da2:	e002      	b.n	8008daa <_printf_i+0xf2>
 8008da4:	0669      	lsls	r1, r5, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0xe8>
 8008da8:	881d      	ldrh	r5, [r3, #0]
 8008daa:	4854      	ldr	r0, [pc, #336]	; (8008efc <_printf_i+0x244>)
 8008dac:	2f6f      	cmp	r7, #111	; 0x6f
 8008dae:	bf0c      	ite	eq
 8008db0:	2308      	moveq	r3, #8
 8008db2:	230a      	movne	r3, #10
 8008db4:	2100      	movs	r1, #0
 8008db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dba:	6866      	ldr	r6, [r4, #4]
 8008dbc:	60a6      	str	r6, [r4, #8]
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	bfa2      	ittt	ge
 8008dc2:	6821      	ldrge	r1, [r4, #0]
 8008dc4:	f021 0104 	bicge.w	r1, r1, #4
 8008dc8:	6021      	strge	r1, [r4, #0]
 8008dca:	b90d      	cbnz	r5, 8008dd0 <_printf_i+0x118>
 8008dcc:	2e00      	cmp	r6, #0
 8008dce:	d04d      	beq.n	8008e6c <_printf_i+0x1b4>
 8008dd0:	4616      	mov	r6, r2
 8008dd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008dd6:	fb03 5711 	mls	r7, r3, r1, r5
 8008dda:	5dc7      	ldrb	r7, [r0, r7]
 8008ddc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008de0:	462f      	mov	r7, r5
 8008de2:	42bb      	cmp	r3, r7
 8008de4:	460d      	mov	r5, r1
 8008de6:	d9f4      	bls.n	8008dd2 <_printf_i+0x11a>
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d10b      	bne.n	8008e04 <_printf_i+0x14c>
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	07df      	lsls	r7, r3, #31
 8008df0:	d508      	bpl.n	8008e04 <_printf_i+0x14c>
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	6861      	ldr	r1, [r4, #4]
 8008df6:	4299      	cmp	r1, r3
 8008df8:	bfde      	ittt	le
 8008dfa:	2330      	movle	r3, #48	; 0x30
 8008dfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e04:	1b92      	subs	r2, r2, r6
 8008e06:	6122      	str	r2, [r4, #16]
 8008e08:	f8cd a000 	str.w	sl, [sp]
 8008e0c:	464b      	mov	r3, r9
 8008e0e:	aa03      	add	r2, sp, #12
 8008e10:	4621      	mov	r1, r4
 8008e12:	4640      	mov	r0, r8
 8008e14:	f7ff fee2 	bl	8008bdc <_printf_common>
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d14c      	bne.n	8008eb6 <_printf_i+0x1fe>
 8008e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e20:	b004      	add	sp, #16
 8008e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e26:	4835      	ldr	r0, [pc, #212]	; (8008efc <_printf_i+0x244>)
 8008e28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	680e      	ldr	r6, [r1, #0]
 8008e30:	061f      	lsls	r7, r3, #24
 8008e32:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e36:	600e      	str	r6, [r1, #0]
 8008e38:	d514      	bpl.n	8008e64 <_printf_i+0x1ac>
 8008e3a:	07d9      	lsls	r1, r3, #31
 8008e3c:	bf44      	itt	mi
 8008e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e42:	6023      	strmi	r3, [r4, #0]
 8008e44:	b91d      	cbnz	r5, 8008e4e <_printf_i+0x196>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	f023 0320 	bic.w	r3, r3, #32
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	2310      	movs	r3, #16
 8008e50:	e7b0      	b.n	8008db4 <_printf_i+0xfc>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	f043 0320 	orr.w	r3, r3, #32
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	2378      	movs	r3, #120	; 0x78
 8008e5c:	4828      	ldr	r0, [pc, #160]	; (8008f00 <_printf_i+0x248>)
 8008e5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e62:	e7e3      	b.n	8008e2c <_printf_i+0x174>
 8008e64:	065e      	lsls	r6, r3, #25
 8008e66:	bf48      	it	mi
 8008e68:	b2ad      	uxthmi	r5, r5
 8008e6a:	e7e6      	b.n	8008e3a <_printf_i+0x182>
 8008e6c:	4616      	mov	r6, r2
 8008e6e:	e7bb      	b.n	8008de8 <_printf_i+0x130>
 8008e70:	680b      	ldr	r3, [r1, #0]
 8008e72:	6826      	ldr	r6, [r4, #0]
 8008e74:	6960      	ldr	r0, [r4, #20]
 8008e76:	1d1d      	adds	r5, r3, #4
 8008e78:	600d      	str	r5, [r1, #0]
 8008e7a:	0635      	lsls	r5, r6, #24
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	d501      	bpl.n	8008e84 <_printf_i+0x1cc>
 8008e80:	6018      	str	r0, [r3, #0]
 8008e82:	e002      	b.n	8008e8a <_printf_i+0x1d2>
 8008e84:	0671      	lsls	r1, r6, #25
 8008e86:	d5fb      	bpl.n	8008e80 <_printf_i+0x1c8>
 8008e88:	8018      	strh	r0, [r3, #0]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	4616      	mov	r6, r2
 8008e90:	e7ba      	b.n	8008e08 <_printf_i+0x150>
 8008e92:	680b      	ldr	r3, [r1, #0]
 8008e94:	1d1a      	adds	r2, r3, #4
 8008e96:	600a      	str	r2, [r1, #0]
 8008e98:	681e      	ldr	r6, [r3, #0]
 8008e9a:	6862      	ldr	r2, [r4, #4]
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f7f7 f9b6 	bl	8000210 <memchr>
 8008ea4:	b108      	cbz	r0, 8008eaa <_printf_i+0x1f2>
 8008ea6:	1b80      	subs	r0, r0, r6
 8008ea8:	6060      	str	r0, [r4, #4]
 8008eaa:	6863      	ldr	r3, [r4, #4]
 8008eac:	6123      	str	r3, [r4, #16]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb4:	e7a8      	b.n	8008e08 <_printf_i+0x150>
 8008eb6:	6923      	ldr	r3, [r4, #16]
 8008eb8:	4632      	mov	r2, r6
 8008eba:	4649      	mov	r1, r9
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	47d0      	blx	sl
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	d0ab      	beq.n	8008e1c <_printf_i+0x164>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	079b      	lsls	r3, r3, #30
 8008ec8:	d413      	bmi.n	8008ef2 <_printf_i+0x23a>
 8008eca:	68e0      	ldr	r0, [r4, #12]
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	4298      	cmp	r0, r3
 8008ed0:	bfb8      	it	lt
 8008ed2:	4618      	movlt	r0, r3
 8008ed4:	e7a4      	b.n	8008e20 <_printf_i+0x168>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4632      	mov	r2, r6
 8008eda:	4649      	mov	r1, r9
 8008edc:	4640      	mov	r0, r8
 8008ede:	47d0      	blx	sl
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	d09b      	beq.n	8008e1c <_printf_i+0x164>
 8008ee4:	3501      	adds	r5, #1
 8008ee6:	68e3      	ldr	r3, [r4, #12]
 8008ee8:	9903      	ldr	r1, [sp, #12]
 8008eea:	1a5b      	subs	r3, r3, r1
 8008eec:	42ab      	cmp	r3, r5
 8008eee:	dcf2      	bgt.n	8008ed6 <_printf_i+0x21e>
 8008ef0:	e7eb      	b.n	8008eca <_printf_i+0x212>
 8008ef2:	2500      	movs	r5, #0
 8008ef4:	f104 0619 	add.w	r6, r4, #25
 8008ef8:	e7f5      	b.n	8008ee6 <_printf_i+0x22e>
 8008efa:	bf00      	nop
 8008efc:	0800b516 	.word	0x0800b516
 8008f00:	0800b527 	.word	0x0800b527

08008f04 <sniprintf>:
 8008f04:	b40c      	push	{r2, r3}
 8008f06:	b530      	push	{r4, r5, lr}
 8008f08:	4b17      	ldr	r3, [pc, #92]	; (8008f68 <sniprintf+0x64>)
 8008f0a:	1e0c      	subs	r4, r1, #0
 8008f0c:	681d      	ldr	r5, [r3, #0]
 8008f0e:	b09d      	sub	sp, #116	; 0x74
 8008f10:	da08      	bge.n	8008f24 <sniprintf+0x20>
 8008f12:	238b      	movs	r3, #139	; 0x8b
 8008f14:	602b      	str	r3, [r5, #0]
 8008f16:	f04f 30ff 	mov.w	r0, #4294967295
 8008f1a:	b01d      	add	sp, #116	; 0x74
 8008f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f20:	b002      	add	sp, #8
 8008f22:	4770      	bx	lr
 8008f24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008f28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008f2c:	bf14      	ite	ne
 8008f2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f32:	4623      	moveq	r3, r4
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	9307      	str	r3, [sp, #28]
 8008f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f3c:	9002      	str	r0, [sp, #8]
 8008f3e:	9006      	str	r0, [sp, #24]
 8008f40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f46:	ab21      	add	r3, sp, #132	; 0x84
 8008f48:	a902      	add	r1, sp, #8
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	f001 fb6b 	bl	800a628 <_svfiprintf_r>
 8008f52:	1c43      	adds	r3, r0, #1
 8008f54:	bfbc      	itt	lt
 8008f56:	238b      	movlt	r3, #139	; 0x8b
 8008f58:	602b      	strlt	r3, [r5, #0]
 8008f5a:	2c00      	cmp	r4, #0
 8008f5c:	d0dd      	beq.n	8008f1a <sniprintf+0x16>
 8008f5e:	9b02      	ldr	r3, [sp, #8]
 8008f60:	2200      	movs	r2, #0
 8008f62:	701a      	strb	r2, [r3, #0]
 8008f64:	e7d9      	b.n	8008f1a <sniprintf+0x16>
 8008f66:	bf00      	nop
 8008f68:	20000034 	.word	0x20000034

08008f6c <siprintf>:
 8008f6c:	b40e      	push	{r1, r2, r3}
 8008f6e:	b500      	push	{lr}
 8008f70:	b09c      	sub	sp, #112	; 0x70
 8008f72:	ab1d      	add	r3, sp, #116	; 0x74
 8008f74:	9002      	str	r0, [sp, #8]
 8008f76:	9006      	str	r0, [sp, #24]
 8008f78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f7c:	4809      	ldr	r0, [pc, #36]	; (8008fa4 <siprintf+0x38>)
 8008f7e:	9107      	str	r1, [sp, #28]
 8008f80:	9104      	str	r1, [sp, #16]
 8008f82:	4909      	ldr	r1, [pc, #36]	; (8008fa8 <siprintf+0x3c>)
 8008f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f88:	9105      	str	r1, [sp, #20]
 8008f8a:	6800      	ldr	r0, [r0, #0]
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	a902      	add	r1, sp, #8
 8008f90:	f001 fb4a 	bl	800a628 <_svfiprintf_r>
 8008f94:	9b02      	ldr	r3, [sp, #8]
 8008f96:	2200      	movs	r2, #0
 8008f98:	701a      	strb	r2, [r3, #0]
 8008f9a:	b01c      	add	sp, #112	; 0x70
 8008f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fa0:	b003      	add	sp, #12
 8008fa2:	4770      	bx	lr
 8008fa4:	20000034 	.word	0x20000034
 8008fa8:	ffff0208 	.word	0xffff0208

08008fac <strncmp>:
 8008fac:	b510      	push	{r4, lr}
 8008fae:	b16a      	cbz	r2, 8008fcc <strncmp+0x20>
 8008fb0:	3901      	subs	r1, #1
 8008fb2:	1884      	adds	r4, r0, r2
 8008fb4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008fb8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d103      	bne.n	8008fc8 <strncmp+0x1c>
 8008fc0:	42a0      	cmp	r0, r4
 8008fc2:	d001      	beq.n	8008fc8 <strncmp+0x1c>
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1f5      	bne.n	8008fb4 <strncmp+0x8>
 8008fc8:	1a98      	subs	r0, r3, r2
 8008fca:	bd10      	pop	{r4, pc}
 8008fcc:	4610      	mov	r0, r2
 8008fce:	e7fc      	b.n	8008fca <strncmp+0x1e>

08008fd0 <strrchr>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	460c      	mov	r4, r1
 8008fd6:	b969      	cbnz	r1, 8008ff4 <strrchr+0x24>
 8008fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fdc:	f001 bc34 	b.w	800a848 <strchr>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f001 fc2e 	bl	800a848 <strchr>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d1f7      	bne.n	8008fe0 <strrchr+0x10>
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	bd38      	pop	{r3, r4, r5, pc}
 8008ff4:	2500      	movs	r5, #0
 8008ff6:	e7f5      	b.n	8008fe4 <strrchr+0x14>

08008ff8 <quorem>:
 8008ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	6903      	ldr	r3, [r0, #16]
 8008ffe:	690c      	ldr	r4, [r1, #16]
 8009000:	42a3      	cmp	r3, r4
 8009002:	4607      	mov	r7, r0
 8009004:	f2c0 8081 	blt.w	800910a <quorem+0x112>
 8009008:	3c01      	subs	r4, #1
 800900a:	f101 0814 	add.w	r8, r1, #20
 800900e:	f100 0514 	add.w	r5, r0, #20
 8009012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009016:	9301      	str	r3, [sp, #4]
 8009018:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800901c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009020:	3301      	adds	r3, #1
 8009022:	429a      	cmp	r2, r3
 8009024:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009028:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800902c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009030:	d331      	bcc.n	8009096 <quorem+0x9e>
 8009032:	f04f 0e00 	mov.w	lr, #0
 8009036:	4640      	mov	r0, r8
 8009038:	46ac      	mov	ip, r5
 800903a:	46f2      	mov	sl, lr
 800903c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009040:	b293      	uxth	r3, r2
 8009042:	fb06 e303 	mla	r3, r6, r3, lr
 8009046:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800904a:	b29b      	uxth	r3, r3
 800904c:	ebaa 0303 	sub.w	r3, sl, r3
 8009050:	0c12      	lsrs	r2, r2, #16
 8009052:	f8dc a000 	ldr.w	sl, [ip]
 8009056:	fb06 e202 	mla	r2, r6, r2, lr
 800905a:	fa13 f38a 	uxtah	r3, r3, sl
 800905e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009062:	fa1f fa82 	uxth.w	sl, r2
 8009066:	f8dc 2000 	ldr.w	r2, [ip]
 800906a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800906e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009072:	b29b      	uxth	r3, r3
 8009074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009078:	4581      	cmp	r9, r0
 800907a:	f84c 3b04 	str.w	r3, [ip], #4
 800907e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009082:	d2db      	bcs.n	800903c <quorem+0x44>
 8009084:	f855 300b 	ldr.w	r3, [r5, fp]
 8009088:	b92b      	cbnz	r3, 8009096 <quorem+0x9e>
 800908a:	9b01      	ldr	r3, [sp, #4]
 800908c:	3b04      	subs	r3, #4
 800908e:	429d      	cmp	r5, r3
 8009090:	461a      	mov	r2, r3
 8009092:	d32e      	bcc.n	80090f2 <quorem+0xfa>
 8009094:	613c      	str	r4, [r7, #16]
 8009096:	4638      	mov	r0, r7
 8009098:	f001 f8b0 	bl	800a1fc <__mcmp>
 800909c:	2800      	cmp	r0, #0
 800909e:	db24      	blt.n	80090ea <quorem+0xf2>
 80090a0:	3601      	adds	r6, #1
 80090a2:	4628      	mov	r0, r5
 80090a4:	f04f 0c00 	mov.w	ip, #0
 80090a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80090ac:	f8d0 e000 	ldr.w	lr, [r0]
 80090b0:	b293      	uxth	r3, r2
 80090b2:	ebac 0303 	sub.w	r3, ip, r3
 80090b6:	0c12      	lsrs	r2, r2, #16
 80090b8:	fa13 f38e 	uxtah	r3, r3, lr
 80090bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80090c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ca:	45c1      	cmp	r9, r8
 80090cc:	f840 3b04 	str.w	r3, [r0], #4
 80090d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80090d4:	d2e8      	bcs.n	80090a8 <quorem+0xb0>
 80090d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090de:	b922      	cbnz	r2, 80090ea <quorem+0xf2>
 80090e0:	3b04      	subs	r3, #4
 80090e2:	429d      	cmp	r5, r3
 80090e4:	461a      	mov	r2, r3
 80090e6:	d30a      	bcc.n	80090fe <quorem+0x106>
 80090e8:	613c      	str	r4, [r7, #16]
 80090ea:	4630      	mov	r0, r6
 80090ec:	b003      	add	sp, #12
 80090ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f2:	6812      	ldr	r2, [r2, #0]
 80090f4:	3b04      	subs	r3, #4
 80090f6:	2a00      	cmp	r2, #0
 80090f8:	d1cc      	bne.n	8009094 <quorem+0x9c>
 80090fa:	3c01      	subs	r4, #1
 80090fc:	e7c7      	b.n	800908e <quorem+0x96>
 80090fe:	6812      	ldr	r2, [r2, #0]
 8009100:	3b04      	subs	r3, #4
 8009102:	2a00      	cmp	r2, #0
 8009104:	d1f0      	bne.n	80090e8 <quorem+0xf0>
 8009106:	3c01      	subs	r4, #1
 8009108:	e7eb      	b.n	80090e2 <quorem+0xea>
 800910a:	2000      	movs	r0, #0
 800910c:	e7ee      	b.n	80090ec <quorem+0xf4>
	...

08009110 <_dtoa_r>:
 8009110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	ed2d 8b02 	vpush	{d8}
 8009118:	ec57 6b10 	vmov	r6, r7, d0
 800911c:	b095      	sub	sp, #84	; 0x54
 800911e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009120:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009124:	9105      	str	r1, [sp, #20]
 8009126:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800912a:	4604      	mov	r4, r0
 800912c:	9209      	str	r2, [sp, #36]	; 0x24
 800912e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009130:	b975      	cbnz	r5, 8009150 <_dtoa_r+0x40>
 8009132:	2010      	movs	r0, #16
 8009134:	f000 fddc 	bl	8009cf0 <malloc>
 8009138:	4602      	mov	r2, r0
 800913a:	6260      	str	r0, [r4, #36]	; 0x24
 800913c:	b920      	cbnz	r0, 8009148 <_dtoa_r+0x38>
 800913e:	4bb2      	ldr	r3, [pc, #712]	; (8009408 <_dtoa_r+0x2f8>)
 8009140:	21ea      	movs	r1, #234	; 0xea
 8009142:	48b2      	ldr	r0, [pc, #712]	; (800940c <_dtoa_r+0x2fc>)
 8009144:	f001 fb8e 	bl	800a864 <__assert_func>
 8009148:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800914c:	6005      	str	r5, [r0, #0]
 800914e:	60c5      	str	r5, [r0, #12]
 8009150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009152:	6819      	ldr	r1, [r3, #0]
 8009154:	b151      	cbz	r1, 800916c <_dtoa_r+0x5c>
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	604a      	str	r2, [r1, #4]
 800915a:	2301      	movs	r3, #1
 800915c:	4093      	lsls	r3, r2
 800915e:	608b      	str	r3, [r1, #8]
 8009160:	4620      	mov	r0, r4
 8009162:	f000 fe0d 	bl	8009d80 <_Bfree>
 8009166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]
 800916c:	1e3b      	subs	r3, r7, #0
 800916e:	bfb9      	ittee	lt
 8009170:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009174:	9303      	strlt	r3, [sp, #12]
 8009176:	2300      	movge	r3, #0
 8009178:	f8c8 3000 	strge.w	r3, [r8]
 800917c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009180:	4ba3      	ldr	r3, [pc, #652]	; (8009410 <_dtoa_r+0x300>)
 8009182:	bfbc      	itt	lt
 8009184:	2201      	movlt	r2, #1
 8009186:	f8c8 2000 	strlt.w	r2, [r8]
 800918a:	ea33 0309 	bics.w	r3, r3, r9
 800918e:	d11b      	bne.n	80091c8 <_dtoa_r+0xb8>
 8009190:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009192:	f242 730f 	movw	r3, #9999	; 0x270f
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800919c:	4333      	orrs	r3, r6
 800919e:	f000 857a 	beq.w	8009c96 <_dtoa_r+0xb86>
 80091a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091a4:	b963      	cbnz	r3, 80091c0 <_dtoa_r+0xb0>
 80091a6:	4b9b      	ldr	r3, [pc, #620]	; (8009414 <_dtoa_r+0x304>)
 80091a8:	e024      	b.n	80091f4 <_dtoa_r+0xe4>
 80091aa:	4b9b      	ldr	r3, [pc, #620]	; (8009418 <_dtoa_r+0x308>)
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	3308      	adds	r3, #8
 80091b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	9800      	ldr	r0, [sp, #0]
 80091b6:	b015      	add	sp, #84	; 0x54
 80091b8:	ecbd 8b02 	vpop	{d8}
 80091bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c0:	4b94      	ldr	r3, [pc, #592]	; (8009414 <_dtoa_r+0x304>)
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	3303      	adds	r3, #3
 80091c6:	e7f3      	b.n	80091b0 <_dtoa_r+0xa0>
 80091c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091cc:	2200      	movs	r2, #0
 80091ce:	ec51 0b17 	vmov	r0, r1, d7
 80091d2:	2300      	movs	r3, #0
 80091d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80091d8:	f7f7 fc8e 	bl	8000af8 <__aeabi_dcmpeq>
 80091dc:	4680      	mov	r8, r0
 80091de:	b158      	cbz	r0, 80091f8 <_dtoa_r+0xe8>
 80091e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091e2:	2301      	movs	r3, #1
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8551 	beq.w	8009c90 <_dtoa_r+0xb80>
 80091ee:	488b      	ldr	r0, [pc, #556]	; (800941c <_dtoa_r+0x30c>)
 80091f0:	6018      	str	r0, [r3, #0]
 80091f2:	1e43      	subs	r3, r0, #1
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	e7dd      	b.n	80091b4 <_dtoa_r+0xa4>
 80091f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80091fc:	aa12      	add	r2, sp, #72	; 0x48
 80091fe:	a913      	add	r1, sp, #76	; 0x4c
 8009200:	4620      	mov	r0, r4
 8009202:	f001 f89f 	bl	800a344 <__d2b>
 8009206:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800920a:	4683      	mov	fp, r0
 800920c:	2d00      	cmp	r5, #0
 800920e:	d07c      	beq.n	800930a <_dtoa_r+0x1fa>
 8009210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009212:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800921a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800921e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800922a:	4b7d      	ldr	r3, [pc, #500]	; (8009420 <_dtoa_r+0x310>)
 800922c:	2200      	movs	r2, #0
 800922e:	4630      	mov	r0, r6
 8009230:	4639      	mov	r1, r7
 8009232:	f7f7 f841 	bl	80002b8 <__aeabi_dsub>
 8009236:	a36e      	add	r3, pc, #440	; (adr r3, 80093f0 <_dtoa_r+0x2e0>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f7 f9f4 	bl	8000628 <__aeabi_dmul>
 8009240:	a36d      	add	r3, pc, #436	; (adr r3, 80093f8 <_dtoa_r+0x2e8>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	f7f7 f839 	bl	80002bc <__adddf3>
 800924a:	4606      	mov	r6, r0
 800924c:	4628      	mov	r0, r5
 800924e:	460f      	mov	r7, r1
 8009250:	f7f7 f980 	bl	8000554 <__aeabi_i2d>
 8009254:	a36a      	add	r3, pc, #424	; (adr r3, 8009400 <_dtoa_r+0x2f0>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f7 f9e5 	bl	8000628 <__aeabi_dmul>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4630      	mov	r0, r6
 8009264:	4639      	mov	r1, r7
 8009266:	f7f7 f829 	bl	80002bc <__adddf3>
 800926a:	4606      	mov	r6, r0
 800926c:	460f      	mov	r7, r1
 800926e:	f7f7 fc8b 	bl	8000b88 <__aeabi_d2iz>
 8009272:	2200      	movs	r2, #0
 8009274:	4682      	mov	sl, r0
 8009276:	2300      	movs	r3, #0
 8009278:	4630      	mov	r0, r6
 800927a:	4639      	mov	r1, r7
 800927c:	f7f7 fc46 	bl	8000b0c <__aeabi_dcmplt>
 8009280:	b148      	cbz	r0, 8009296 <_dtoa_r+0x186>
 8009282:	4650      	mov	r0, sl
 8009284:	f7f7 f966 	bl	8000554 <__aeabi_i2d>
 8009288:	4632      	mov	r2, r6
 800928a:	463b      	mov	r3, r7
 800928c:	f7f7 fc34 	bl	8000af8 <__aeabi_dcmpeq>
 8009290:	b908      	cbnz	r0, 8009296 <_dtoa_r+0x186>
 8009292:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009296:	f1ba 0f16 	cmp.w	sl, #22
 800929a:	d854      	bhi.n	8009346 <_dtoa_r+0x236>
 800929c:	4b61      	ldr	r3, [pc, #388]	; (8009424 <_dtoa_r+0x314>)
 800929e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092aa:	f7f7 fc2f 	bl	8000b0c <__aeabi_dcmplt>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d04b      	beq.n	800934a <_dtoa_r+0x23a>
 80092b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092b6:	2300      	movs	r3, #0
 80092b8:	930e      	str	r3, [sp, #56]	; 0x38
 80092ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092bc:	1b5d      	subs	r5, r3, r5
 80092be:	1e6b      	subs	r3, r5, #1
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	bf43      	ittte	mi
 80092c4:	2300      	movmi	r3, #0
 80092c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80092ca:	9304      	strmi	r3, [sp, #16]
 80092cc:	f04f 0800 	movpl.w	r8, #0
 80092d0:	f1ba 0f00 	cmp.w	sl, #0
 80092d4:	db3b      	blt.n	800934e <_dtoa_r+0x23e>
 80092d6:	9b04      	ldr	r3, [sp, #16]
 80092d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80092dc:	4453      	add	r3, sl
 80092de:	9304      	str	r3, [sp, #16]
 80092e0:	2300      	movs	r3, #0
 80092e2:	9306      	str	r3, [sp, #24]
 80092e4:	9b05      	ldr	r3, [sp, #20]
 80092e6:	2b09      	cmp	r3, #9
 80092e8:	d869      	bhi.n	80093be <_dtoa_r+0x2ae>
 80092ea:	2b05      	cmp	r3, #5
 80092ec:	bfc4      	itt	gt
 80092ee:	3b04      	subgt	r3, #4
 80092f0:	9305      	strgt	r3, [sp, #20]
 80092f2:	9b05      	ldr	r3, [sp, #20]
 80092f4:	f1a3 0302 	sub.w	r3, r3, #2
 80092f8:	bfcc      	ite	gt
 80092fa:	2500      	movgt	r5, #0
 80092fc:	2501      	movle	r5, #1
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d869      	bhi.n	80093d6 <_dtoa_r+0x2c6>
 8009302:	e8df f003 	tbb	[pc, r3]
 8009306:	4e2c      	.short	0x4e2c
 8009308:	5a4c      	.short	0x5a4c
 800930a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800930e:	441d      	add	r5, r3
 8009310:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009314:	2b20      	cmp	r3, #32
 8009316:	bfc1      	itttt	gt
 8009318:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800931c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009320:	fa09 f303 	lslgt.w	r3, r9, r3
 8009324:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009328:	bfda      	itte	le
 800932a:	f1c3 0320 	rsble	r3, r3, #32
 800932e:	fa06 f003 	lslle.w	r0, r6, r3
 8009332:	4318      	orrgt	r0, r3
 8009334:	f7f7 f8fe 	bl	8000534 <__aeabi_ui2d>
 8009338:	2301      	movs	r3, #1
 800933a:	4606      	mov	r6, r0
 800933c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009340:	3d01      	subs	r5, #1
 8009342:	9310      	str	r3, [sp, #64]	; 0x40
 8009344:	e771      	b.n	800922a <_dtoa_r+0x11a>
 8009346:	2301      	movs	r3, #1
 8009348:	e7b6      	b.n	80092b8 <_dtoa_r+0x1a8>
 800934a:	900e      	str	r0, [sp, #56]	; 0x38
 800934c:	e7b5      	b.n	80092ba <_dtoa_r+0x1aa>
 800934e:	f1ca 0300 	rsb	r3, sl, #0
 8009352:	9306      	str	r3, [sp, #24]
 8009354:	2300      	movs	r3, #0
 8009356:	eba8 080a 	sub.w	r8, r8, sl
 800935a:	930d      	str	r3, [sp, #52]	; 0x34
 800935c:	e7c2      	b.n	80092e4 <_dtoa_r+0x1d4>
 800935e:	2300      	movs	r3, #0
 8009360:	9308      	str	r3, [sp, #32]
 8009362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009364:	2b00      	cmp	r3, #0
 8009366:	dc39      	bgt.n	80093dc <_dtoa_r+0x2cc>
 8009368:	f04f 0901 	mov.w	r9, #1
 800936c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009370:	464b      	mov	r3, r9
 8009372:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009376:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009378:	2200      	movs	r2, #0
 800937a:	6042      	str	r2, [r0, #4]
 800937c:	2204      	movs	r2, #4
 800937e:	f102 0614 	add.w	r6, r2, #20
 8009382:	429e      	cmp	r6, r3
 8009384:	6841      	ldr	r1, [r0, #4]
 8009386:	d92f      	bls.n	80093e8 <_dtoa_r+0x2d8>
 8009388:	4620      	mov	r0, r4
 800938a:	f000 fcb9 	bl	8009d00 <_Balloc>
 800938e:	9000      	str	r0, [sp, #0]
 8009390:	2800      	cmp	r0, #0
 8009392:	d14b      	bne.n	800942c <_dtoa_r+0x31c>
 8009394:	4b24      	ldr	r3, [pc, #144]	; (8009428 <_dtoa_r+0x318>)
 8009396:	4602      	mov	r2, r0
 8009398:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800939c:	e6d1      	b.n	8009142 <_dtoa_r+0x32>
 800939e:	2301      	movs	r3, #1
 80093a0:	e7de      	b.n	8009360 <_dtoa_r+0x250>
 80093a2:	2300      	movs	r3, #0
 80093a4:	9308      	str	r3, [sp, #32]
 80093a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a8:	eb0a 0903 	add.w	r9, sl, r3
 80093ac:	f109 0301 	add.w	r3, r9, #1
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	bfb8      	it	lt
 80093b6:	2301      	movlt	r3, #1
 80093b8:	e7dd      	b.n	8009376 <_dtoa_r+0x266>
 80093ba:	2301      	movs	r3, #1
 80093bc:	e7f2      	b.n	80093a4 <_dtoa_r+0x294>
 80093be:	2501      	movs	r5, #1
 80093c0:	2300      	movs	r3, #0
 80093c2:	9305      	str	r3, [sp, #20]
 80093c4:	9508      	str	r5, [sp, #32]
 80093c6:	f04f 39ff 	mov.w	r9, #4294967295
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80093d0:	2312      	movs	r3, #18
 80093d2:	9209      	str	r2, [sp, #36]	; 0x24
 80093d4:	e7cf      	b.n	8009376 <_dtoa_r+0x266>
 80093d6:	2301      	movs	r3, #1
 80093d8:	9308      	str	r3, [sp, #32]
 80093da:	e7f4      	b.n	80093c6 <_dtoa_r+0x2b6>
 80093dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80093e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80093e4:	464b      	mov	r3, r9
 80093e6:	e7c6      	b.n	8009376 <_dtoa_r+0x266>
 80093e8:	3101      	adds	r1, #1
 80093ea:	6041      	str	r1, [r0, #4]
 80093ec:	0052      	lsls	r2, r2, #1
 80093ee:	e7c6      	b.n	800937e <_dtoa_r+0x26e>
 80093f0:	636f4361 	.word	0x636f4361
 80093f4:	3fd287a7 	.word	0x3fd287a7
 80093f8:	8b60c8b3 	.word	0x8b60c8b3
 80093fc:	3fc68a28 	.word	0x3fc68a28
 8009400:	509f79fb 	.word	0x509f79fb
 8009404:	3fd34413 	.word	0x3fd34413
 8009408:	0800b545 	.word	0x0800b545
 800940c:	0800b55c 	.word	0x0800b55c
 8009410:	7ff00000 	.word	0x7ff00000
 8009414:	0800b541 	.word	0x0800b541
 8009418:	0800b538 	.word	0x0800b538
 800941c:	0800b515 	.word	0x0800b515
 8009420:	3ff80000 	.word	0x3ff80000
 8009424:	0800b658 	.word	0x0800b658
 8009428:	0800b5bb 	.word	0x0800b5bb
 800942c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800942e:	9a00      	ldr	r2, [sp, #0]
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	9b01      	ldr	r3, [sp, #4]
 8009434:	2b0e      	cmp	r3, #14
 8009436:	f200 80ad 	bhi.w	8009594 <_dtoa_r+0x484>
 800943a:	2d00      	cmp	r5, #0
 800943c:	f000 80aa 	beq.w	8009594 <_dtoa_r+0x484>
 8009440:	f1ba 0f00 	cmp.w	sl, #0
 8009444:	dd36      	ble.n	80094b4 <_dtoa_r+0x3a4>
 8009446:	4ac3      	ldr	r2, [pc, #780]	; (8009754 <_dtoa_r+0x644>)
 8009448:	f00a 030f 	and.w	r3, sl, #15
 800944c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009450:	ed93 7b00 	vldr	d7, [r3]
 8009454:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009458:	ea4f 172a 	mov.w	r7, sl, asr #4
 800945c:	eeb0 8a47 	vmov.f32	s16, s14
 8009460:	eef0 8a67 	vmov.f32	s17, s15
 8009464:	d016      	beq.n	8009494 <_dtoa_r+0x384>
 8009466:	4bbc      	ldr	r3, [pc, #752]	; (8009758 <_dtoa_r+0x648>)
 8009468:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800946c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009470:	f7f7 fa04 	bl	800087c <__aeabi_ddiv>
 8009474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009478:	f007 070f 	and.w	r7, r7, #15
 800947c:	2503      	movs	r5, #3
 800947e:	4eb6      	ldr	r6, [pc, #728]	; (8009758 <_dtoa_r+0x648>)
 8009480:	b957      	cbnz	r7, 8009498 <_dtoa_r+0x388>
 8009482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009486:	ec53 2b18 	vmov	r2, r3, d8
 800948a:	f7f7 f9f7 	bl	800087c <__aeabi_ddiv>
 800948e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009492:	e029      	b.n	80094e8 <_dtoa_r+0x3d8>
 8009494:	2502      	movs	r5, #2
 8009496:	e7f2      	b.n	800947e <_dtoa_r+0x36e>
 8009498:	07f9      	lsls	r1, r7, #31
 800949a:	d508      	bpl.n	80094ae <_dtoa_r+0x39e>
 800949c:	ec51 0b18 	vmov	r0, r1, d8
 80094a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094a4:	f7f7 f8c0 	bl	8000628 <__aeabi_dmul>
 80094a8:	ec41 0b18 	vmov	d8, r0, r1
 80094ac:	3501      	adds	r5, #1
 80094ae:	107f      	asrs	r7, r7, #1
 80094b0:	3608      	adds	r6, #8
 80094b2:	e7e5      	b.n	8009480 <_dtoa_r+0x370>
 80094b4:	f000 80a6 	beq.w	8009604 <_dtoa_r+0x4f4>
 80094b8:	f1ca 0600 	rsb	r6, sl, #0
 80094bc:	4ba5      	ldr	r3, [pc, #660]	; (8009754 <_dtoa_r+0x644>)
 80094be:	4fa6      	ldr	r7, [pc, #664]	; (8009758 <_dtoa_r+0x648>)
 80094c0:	f006 020f 	and.w	r2, r6, #15
 80094c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094d0:	f7f7 f8aa 	bl	8000628 <__aeabi_dmul>
 80094d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094d8:	1136      	asrs	r6, r6, #4
 80094da:	2300      	movs	r3, #0
 80094dc:	2502      	movs	r5, #2
 80094de:	2e00      	cmp	r6, #0
 80094e0:	f040 8085 	bne.w	80095ee <_dtoa_r+0x4de>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1d2      	bne.n	800948e <_dtoa_r+0x37e>
 80094e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 808c 	beq.w	8009608 <_dtoa_r+0x4f8>
 80094f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80094f4:	4b99      	ldr	r3, [pc, #612]	; (800975c <_dtoa_r+0x64c>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	4630      	mov	r0, r6
 80094fa:	4639      	mov	r1, r7
 80094fc:	f7f7 fb06 	bl	8000b0c <__aeabi_dcmplt>
 8009500:	2800      	cmp	r0, #0
 8009502:	f000 8081 	beq.w	8009608 <_dtoa_r+0x4f8>
 8009506:	9b01      	ldr	r3, [sp, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d07d      	beq.n	8009608 <_dtoa_r+0x4f8>
 800950c:	f1b9 0f00 	cmp.w	r9, #0
 8009510:	dd3c      	ble.n	800958c <_dtoa_r+0x47c>
 8009512:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009516:	9307      	str	r3, [sp, #28]
 8009518:	2200      	movs	r2, #0
 800951a:	4b91      	ldr	r3, [pc, #580]	; (8009760 <_dtoa_r+0x650>)
 800951c:	4630      	mov	r0, r6
 800951e:	4639      	mov	r1, r7
 8009520:	f7f7 f882 	bl	8000628 <__aeabi_dmul>
 8009524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009528:	3501      	adds	r5, #1
 800952a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800952e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009532:	4628      	mov	r0, r5
 8009534:	f7f7 f80e 	bl	8000554 <__aeabi_i2d>
 8009538:	4632      	mov	r2, r6
 800953a:	463b      	mov	r3, r7
 800953c:	f7f7 f874 	bl	8000628 <__aeabi_dmul>
 8009540:	4b88      	ldr	r3, [pc, #544]	; (8009764 <_dtoa_r+0x654>)
 8009542:	2200      	movs	r2, #0
 8009544:	f7f6 feba 	bl	80002bc <__adddf3>
 8009548:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800954c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009550:	9303      	str	r3, [sp, #12]
 8009552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009554:	2b00      	cmp	r3, #0
 8009556:	d15c      	bne.n	8009612 <_dtoa_r+0x502>
 8009558:	4b83      	ldr	r3, [pc, #524]	; (8009768 <_dtoa_r+0x658>)
 800955a:	2200      	movs	r2, #0
 800955c:	4630      	mov	r0, r6
 800955e:	4639      	mov	r1, r7
 8009560:	f7f6 feaa 	bl	80002b8 <__aeabi_dsub>
 8009564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009568:	4606      	mov	r6, r0
 800956a:	460f      	mov	r7, r1
 800956c:	f7f7 faec 	bl	8000b48 <__aeabi_dcmpgt>
 8009570:	2800      	cmp	r0, #0
 8009572:	f040 8296 	bne.w	8009aa2 <_dtoa_r+0x992>
 8009576:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800957a:	4630      	mov	r0, r6
 800957c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009580:	4639      	mov	r1, r7
 8009582:	f7f7 fac3 	bl	8000b0c <__aeabi_dcmplt>
 8009586:	2800      	cmp	r0, #0
 8009588:	f040 8288 	bne.w	8009a9c <_dtoa_r+0x98c>
 800958c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009590:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009594:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009596:	2b00      	cmp	r3, #0
 8009598:	f2c0 8158 	blt.w	800984c <_dtoa_r+0x73c>
 800959c:	f1ba 0f0e 	cmp.w	sl, #14
 80095a0:	f300 8154 	bgt.w	800984c <_dtoa_r+0x73c>
 80095a4:	4b6b      	ldr	r3, [pc, #428]	; (8009754 <_dtoa_r+0x644>)
 80095a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80095aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f280 80e3 	bge.w	800977c <_dtoa_r+0x66c>
 80095b6:	9b01      	ldr	r3, [sp, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f300 80df 	bgt.w	800977c <_dtoa_r+0x66c>
 80095be:	f040 826d 	bne.w	8009a9c <_dtoa_r+0x98c>
 80095c2:	4b69      	ldr	r3, [pc, #420]	; (8009768 <_dtoa_r+0x658>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	4640      	mov	r0, r8
 80095c8:	4649      	mov	r1, r9
 80095ca:	f7f7 f82d 	bl	8000628 <__aeabi_dmul>
 80095ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095d2:	f7f7 faaf 	bl	8000b34 <__aeabi_dcmpge>
 80095d6:	9e01      	ldr	r6, [sp, #4]
 80095d8:	4637      	mov	r7, r6
 80095da:	2800      	cmp	r0, #0
 80095dc:	f040 8243 	bne.w	8009a66 <_dtoa_r+0x956>
 80095e0:	9d00      	ldr	r5, [sp, #0]
 80095e2:	2331      	movs	r3, #49	; 0x31
 80095e4:	f805 3b01 	strb.w	r3, [r5], #1
 80095e8:	f10a 0a01 	add.w	sl, sl, #1
 80095ec:	e23f      	b.n	8009a6e <_dtoa_r+0x95e>
 80095ee:	07f2      	lsls	r2, r6, #31
 80095f0:	d505      	bpl.n	80095fe <_dtoa_r+0x4ee>
 80095f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095f6:	f7f7 f817 	bl	8000628 <__aeabi_dmul>
 80095fa:	3501      	adds	r5, #1
 80095fc:	2301      	movs	r3, #1
 80095fe:	1076      	asrs	r6, r6, #1
 8009600:	3708      	adds	r7, #8
 8009602:	e76c      	b.n	80094de <_dtoa_r+0x3ce>
 8009604:	2502      	movs	r5, #2
 8009606:	e76f      	b.n	80094e8 <_dtoa_r+0x3d8>
 8009608:	9b01      	ldr	r3, [sp, #4]
 800960a:	f8cd a01c 	str.w	sl, [sp, #28]
 800960e:	930c      	str	r3, [sp, #48]	; 0x30
 8009610:	e78d      	b.n	800952e <_dtoa_r+0x41e>
 8009612:	9900      	ldr	r1, [sp, #0]
 8009614:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009618:	4b4e      	ldr	r3, [pc, #312]	; (8009754 <_dtoa_r+0x644>)
 800961a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800961e:	4401      	add	r1, r0
 8009620:	9102      	str	r1, [sp, #8]
 8009622:	9908      	ldr	r1, [sp, #32]
 8009624:	eeb0 8a47 	vmov.f32	s16, s14
 8009628:	eef0 8a67 	vmov.f32	s17, s15
 800962c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009630:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009634:	2900      	cmp	r1, #0
 8009636:	d045      	beq.n	80096c4 <_dtoa_r+0x5b4>
 8009638:	494c      	ldr	r1, [pc, #304]	; (800976c <_dtoa_r+0x65c>)
 800963a:	2000      	movs	r0, #0
 800963c:	f7f7 f91e 	bl	800087c <__aeabi_ddiv>
 8009640:	ec53 2b18 	vmov	r2, r3, d8
 8009644:	f7f6 fe38 	bl	80002b8 <__aeabi_dsub>
 8009648:	9d00      	ldr	r5, [sp, #0]
 800964a:	ec41 0b18 	vmov	d8, r0, r1
 800964e:	4639      	mov	r1, r7
 8009650:	4630      	mov	r0, r6
 8009652:	f7f7 fa99 	bl	8000b88 <__aeabi_d2iz>
 8009656:	900c      	str	r0, [sp, #48]	; 0x30
 8009658:	f7f6 ff7c 	bl	8000554 <__aeabi_i2d>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4630      	mov	r0, r6
 8009662:	4639      	mov	r1, r7
 8009664:	f7f6 fe28 	bl	80002b8 <__aeabi_dsub>
 8009668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800966a:	3330      	adds	r3, #48	; 0x30
 800966c:	f805 3b01 	strb.w	r3, [r5], #1
 8009670:	ec53 2b18 	vmov	r2, r3, d8
 8009674:	4606      	mov	r6, r0
 8009676:	460f      	mov	r7, r1
 8009678:	f7f7 fa48 	bl	8000b0c <__aeabi_dcmplt>
 800967c:	2800      	cmp	r0, #0
 800967e:	d165      	bne.n	800974c <_dtoa_r+0x63c>
 8009680:	4632      	mov	r2, r6
 8009682:	463b      	mov	r3, r7
 8009684:	4935      	ldr	r1, [pc, #212]	; (800975c <_dtoa_r+0x64c>)
 8009686:	2000      	movs	r0, #0
 8009688:	f7f6 fe16 	bl	80002b8 <__aeabi_dsub>
 800968c:	ec53 2b18 	vmov	r2, r3, d8
 8009690:	f7f7 fa3c 	bl	8000b0c <__aeabi_dcmplt>
 8009694:	2800      	cmp	r0, #0
 8009696:	f040 80b9 	bne.w	800980c <_dtoa_r+0x6fc>
 800969a:	9b02      	ldr	r3, [sp, #8]
 800969c:	429d      	cmp	r5, r3
 800969e:	f43f af75 	beq.w	800958c <_dtoa_r+0x47c>
 80096a2:	4b2f      	ldr	r3, [pc, #188]	; (8009760 <_dtoa_r+0x650>)
 80096a4:	ec51 0b18 	vmov	r0, r1, d8
 80096a8:	2200      	movs	r2, #0
 80096aa:	f7f6 ffbd 	bl	8000628 <__aeabi_dmul>
 80096ae:	4b2c      	ldr	r3, [pc, #176]	; (8009760 <_dtoa_r+0x650>)
 80096b0:	ec41 0b18 	vmov	d8, r0, r1
 80096b4:	2200      	movs	r2, #0
 80096b6:	4630      	mov	r0, r6
 80096b8:	4639      	mov	r1, r7
 80096ba:	f7f6 ffb5 	bl	8000628 <__aeabi_dmul>
 80096be:	4606      	mov	r6, r0
 80096c0:	460f      	mov	r7, r1
 80096c2:	e7c4      	b.n	800964e <_dtoa_r+0x53e>
 80096c4:	ec51 0b17 	vmov	r0, r1, d7
 80096c8:	f7f6 ffae 	bl	8000628 <__aeabi_dmul>
 80096cc:	9b02      	ldr	r3, [sp, #8]
 80096ce:	9d00      	ldr	r5, [sp, #0]
 80096d0:	930c      	str	r3, [sp, #48]	; 0x30
 80096d2:	ec41 0b18 	vmov	d8, r0, r1
 80096d6:	4639      	mov	r1, r7
 80096d8:	4630      	mov	r0, r6
 80096da:	f7f7 fa55 	bl	8000b88 <__aeabi_d2iz>
 80096de:	9011      	str	r0, [sp, #68]	; 0x44
 80096e0:	f7f6 ff38 	bl	8000554 <__aeabi_i2d>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4630      	mov	r0, r6
 80096ea:	4639      	mov	r1, r7
 80096ec:	f7f6 fde4 	bl	80002b8 <__aeabi_dsub>
 80096f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096f2:	3330      	adds	r3, #48	; 0x30
 80096f4:	f805 3b01 	strb.w	r3, [r5], #1
 80096f8:	9b02      	ldr	r3, [sp, #8]
 80096fa:	429d      	cmp	r5, r3
 80096fc:	4606      	mov	r6, r0
 80096fe:	460f      	mov	r7, r1
 8009700:	f04f 0200 	mov.w	r2, #0
 8009704:	d134      	bne.n	8009770 <_dtoa_r+0x660>
 8009706:	4b19      	ldr	r3, [pc, #100]	; (800976c <_dtoa_r+0x65c>)
 8009708:	ec51 0b18 	vmov	r0, r1, d8
 800970c:	f7f6 fdd6 	bl	80002bc <__adddf3>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4630      	mov	r0, r6
 8009716:	4639      	mov	r1, r7
 8009718:	f7f7 fa16 	bl	8000b48 <__aeabi_dcmpgt>
 800971c:	2800      	cmp	r0, #0
 800971e:	d175      	bne.n	800980c <_dtoa_r+0x6fc>
 8009720:	ec53 2b18 	vmov	r2, r3, d8
 8009724:	4911      	ldr	r1, [pc, #68]	; (800976c <_dtoa_r+0x65c>)
 8009726:	2000      	movs	r0, #0
 8009728:	f7f6 fdc6 	bl	80002b8 <__aeabi_dsub>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4630      	mov	r0, r6
 8009732:	4639      	mov	r1, r7
 8009734:	f7f7 f9ea 	bl	8000b0c <__aeabi_dcmplt>
 8009738:	2800      	cmp	r0, #0
 800973a:	f43f af27 	beq.w	800958c <_dtoa_r+0x47c>
 800973e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009740:	1e6b      	subs	r3, r5, #1
 8009742:	930c      	str	r3, [sp, #48]	; 0x30
 8009744:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009748:	2b30      	cmp	r3, #48	; 0x30
 800974a:	d0f8      	beq.n	800973e <_dtoa_r+0x62e>
 800974c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009750:	e04a      	b.n	80097e8 <_dtoa_r+0x6d8>
 8009752:	bf00      	nop
 8009754:	0800b658 	.word	0x0800b658
 8009758:	0800b630 	.word	0x0800b630
 800975c:	3ff00000 	.word	0x3ff00000
 8009760:	40240000 	.word	0x40240000
 8009764:	401c0000 	.word	0x401c0000
 8009768:	40140000 	.word	0x40140000
 800976c:	3fe00000 	.word	0x3fe00000
 8009770:	4baf      	ldr	r3, [pc, #700]	; (8009a30 <_dtoa_r+0x920>)
 8009772:	f7f6 ff59 	bl	8000628 <__aeabi_dmul>
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	e7ac      	b.n	80096d6 <_dtoa_r+0x5c6>
 800977c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009780:	9d00      	ldr	r5, [sp, #0]
 8009782:	4642      	mov	r2, r8
 8009784:	464b      	mov	r3, r9
 8009786:	4630      	mov	r0, r6
 8009788:	4639      	mov	r1, r7
 800978a:	f7f7 f877 	bl	800087c <__aeabi_ddiv>
 800978e:	f7f7 f9fb 	bl	8000b88 <__aeabi_d2iz>
 8009792:	9002      	str	r0, [sp, #8]
 8009794:	f7f6 fede 	bl	8000554 <__aeabi_i2d>
 8009798:	4642      	mov	r2, r8
 800979a:	464b      	mov	r3, r9
 800979c:	f7f6 ff44 	bl	8000628 <__aeabi_dmul>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4630      	mov	r0, r6
 80097a6:	4639      	mov	r1, r7
 80097a8:	f7f6 fd86 	bl	80002b8 <__aeabi_dsub>
 80097ac:	9e02      	ldr	r6, [sp, #8]
 80097ae:	9f01      	ldr	r7, [sp, #4]
 80097b0:	3630      	adds	r6, #48	; 0x30
 80097b2:	f805 6b01 	strb.w	r6, [r5], #1
 80097b6:	9e00      	ldr	r6, [sp, #0]
 80097b8:	1bae      	subs	r6, r5, r6
 80097ba:	42b7      	cmp	r7, r6
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	d137      	bne.n	8009832 <_dtoa_r+0x722>
 80097c2:	f7f6 fd7b 	bl	80002bc <__adddf3>
 80097c6:	4642      	mov	r2, r8
 80097c8:	464b      	mov	r3, r9
 80097ca:	4606      	mov	r6, r0
 80097cc:	460f      	mov	r7, r1
 80097ce:	f7f7 f9bb 	bl	8000b48 <__aeabi_dcmpgt>
 80097d2:	b9c8      	cbnz	r0, 8009808 <_dtoa_r+0x6f8>
 80097d4:	4642      	mov	r2, r8
 80097d6:	464b      	mov	r3, r9
 80097d8:	4630      	mov	r0, r6
 80097da:	4639      	mov	r1, r7
 80097dc:	f7f7 f98c 	bl	8000af8 <__aeabi_dcmpeq>
 80097e0:	b110      	cbz	r0, 80097e8 <_dtoa_r+0x6d8>
 80097e2:	9b02      	ldr	r3, [sp, #8]
 80097e4:	07d9      	lsls	r1, r3, #31
 80097e6:	d40f      	bmi.n	8009808 <_dtoa_r+0x6f8>
 80097e8:	4620      	mov	r0, r4
 80097ea:	4659      	mov	r1, fp
 80097ec:	f000 fac8 	bl	8009d80 <_Bfree>
 80097f0:	2300      	movs	r3, #0
 80097f2:	702b      	strb	r3, [r5, #0]
 80097f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097f6:	f10a 0001 	add.w	r0, sl, #1
 80097fa:	6018      	str	r0, [r3, #0]
 80097fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f43f acd8 	beq.w	80091b4 <_dtoa_r+0xa4>
 8009804:	601d      	str	r5, [r3, #0]
 8009806:	e4d5      	b.n	80091b4 <_dtoa_r+0xa4>
 8009808:	f8cd a01c 	str.w	sl, [sp, #28]
 800980c:	462b      	mov	r3, r5
 800980e:	461d      	mov	r5, r3
 8009810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009814:	2a39      	cmp	r2, #57	; 0x39
 8009816:	d108      	bne.n	800982a <_dtoa_r+0x71a>
 8009818:	9a00      	ldr	r2, [sp, #0]
 800981a:	429a      	cmp	r2, r3
 800981c:	d1f7      	bne.n	800980e <_dtoa_r+0x6fe>
 800981e:	9a07      	ldr	r2, [sp, #28]
 8009820:	9900      	ldr	r1, [sp, #0]
 8009822:	3201      	adds	r2, #1
 8009824:	9207      	str	r2, [sp, #28]
 8009826:	2230      	movs	r2, #48	; 0x30
 8009828:	700a      	strb	r2, [r1, #0]
 800982a:	781a      	ldrb	r2, [r3, #0]
 800982c:	3201      	adds	r2, #1
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	e78c      	b.n	800974c <_dtoa_r+0x63c>
 8009832:	4b7f      	ldr	r3, [pc, #508]	; (8009a30 <_dtoa_r+0x920>)
 8009834:	2200      	movs	r2, #0
 8009836:	f7f6 fef7 	bl	8000628 <__aeabi_dmul>
 800983a:	2200      	movs	r2, #0
 800983c:	2300      	movs	r3, #0
 800983e:	4606      	mov	r6, r0
 8009840:	460f      	mov	r7, r1
 8009842:	f7f7 f959 	bl	8000af8 <__aeabi_dcmpeq>
 8009846:	2800      	cmp	r0, #0
 8009848:	d09b      	beq.n	8009782 <_dtoa_r+0x672>
 800984a:	e7cd      	b.n	80097e8 <_dtoa_r+0x6d8>
 800984c:	9a08      	ldr	r2, [sp, #32]
 800984e:	2a00      	cmp	r2, #0
 8009850:	f000 80c4 	beq.w	80099dc <_dtoa_r+0x8cc>
 8009854:	9a05      	ldr	r2, [sp, #20]
 8009856:	2a01      	cmp	r2, #1
 8009858:	f300 80a8 	bgt.w	80099ac <_dtoa_r+0x89c>
 800985c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800985e:	2a00      	cmp	r2, #0
 8009860:	f000 80a0 	beq.w	80099a4 <_dtoa_r+0x894>
 8009864:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009868:	9e06      	ldr	r6, [sp, #24]
 800986a:	4645      	mov	r5, r8
 800986c:	9a04      	ldr	r2, [sp, #16]
 800986e:	2101      	movs	r1, #1
 8009870:	441a      	add	r2, r3
 8009872:	4620      	mov	r0, r4
 8009874:	4498      	add	r8, r3
 8009876:	9204      	str	r2, [sp, #16]
 8009878:	f000 fb3e 	bl	8009ef8 <__i2b>
 800987c:	4607      	mov	r7, r0
 800987e:	2d00      	cmp	r5, #0
 8009880:	dd0b      	ble.n	800989a <_dtoa_r+0x78a>
 8009882:	9b04      	ldr	r3, [sp, #16]
 8009884:	2b00      	cmp	r3, #0
 8009886:	dd08      	ble.n	800989a <_dtoa_r+0x78a>
 8009888:	42ab      	cmp	r3, r5
 800988a:	9a04      	ldr	r2, [sp, #16]
 800988c:	bfa8      	it	ge
 800988e:	462b      	movge	r3, r5
 8009890:	eba8 0803 	sub.w	r8, r8, r3
 8009894:	1aed      	subs	r5, r5, r3
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	9304      	str	r3, [sp, #16]
 800989a:	9b06      	ldr	r3, [sp, #24]
 800989c:	b1fb      	cbz	r3, 80098de <_dtoa_r+0x7ce>
 800989e:	9b08      	ldr	r3, [sp, #32]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f000 809f 	beq.w	80099e4 <_dtoa_r+0x8d4>
 80098a6:	2e00      	cmp	r6, #0
 80098a8:	dd11      	ble.n	80098ce <_dtoa_r+0x7be>
 80098aa:	4639      	mov	r1, r7
 80098ac:	4632      	mov	r2, r6
 80098ae:	4620      	mov	r0, r4
 80098b0:	f000 fbde 	bl	800a070 <__pow5mult>
 80098b4:	465a      	mov	r2, fp
 80098b6:	4601      	mov	r1, r0
 80098b8:	4607      	mov	r7, r0
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 fb32 	bl	8009f24 <__multiply>
 80098c0:	4659      	mov	r1, fp
 80098c2:	9007      	str	r0, [sp, #28]
 80098c4:	4620      	mov	r0, r4
 80098c6:	f000 fa5b 	bl	8009d80 <_Bfree>
 80098ca:	9b07      	ldr	r3, [sp, #28]
 80098cc:	469b      	mov	fp, r3
 80098ce:	9b06      	ldr	r3, [sp, #24]
 80098d0:	1b9a      	subs	r2, r3, r6
 80098d2:	d004      	beq.n	80098de <_dtoa_r+0x7ce>
 80098d4:	4659      	mov	r1, fp
 80098d6:	4620      	mov	r0, r4
 80098d8:	f000 fbca 	bl	800a070 <__pow5mult>
 80098dc:	4683      	mov	fp, r0
 80098de:	2101      	movs	r1, #1
 80098e0:	4620      	mov	r0, r4
 80098e2:	f000 fb09 	bl	8009ef8 <__i2b>
 80098e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	4606      	mov	r6, r0
 80098ec:	dd7c      	ble.n	80099e8 <_dtoa_r+0x8d8>
 80098ee:	461a      	mov	r2, r3
 80098f0:	4601      	mov	r1, r0
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 fbbc 	bl	800a070 <__pow5mult>
 80098f8:	9b05      	ldr	r3, [sp, #20]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	4606      	mov	r6, r0
 80098fe:	dd76      	ble.n	80099ee <_dtoa_r+0x8de>
 8009900:	2300      	movs	r3, #0
 8009902:	9306      	str	r3, [sp, #24]
 8009904:	6933      	ldr	r3, [r6, #16]
 8009906:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800990a:	6918      	ldr	r0, [r3, #16]
 800990c:	f000 faa4 	bl	8009e58 <__hi0bits>
 8009910:	f1c0 0020 	rsb	r0, r0, #32
 8009914:	9b04      	ldr	r3, [sp, #16]
 8009916:	4418      	add	r0, r3
 8009918:	f010 001f 	ands.w	r0, r0, #31
 800991c:	f000 8086 	beq.w	8009a2c <_dtoa_r+0x91c>
 8009920:	f1c0 0320 	rsb	r3, r0, #32
 8009924:	2b04      	cmp	r3, #4
 8009926:	dd7f      	ble.n	8009a28 <_dtoa_r+0x918>
 8009928:	f1c0 001c 	rsb	r0, r0, #28
 800992c:	9b04      	ldr	r3, [sp, #16]
 800992e:	4403      	add	r3, r0
 8009930:	4480      	add	r8, r0
 8009932:	4405      	add	r5, r0
 8009934:	9304      	str	r3, [sp, #16]
 8009936:	f1b8 0f00 	cmp.w	r8, #0
 800993a:	dd05      	ble.n	8009948 <_dtoa_r+0x838>
 800993c:	4659      	mov	r1, fp
 800993e:	4642      	mov	r2, r8
 8009940:	4620      	mov	r0, r4
 8009942:	f000 fbef 	bl	800a124 <__lshift>
 8009946:	4683      	mov	fp, r0
 8009948:	9b04      	ldr	r3, [sp, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	dd05      	ble.n	800995a <_dtoa_r+0x84a>
 800994e:	4631      	mov	r1, r6
 8009950:	461a      	mov	r2, r3
 8009952:	4620      	mov	r0, r4
 8009954:	f000 fbe6 	bl	800a124 <__lshift>
 8009958:	4606      	mov	r6, r0
 800995a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800995c:	2b00      	cmp	r3, #0
 800995e:	d069      	beq.n	8009a34 <_dtoa_r+0x924>
 8009960:	4631      	mov	r1, r6
 8009962:	4658      	mov	r0, fp
 8009964:	f000 fc4a 	bl	800a1fc <__mcmp>
 8009968:	2800      	cmp	r0, #0
 800996a:	da63      	bge.n	8009a34 <_dtoa_r+0x924>
 800996c:	2300      	movs	r3, #0
 800996e:	4659      	mov	r1, fp
 8009970:	220a      	movs	r2, #10
 8009972:	4620      	mov	r0, r4
 8009974:	f000 fa26 	bl	8009dc4 <__multadd>
 8009978:	9b08      	ldr	r3, [sp, #32]
 800997a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800997e:	4683      	mov	fp, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 818f 	beq.w	8009ca4 <_dtoa_r+0xb94>
 8009986:	4639      	mov	r1, r7
 8009988:	2300      	movs	r3, #0
 800998a:	220a      	movs	r2, #10
 800998c:	4620      	mov	r0, r4
 800998e:	f000 fa19 	bl	8009dc4 <__multadd>
 8009992:	f1b9 0f00 	cmp.w	r9, #0
 8009996:	4607      	mov	r7, r0
 8009998:	f300 808e 	bgt.w	8009ab8 <_dtoa_r+0x9a8>
 800999c:	9b05      	ldr	r3, [sp, #20]
 800999e:	2b02      	cmp	r3, #2
 80099a0:	dc50      	bgt.n	8009a44 <_dtoa_r+0x934>
 80099a2:	e089      	b.n	8009ab8 <_dtoa_r+0x9a8>
 80099a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099aa:	e75d      	b.n	8009868 <_dtoa_r+0x758>
 80099ac:	9b01      	ldr	r3, [sp, #4]
 80099ae:	1e5e      	subs	r6, r3, #1
 80099b0:	9b06      	ldr	r3, [sp, #24]
 80099b2:	42b3      	cmp	r3, r6
 80099b4:	bfbf      	itttt	lt
 80099b6:	9b06      	ldrlt	r3, [sp, #24]
 80099b8:	9606      	strlt	r6, [sp, #24]
 80099ba:	1af2      	sublt	r2, r6, r3
 80099bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80099be:	bfb6      	itet	lt
 80099c0:	189b      	addlt	r3, r3, r2
 80099c2:	1b9e      	subge	r6, r3, r6
 80099c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80099c6:	9b01      	ldr	r3, [sp, #4]
 80099c8:	bfb8      	it	lt
 80099ca:	2600      	movlt	r6, #0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	bfb5      	itete	lt
 80099d0:	eba8 0503 	sublt.w	r5, r8, r3
 80099d4:	9b01      	ldrge	r3, [sp, #4]
 80099d6:	2300      	movlt	r3, #0
 80099d8:	4645      	movge	r5, r8
 80099da:	e747      	b.n	800986c <_dtoa_r+0x75c>
 80099dc:	9e06      	ldr	r6, [sp, #24]
 80099de:	9f08      	ldr	r7, [sp, #32]
 80099e0:	4645      	mov	r5, r8
 80099e2:	e74c      	b.n	800987e <_dtoa_r+0x76e>
 80099e4:	9a06      	ldr	r2, [sp, #24]
 80099e6:	e775      	b.n	80098d4 <_dtoa_r+0x7c4>
 80099e8:	9b05      	ldr	r3, [sp, #20]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	dc18      	bgt.n	8009a20 <_dtoa_r+0x910>
 80099ee:	9b02      	ldr	r3, [sp, #8]
 80099f0:	b9b3      	cbnz	r3, 8009a20 <_dtoa_r+0x910>
 80099f2:	9b03      	ldr	r3, [sp, #12]
 80099f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099f8:	b9a3      	cbnz	r3, 8009a24 <_dtoa_r+0x914>
 80099fa:	9b03      	ldr	r3, [sp, #12]
 80099fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a00:	0d1b      	lsrs	r3, r3, #20
 8009a02:	051b      	lsls	r3, r3, #20
 8009a04:	b12b      	cbz	r3, 8009a12 <_dtoa_r+0x902>
 8009a06:	9b04      	ldr	r3, [sp, #16]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	f108 0801 	add.w	r8, r8, #1
 8009a10:	2301      	movs	r3, #1
 8009a12:	9306      	str	r3, [sp, #24]
 8009a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f47f af74 	bne.w	8009904 <_dtoa_r+0x7f4>
 8009a1c:	2001      	movs	r0, #1
 8009a1e:	e779      	b.n	8009914 <_dtoa_r+0x804>
 8009a20:	2300      	movs	r3, #0
 8009a22:	e7f6      	b.n	8009a12 <_dtoa_r+0x902>
 8009a24:	9b02      	ldr	r3, [sp, #8]
 8009a26:	e7f4      	b.n	8009a12 <_dtoa_r+0x902>
 8009a28:	d085      	beq.n	8009936 <_dtoa_r+0x826>
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	301c      	adds	r0, #28
 8009a2e:	e77d      	b.n	800992c <_dtoa_r+0x81c>
 8009a30:	40240000 	.word	0x40240000
 8009a34:	9b01      	ldr	r3, [sp, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	dc38      	bgt.n	8009aac <_dtoa_r+0x99c>
 8009a3a:	9b05      	ldr	r3, [sp, #20]
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	dd35      	ble.n	8009aac <_dtoa_r+0x99c>
 8009a40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009a44:	f1b9 0f00 	cmp.w	r9, #0
 8009a48:	d10d      	bne.n	8009a66 <_dtoa_r+0x956>
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	464b      	mov	r3, r9
 8009a4e:	2205      	movs	r2, #5
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 f9b7 	bl	8009dc4 <__multadd>
 8009a56:	4601      	mov	r1, r0
 8009a58:	4606      	mov	r6, r0
 8009a5a:	4658      	mov	r0, fp
 8009a5c:	f000 fbce 	bl	800a1fc <__mcmp>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f73f adbd 	bgt.w	80095e0 <_dtoa_r+0x4d0>
 8009a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a68:	9d00      	ldr	r5, [sp, #0]
 8009a6a:	ea6f 0a03 	mvn.w	sl, r3
 8009a6e:	f04f 0800 	mov.w	r8, #0
 8009a72:	4631      	mov	r1, r6
 8009a74:	4620      	mov	r0, r4
 8009a76:	f000 f983 	bl	8009d80 <_Bfree>
 8009a7a:	2f00      	cmp	r7, #0
 8009a7c:	f43f aeb4 	beq.w	80097e8 <_dtoa_r+0x6d8>
 8009a80:	f1b8 0f00 	cmp.w	r8, #0
 8009a84:	d005      	beq.n	8009a92 <_dtoa_r+0x982>
 8009a86:	45b8      	cmp	r8, r7
 8009a88:	d003      	beq.n	8009a92 <_dtoa_r+0x982>
 8009a8a:	4641      	mov	r1, r8
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f000 f977 	bl	8009d80 <_Bfree>
 8009a92:	4639      	mov	r1, r7
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 f973 	bl	8009d80 <_Bfree>
 8009a9a:	e6a5      	b.n	80097e8 <_dtoa_r+0x6d8>
 8009a9c:	2600      	movs	r6, #0
 8009a9e:	4637      	mov	r7, r6
 8009aa0:	e7e1      	b.n	8009a66 <_dtoa_r+0x956>
 8009aa2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009aa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009aa8:	4637      	mov	r7, r6
 8009aaa:	e599      	b.n	80095e0 <_dtoa_r+0x4d0>
 8009aac:	9b08      	ldr	r3, [sp, #32]
 8009aae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f000 80fd 	beq.w	8009cb2 <_dtoa_r+0xba2>
 8009ab8:	2d00      	cmp	r5, #0
 8009aba:	dd05      	ble.n	8009ac8 <_dtoa_r+0x9b8>
 8009abc:	4639      	mov	r1, r7
 8009abe:	462a      	mov	r2, r5
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 fb2f 	bl	800a124 <__lshift>
 8009ac6:	4607      	mov	r7, r0
 8009ac8:	9b06      	ldr	r3, [sp, #24]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d05c      	beq.n	8009b88 <_dtoa_r+0xa78>
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	f000 f915 	bl	8009d00 <_Balloc>
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	b928      	cbnz	r0, 8009ae6 <_dtoa_r+0x9d6>
 8009ada:	4b80      	ldr	r3, [pc, #512]	; (8009cdc <_dtoa_r+0xbcc>)
 8009adc:	4602      	mov	r2, r0
 8009ade:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ae2:	f7ff bb2e 	b.w	8009142 <_dtoa_r+0x32>
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	3202      	adds	r2, #2
 8009aea:	0092      	lsls	r2, r2, #2
 8009aec:	f107 010c 	add.w	r1, r7, #12
 8009af0:	300c      	adds	r0, #12
 8009af2:	f7fe fd87 	bl	8008604 <memcpy>
 8009af6:	2201      	movs	r2, #1
 8009af8:	4629      	mov	r1, r5
 8009afa:	4620      	mov	r0, r4
 8009afc:	f000 fb12 	bl	800a124 <__lshift>
 8009b00:	9b00      	ldr	r3, [sp, #0]
 8009b02:	3301      	adds	r3, #1
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	9b00      	ldr	r3, [sp, #0]
 8009b08:	444b      	add	r3, r9
 8009b0a:	9307      	str	r3, [sp, #28]
 8009b0c:	9b02      	ldr	r3, [sp, #8]
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	46b8      	mov	r8, r7
 8009b14:	9306      	str	r3, [sp, #24]
 8009b16:	4607      	mov	r7, r0
 8009b18:	9b01      	ldr	r3, [sp, #4]
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	4658      	mov	r0, fp
 8009b20:	9302      	str	r3, [sp, #8]
 8009b22:	f7ff fa69 	bl	8008ff8 <quorem>
 8009b26:	4603      	mov	r3, r0
 8009b28:	3330      	adds	r3, #48	; 0x30
 8009b2a:	9004      	str	r0, [sp, #16]
 8009b2c:	4641      	mov	r1, r8
 8009b2e:	4658      	mov	r0, fp
 8009b30:	9308      	str	r3, [sp, #32]
 8009b32:	f000 fb63 	bl	800a1fc <__mcmp>
 8009b36:	463a      	mov	r2, r7
 8009b38:	4681      	mov	r9, r0
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f000 fb79 	bl	800a234 <__mdiff>
 8009b42:	68c2      	ldr	r2, [r0, #12]
 8009b44:	9b08      	ldr	r3, [sp, #32]
 8009b46:	4605      	mov	r5, r0
 8009b48:	bb02      	cbnz	r2, 8009b8c <_dtoa_r+0xa7c>
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	4658      	mov	r0, fp
 8009b4e:	f000 fb55 	bl	800a1fc <__mcmp>
 8009b52:	9b08      	ldr	r3, [sp, #32]
 8009b54:	4602      	mov	r2, r0
 8009b56:	4629      	mov	r1, r5
 8009b58:	4620      	mov	r0, r4
 8009b5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009b5e:	f000 f90f 	bl	8009d80 <_Bfree>
 8009b62:	9b05      	ldr	r3, [sp, #20]
 8009b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b66:	9d01      	ldr	r5, [sp, #4]
 8009b68:	ea43 0102 	orr.w	r1, r3, r2
 8009b6c:	9b06      	ldr	r3, [sp, #24]
 8009b6e:	430b      	orrs	r3, r1
 8009b70:	9b08      	ldr	r3, [sp, #32]
 8009b72:	d10d      	bne.n	8009b90 <_dtoa_r+0xa80>
 8009b74:	2b39      	cmp	r3, #57	; 0x39
 8009b76:	d029      	beq.n	8009bcc <_dtoa_r+0xabc>
 8009b78:	f1b9 0f00 	cmp.w	r9, #0
 8009b7c:	dd01      	ble.n	8009b82 <_dtoa_r+0xa72>
 8009b7e:	9b04      	ldr	r3, [sp, #16]
 8009b80:	3331      	adds	r3, #49	; 0x31
 8009b82:	9a02      	ldr	r2, [sp, #8]
 8009b84:	7013      	strb	r3, [r2, #0]
 8009b86:	e774      	b.n	8009a72 <_dtoa_r+0x962>
 8009b88:	4638      	mov	r0, r7
 8009b8a:	e7b9      	b.n	8009b00 <_dtoa_r+0x9f0>
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	e7e2      	b.n	8009b56 <_dtoa_r+0xa46>
 8009b90:	f1b9 0f00 	cmp.w	r9, #0
 8009b94:	db06      	blt.n	8009ba4 <_dtoa_r+0xa94>
 8009b96:	9905      	ldr	r1, [sp, #20]
 8009b98:	ea41 0909 	orr.w	r9, r1, r9
 8009b9c:	9906      	ldr	r1, [sp, #24]
 8009b9e:	ea59 0101 	orrs.w	r1, r9, r1
 8009ba2:	d120      	bne.n	8009be6 <_dtoa_r+0xad6>
 8009ba4:	2a00      	cmp	r2, #0
 8009ba6:	ddec      	ble.n	8009b82 <_dtoa_r+0xa72>
 8009ba8:	4659      	mov	r1, fp
 8009baa:	2201      	movs	r2, #1
 8009bac:	4620      	mov	r0, r4
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	f000 fab8 	bl	800a124 <__lshift>
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	4683      	mov	fp, r0
 8009bb8:	f000 fb20 	bl	800a1fc <__mcmp>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	9b01      	ldr	r3, [sp, #4]
 8009bc0:	dc02      	bgt.n	8009bc8 <_dtoa_r+0xab8>
 8009bc2:	d1de      	bne.n	8009b82 <_dtoa_r+0xa72>
 8009bc4:	07da      	lsls	r2, r3, #31
 8009bc6:	d5dc      	bpl.n	8009b82 <_dtoa_r+0xa72>
 8009bc8:	2b39      	cmp	r3, #57	; 0x39
 8009bca:	d1d8      	bne.n	8009b7e <_dtoa_r+0xa6e>
 8009bcc:	9a02      	ldr	r2, [sp, #8]
 8009bce:	2339      	movs	r3, #57	; 0x39
 8009bd0:	7013      	strb	r3, [r2, #0]
 8009bd2:	462b      	mov	r3, r5
 8009bd4:	461d      	mov	r5, r3
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009bdc:	2a39      	cmp	r2, #57	; 0x39
 8009bde:	d050      	beq.n	8009c82 <_dtoa_r+0xb72>
 8009be0:	3201      	adds	r2, #1
 8009be2:	701a      	strb	r2, [r3, #0]
 8009be4:	e745      	b.n	8009a72 <_dtoa_r+0x962>
 8009be6:	2a00      	cmp	r2, #0
 8009be8:	dd03      	ble.n	8009bf2 <_dtoa_r+0xae2>
 8009bea:	2b39      	cmp	r3, #57	; 0x39
 8009bec:	d0ee      	beq.n	8009bcc <_dtoa_r+0xabc>
 8009bee:	3301      	adds	r3, #1
 8009bf0:	e7c7      	b.n	8009b82 <_dtoa_r+0xa72>
 8009bf2:	9a01      	ldr	r2, [sp, #4]
 8009bf4:	9907      	ldr	r1, [sp, #28]
 8009bf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009bfa:	428a      	cmp	r2, r1
 8009bfc:	d02a      	beq.n	8009c54 <_dtoa_r+0xb44>
 8009bfe:	4659      	mov	r1, fp
 8009c00:	2300      	movs	r3, #0
 8009c02:	220a      	movs	r2, #10
 8009c04:	4620      	mov	r0, r4
 8009c06:	f000 f8dd 	bl	8009dc4 <__multadd>
 8009c0a:	45b8      	cmp	r8, r7
 8009c0c:	4683      	mov	fp, r0
 8009c0e:	f04f 0300 	mov.w	r3, #0
 8009c12:	f04f 020a 	mov.w	r2, #10
 8009c16:	4641      	mov	r1, r8
 8009c18:	4620      	mov	r0, r4
 8009c1a:	d107      	bne.n	8009c2c <_dtoa_r+0xb1c>
 8009c1c:	f000 f8d2 	bl	8009dc4 <__multadd>
 8009c20:	4680      	mov	r8, r0
 8009c22:	4607      	mov	r7, r0
 8009c24:	9b01      	ldr	r3, [sp, #4]
 8009c26:	3301      	adds	r3, #1
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	e775      	b.n	8009b18 <_dtoa_r+0xa08>
 8009c2c:	f000 f8ca 	bl	8009dc4 <__multadd>
 8009c30:	4639      	mov	r1, r7
 8009c32:	4680      	mov	r8, r0
 8009c34:	2300      	movs	r3, #0
 8009c36:	220a      	movs	r2, #10
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f000 f8c3 	bl	8009dc4 <__multadd>
 8009c3e:	4607      	mov	r7, r0
 8009c40:	e7f0      	b.n	8009c24 <_dtoa_r+0xb14>
 8009c42:	f1b9 0f00 	cmp.w	r9, #0
 8009c46:	9a00      	ldr	r2, [sp, #0]
 8009c48:	bfcc      	ite	gt
 8009c4a:	464d      	movgt	r5, r9
 8009c4c:	2501      	movle	r5, #1
 8009c4e:	4415      	add	r5, r2
 8009c50:	f04f 0800 	mov.w	r8, #0
 8009c54:	4659      	mov	r1, fp
 8009c56:	2201      	movs	r2, #1
 8009c58:	4620      	mov	r0, r4
 8009c5a:	9301      	str	r3, [sp, #4]
 8009c5c:	f000 fa62 	bl	800a124 <__lshift>
 8009c60:	4631      	mov	r1, r6
 8009c62:	4683      	mov	fp, r0
 8009c64:	f000 faca 	bl	800a1fc <__mcmp>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	dcb2      	bgt.n	8009bd2 <_dtoa_r+0xac2>
 8009c6c:	d102      	bne.n	8009c74 <_dtoa_r+0xb64>
 8009c6e:	9b01      	ldr	r3, [sp, #4]
 8009c70:	07db      	lsls	r3, r3, #31
 8009c72:	d4ae      	bmi.n	8009bd2 <_dtoa_r+0xac2>
 8009c74:	462b      	mov	r3, r5
 8009c76:	461d      	mov	r5, r3
 8009c78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c7c:	2a30      	cmp	r2, #48	; 0x30
 8009c7e:	d0fa      	beq.n	8009c76 <_dtoa_r+0xb66>
 8009c80:	e6f7      	b.n	8009a72 <_dtoa_r+0x962>
 8009c82:	9a00      	ldr	r2, [sp, #0]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d1a5      	bne.n	8009bd4 <_dtoa_r+0xac4>
 8009c88:	f10a 0a01 	add.w	sl, sl, #1
 8009c8c:	2331      	movs	r3, #49	; 0x31
 8009c8e:	e779      	b.n	8009b84 <_dtoa_r+0xa74>
 8009c90:	4b13      	ldr	r3, [pc, #76]	; (8009ce0 <_dtoa_r+0xbd0>)
 8009c92:	f7ff baaf 	b.w	80091f4 <_dtoa_r+0xe4>
 8009c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f47f aa86 	bne.w	80091aa <_dtoa_r+0x9a>
 8009c9e:	4b11      	ldr	r3, [pc, #68]	; (8009ce4 <_dtoa_r+0xbd4>)
 8009ca0:	f7ff baa8 	b.w	80091f4 <_dtoa_r+0xe4>
 8009ca4:	f1b9 0f00 	cmp.w	r9, #0
 8009ca8:	dc03      	bgt.n	8009cb2 <_dtoa_r+0xba2>
 8009caa:	9b05      	ldr	r3, [sp, #20]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	f73f aec9 	bgt.w	8009a44 <_dtoa_r+0x934>
 8009cb2:	9d00      	ldr	r5, [sp, #0]
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4658      	mov	r0, fp
 8009cb8:	f7ff f99e 	bl	8008ff8 <quorem>
 8009cbc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009cc0:	f805 3b01 	strb.w	r3, [r5], #1
 8009cc4:	9a00      	ldr	r2, [sp, #0]
 8009cc6:	1aaa      	subs	r2, r5, r2
 8009cc8:	4591      	cmp	r9, r2
 8009cca:	ddba      	ble.n	8009c42 <_dtoa_r+0xb32>
 8009ccc:	4659      	mov	r1, fp
 8009cce:	2300      	movs	r3, #0
 8009cd0:	220a      	movs	r2, #10
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f000 f876 	bl	8009dc4 <__multadd>
 8009cd8:	4683      	mov	fp, r0
 8009cda:	e7eb      	b.n	8009cb4 <_dtoa_r+0xba4>
 8009cdc:	0800b5bb 	.word	0x0800b5bb
 8009ce0:	0800b514 	.word	0x0800b514
 8009ce4:	0800b538 	.word	0x0800b538

08009ce8 <_localeconv_r>:
 8009ce8:	4800      	ldr	r0, [pc, #0]	; (8009cec <_localeconv_r+0x4>)
 8009cea:	4770      	bx	lr
 8009cec:	20000188 	.word	0x20000188

08009cf0 <malloc>:
 8009cf0:	4b02      	ldr	r3, [pc, #8]	; (8009cfc <malloc+0xc>)
 8009cf2:	4601      	mov	r1, r0
 8009cf4:	6818      	ldr	r0, [r3, #0]
 8009cf6:	f000 bbe1 	b.w	800a4bc <_malloc_r>
 8009cfa:	bf00      	nop
 8009cfc:	20000034 	.word	0x20000034

08009d00 <_Balloc>:
 8009d00:	b570      	push	{r4, r5, r6, lr}
 8009d02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d04:	4604      	mov	r4, r0
 8009d06:	460d      	mov	r5, r1
 8009d08:	b976      	cbnz	r6, 8009d28 <_Balloc+0x28>
 8009d0a:	2010      	movs	r0, #16
 8009d0c:	f7ff fff0 	bl	8009cf0 <malloc>
 8009d10:	4602      	mov	r2, r0
 8009d12:	6260      	str	r0, [r4, #36]	; 0x24
 8009d14:	b920      	cbnz	r0, 8009d20 <_Balloc+0x20>
 8009d16:	4b18      	ldr	r3, [pc, #96]	; (8009d78 <_Balloc+0x78>)
 8009d18:	4818      	ldr	r0, [pc, #96]	; (8009d7c <_Balloc+0x7c>)
 8009d1a:	2166      	movs	r1, #102	; 0x66
 8009d1c:	f000 fda2 	bl	800a864 <__assert_func>
 8009d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d24:	6006      	str	r6, [r0, #0]
 8009d26:	60c6      	str	r6, [r0, #12]
 8009d28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d2a:	68f3      	ldr	r3, [r6, #12]
 8009d2c:	b183      	cbz	r3, 8009d50 <_Balloc+0x50>
 8009d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d36:	b9b8      	cbnz	r0, 8009d68 <_Balloc+0x68>
 8009d38:	2101      	movs	r1, #1
 8009d3a:	fa01 f605 	lsl.w	r6, r1, r5
 8009d3e:	1d72      	adds	r2, r6, #5
 8009d40:	0092      	lsls	r2, r2, #2
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 fb5a 	bl	800a3fc <_calloc_r>
 8009d48:	b160      	cbz	r0, 8009d64 <_Balloc+0x64>
 8009d4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d4e:	e00e      	b.n	8009d6e <_Balloc+0x6e>
 8009d50:	2221      	movs	r2, #33	; 0x21
 8009d52:	2104      	movs	r1, #4
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 fb51 	bl	800a3fc <_calloc_r>
 8009d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d5c:	60f0      	str	r0, [r6, #12]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1e4      	bne.n	8009d2e <_Balloc+0x2e>
 8009d64:	2000      	movs	r0, #0
 8009d66:	bd70      	pop	{r4, r5, r6, pc}
 8009d68:	6802      	ldr	r2, [r0, #0]
 8009d6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d74:	e7f7      	b.n	8009d66 <_Balloc+0x66>
 8009d76:	bf00      	nop
 8009d78:	0800b545 	.word	0x0800b545
 8009d7c:	0800b5cc 	.word	0x0800b5cc

08009d80 <_Bfree>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d84:	4605      	mov	r5, r0
 8009d86:	460c      	mov	r4, r1
 8009d88:	b976      	cbnz	r6, 8009da8 <_Bfree+0x28>
 8009d8a:	2010      	movs	r0, #16
 8009d8c:	f7ff ffb0 	bl	8009cf0 <malloc>
 8009d90:	4602      	mov	r2, r0
 8009d92:	6268      	str	r0, [r5, #36]	; 0x24
 8009d94:	b920      	cbnz	r0, 8009da0 <_Bfree+0x20>
 8009d96:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <_Bfree+0x3c>)
 8009d98:	4809      	ldr	r0, [pc, #36]	; (8009dc0 <_Bfree+0x40>)
 8009d9a:	218a      	movs	r1, #138	; 0x8a
 8009d9c:	f000 fd62 	bl	800a864 <__assert_func>
 8009da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009da4:	6006      	str	r6, [r0, #0]
 8009da6:	60c6      	str	r6, [r0, #12]
 8009da8:	b13c      	cbz	r4, 8009dba <_Bfree+0x3a>
 8009daa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009dac:	6862      	ldr	r2, [r4, #4]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009db4:	6021      	str	r1, [r4, #0]
 8009db6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dba:	bd70      	pop	{r4, r5, r6, pc}
 8009dbc:	0800b545 	.word	0x0800b545
 8009dc0:	0800b5cc 	.word	0x0800b5cc

08009dc4 <__multadd>:
 8009dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc8:	690e      	ldr	r6, [r1, #16]
 8009dca:	4607      	mov	r7, r0
 8009dcc:	4698      	mov	r8, r3
 8009dce:	460c      	mov	r4, r1
 8009dd0:	f101 0014 	add.w	r0, r1, #20
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	6805      	ldr	r5, [r0, #0]
 8009dd8:	b2a9      	uxth	r1, r5
 8009dda:	fb02 8101 	mla	r1, r2, r1, r8
 8009dde:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009de2:	0c2d      	lsrs	r5, r5, #16
 8009de4:	fb02 c505 	mla	r5, r2, r5, ip
 8009de8:	b289      	uxth	r1, r1
 8009dea:	3301      	adds	r3, #1
 8009dec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009df0:	429e      	cmp	r6, r3
 8009df2:	f840 1b04 	str.w	r1, [r0], #4
 8009df6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009dfa:	dcec      	bgt.n	8009dd6 <__multadd+0x12>
 8009dfc:	f1b8 0f00 	cmp.w	r8, #0
 8009e00:	d022      	beq.n	8009e48 <__multadd+0x84>
 8009e02:	68a3      	ldr	r3, [r4, #8]
 8009e04:	42b3      	cmp	r3, r6
 8009e06:	dc19      	bgt.n	8009e3c <__multadd+0x78>
 8009e08:	6861      	ldr	r1, [r4, #4]
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	3101      	adds	r1, #1
 8009e0e:	f7ff ff77 	bl	8009d00 <_Balloc>
 8009e12:	4605      	mov	r5, r0
 8009e14:	b928      	cbnz	r0, 8009e22 <__multadd+0x5e>
 8009e16:	4602      	mov	r2, r0
 8009e18:	4b0d      	ldr	r3, [pc, #52]	; (8009e50 <__multadd+0x8c>)
 8009e1a:	480e      	ldr	r0, [pc, #56]	; (8009e54 <__multadd+0x90>)
 8009e1c:	21b5      	movs	r1, #181	; 0xb5
 8009e1e:	f000 fd21 	bl	800a864 <__assert_func>
 8009e22:	6922      	ldr	r2, [r4, #16]
 8009e24:	3202      	adds	r2, #2
 8009e26:	f104 010c 	add.w	r1, r4, #12
 8009e2a:	0092      	lsls	r2, r2, #2
 8009e2c:	300c      	adds	r0, #12
 8009e2e:	f7fe fbe9 	bl	8008604 <memcpy>
 8009e32:	4621      	mov	r1, r4
 8009e34:	4638      	mov	r0, r7
 8009e36:	f7ff ffa3 	bl	8009d80 <_Bfree>
 8009e3a:	462c      	mov	r4, r5
 8009e3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009e40:	3601      	adds	r6, #1
 8009e42:	f8c3 8014 	str.w	r8, [r3, #20]
 8009e46:	6126      	str	r6, [r4, #16]
 8009e48:	4620      	mov	r0, r4
 8009e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e4e:	bf00      	nop
 8009e50:	0800b5bb 	.word	0x0800b5bb
 8009e54:	0800b5cc 	.word	0x0800b5cc

08009e58 <__hi0bits>:
 8009e58:	0c03      	lsrs	r3, r0, #16
 8009e5a:	041b      	lsls	r3, r3, #16
 8009e5c:	b9d3      	cbnz	r3, 8009e94 <__hi0bits+0x3c>
 8009e5e:	0400      	lsls	r0, r0, #16
 8009e60:	2310      	movs	r3, #16
 8009e62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e66:	bf04      	itt	eq
 8009e68:	0200      	lsleq	r0, r0, #8
 8009e6a:	3308      	addeq	r3, #8
 8009e6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e70:	bf04      	itt	eq
 8009e72:	0100      	lsleq	r0, r0, #4
 8009e74:	3304      	addeq	r3, #4
 8009e76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e7a:	bf04      	itt	eq
 8009e7c:	0080      	lsleq	r0, r0, #2
 8009e7e:	3302      	addeq	r3, #2
 8009e80:	2800      	cmp	r0, #0
 8009e82:	db05      	blt.n	8009e90 <__hi0bits+0x38>
 8009e84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e88:	f103 0301 	add.w	r3, r3, #1
 8009e8c:	bf08      	it	eq
 8009e8e:	2320      	moveq	r3, #32
 8009e90:	4618      	mov	r0, r3
 8009e92:	4770      	bx	lr
 8009e94:	2300      	movs	r3, #0
 8009e96:	e7e4      	b.n	8009e62 <__hi0bits+0xa>

08009e98 <__lo0bits>:
 8009e98:	6803      	ldr	r3, [r0, #0]
 8009e9a:	f013 0207 	ands.w	r2, r3, #7
 8009e9e:	4601      	mov	r1, r0
 8009ea0:	d00b      	beq.n	8009eba <__lo0bits+0x22>
 8009ea2:	07da      	lsls	r2, r3, #31
 8009ea4:	d424      	bmi.n	8009ef0 <__lo0bits+0x58>
 8009ea6:	0798      	lsls	r0, r3, #30
 8009ea8:	bf49      	itett	mi
 8009eaa:	085b      	lsrmi	r3, r3, #1
 8009eac:	089b      	lsrpl	r3, r3, #2
 8009eae:	2001      	movmi	r0, #1
 8009eb0:	600b      	strmi	r3, [r1, #0]
 8009eb2:	bf5c      	itt	pl
 8009eb4:	600b      	strpl	r3, [r1, #0]
 8009eb6:	2002      	movpl	r0, #2
 8009eb8:	4770      	bx	lr
 8009eba:	b298      	uxth	r0, r3
 8009ebc:	b9b0      	cbnz	r0, 8009eec <__lo0bits+0x54>
 8009ebe:	0c1b      	lsrs	r3, r3, #16
 8009ec0:	2010      	movs	r0, #16
 8009ec2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009ec6:	bf04      	itt	eq
 8009ec8:	0a1b      	lsreq	r3, r3, #8
 8009eca:	3008      	addeq	r0, #8
 8009ecc:	071a      	lsls	r2, r3, #28
 8009ece:	bf04      	itt	eq
 8009ed0:	091b      	lsreq	r3, r3, #4
 8009ed2:	3004      	addeq	r0, #4
 8009ed4:	079a      	lsls	r2, r3, #30
 8009ed6:	bf04      	itt	eq
 8009ed8:	089b      	lsreq	r3, r3, #2
 8009eda:	3002      	addeq	r0, #2
 8009edc:	07da      	lsls	r2, r3, #31
 8009ede:	d403      	bmi.n	8009ee8 <__lo0bits+0x50>
 8009ee0:	085b      	lsrs	r3, r3, #1
 8009ee2:	f100 0001 	add.w	r0, r0, #1
 8009ee6:	d005      	beq.n	8009ef4 <__lo0bits+0x5c>
 8009ee8:	600b      	str	r3, [r1, #0]
 8009eea:	4770      	bx	lr
 8009eec:	4610      	mov	r0, r2
 8009eee:	e7e8      	b.n	8009ec2 <__lo0bits+0x2a>
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	4770      	bx	lr
 8009ef4:	2020      	movs	r0, #32
 8009ef6:	4770      	bx	lr

08009ef8 <__i2b>:
 8009ef8:	b510      	push	{r4, lr}
 8009efa:	460c      	mov	r4, r1
 8009efc:	2101      	movs	r1, #1
 8009efe:	f7ff feff 	bl	8009d00 <_Balloc>
 8009f02:	4602      	mov	r2, r0
 8009f04:	b928      	cbnz	r0, 8009f12 <__i2b+0x1a>
 8009f06:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <__i2b+0x24>)
 8009f08:	4805      	ldr	r0, [pc, #20]	; (8009f20 <__i2b+0x28>)
 8009f0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f0e:	f000 fca9 	bl	800a864 <__assert_func>
 8009f12:	2301      	movs	r3, #1
 8009f14:	6144      	str	r4, [r0, #20]
 8009f16:	6103      	str	r3, [r0, #16]
 8009f18:	bd10      	pop	{r4, pc}
 8009f1a:	bf00      	nop
 8009f1c:	0800b5bb 	.word	0x0800b5bb
 8009f20:	0800b5cc 	.word	0x0800b5cc

08009f24 <__multiply>:
 8009f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f28:	4614      	mov	r4, r2
 8009f2a:	690a      	ldr	r2, [r1, #16]
 8009f2c:	6923      	ldr	r3, [r4, #16]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	bfb8      	it	lt
 8009f32:	460b      	movlt	r3, r1
 8009f34:	460d      	mov	r5, r1
 8009f36:	bfbc      	itt	lt
 8009f38:	4625      	movlt	r5, r4
 8009f3a:	461c      	movlt	r4, r3
 8009f3c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009f40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009f44:	68ab      	ldr	r3, [r5, #8]
 8009f46:	6869      	ldr	r1, [r5, #4]
 8009f48:	eb0a 0709 	add.w	r7, sl, r9
 8009f4c:	42bb      	cmp	r3, r7
 8009f4e:	b085      	sub	sp, #20
 8009f50:	bfb8      	it	lt
 8009f52:	3101      	addlt	r1, #1
 8009f54:	f7ff fed4 	bl	8009d00 <_Balloc>
 8009f58:	b930      	cbnz	r0, 8009f68 <__multiply+0x44>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	4b42      	ldr	r3, [pc, #264]	; (800a068 <__multiply+0x144>)
 8009f5e:	4843      	ldr	r0, [pc, #268]	; (800a06c <__multiply+0x148>)
 8009f60:	f240 115d 	movw	r1, #349	; 0x15d
 8009f64:	f000 fc7e 	bl	800a864 <__assert_func>
 8009f68:	f100 0614 	add.w	r6, r0, #20
 8009f6c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009f70:	4633      	mov	r3, r6
 8009f72:	2200      	movs	r2, #0
 8009f74:	4543      	cmp	r3, r8
 8009f76:	d31e      	bcc.n	8009fb6 <__multiply+0x92>
 8009f78:	f105 0c14 	add.w	ip, r5, #20
 8009f7c:	f104 0314 	add.w	r3, r4, #20
 8009f80:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009f84:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009f88:	9202      	str	r2, [sp, #8]
 8009f8a:	ebac 0205 	sub.w	r2, ip, r5
 8009f8e:	3a15      	subs	r2, #21
 8009f90:	f022 0203 	bic.w	r2, r2, #3
 8009f94:	3204      	adds	r2, #4
 8009f96:	f105 0115 	add.w	r1, r5, #21
 8009f9a:	458c      	cmp	ip, r1
 8009f9c:	bf38      	it	cc
 8009f9e:	2204      	movcc	r2, #4
 8009fa0:	9201      	str	r2, [sp, #4]
 8009fa2:	9a02      	ldr	r2, [sp, #8]
 8009fa4:	9303      	str	r3, [sp, #12]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d808      	bhi.n	8009fbc <__multiply+0x98>
 8009faa:	2f00      	cmp	r7, #0
 8009fac:	dc55      	bgt.n	800a05a <__multiply+0x136>
 8009fae:	6107      	str	r7, [r0, #16]
 8009fb0:	b005      	add	sp, #20
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	f843 2b04 	str.w	r2, [r3], #4
 8009fba:	e7db      	b.n	8009f74 <__multiply+0x50>
 8009fbc:	f8b3 a000 	ldrh.w	sl, [r3]
 8009fc0:	f1ba 0f00 	cmp.w	sl, #0
 8009fc4:	d020      	beq.n	800a008 <__multiply+0xe4>
 8009fc6:	f105 0e14 	add.w	lr, r5, #20
 8009fca:	46b1      	mov	r9, r6
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009fd2:	f8d9 b000 	ldr.w	fp, [r9]
 8009fd6:	b2a1      	uxth	r1, r4
 8009fd8:	fa1f fb8b 	uxth.w	fp, fp
 8009fdc:	fb0a b101 	mla	r1, sl, r1, fp
 8009fe0:	4411      	add	r1, r2
 8009fe2:	f8d9 2000 	ldr.w	r2, [r9]
 8009fe6:	0c24      	lsrs	r4, r4, #16
 8009fe8:	0c12      	lsrs	r2, r2, #16
 8009fea:	fb0a 2404 	mla	r4, sl, r4, r2
 8009fee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009ff2:	b289      	uxth	r1, r1
 8009ff4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ff8:	45f4      	cmp	ip, lr
 8009ffa:	f849 1b04 	str.w	r1, [r9], #4
 8009ffe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a002:	d8e4      	bhi.n	8009fce <__multiply+0xaa>
 800a004:	9901      	ldr	r1, [sp, #4]
 800a006:	5072      	str	r2, [r6, r1]
 800a008:	9a03      	ldr	r2, [sp, #12]
 800a00a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a00e:	3304      	adds	r3, #4
 800a010:	f1b9 0f00 	cmp.w	r9, #0
 800a014:	d01f      	beq.n	800a056 <__multiply+0x132>
 800a016:	6834      	ldr	r4, [r6, #0]
 800a018:	f105 0114 	add.w	r1, r5, #20
 800a01c:	46b6      	mov	lr, r6
 800a01e:	f04f 0a00 	mov.w	sl, #0
 800a022:	880a      	ldrh	r2, [r1, #0]
 800a024:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a028:	fb09 b202 	mla	r2, r9, r2, fp
 800a02c:	4492      	add	sl, r2
 800a02e:	b2a4      	uxth	r4, r4
 800a030:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a034:	f84e 4b04 	str.w	r4, [lr], #4
 800a038:	f851 4b04 	ldr.w	r4, [r1], #4
 800a03c:	f8be 2000 	ldrh.w	r2, [lr]
 800a040:	0c24      	lsrs	r4, r4, #16
 800a042:	fb09 2404 	mla	r4, r9, r4, r2
 800a046:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a04a:	458c      	cmp	ip, r1
 800a04c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a050:	d8e7      	bhi.n	800a022 <__multiply+0xfe>
 800a052:	9a01      	ldr	r2, [sp, #4]
 800a054:	50b4      	str	r4, [r6, r2]
 800a056:	3604      	adds	r6, #4
 800a058:	e7a3      	b.n	8009fa2 <__multiply+0x7e>
 800a05a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1a5      	bne.n	8009fae <__multiply+0x8a>
 800a062:	3f01      	subs	r7, #1
 800a064:	e7a1      	b.n	8009faa <__multiply+0x86>
 800a066:	bf00      	nop
 800a068:	0800b5bb 	.word	0x0800b5bb
 800a06c:	0800b5cc 	.word	0x0800b5cc

0800a070 <__pow5mult>:
 800a070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a074:	4615      	mov	r5, r2
 800a076:	f012 0203 	ands.w	r2, r2, #3
 800a07a:	4606      	mov	r6, r0
 800a07c:	460f      	mov	r7, r1
 800a07e:	d007      	beq.n	800a090 <__pow5mult+0x20>
 800a080:	4c25      	ldr	r4, [pc, #148]	; (800a118 <__pow5mult+0xa8>)
 800a082:	3a01      	subs	r2, #1
 800a084:	2300      	movs	r3, #0
 800a086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a08a:	f7ff fe9b 	bl	8009dc4 <__multadd>
 800a08e:	4607      	mov	r7, r0
 800a090:	10ad      	asrs	r5, r5, #2
 800a092:	d03d      	beq.n	800a110 <__pow5mult+0xa0>
 800a094:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a096:	b97c      	cbnz	r4, 800a0b8 <__pow5mult+0x48>
 800a098:	2010      	movs	r0, #16
 800a09a:	f7ff fe29 	bl	8009cf0 <malloc>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	6270      	str	r0, [r6, #36]	; 0x24
 800a0a2:	b928      	cbnz	r0, 800a0b0 <__pow5mult+0x40>
 800a0a4:	4b1d      	ldr	r3, [pc, #116]	; (800a11c <__pow5mult+0xac>)
 800a0a6:	481e      	ldr	r0, [pc, #120]	; (800a120 <__pow5mult+0xb0>)
 800a0a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a0ac:	f000 fbda 	bl	800a864 <__assert_func>
 800a0b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0b4:	6004      	str	r4, [r0, #0]
 800a0b6:	60c4      	str	r4, [r0, #12]
 800a0b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a0bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0c0:	b94c      	cbnz	r4, 800a0d6 <__pow5mult+0x66>
 800a0c2:	f240 2171 	movw	r1, #625	; 0x271
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f7ff ff16 	bl	8009ef8 <__i2b>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	6003      	str	r3, [r0, #0]
 800a0d6:	f04f 0900 	mov.w	r9, #0
 800a0da:	07eb      	lsls	r3, r5, #31
 800a0dc:	d50a      	bpl.n	800a0f4 <__pow5mult+0x84>
 800a0de:	4639      	mov	r1, r7
 800a0e0:	4622      	mov	r2, r4
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f7ff ff1e 	bl	8009f24 <__multiply>
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	4680      	mov	r8, r0
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f7ff fe47 	bl	8009d80 <_Bfree>
 800a0f2:	4647      	mov	r7, r8
 800a0f4:	106d      	asrs	r5, r5, #1
 800a0f6:	d00b      	beq.n	800a110 <__pow5mult+0xa0>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	b938      	cbnz	r0, 800a10c <__pow5mult+0x9c>
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	4621      	mov	r1, r4
 800a100:	4630      	mov	r0, r6
 800a102:	f7ff ff0f 	bl	8009f24 <__multiply>
 800a106:	6020      	str	r0, [r4, #0]
 800a108:	f8c0 9000 	str.w	r9, [r0]
 800a10c:	4604      	mov	r4, r0
 800a10e:	e7e4      	b.n	800a0da <__pow5mult+0x6a>
 800a110:	4638      	mov	r0, r7
 800a112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a116:	bf00      	nop
 800a118:	0800b720 	.word	0x0800b720
 800a11c:	0800b545 	.word	0x0800b545
 800a120:	0800b5cc 	.word	0x0800b5cc

0800a124 <__lshift>:
 800a124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a128:	460c      	mov	r4, r1
 800a12a:	6849      	ldr	r1, [r1, #4]
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a132:	68a3      	ldr	r3, [r4, #8]
 800a134:	4607      	mov	r7, r0
 800a136:	4691      	mov	r9, r2
 800a138:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a13c:	f108 0601 	add.w	r6, r8, #1
 800a140:	42b3      	cmp	r3, r6
 800a142:	db0b      	blt.n	800a15c <__lshift+0x38>
 800a144:	4638      	mov	r0, r7
 800a146:	f7ff fddb 	bl	8009d00 <_Balloc>
 800a14a:	4605      	mov	r5, r0
 800a14c:	b948      	cbnz	r0, 800a162 <__lshift+0x3e>
 800a14e:	4602      	mov	r2, r0
 800a150:	4b28      	ldr	r3, [pc, #160]	; (800a1f4 <__lshift+0xd0>)
 800a152:	4829      	ldr	r0, [pc, #164]	; (800a1f8 <__lshift+0xd4>)
 800a154:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a158:	f000 fb84 	bl	800a864 <__assert_func>
 800a15c:	3101      	adds	r1, #1
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	e7ee      	b.n	800a140 <__lshift+0x1c>
 800a162:	2300      	movs	r3, #0
 800a164:	f100 0114 	add.w	r1, r0, #20
 800a168:	f100 0210 	add.w	r2, r0, #16
 800a16c:	4618      	mov	r0, r3
 800a16e:	4553      	cmp	r3, sl
 800a170:	db33      	blt.n	800a1da <__lshift+0xb6>
 800a172:	6920      	ldr	r0, [r4, #16]
 800a174:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a178:	f104 0314 	add.w	r3, r4, #20
 800a17c:	f019 091f 	ands.w	r9, r9, #31
 800a180:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a184:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a188:	d02b      	beq.n	800a1e2 <__lshift+0xbe>
 800a18a:	f1c9 0e20 	rsb	lr, r9, #32
 800a18e:	468a      	mov	sl, r1
 800a190:	2200      	movs	r2, #0
 800a192:	6818      	ldr	r0, [r3, #0]
 800a194:	fa00 f009 	lsl.w	r0, r0, r9
 800a198:	4302      	orrs	r2, r0
 800a19a:	f84a 2b04 	str.w	r2, [sl], #4
 800a19e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1a2:	459c      	cmp	ip, r3
 800a1a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a1a8:	d8f3      	bhi.n	800a192 <__lshift+0x6e>
 800a1aa:	ebac 0304 	sub.w	r3, ip, r4
 800a1ae:	3b15      	subs	r3, #21
 800a1b0:	f023 0303 	bic.w	r3, r3, #3
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	f104 0015 	add.w	r0, r4, #21
 800a1ba:	4584      	cmp	ip, r0
 800a1bc:	bf38      	it	cc
 800a1be:	2304      	movcc	r3, #4
 800a1c0:	50ca      	str	r2, [r1, r3]
 800a1c2:	b10a      	cbz	r2, 800a1c8 <__lshift+0xa4>
 800a1c4:	f108 0602 	add.w	r6, r8, #2
 800a1c8:	3e01      	subs	r6, #1
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	612e      	str	r6, [r5, #16]
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	f7ff fdd6 	bl	8009d80 <_Bfree>
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1da:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1de:	3301      	adds	r3, #1
 800a1e0:	e7c5      	b.n	800a16e <__lshift+0x4a>
 800a1e2:	3904      	subs	r1, #4
 800a1e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1ec:	459c      	cmp	ip, r3
 800a1ee:	d8f9      	bhi.n	800a1e4 <__lshift+0xc0>
 800a1f0:	e7ea      	b.n	800a1c8 <__lshift+0xa4>
 800a1f2:	bf00      	nop
 800a1f4:	0800b5bb 	.word	0x0800b5bb
 800a1f8:	0800b5cc 	.word	0x0800b5cc

0800a1fc <__mcmp>:
 800a1fc:	b530      	push	{r4, r5, lr}
 800a1fe:	6902      	ldr	r2, [r0, #16]
 800a200:	690c      	ldr	r4, [r1, #16]
 800a202:	1b12      	subs	r2, r2, r4
 800a204:	d10e      	bne.n	800a224 <__mcmp+0x28>
 800a206:	f100 0314 	add.w	r3, r0, #20
 800a20a:	3114      	adds	r1, #20
 800a20c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a210:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a214:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a218:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a21c:	42a5      	cmp	r5, r4
 800a21e:	d003      	beq.n	800a228 <__mcmp+0x2c>
 800a220:	d305      	bcc.n	800a22e <__mcmp+0x32>
 800a222:	2201      	movs	r2, #1
 800a224:	4610      	mov	r0, r2
 800a226:	bd30      	pop	{r4, r5, pc}
 800a228:	4283      	cmp	r3, r0
 800a22a:	d3f3      	bcc.n	800a214 <__mcmp+0x18>
 800a22c:	e7fa      	b.n	800a224 <__mcmp+0x28>
 800a22e:	f04f 32ff 	mov.w	r2, #4294967295
 800a232:	e7f7      	b.n	800a224 <__mcmp+0x28>

0800a234 <__mdiff>:
 800a234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a238:	460c      	mov	r4, r1
 800a23a:	4606      	mov	r6, r0
 800a23c:	4611      	mov	r1, r2
 800a23e:	4620      	mov	r0, r4
 800a240:	4617      	mov	r7, r2
 800a242:	f7ff ffdb 	bl	800a1fc <__mcmp>
 800a246:	1e05      	subs	r5, r0, #0
 800a248:	d110      	bne.n	800a26c <__mdiff+0x38>
 800a24a:	4629      	mov	r1, r5
 800a24c:	4630      	mov	r0, r6
 800a24e:	f7ff fd57 	bl	8009d00 <_Balloc>
 800a252:	b930      	cbnz	r0, 800a262 <__mdiff+0x2e>
 800a254:	4b39      	ldr	r3, [pc, #228]	; (800a33c <__mdiff+0x108>)
 800a256:	4602      	mov	r2, r0
 800a258:	f240 2132 	movw	r1, #562	; 0x232
 800a25c:	4838      	ldr	r0, [pc, #224]	; (800a340 <__mdiff+0x10c>)
 800a25e:	f000 fb01 	bl	800a864 <__assert_func>
 800a262:	2301      	movs	r3, #1
 800a264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26c:	bfa4      	itt	ge
 800a26e:	463b      	movge	r3, r7
 800a270:	4627      	movge	r7, r4
 800a272:	4630      	mov	r0, r6
 800a274:	6879      	ldr	r1, [r7, #4]
 800a276:	bfa6      	itte	ge
 800a278:	461c      	movge	r4, r3
 800a27a:	2500      	movge	r5, #0
 800a27c:	2501      	movlt	r5, #1
 800a27e:	f7ff fd3f 	bl	8009d00 <_Balloc>
 800a282:	b920      	cbnz	r0, 800a28e <__mdiff+0x5a>
 800a284:	4b2d      	ldr	r3, [pc, #180]	; (800a33c <__mdiff+0x108>)
 800a286:	4602      	mov	r2, r0
 800a288:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a28c:	e7e6      	b.n	800a25c <__mdiff+0x28>
 800a28e:	693e      	ldr	r6, [r7, #16]
 800a290:	60c5      	str	r5, [r0, #12]
 800a292:	6925      	ldr	r5, [r4, #16]
 800a294:	f107 0114 	add.w	r1, r7, #20
 800a298:	f104 0914 	add.w	r9, r4, #20
 800a29c:	f100 0e14 	add.w	lr, r0, #20
 800a2a0:	f107 0210 	add.w	r2, r7, #16
 800a2a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a2a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a2ac:	46f2      	mov	sl, lr
 800a2ae:	2700      	movs	r7, #0
 800a2b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a2b8:	fa1f f883 	uxth.w	r8, r3
 800a2bc:	fa17 f78b 	uxtah	r7, r7, fp
 800a2c0:	0c1b      	lsrs	r3, r3, #16
 800a2c2:	eba7 0808 	sub.w	r8, r7, r8
 800a2c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a2ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a2ce:	fa1f f888 	uxth.w	r8, r8
 800a2d2:	141f      	asrs	r7, r3, #16
 800a2d4:	454d      	cmp	r5, r9
 800a2d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a2da:	f84a 3b04 	str.w	r3, [sl], #4
 800a2de:	d8e7      	bhi.n	800a2b0 <__mdiff+0x7c>
 800a2e0:	1b2b      	subs	r3, r5, r4
 800a2e2:	3b15      	subs	r3, #21
 800a2e4:	f023 0303 	bic.w	r3, r3, #3
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	3415      	adds	r4, #21
 800a2ec:	42a5      	cmp	r5, r4
 800a2ee:	bf38      	it	cc
 800a2f0:	2304      	movcc	r3, #4
 800a2f2:	4419      	add	r1, r3
 800a2f4:	4473      	add	r3, lr
 800a2f6:	469e      	mov	lr, r3
 800a2f8:	460d      	mov	r5, r1
 800a2fa:	4565      	cmp	r5, ip
 800a2fc:	d30e      	bcc.n	800a31c <__mdiff+0xe8>
 800a2fe:	f10c 0203 	add.w	r2, ip, #3
 800a302:	1a52      	subs	r2, r2, r1
 800a304:	f022 0203 	bic.w	r2, r2, #3
 800a308:	3903      	subs	r1, #3
 800a30a:	458c      	cmp	ip, r1
 800a30c:	bf38      	it	cc
 800a30e:	2200      	movcc	r2, #0
 800a310:	441a      	add	r2, r3
 800a312:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a316:	b17b      	cbz	r3, 800a338 <__mdiff+0x104>
 800a318:	6106      	str	r6, [r0, #16]
 800a31a:	e7a5      	b.n	800a268 <__mdiff+0x34>
 800a31c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a320:	fa17 f488 	uxtah	r4, r7, r8
 800a324:	1422      	asrs	r2, r4, #16
 800a326:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a32a:	b2a4      	uxth	r4, r4
 800a32c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a330:	f84e 4b04 	str.w	r4, [lr], #4
 800a334:	1417      	asrs	r7, r2, #16
 800a336:	e7e0      	b.n	800a2fa <__mdiff+0xc6>
 800a338:	3e01      	subs	r6, #1
 800a33a:	e7ea      	b.n	800a312 <__mdiff+0xde>
 800a33c:	0800b5bb 	.word	0x0800b5bb
 800a340:	0800b5cc 	.word	0x0800b5cc

0800a344 <__d2b>:
 800a344:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a348:	4689      	mov	r9, r1
 800a34a:	2101      	movs	r1, #1
 800a34c:	ec57 6b10 	vmov	r6, r7, d0
 800a350:	4690      	mov	r8, r2
 800a352:	f7ff fcd5 	bl	8009d00 <_Balloc>
 800a356:	4604      	mov	r4, r0
 800a358:	b930      	cbnz	r0, 800a368 <__d2b+0x24>
 800a35a:	4602      	mov	r2, r0
 800a35c:	4b25      	ldr	r3, [pc, #148]	; (800a3f4 <__d2b+0xb0>)
 800a35e:	4826      	ldr	r0, [pc, #152]	; (800a3f8 <__d2b+0xb4>)
 800a360:	f240 310a 	movw	r1, #778	; 0x30a
 800a364:	f000 fa7e 	bl	800a864 <__assert_func>
 800a368:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a36c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a370:	bb35      	cbnz	r5, 800a3c0 <__d2b+0x7c>
 800a372:	2e00      	cmp	r6, #0
 800a374:	9301      	str	r3, [sp, #4]
 800a376:	d028      	beq.n	800a3ca <__d2b+0x86>
 800a378:	4668      	mov	r0, sp
 800a37a:	9600      	str	r6, [sp, #0]
 800a37c:	f7ff fd8c 	bl	8009e98 <__lo0bits>
 800a380:	9900      	ldr	r1, [sp, #0]
 800a382:	b300      	cbz	r0, 800a3c6 <__d2b+0x82>
 800a384:	9a01      	ldr	r2, [sp, #4]
 800a386:	f1c0 0320 	rsb	r3, r0, #32
 800a38a:	fa02 f303 	lsl.w	r3, r2, r3
 800a38e:	430b      	orrs	r3, r1
 800a390:	40c2      	lsrs	r2, r0
 800a392:	6163      	str	r3, [r4, #20]
 800a394:	9201      	str	r2, [sp, #4]
 800a396:	9b01      	ldr	r3, [sp, #4]
 800a398:	61a3      	str	r3, [r4, #24]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	bf14      	ite	ne
 800a39e:	2202      	movne	r2, #2
 800a3a0:	2201      	moveq	r2, #1
 800a3a2:	6122      	str	r2, [r4, #16]
 800a3a4:	b1d5      	cbz	r5, 800a3dc <__d2b+0x98>
 800a3a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a3aa:	4405      	add	r5, r0
 800a3ac:	f8c9 5000 	str.w	r5, [r9]
 800a3b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3b4:	f8c8 0000 	str.w	r0, [r8]
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	b003      	add	sp, #12
 800a3bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3c4:	e7d5      	b.n	800a372 <__d2b+0x2e>
 800a3c6:	6161      	str	r1, [r4, #20]
 800a3c8:	e7e5      	b.n	800a396 <__d2b+0x52>
 800a3ca:	a801      	add	r0, sp, #4
 800a3cc:	f7ff fd64 	bl	8009e98 <__lo0bits>
 800a3d0:	9b01      	ldr	r3, [sp, #4]
 800a3d2:	6163      	str	r3, [r4, #20]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	6122      	str	r2, [r4, #16]
 800a3d8:	3020      	adds	r0, #32
 800a3da:	e7e3      	b.n	800a3a4 <__d2b+0x60>
 800a3dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3e4:	f8c9 0000 	str.w	r0, [r9]
 800a3e8:	6918      	ldr	r0, [r3, #16]
 800a3ea:	f7ff fd35 	bl	8009e58 <__hi0bits>
 800a3ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3f2:	e7df      	b.n	800a3b4 <__d2b+0x70>
 800a3f4:	0800b5bb 	.word	0x0800b5bb
 800a3f8:	0800b5cc 	.word	0x0800b5cc

0800a3fc <_calloc_r>:
 800a3fc:	b513      	push	{r0, r1, r4, lr}
 800a3fe:	434a      	muls	r2, r1
 800a400:	4611      	mov	r1, r2
 800a402:	9201      	str	r2, [sp, #4]
 800a404:	f000 f85a 	bl	800a4bc <_malloc_r>
 800a408:	4604      	mov	r4, r0
 800a40a:	b118      	cbz	r0, 800a414 <_calloc_r+0x18>
 800a40c:	9a01      	ldr	r2, [sp, #4]
 800a40e:	2100      	movs	r1, #0
 800a410:	f7fe f906 	bl	8008620 <memset>
 800a414:	4620      	mov	r0, r4
 800a416:	b002      	add	sp, #8
 800a418:	bd10      	pop	{r4, pc}
	...

0800a41c <_free_r>:
 800a41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a41e:	2900      	cmp	r1, #0
 800a420:	d048      	beq.n	800a4b4 <_free_r+0x98>
 800a422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a426:	9001      	str	r0, [sp, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f1a1 0404 	sub.w	r4, r1, #4
 800a42e:	bfb8      	it	lt
 800a430:	18e4      	addlt	r4, r4, r3
 800a432:	f000 fa73 	bl	800a91c <__malloc_lock>
 800a436:	4a20      	ldr	r2, [pc, #128]	; (800a4b8 <_free_r+0x9c>)
 800a438:	9801      	ldr	r0, [sp, #4]
 800a43a:	6813      	ldr	r3, [r2, #0]
 800a43c:	4615      	mov	r5, r2
 800a43e:	b933      	cbnz	r3, 800a44e <_free_r+0x32>
 800a440:	6063      	str	r3, [r4, #4]
 800a442:	6014      	str	r4, [r2, #0]
 800a444:	b003      	add	sp, #12
 800a446:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a44a:	f000 ba6d 	b.w	800a928 <__malloc_unlock>
 800a44e:	42a3      	cmp	r3, r4
 800a450:	d90b      	bls.n	800a46a <_free_r+0x4e>
 800a452:	6821      	ldr	r1, [r4, #0]
 800a454:	1862      	adds	r2, r4, r1
 800a456:	4293      	cmp	r3, r2
 800a458:	bf04      	itt	eq
 800a45a:	681a      	ldreq	r2, [r3, #0]
 800a45c:	685b      	ldreq	r3, [r3, #4]
 800a45e:	6063      	str	r3, [r4, #4]
 800a460:	bf04      	itt	eq
 800a462:	1852      	addeq	r2, r2, r1
 800a464:	6022      	streq	r2, [r4, #0]
 800a466:	602c      	str	r4, [r5, #0]
 800a468:	e7ec      	b.n	800a444 <_free_r+0x28>
 800a46a:	461a      	mov	r2, r3
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	b10b      	cbz	r3, 800a474 <_free_r+0x58>
 800a470:	42a3      	cmp	r3, r4
 800a472:	d9fa      	bls.n	800a46a <_free_r+0x4e>
 800a474:	6811      	ldr	r1, [r2, #0]
 800a476:	1855      	adds	r5, r2, r1
 800a478:	42a5      	cmp	r5, r4
 800a47a:	d10b      	bne.n	800a494 <_free_r+0x78>
 800a47c:	6824      	ldr	r4, [r4, #0]
 800a47e:	4421      	add	r1, r4
 800a480:	1854      	adds	r4, r2, r1
 800a482:	42a3      	cmp	r3, r4
 800a484:	6011      	str	r1, [r2, #0]
 800a486:	d1dd      	bne.n	800a444 <_free_r+0x28>
 800a488:	681c      	ldr	r4, [r3, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	6053      	str	r3, [r2, #4]
 800a48e:	4421      	add	r1, r4
 800a490:	6011      	str	r1, [r2, #0]
 800a492:	e7d7      	b.n	800a444 <_free_r+0x28>
 800a494:	d902      	bls.n	800a49c <_free_r+0x80>
 800a496:	230c      	movs	r3, #12
 800a498:	6003      	str	r3, [r0, #0]
 800a49a:	e7d3      	b.n	800a444 <_free_r+0x28>
 800a49c:	6825      	ldr	r5, [r4, #0]
 800a49e:	1961      	adds	r1, r4, r5
 800a4a0:	428b      	cmp	r3, r1
 800a4a2:	bf04      	itt	eq
 800a4a4:	6819      	ldreq	r1, [r3, #0]
 800a4a6:	685b      	ldreq	r3, [r3, #4]
 800a4a8:	6063      	str	r3, [r4, #4]
 800a4aa:	bf04      	itt	eq
 800a4ac:	1949      	addeq	r1, r1, r5
 800a4ae:	6021      	streq	r1, [r4, #0]
 800a4b0:	6054      	str	r4, [r2, #4]
 800a4b2:	e7c7      	b.n	800a444 <_free_r+0x28>
 800a4b4:	b003      	add	sp, #12
 800a4b6:	bd30      	pop	{r4, r5, pc}
 800a4b8:	20000334 	.word	0x20000334

0800a4bc <_malloc_r>:
 800a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4be:	1ccd      	adds	r5, r1, #3
 800a4c0:	f025 0503 	bic.w	r5, r5, #3
 800a4c4:	3508      	adds	r5, #8
 800a4c6:	2d0c      	cmp	r5, #12
 800a4c8:	bf38      	it	cc
 800a4ca:	250c      	movcc	r5, #12
 800a4cc:	2d00      	cmp	r5, #0
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	db01      	blt.n	800a4d6 <_malloc_r+0x1a>
 800a4d2:	42a9      	cmp	r1, r5
 800a4d4:	d903      	bls.n	800a4de <_malloc_r+0x22>
 800a4d6:	230c      	movs	r3, #12
 800a4d8:	6033      	str	r3, [r6, #0]
 800a4da:	2000      	movs	r0, #0
 800a4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4de:	f000 fa1d 	bl	800a91c <__malloc_lock>
 800a4e2:	4921      	ldr	r1, [pc, #132]	; (800a568 <_malloc_r+0xac>)
 800a4e4:	680a      	ldr	r2, [r1, #0]
 800a4e6:	4614      	mov	r4, r2
 800a4e8:	b99c      	cbnz	r4, 800a512 <_malloc_r+0x56>
 800a4ea:	4f20      	ldr	r7, [pc, #128]	; (800a56c <_malloc_r+0xb0>)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	b923      	cbnz	r3, 800a4fa <_malloc_r+0x3e>
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f000 f998 	bl	800a828 <_sbrk_r>
 800a4f8:	6038      	str	r0, [r7, #0]
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	f000 f993 	bl	800a828 <_sbrk_r>
 800a502:	1c43      	adds	r3, r0, #1
 800a504:	d123      	bne.n	800a54e <_malloc_r+0x92>
 800a506:	230c      	movs	r3, #12
 800a508:	6033      	str	r3, [r6, #0]
 800a50a:	4630      	mov	r0, r6
 800a50c:	f000 fa0c 	bl	800a928 <__malloc_unlock>
 800a510:	e7e3      	b.n	800a4da <_malloc_r+0x1e>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	1b5b      	subs	r3, r3, r5
 800a516:	d417      	bmi.n	800a548 <_malloc_r+0x8c>
 800a518:	2b0b      	cmp	r3, #11
 800a51a:	d903      	bls.n	800a524 <_malloc_r+0x68>
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	441c      	add	r4, r3
 800a520:	6025      	str	r5, [r4, #0]
 800a522:	e004      	b.n	800a52e <_malloc_r+0x72>
 800a524:	6863      	ldr	r3, [r4, #4]
 800a526:	42a2      	cmp	r2, r4
 800a528:	bf0c      	ite	eq
 800a52a:	600b      	streq	r3, [r1, #0]
 800a52c:	6053      	strne	r3, [r2, #4]
 800a52e:	4630      	mov	r0, r6
 800a530:	f000 f9fa 	bl	800a928 <__malloc_unlock>
 800a534:	f104 000b 	add.w	r0, r4, #11
 800a538:	1d23      	adds	r3, r4, #4
 800a53a:	f020 0007 	bic.w	r0, r0, #7
 800a53e:	1ac2      	subs	r2, r0, r3
 800a540:	d0cc      	beq.n	800a4dc <_malloc_r+0x20>
 800a542:	1a1b      	subs	r3, r3, r0
 800a544:	50a3      	str	r3, [r4, r2]
 800a546:	e7c9      	b.n	800a4dc <_malloc_r+0x20>
 800a548:	4622      	mov	r2, r4
 800a54a:	6864      	ldr	r4, [r4, #4]
 800a54c:	e7cc      	b.n	800a4e8 <_malloc_r+0x2c>
 800a54e:	1cc4      	adds	r4, r0, #3
 800a550:	f024 0403 	bic.w	r4, r4, #3
 800a554:	42a0      	cmp	r0, r4
 800a556:	d0e3      	beq.n	800a520 <_malloc_r+0x64>
 800a558:	1a21      	subs	r1, r4, r0
 800a55a:	4630      	mov	r0, r6
 800a55c:	f000 f964 	bl	800a828 <_sbrk_r>
 800a560:	3001      	adds	r0, #1
 800a562:	d1dd      	bne.n	800a520 <_malloc_r+0x64>
 800a564:	e7cf      	b.n	800a506 <_malloc_r+0x4a>
 800a566:	bf00      	nop
 800a568:	20000334 	.word	0x20000334
 800a56c:	20000338 	.word	0x20000338

0800a570 <__ssputs_r>:
 800a570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a574:	688e      	ldr	r6, [r1, #8]
 800a576:	429e      	cmp	r6, r3
 800a578:	4682      	mov	sl, r0
 800a57a:	460c      	mov	r4, r1
 800a57c:	4690      	mov	r8, r2
 800a57e:	461f      	mov	r7, r3
 800a580:	d838      	bhi.n	800a5f4 <__ssputs_r+0x84>
 800a582:	898a      	ldrh	r2, [r1, #12]
 800a584:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a588:	d032      	beq.n	800a5f0 <__ssputs_r+0x80>
 800a58a:	6825      	ldr	r5, [r4, #0]
 800a58c:	6909      	ldr	r1, [r1, #16]
 800a58e:	eba5 0901 	sub.w	r9, r5, r1
 800a592:	6965      	ldr	r5, [r4, #20]
 800a594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a59c:	3301      	adds	r3, #1
 800a59e:	444b      	add	r3, r9
 800a5a0:	106d      	asrs	r5, r5, #1
 800a5a2:	429d      	cmp	r5, r3
 800a5a4:	bf38      	it	cc
 800a5a6:	461d      	movcc	r5, r3
 800a5a8:	0553      	lsls	r3, r2, #21
 800a5aa:	d531      	bpl.n	800a610 <__ssputs_r+0xa0>
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	f7ff ff85 	bl	800a4bc <_malloc_r>
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	b950      	cbnz	r0, 800a5cc <__ssputs_r+0x5c>
 800a5b6:	230c      	movs	r3, #12
 800a5b8:	f8ca 3000 	str.w	r3, [sl]
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5cc:	6921      	ldr	r1, [r4, #16]
 800a5ce:	464a      	mov	r2, r9
 800a5d0:	f7fe f818 	bl	8008604 <memcpy>
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5de:	81a3      	strh	r3, [r4, #12]
 800a5e0:	6126      	str	r6, [r4, #16]
 800a5e2:	6165      	str	r5, [r4, #20]
 800a5e4:	444e      	add	r6, r9
 800a5e6:	eba5 0509 	sub.w	r5, r5, r9
 800a5ea:	6026      	str	r6, [r4, #0]
 800a5ec:	60a5      	str	r5, [r4, #8]
 800a5ee:	463e      	mov	r6, r7
 800a5f0:	42be      	cmp	r6, r7
 800a5f2:	d900      	bls.n	800a5f6 <__ssputs_r+0x86>
 800a5f4:	463e      	mov	r6, r7
 800a5f6:	4632      	mov	r2, r6
 800a5f8:	6820      	ldr	r0, [r4, #0]
 800a5fa:	4641      	mov	r1, r8
 800a5fc:	f000 f974 	bl	800a8e8 <memmove>
 800a600:	68a3      	ldr	r3, [r4, #8]
 800a602:	6822      	ldr	r2, [r4, #0]
 800a604:	1b9b      	subs	r3, r3, r6
 800a606:	4432      	add	r2, r6
 800a608:	60a3      	str	r3, [r4, #8]
 800a60a:	6022      	str	r2, [r4, #0]
 800a60c:	2000      	movs	r0, #0
 800a60e:	e7db      	b.n	800a5c8 <__ssputs_r+0x58>
 800a610:	462a      	mov	r2, r5
 800a612:	f000 f98f 	bl	800a934 <_realloc_r>
 800a616:	4606      	mov	r6, r0
 800a618:	2800      	cmp	r0, #0
 800a61a:	d1e1      	bne.n	800a5e0 <__ssputs_r+0x70>
 800a61c:	6921      	ldr	r1, [r4, #16]
 800a61e:	4650      	mov	r0, sl
 800a620:	f7ff fefc 	bl	800a41c <_free_r>
 800a624:	e7c7      	b.n	800a5b6 <__ssputs_r+0x46>
	...

0800a628 <_svfiprintf_r>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	4698      	mov	r8, r3
 800a62e:	898b      	ldrh	r3, [r1, #12]
 800a630:	061b      	lsls	r3, r3, #24
 800a632:	b09d      	sub	sp, #116	; 0x74
 800a634:	4607      	mov	r7, r0
 800a636:	460d      	mov	r5, r1
 800a638:	4614      	mov	r4, r2
 800a63a:	d50e      	bpl.n	800a65a <_svfiprintf_r+0x32>
 800a63c:	690b      	ldr	r3, [r1, #16]
 800a63e:	b963      	cbnz	r3, 800a65a <_svfiprintf_r+0x32>
 800a640:	2140      	movs	r1, #64	; 0x40
 800a642:	f7ff ff3b 	bl	800a4bc <_malloc_r>
 800a646:	6028      	str	r0, [r5, #0]
 800a648:	6128      	str	r0, [r5, #16]
 800a64a:	b920      	cbnz	r0, 800a656 <_svfiprintf_r+0x2e>
 800a64c:	230c      	movs	r3, #12
 800a64e:	603b      	str	r3, [r7, #0]
 800a650:	f04f 30ff 	mov.w	r0, #4294967295
 800a654:	e0d1      	b.n	800a7fa <_svfiprintf_r+0x1d2>
 800a656:	2340      	movs	r3, #64	; 0x40
 800a658:	616b      	str	r3, [r5, #20]
 800a65a:	2300      	movs	r3, #0
 800a65c:	9309      	str	r3, [sp, #36]	; 0x24
 800a65e:	2320      	movs	r3, #32
 800a660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a664:	f8cd 800c 	str.w	r8, [sp, #12]
 800a668:	2330      	movs	r3, #48	; 0x30
 800a66a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a814 <_svfiprintf_r+0x1ec>
 800a66e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a672:	f04f 0901 	mov.w	r9, #1
 800a676:	4623      	mov	r3, r4
 800a678:	469a      	mov	sl, r3
 800a67a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a67e:	b10a      	cbz	r2, 800a684 <_svfiprintf_r+0x5c>
 800a680:	2a25      	cmp	r2, #37	; 0x25
 800a682:	d1f9      	bne.n	800a678 <_svfiprintf_r+0x50>
 800a684:	ebba 0b04 	subs.w	fp, sl, r4
 800a688:	d00b      	beq.n	800a6a2 <_svfiprintf_r+0x7a>
 800a68a:	465b      	mov	r3, fp
 800a68c:	4622      	mov	r2, r4
 800a68e:	4629      	mov	r1, r5
 800a690:	4638      	mov	r0, r7
 800a692:	f7ff ff6d 	bl	800a570 <__ssputs_r>
 800a696:	3001      	adds	r0, #1
 800a698:	f000 80aa 	beq.w	800a7f0 <_svfiprintf_r+0x1c8>
 800a69c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a69e:	445a      	add	r2, fp
 800a6a0:	9209      	str	r2, [sp, #36]	; 0x24
 800a6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 80a2 	beq.w	800a7f0 <_svfiprintf_r+0x1c8>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6b6:	f10a 0a01 	add.w	sl, sl, #1
 800a6ba:	9304      	str	r3, [sp, #16]
 800a6bc:	9307      	str	r3, [sp, #28]
 800a6be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6c2:	931a      	str	r3, [sp, #104]	; 0x68
 800a6c4:	4654      	mov	r4, sl
 800a6c6:	2205      	movs	r2, #5
 800a6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6cc:	4851      	ldr	r0, [pc, #324]	; (800a814 <_svfiprintf_r+0x1ec>)
 800a6ce:	f7f5 fd9f 	bl	8000210 <memchr>
 800a6d2:	9a04      	ldr	r2, [sp, #16]
 800a6d4:	b9d8      	cbnz	r0, 800a70e <_svfiprintf_r+0xe6>
 800a6d6:	06d0      	lsls	r0, r2, #27
 800a6d8:	bf44      	itt	mi
 800a6da:	2320      	movmi	r3, #32
 800a6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6e0:	0711      	lsls	r1, r2, #28
 800a6e2:	bf44      	itt	mi
 800a6e4:	232b      	movmi	r3, #43	; 0x2b
 800a6e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a6f0:	d015      	beq.n	800a71e <_svfiprintf_r+0xf6>
 800a6f2:	9a07      	ldr	r2, [sp, #28]
 800a6f4:	4654      	mov	r4, sl
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	f04f 0c0a 	mov.w	ip, #10
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a702:	3b30      	subs	r3, #48	; 0x30
 800a704:	2b09      	cmp	r3, #9
 800a706:	d94e      	bls.n	800a7a6 <_svfiprintf_r+0x17e>
 800a708:	b1b0      	cbz	r0, 800a738 <_svfiprintf_r+0x110>
 800a70a:	9207      	str	r2, [sp, #28]
 800a70c:	e014      	b.n	800a738 <_svfiprintf_r+0x110>
 800a70e:	eba0 0308 	sub.w	r3, r0, r8
 800a712:	fa09 f303 	lsl.w	r3, r9, r3
 800a716:	4313      	orrs	r3, r2
 800a718:	9304      	str	r3, [sp, #16]
 800a71a:	46a2      	mov	sl, r4
 800a71c:	e7d2      	b.n	800a6c4 <_svfiprintf_r+0x9c>
 800a71e:	9b03      	ldr	r3, [sp, #12]
 800a720:	1d19      	adds	r1, r3, #4
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	9103      	str	r1, [sp, #12]
 800a726:	2b00      	cmp	r3, #0
 800a728:	bfbb      	ittet	lt
 800a72a:	425b      	neglt	r3, r3
 800a72c:	f042 0202 	orrlt.w	r2, r2, #2
 800a730:	9307      	strge	r3, [sp, #28]
 800a732:	9307      	strlt	r3, [sp, #28]
 800a734:	bfb8      	it	lt
 800a736:	9204      	strlt	r2, [sp, #16]
 800a738:	7823      	ldrb	r3, [r4, #0]
 800a73a:	2b2e      	cmp	r3, #46	; 0x2e
 800a73c:	d10c      	bne.n	800a758 <_svfiprintf_r+0x130>
 800a73e:	7863      	ldrb	r3, [r4, #1]
 800a740:	2b2a      	cmp	r3, #42	; 0x2a
 800a742:	d135      	bne.n	800a7b0 <_svfiprintf_r+0x188>
 800a744:	9b03      	ldr	r3, [sp, #12]
 800a746:	1d1a      	adds	r2, r3, #4
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	9203      	str	r2, [sp, #12]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	bfb8      	it	lt
 800a750:	f04f 33ff 	movlt.w	r3, #4294967295
 800a754:	3402      	adds	r4, #2
 800a756:	9305      	str	r3, [sp, #20]
 800a758:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a824 <_svfiprintf_r+0x1fc>
 800a75c:	7821      	ldrb	r1, [r4, #0]
 800a75e:	2203      	movs	r2, #3
 800a760:	4650      	mov	r0, sl
 800a762:	f7f5 fd55 	bl	8000210 <memchr>
 800a766:	b140      	cbz	r0, 800a77a <_svfiprintf_r+0x152>
 800a768:	2340      	movs	r3, #64	; 0x40
 800a76a:	eba0 000a 	sub.w	r0, r0, sl
 800a76e:	fa03 f000 	lsl.w	r0, r3, r0
 800a772:	9b04      	ldr	r3, [sp, #16]
 800a774:	4303      	orrs	r3, r0
 800a776:	3401      	adds	r4, #1
 800a778:	9304      	str	r3, [sp, #16]
 800a77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77e:	4826      	ldr	r0, [pc, #152]	; (800a818 <_svfiprintf_r+0x1f0>)
 800a780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a784:	2206      	movs	r2, #6
 800a786:	f7f5 fd43 	bl	8000210 <memchr>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d038      	beq.n	800a800 <_svfiprintf_r+0x1d8>
 800a78e:	4b23      	ldr	r3, [pc, #140]	; (800a81c <_svfiprintf_r+0x1f4>)
 800a790:	bb1b      	cbnz	r3, 800a7da <_svfiprintf_r+0x1b2>
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	3307      	adds	r3, #7
 800a796:	f023 0307 	bic.w	r3, r3, #7
 800a79a:	3308      	adds	r3, #8
 800a79c:	9303      	str	r3, [sp, #12]
 800a79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a0:	4433      	add	r3, r6
 800a7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a4:	e767      	b.n	800a676 <_svfiprintf_r+0x4e>
 800a7a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	2001      	movs	r0, #1
 800a7ae:	e7a5      	b.n	800a6fc <_svfiprintf_r+0xd4>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	3401      	adds	r4, #1
 800a7b4:	9305      	str	r3, [sp, #20]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	f04f 0c0a 	mov.w	ip, #10
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7c2:	3a30      	subs	r2, #48	; 0x30
 800a7c4:	2a09      	cmp	r2, #9
 800a7c6:	d903      	bls.n	800a7d0 <_svfiprintf_r+0x1a8>
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d0c5      	beq.n	800a758 <_svfiprintf_r+0x130>
 800a7cc:	9105      	str	r1, [sp, #20]
 800a7ce:	e7c3      	b.n	800a758 <_svfiprintf_r+0x130>
 800a7d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e7f0      	b.n	800a7bc <_svfiprintf_r+0x194>
 800a7da:	ab03      	add	r3, sp, #12
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	462a      	mov	r2, r5
 800a7e0:	4b0f      	ldr	r3, [pc, #60]	; (800a820 <_svfiprintf_r+0x1f8>)
 800a7e2:	a904      	add	r1, sp, #16
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	f7fd ffc3 	bl	8008770 <_printf_float>
 800a7ea:	1c42      	adds	r2, r0, #1
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	d1d6      	bne.n	800a79e <_svfiprintf_r+0x176>
 800a7f0:	89ab      	ldrh	r3, [r5, #12]
 800a7f2:	065b      	lsls	r3, r3, #25
 800a7f4:	f53f af2c 	bmi.w	800a650 <_svfiprintf_r+0x28>
 800a7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7fa:	b01d      	add	sp, #116	; 0x74
 800a7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a800:	ab03      	add	r3, sp, #12
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	462a      	mov	r2, r5
 800a806:	4b06      	ldr	r3, [pc, #24]	; (800a820 <_svfiprintf_r+0x1f8>)
 800a808:	a904      	add	r1, sp, #16
 800a80a:	4638      	mov	r0, r7
 800a80c:	f7fe fa54 	bl	8008cb8 <_printf_i>
 800a810:	e7eb      	b.n	800a7ea <_svfiprintf_r+0x1c2>
 800a812:	bf00      	nop
 800a814:	0800b72c 	.word	0x0800b72c
 800a818:	0800b736 	.word	0x0800b736
 800a81c:	08008771 	.word	0x08008771
 800a820:	0800a571 	.word	0x0800a571
 800a824:	0800b732 	.word	0x0800b732

0800a828 <_sbrk_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4d06      	ldr	r5, [pc, #24]	; (800a844 <_sbrk_r+0x1c>)
 800a82c:	2300      	movs	r3, #0
 800a82e:	4604      	mov	r4, r0
 800a830:	4608      	mov	r0, r1
 800a832:	602b      	str	r3, [r5, #0]
 800a834:	f7f9 fc4c 	bl	80040d0 <_sbrk>
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d102      	bne.n	800a842 <_sbrk_r+0x1a>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	b103      	cbz	r3, 800a842 <_sbrk_r+0x1a>
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	bd38      	pop	{r3, r4, r5, pc}
 800a844:	200008ec 	.word	0x200008ec

0800a848 <strchr>:
 800a848:	b2c9      	uxtb	r1, r1
 800a84a:	4603      	mov	r3, r0
 800a84c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a850:	b11a      	cbz	r2, 800a85a <strchr+0x12>
 800a852:	428a      	cmp	r2, r1
 800a854:	d1f9      	bne.n	800a84a <strchr+0x2>
 800a856:	4618      	mov	r0, r3
 800a858:	4770      	bx	lr
 800a85a:	2900      	cmp	r1, #0
 800a85c:	bf18      	it	ne
 800a85e:	2300      	movne	r3, #0
 800a860:	e7f9      	b.n	800a856 <strchr+0xe>
	...

0800a864 <__assert_func>:
 800a864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a866:	4614      	mov	r4, r2
 800a868:	461a      	mov	r2, r3
 800a86a:	4b09      	ldr	r3, [pc, #36]	; (800a890 <__assert_func+0x2c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4605      	mov	r5, r0
 800a870:	68d8      	ldr	r0, [r3, #12]
 800a872:	b14c      	cbz	r4, 800a888 <__assert_func+0x24>
 800a874:	4b07      	ldr	r3, [pc, #28]	; (800a894 <__assert_func+0x30>)
 800a876:	9100      	str	r1, [sp, #0]
 800a878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a87c:	4906      	ldr	r1, [pc, #24]	; (800a898 <__assert_func+0x34>)
 800a87e:	462b      	mov	r3, r5
 800a880:	f000 f80e 	bl	800a8a0 <fiprintf>
 800a884:	f000 faa4 	bl	800add0 <abort>
 800a888:	4b04      	ldr	r3, [pc, #16]	; (800a89c <__assert_func+0x38>)
 800a88a:	461c      	mov	r4, r3
 800a88c:	e7f3      	b.n	800a876 <__assert_func+0x12>
 800a88e:	bf00      	nop
 800a890:	20000034 	.word	0x20000034
 800a894:	0800b73d 	.word	0x0800b73d
 800a898:	0800b74a 	.word	0x0800b74a
 800a89c:	0800b778 	.word	0x0800b778

0800a8a0 <fiprintf>:
 800a8a0:	b40e      	push	{r1, r2, r3}
 800a8a2:	b503      	push	{r0, r1, lr}
 800a8a4:	4601      	mov	r1, r0
 800a8a6:	ab03      	add	r3, sp, #12
 800a8a8:	4805      	ldr	r0, [pc, #20]	; (800a8c0 <fiprintf+0x20>)
 800a8aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ae:	6800      	ldr	r0, [r0, #0]
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	f000 f88f 	bl	800a9d4 <_vfiprintf_r>
 800a8b6:	b002      	add	sp, #8
 800a8b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8bc:	b003      	add	sp, #12
 800a8be:	4770      	bx	lr
 800a8c0:	20000034 	.word	0x20000034

0800a8c4 <__ascii_mbtowc>:
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	b901      	cbnz	r1, 800a8ca <__ascii_mbtowc+0x6>
 800a8c8:	a901      	add	r1, sp, #4
 800a8ca:	b142      	cbz	r2, 800a8de <__ascii_mbtowc+0x1a>
 800a8cc:	b14b      	cbz	r3, 800a8e2 <__ascii_mbtowc+0x1e>
 800a8ce:	7813      	ldrb	r3, [r2, #0]
 800a8d0:	600b      	str	r3, [r1, #0]
 800a8d2:	7812      	ldrb	r2, [r2, #0]
 800a8d4:	1e10      	subs	r0, r2, #0
 800a8d6:	bf18      	it	ne
 800a8d8:	2001      	movne	r0, #1
 800a8da:	b002      	add	sp, #8
 800a8dc:	4770      	bx	lr
 800a8de:	4610      	mov	r0, r2
 800a8e0:	e7fb      	b.n	800a8da <__ascii_mbtowc+0x16>
 800a8e2:	f06f 0001 	mvn.w	r0, #1
 800a8e6:	e7f8      	b.n	800a8da <__ascii_mbtowc+0x16>

0800a8e8 <memmove>:
 800a8e8:	4288      	cmp	r0, r1
 800a8ea:	b510      	push	{r4, lr}
 800a8ec:	eb01 0402 	add.w	r4, r1, r2
 800a8f0:	d902      	bls.n	800a8f8 <memmove+0x10>
 800a8f2:	4284      	cmp	r4, r0
 800a8f4:	4623      	mov	r3, r4
 800a8f6:	d807      	bhi.n	800a908 <memmove+0x20>
 800a8f8:	1e43      	subs	r3, r0, #1
 800a8fa:	42a1      	cmp	r1, r4
 800a8fc:	d008      	beq.n	800a910 <memmove+0x28>
 800a8fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a902:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a906:	e7f8      	b.n	800a8fa <memmove+0x12>
 800a908:	4402      	add	r2, r0
 800a90a:	4601      	mov	r1, r0
 800a90c:	428a      	cmp	r2, r1
 800a90e:	d100      	bne.n	800a912 <memmove+0x2a>
 800a910:	bd10      	pop	{r4, pc}
 800a912:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a916:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a91a:	e7f7      	b.n	800a90c <memmove+0x24>

0800a91c <__malloc_lock>:
 800a91c:	4801      	ldr	r0, [pc, #4]	; (800a924 <__malloc_lock+0x8>)
 800a91e:	f000 bc17 	b.w	800b150 <__retarget_lock_acquire_recursive>
 800a922:	bf00      	nop
 800a924:	200008f4 	.word	0x200008f4

0800a928 <__malloc_unlock>:
 800a928:	4801      	ldr	r0, [pc, #4]	; (800a930 <__malloc_unlock+0x8>)
 800a92a:	f000 bc12 	b.w	800b152 <__retarget_lock_release_recursive>
 800a92e:	bf00      	nop
 800a930:	200008f4 	.word	0x200008f4

0800a934 <_realloc_r>:
 800a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a936:	4607      	mov	r7, r0
 800a938:	4614      	mov	r4, r2
 800a93a:	460e      	mov	r6, r1
 800a93c:	b921      	cbnz	r1, 800a948 <_realloc_r+0x14>
 800a93e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a942:	4611      	mov	r1, r2
 800a944:	f7ff bdba 	b.w	800a4bc <_malloc_r>
 800a948:	b922      	cbnz	r2, 800a954 <_realloc_r+0x20>
 800a94a:	f7ff fd67 	bl	800a41c <_free_r>
 800a94e:	4625      	mov	r5, r4
 800a950:	4628      	mov	r0, r5
 800a952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a954:	f000 fc62 	bl	800b21c <_malloc_usable_size_r>
 800a958:	42a0      	cmp	r0, r4
 800a95a:	d20f      	bcs.n	800a97c <_realloc_r+0x48>
 800a95c:	4621      	mov	r1, r4
 800a95e:	4638      	mov	r0, r7
 800a960:	f7ff fdac 	bl	800a4bc <_malloc_r>
 800a964:	4605      	mov	r5, r0
 800a966:	2800      	cmp	r0, #0
 800a968:	d0f2      	beq.n	800a950 <_realloc_r+0x1c>
 800a96a:	4631      	mov	r1, r6
 800a96c:	4622      	mov	r2, r4
 800a96e:	f7fd fe49 	bl	8008604 <memcpy>
 800a972:	4631      	mov	r1, r6
 800a974:	4638      	mov	r0, r7
 800a976:	f7ff fd51 	bl	800a41c <_free_r>
 800a97a:	e7e9      	b.n	800a950 <_realloc_r+0x1c>
 800a97c:	4635      	mov	r5, r6
 800a97e:	e7e7      	b.n	800a950 <_realloc_r+0x1c>

0800a980 <__sfputc_r>:
 800a980:	6893      	ldr	r3, [r2, #8]
 800a982:	3b01      	subs	r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	b410      	push	{r4}
 800a988:	6093      	str	r3, [r2, #8]
 800a98a:	da08      	bge.n	800a99e <__sfputc_r+0x1e>
 800a98c:	6994      	ldr	r4, [r2, #24]
 800a98e:	42a3      	cmp	r3, r4
 800a990:	db01      	blt.n	800a996 <__sfputc_r+0x16>
 800a992:	290a      	cmp	r1, #10
 800a994:	d103      	bne.n	800a99e <__sfputc_r+0x1e>
 800a996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a99a:	f000 b94b 	b.w	800ac34 <__swbuf_r>
 800a99e:	6813      	ldr	r3, [r2, #0]
 800a9a0:	1c58      	adds	r0, r3, #1
 800a9a2:	6010      	str	r0, [r2, #0]
 800a9a4:	7019      	strb	r1, [r3, #0]
 800a9a6:	4608      	mov	r0, r1
 800a9a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <__sfputs_r>:
 800a9ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	460f      	mov	r7, r1
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	18d5      	adds	r5, r2, r3
 800a9b8:	42ac      	cmp	r4, r5
 800a9ba:	d101      	bne.n	800a9c0 <__sfputs_r+0x12>
 800a9bc:	2000      	movs	r0, #0
 800a9be:	e007      	b.n	800a9d0 <__sfputs_r+0x22>
 800a9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c4:	463a      	mov	r2, r7
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f7ff ffda 	bl	800a980 <__sfputc_r>
 800a9cc:	1c43      	adds	r3, r0, #1
 800a9ce:	d1f3      	bne.n	800a9b8 <__sfputs_r+0xa>
 800a9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9d4 <_vfiprintf_r>:
 800a9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	460d      	mov	r5, r1
 800a9da:	b09d      	sub	sp, #116	; 0x74
 800a9dc:	4614      	mov	r4, r2
 800a9de:	4698      	mov	r8, r3
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	b118      	cbz	r0, 800a9ec <_vfiprintf_r+0x18>
 800a9e4:	6983      	ldr	r3, [r0, #24]
 800a9e6:	b90b      	cbnz	r3, 800a9ec <_vfiprintf_r+0x18>
 800a9e8:	f000 fb14 	bl	800b014 <__sinit>
 800a9ec:	4b89      	ldr	r3, [pc, #548]	; (800ac14 <_vfiprintf_r+0x240>)
 800a9ee:	429d      	cmp	r5, r3
 800a9f0:	d11b      	bne.n	800aa2a <_vfiprintf_r+0x56>
 800a9f2:	6875      	ldr	r5, [r6, #4]
 800a9f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9f6:	07d9      	lsls	r1, r3, #31
 800a9f8:	d405      	bmi.n	800aa06 <_vfiprintf_r+0x32>
 800a9fa:	89ab      	ldrh	r3, [r5, #12]
 800a9fc:	059a      	lsls	r2, r3, #22
 800a9fe:	d402      	bmi.n	800aa06 <_vfiprintf_r+0x32>
 800aa00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa02:	f000 fba5 	bl	800b150 <__retarget_lock_acquire_recursive>
 800aa06:	89ab      	ldrh	r3, [r5, #12]
 800aa08:	071b      	lsls	r3, r3, #28
 800aa0a:	d501      	bpl.n	800aa10 <_vfiprintf_r+0x3c>
 800aa0c:	692b      	ldr	r3, [r5, #16]
 800aa0e:	b9eb      	cbnz	r3, 800aa4c <_vfiprintf_r+0x78>
 800aa10:	4629      	mov	r1, r5
 800aa12:	4630      	mov	r0, r6
 800aa14:	f000 f96e 	bl	800acf4 <__swsetup_r>
 800aa18:	b1c0      	cbz	r0, 800aa4c <_vfiprintf_r+0x78>
 800aa1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa1c:	07dc      	lsls	r4, r3, #31
 800aa1e:	d50e      	bpl.n	800aa3e <_vfiprintf_r+0x6a>
 800aa20:	f04f 30ff 	mov.w	r0, #4294967295
 800aa24:	b01d      	add	sp, #116	; 0x74
 800aa26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2a:	4b7b      	ldr	r3, [pc, #492]	; (800ac18 <_vfiprintf_r+0x244>)
 800aa2c:	429d      	cmp	r5, r3
 800aa2e:	d101      	bne.n	800aa34 <_vfiprintf_r+0x60>
 800aa30:	68b5      	ldr	r5, [r6, #8]
 800aa32:	e7df      	b.n	800a9f4 <_vfiprintf_r+0x20>
 800aa34:	4b79      	ldr	r3, [pc, #484]	; (800ac1c <_vfiprintf_r+0x248>)
 800aa36:	429d      	cmp	r5, r3
 800aa38:	bf08      	it	eq
 800aa3a:	68f5      	ldreq	r5, [r6, #12]
 800aa3c:	e7da      	b.n	800a9f4 <_vfiprintf_r+0x20>
 800aa3e:	89ab      	ldrh	r3, [r5, #12]
 800aa40:	0598      	lsls	r0, r3, #22
 800aa42:	d4ed      	bmi.n	800aa20 <_vfiprintf_r+0x4c>
 800aa44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa46:	f000 fb84 	bl	800b152 <__retarget_lock_release_recursive>
 800aa4a:	e7e9      	b.n	800aa20 <_vfiprintf_r+0x4c>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa50:	2320      	movs	r3, #32
 800aa52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa56:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa5a:	2330      	movs	r3, #48	; 0x30
 800aa5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ac20 <_vfiprintf_r+0x24c>
 800aa60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa64:	f04f 0901 	mov.w	r9, #1
 800aa68:	4623      	mov	r3, r4
 800aa6a:	469a      	mov	sl, r3
 800aa6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa70:	b10a      	cbz	r2, 800aa76 <_vfiprintf_r+0xa2>
 800aa72:	2a25      	cmp	r2, #37	; 0x25
 800aa74:	d1f9      	bne.n	800aa6a <_vfiprintf_r+0x96>
 800aa76:	ebba 0b04 	subs.w	fp, sl, r4
 800aa7a:	d00b      	beq.n	800aa94 <_vfiprintf_r+0xc0>
 800aa7c:	465b      	mov	r3, fp
 800aa7e:	4622      	mov	r2, r4
 800aa80:	4629      	mov	r1, r5
 800aa82:	4630      	mov	r0, r6
 800aa84:	f7ff ff93 	bl	800a9ae <__sfputs_r>
 800aa88:	3001      	adds	r0, #1
 800aa8a:	f000 80aa 	beq.w	800abe2 <_vfiprintf_r+0x20e>
 800aa8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa90:	445a      	add	r2, fp
 800aa92:	9209      	str	r2, [sp, #36]	; 0x24
 800aa94:	f89a 3000 	ldrb.w	r3, [sl]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 80a2 	beq.w	800abe2 <_vfiprintf_r+0x20e>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaa8:	f10a 0a01 	add.w	sl, sl, #1
 800aaac:	9304      	str	r3, [sp, #16]
 800aaae:	9307      	str	r3, [sp, #28]
 800aab0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aab4:	931a      	str	r3, [sp, #104]	; 0x68
 800aab6:	4654      	mov	r4, sl
 800aab8:	2205      	movs	r2, #5
 800aaba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aabe:	4858      	ldr	r0, [pc, #352]	; (800ac20 <_vfiprintf_r+0x24c>)
 800aac0:	f7f5 fba6 	bl	8000210 <memchr>
 800aac4:	9a04      	ldr	r2, [sp, #16]
 800aac6:	b9d8      	cbnz	r0, 800ab00 <_vfiprintf_r+0x12c>
 800aac8:	06d1      	lsls	r1, r2, #27
 800aaca:	bf44      	itt	mi
 800aacc:	2320      	movmi	r3, #32
 800aace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aad2:	0713      	lsls	r3, r2, #28
 800aad4:	bf44      	itt	mi
 800aad6:	232b      	movmi	r3, #43	; 0x2b
 800aad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aadc:	f89a 3000 	ldrb.w	r3, [sl]
 800aae0:	2b2a      	cmp	r3, #42	; 0x2a
 800aae2:	d015      	beq.n	800ab10 <_vfiprintf_r+0x13c>
 800aae4:	9a07      	ldr	r2, [sp, #28]
 800aae6:	4654      	mov	r4, sl
 800aae8:	2000      	movs	r0, #0
 800aaea:	f04f 0c0a 	mov.w	ip, #10
 800aaee:	4621      	mov	r1, r4
 800aaf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaf4:	3b30      	subs	r3, #48	; 0x30
 800aaf6:	2b09      	cmp	r3, #9
 800aaf8:	d94e      	bls.n	800ab98 <_vfiprintf_r+0x1c4>
 800aafa:	b1b0      	cbz	r0, 800ab2a <_vfiprintf_r+0x156>
 800aafc:	9207      	str	r2, [sp, #28]
 800aafe:	e014      	b.n	800ab2a <_vfiprintf_r+0x156>
 800ab00:	eba0 0308 	sub.w	r3, r0, r8
 800ab04:	fa09 f303 	lsl.w	r3, r9, r3
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	9304      	str	r3, [sp, #16]
 800ab0c:	46a2      	mov	sl, r4
 800ab0e:	e7d2      	b.n	800aab6 <_vfiprintf_r+0xe2>
 800ab10:	9b03      	ldr	r3, [sp, #12]
 800ab12:	1d19      	adds	r1, r3, #4
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	9103      	str	r1, [sp, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	bfbb      	ittet	lt
 800ab1c:	425b      	neglt	r3, r3
 800ab1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab22:	9307      	strge	r3, [sp, #28]
 800ab24:	9307      	strlt	r3, [sp, #28]
 800ab26:	bfb8      	it	lt
 800ab28:	9204      	strlt	r2, [sp, #16]
 800ab2a:	7823      	ldrb	r3, [r4, #0]
 800ab2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab2e:	d10c      	bne.n	800ab4a <_vfiprintf_r+0x176>
 800ab30:	7863      	ldrb	r3, [r4, #1]
 800ab32:	2b2a      	cmp	r3, #42	; 0x2a
 800ab34:	d135      	bne.n	800aba2 <_vfiprintf_r+0x1ce>
 800ab36:	9b03      	ldr	r3, [sp, #12]
 800ab38:	1d1a      	adds	r2, r3, #4
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	9203      	str	r2, [sp, #12]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	bfb8      	it	lt
 800ab42:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab46:	3402      	adds	r4, #2
 800ab48:	9305      	str	r3, [sp, #20]
 800ab4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac30 <_vfiprintf_r+0x25c>
 800ab4e:	7821      	ldrb	r1, [r4, #0]
 800ab50:	2203      	movs	r2, #3
 800ab52:	4650      	mov	r0, sl
 800ab54:	f7f5 fb5c 	bl	8000210 <memchr>
 800ab58:	b140      	cbz	r0, 800ab6c <_vfiprintf_r+0x198>
 800ab5a:	2340      	movs	r3, #64	; 0x40
 800ab5c:	eba0 000a 	sub.w	r0, r0, sl
 800ab60:	fa03 f000 	lsl.w	r0, r3, r0
 800ab64:	9b04      	ldr	r3, [sp, #16]
 800ab66:	4303      	orrs	r3, r0
 800ab68:	3401      	adds	r4, #1
 800ab6a:	9304      	str	r3, [sp, #16]
 800ab6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab70:	482c      	ldr	r0, [pc, #176]	; (800ac24 <_vfiprintf_r+0x250>)
 800ab72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab76:	2206      	movs	r2, #6
 800ab78:	f7f5 fb4a 	bl	8000210 <memchr>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d03f      	beq.n	800ac00 <_vfiprintf_r+0x22c>
 800ab80:	4b29      	ldr	r3, [pc, #164]	; (800ac28 <_vfiprintf_r+0x254>)
 800ab82:	bb1b      	cbnz	r3, 800abcc <_vfiprintf_r+0x1f8>
 800ab84:	9b03      	ldr	r3, [sp, #12]
 800ab86:	3307      	adds	r3, #7
 800ab88:	f023 0307 	bic.w	r3, r3, #7
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	9303      	str	r3, [sp, #12]
 800ab90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab92:	443b      	add	r3, r7
 800ab94:	9309      	str	r3, [sp, #36]	; 0x24
 800ab96:	e767      	b.n	800aa68 <_vfiprintf_r+0x94>
 800ab98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	2001      	movs	r0, #1
 800aba0:	e7a5      	b.n	800aaee <_vfiprintf_r+0x11a>
 800aba2:	2300      	movs	r3, #0
 800aba4:	3401      	adds	r4, #1
 800aba6:	9305      	str	r3, [sp, #20]
 800aba8:	4619      	mov	r1, r3
 800abaa:	f04f 0c0a 	mov.w	ip, #10
 800abae:	4620      	mov	r0, r4
 800abb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abb4:	3a30      	subs	r2, #48	; 0x30
 800abb6:	2a09      	cmp	r2, #9
 800abb8:	d903      	bls.n	800abc2 <_vfiprintf_r+0x1ee>
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d0c5      	beq.n	800ab4a <_vfiprintf_r+0x176>
 800abbe:	9105      	str	r1, [sp, #20]
 800abc0:	e7c3      	b.n	800ab4a <_vfiprintf_r+0x176>
 800abc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800abc6:	4604      	mov	r4, r0
 800abc8:	2301      	movs	r3, #1
 800abca:	e7f0      	b.n	800abae <_vfiprintf_r+0x1da>
 800abcc:	ab03      	add	r3, sp, #12
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	462a      	mov	r2, r5
 800abd2:	4b16      	ldr	r3, [pc, #88]	; (800ac2c <_vfiprintf_r+0x258>)
 800abd4:	a904      	add	r1, sp, #16
 800abd6:	4630      	mov	r0, r6
 800abd8:	f7fd fdca 	bl	8008770 <_printf_float>
 800abdc:	4607      	mov	r7, r0
 800abde:	1c78      	adds	r0, r7, #1
 800abe0:	d1d6      	bne.n	800ab90 <_vfiprintf_r+0x1bc>
 800abe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abe4:	07d9      	lsls	r1, r3, #31
 800abe6:	d405      	bmi.n	800abf4 <_vfiprintf_r+0x220>
 800abe8:	89ab      	ldrh	r3, [r5, #12]
 800abea:	059a      	lsls	r2, r3, #22
 800abec:	d402      	bmi.n	800abf4 <_vfiprintf_r+0x220>
 800abee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abf0:	f000 faaf 	bl	800b152 <__retarget_lock_release_recursive>
 800abf4:	89ab      	ldrh	r3, [r5, #12]
 800abf6:	065b      	lsls	r3, r3, #25
 800abf8:	f53f af12 	bmi.w	800aa20 <_vfiprintf_r+0x4c>
 800abfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abfe:	e711      	b.n	800aa24 <_vfiprintf_r+0x50>
 800ac00:	ab03      	add	r3, sp, #12
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	462a      	mov	r2, r5
 800ac06:	4b09      	ldr	r3, [pc, #36]	; (800ac2c <_vfiprintf_r+0x258>)
 800ac08:	a904      	add	r1, sp, #16
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f7fe f854 	bl	8008cb8 <_printf_i>
 800ac10:	e7e4      	b.n	800abdc <_vfiprintf_r+0x208>
 800ac12:	bf00      	nop
 800ac14:	0800b8a4 	.word	0x0800b8a4
 800ac18:	0800b8c4 	.word	0x0800b8c4
 800ac1c:	0800b884 	.word	0x0800b884
 800ac20:	0800b72c 	.word	0x0800b72c
 800ac24:	0800b736 	.word	0x0800b736
 800ac28:	08008771 	.word	0x08008771
 800ac2c:	0800a9af 	.word	0x0800a9af
 800ac30:	0800b732 	.word	0x0800b732

0800ac34 <__swbuf_r>:
 800ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac36:	460e      	mov	r6, r1
 800ac38:	4614      	mov	r4, r2
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	b118      	cbz	r0, 800ac46 <__swbuf_r+0x12>
 800ac3e:	6983      	ldr	r3, [r0, #24]
 800ac40:	b90b      	cbnz	r3, 800ac46 <__swbuf_r+0x12>
 800ac42:	f000 f9e7 	bl	800b014 <__sinit>
 800ac46:	4b21      	ldr	r3, [pc, #132]	; (800accc <__swbuf_r+0x98>)
 800ac48:	429c      	cmp	r4, r3
 800ac4a:	d12b      	bne.n	800aca4 <__swbuf_r+0x70>
 800ac4c:	686c      	ldr	r4, [r5, #4]
 800ac4e:	69a3      	ldr	r3, [r4, #24]
 800ac50:	60a3      	str	r3, [r4, #8]
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	071a      	lsls	r2, r3, #28
 800ac56:	d52f      	bpl.n	800acb8 <__swbuf_r+0x84>
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	b36b      	cbz	r3, 800acb8 <__swbuf_r+0x84>
 800ac5c:	6923      	ldr	r3, [r4, #16]
 800ac5e:	6820      	ldr	r0, [r4, #0]
 800ac60:	1ac0      	subs	r0, r0, r3
 800ac62:	6963      	ldr	r3, [r4, #20]
 800ac64:	b2f6      	uxtb	r6, r6
 800ac66:	4283      	cmp	r3, r0
 800ac68:	4637      	mov	r7, r6
 800ac6a:	dc04      	bgt.n	800ac76 <__swbuf_r+0x42>
 800ac6c:	4621      	mov	r1, r4
 800ac6e:	4628      	mov	r0, r5
 800ac70:	f000 f93c 	bl	800aeec <_fflush_r>
 800ac74:	bb30      	cbnz	r0, 800acc4 <__swbuf_r+0x90>
 800ac76:	68a3      	ldr	r3, [r4, #8]
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	60a3      	str	r3, [r4, #8]
 800ac7c:	6823      	ldr	r3, [r4, #0]
 800ac7e:	1c5a      	adds	r2, r3, #1
 800ac80:	6022      	str	r2, [r4, #0]
 800ac82:	701e      	strb	r6, [r3, #0]
 800ac84:	6963      	ldr	r3, [r4, #20]
 800ac86:	3001      	adds	r0, #1
 800ac88:	4283      	cmp	r3, r0
 800ac8a:	d004      	beq.n	800ac96 <__swbuf_r+0x62>
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	07db      	lsls	r3, r3, #31
 800ac90:	d506      	bpl.n	800aca0 <__swbuf_r+0x6c>
 800ac92:	2e0a      	cmp	r6, #10
 800ac94:	d104      	bne.n	800aca0 <__swbuf_r+0x6c>
 800ac96:	4621      	mov	r1, r4
 800ac98:	4628      	mov	r0, r5
 800ac9a:	f000 f927 	bl	800aeec <_fflush_r>
 800ac9e:	b988      	cbnz	r0, 800acc4 <__swbuf_r+0x90>
 800aca0:	4638      	mov	r0, r7
 800aca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aca4:	4b0a      	ldr	r3, [pc, #40]	; (800acd0 <__swbuf_r+0x9c>)
 800aca6:	429c      	cmp	r4, r3
 800aca8:	d101      	bne.n	800acae <__swbuf_r+0x7a>
 800acaa:	68ac      	ldr	r4, [r5, #8]
 800acac:	e7cf      	b.n	800ac4e <__swbuf_r+0x1a>
 800acae:	4b09      	ldr	r3, [pc, #36]	; (800acd4 <__swbuf_r+0xa0>)
 800acb0:	429c      	cmp	r4, r3
 800acb2:	bf08      	it	eq
 800acb4:	68ec      	ldreq	r4, [r5, #12]
 800acb6:	e7ca      	b.n	800ac4e <__swbuf_r+0x1a>
 800acb8:	4621      	mov	r1, r4
 800acba:	4628      	mov	r0, r5
 800acbc:	f000 f81a 	bl	800acf4 <__swsetup_r>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	d0cb      	beq.n	800ac5c <__swbuf_r+0x28>
 800acc4:	f04f 37ff 	mov.w	r7, #4294967295
 800acc8:	e7ea      	b.n	800aca0 <__swbuf_r+0x6c>
 800acca:	bf00      	nop
 800accc:	0800b8a4 	.word	0x0800b8a4
 800acd0:	0800b8c4 	.word	0x0800b8c4
 800acd4:	0800b884 	.word	0x0800b884

0800acd8 <__ascii_wctomb>:
 800acd8:	b149      	cbz	r1, 800acee <__ascii_wctomb+0x16>
 800acda:	2aff      	cmp	r2, #255	; 0xff
 800acdc:	bf85      	ittet	hi
 800acde:	238a      	movhi	r3, #138	; 0x8a
 800ace0:	6003      	strhi	r3, [r0, #0]
 800ace2:	700a      	strbls	r2, [r1, #0]
 800ace4:	f04f 30ff 	movhi.w	r0, #4294967295
 800ace8:	bf98      	it	ls
 800acea:	2001      	movls	r0, #1
 800acec:	4770      	bx	lr
 800acee:	4608      	mov	r0, r1
 800acf0:	4770      	bx	lr
	...

0800acf4 <__swsetup_r>:
 800acf4:	4b32      	ldr	r3, [pc, #200]	; (800adc0 <__swsetup_r+0xcc>)
 800acf6:	b570      	push	{r4, r5, r6, lr}
 800acf8:	681d      	ldr	r5, [r3, #0]
 800acfa:	4606      	mov	r6, r0
 800acfc:	460c      	mov	r4, r1
 800acfe:	b125      	cbz	r5, 800ad0a <__swsetup_r+0x16>
 800ad00:	69ab      	ldr	r3, [r5, #24]
 800ad02:	b913      	cbnz	r3, 800ad0a <__swsetup_r+0x16>
 800ad04:	4628      	mov	r0, r5
 800ad06:	f000 f985 	bl	800b014 <__sinit>
 800ad0a:	4b2e      	ldr	r3, [pc, #184]	; (800adc4 <__swsetup_r+0xd0>)
 800ad0c:	429c      	cmp	r4, r3
 800ad0e:	d10f      	bne.n	800ad30 <__swsetup_r+0x3c>
 800ad10:	686c      	ldr	r4, [r5, #4]
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad18:	0719      	lsls	r1, r3, #28
 800ad1a:	d42c      	bmi.n	800ad76 <__swsetup_r+0x82>
 800ad1c:	06dd      	lsls	r5, r3, #27
 800ad1e:	d411      	bmi.n	800ad44 <__swsetup_r+0x50>
 800ad20:	2309      	movs	r3, #9
 800ad22:	6033      	str	r3, [r6, #0]
 800ad24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad28:	81a3      	strh	r3, [r4, #12]
 800ad2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2e:	e03e      	b.n	800adae <__swsetup_r+0xba>
 800ad30:	4b25      	ldr	r3, [pc, #148]	; (800adc8 <__swsetup_r+0xd4>)
 800ad32:	429c      	cmp	r4, r3
 800ad34:	d101      	bne.n	800ad3a <__swsetup_r+0x46>
 800ad36:	68ac      	ldr	r4, [r5, #8]
 800ad38:	e7eb      	b.n	800ad12 <__swsetup_r+0x1e>
 800ad3a:	4b24      	ldr	r3, [pc, #144]	; (800adcc <__swsetup_r+0xd8>)
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	bf08      	it	eq
 800ad40:	68ec      	ldreq	r4, [r5, #12]
 800ad42:	e7e6      	b.n	800ad12 <__swsetup_r+0x1e>
 800ad44:	0758      	lsls	r0, r3, #29
 800ad46:	d512      	bpl.n	800ad6e <__swsetup_r+0x7a>
 800ad48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad4a:	b141      	cbz	r1, 800ad5e <__swsetup_r+0x6a>
 800ad4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad50:	4299      	cmp	r1, r3
 800ad52:	d002      	beq.n	800ad5a <__swsetup_r+0x66>
 800ad54:	4630      	mov	r0, r6
 800ad56:	f7ff fb61 	bl	800a41c <_free_r>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	6363      	str	r3, [r4, #52]	; 0x34
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	2300      	movs	r3, #0
 800ad68:	6063      	str	r3, [r4, #4]
 800ad6a:	6923      	ldr	r3, [r4, #16]
 800ad6c:	6023      	str	r3, [r4, #0]
 800ad6e:	89a3      	ldrh	r3, [r4, #12]
 800ad70:	f043 0308 	orr.w	r3, r3, #8
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	6923      	ldr	r3, [r4, #16]
 800ad78:	b94b      	cbnz	r3, 800ad8e <__swsetup_r+0x9a>
 800ad7a:	89a3      	ldrh	r3, [r4, #12]
 800ad7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad84:	d003      	beq.n	800ad8e <__swsetup_r+0x9a>
 800ad86:	4621      	mov	r1, r4
 800ad88:	4630      	mov	r0, r6
 800ad8a:	f000 fa07 	bl	800b19c <__smakebuf_r>
 800ad8e:	89a0      	ldrh	r0, [r4, #12]
 800ad90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad94:	f010 0301 	ands.w	r3, r0, #1
 800ad98:	d00a      	beq.n	800adb0 <__swsetup_r+0xbc>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60a3      	str	r3, [r4, #8]
 800ad9e:	6963      	ldr	r3, [r4, #20]
 800ada0:	425b      	negs	r3, r3
 800ada2:	61a3      	str	r3, [r4, #24]
 800ada4:	6923      	ldr	r3, [r4, #16]
 800ada6:	b943      	cbnz	r3, 800adba <__swsetup_r+0xc6>
 800ada8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800adac:	d1ba      	bne.n	800ad24 <__swsetup_r+0x30>
 800adae:	bd70      	pop	{r4, r5, r6, pc}
 800adb0:	0781      	lsls	r1, r0, #30
 800adb2:	bf58      	it	pl
 800adb4:	6963      	ldrpl	r3, [r4, #20]
 800adb6:	60a3      	str	r3, [r4, #8]
 800adb8:	e7f4      	b.n	800ada4 <__swsetup_r+0xb0>
 800adba:	2000      	movs	r0, #0
 800adbc:	e7f7      	b.n	800adae <__swsetup_r+0xba>
 800adbe:	bf00      	nop
 800adc0:	20000034 	.word	0x20000034
 800adc4:	0800b8a4 	.word	0x0800b8a4
 800adc8:	0800b8c4 	.word	0x0800b8c4
 800adcc:	0800b884 	.word	0x0800b884

0800add0 <abort>:
 800add0:	b508      	push	{r3, lr}
 800add2:	2006      	movs	r0, #6
 800add4:	f000 fa52 	bl	800b27c <raise>
 800add8:	2001      	movs	r0, #1
 800adda:	f7f9 f901 	bl	8003fe0 <_exit>
	...

0800ade0 <__sflush_r>:
 800ade0:	898a      	ldrh	r2, [r1, #12]
 800ade2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade6:	4605      	mov	r5, r0
 800ade8:	0710      	lsls	r0, r2, #28
 800adea:	460c      	mov	r4, r1
 800adec:	d458      	bmi.n	800aea0 <__sflush_r+0xc0>
 800adee:	684b      	ldr	r3, [r1, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	dc05      	bgt.n	800ae00 <__sflush_r+0x20>
 800adf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	dc02      	bgt.n	800ae00 <__sflush_r+0x20>
 800adfa:	2000      	movs	r0, #0
 800adfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae02:	2e00      	cmp	r6, #0
 800ae04:	d0f9      	beq.n	800adfa <__sflush_r+0x1a>
 800ae06:	2300      	movs	r3, #0
 800ae08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae0c:	682f      	ldr	r7, [r5, #0]
 800ae0e:	602b      	str	r3, [r5, #0]
 800ae10:	d032      	beq.n	800ae78 <__sflush_r+0x98>
 800ae12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	075a      	lsls	r2, r3, #29
 800ae18:	d505      	bpl.n	800ae26 <__sflush_r+0x46>
 800ae1a:	6863      	ldr	r3, [r4, #4]
 800ae1c:	1ac0      	subs	r0, r0, r3
 800ae1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae20:	b10b      	cbz	r3, 800ae26 <__sflush_r+0x46>
 800ae22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae24:	1ac0      	subs	r0, r0, r3
 800ae26:	2300      	movs	r3, #0
 800ae28:	4602      	mov	r2, r0
 800ae2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae2c:	6a21      	ldr	r1, [r4, #32]
 800ae2e:	4628      	mov	r0, r5
 800ae30:	47b0      	blx	r6
 800ae32:	1c43      	adds	r3, r0, #1
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	d106      	bne.n	800ae46 <__sflush_r+0x66>
 800ae38:	6829      	ldr	r1, [r5, #0]
 800ae3a:	291d      	cmp	r1, #29
 800ae3c:	d82c      	bhi.n	800ae98 <__sflush_r+0xb8>
 800ae3e:	4a2a      	ldr	r2, [pc, #168]	; (800aee8 <__sflush_r+0x108>)
 800ae40:	40ca      	lsrs	r2, r1
 800ae42:	07d6      	lsls	r6, r2, #31
 800ae44:	d528      	bpl.n	800ae98 <__sflush_r+0xb8>
 800ae46:	2200      	movs	r2, #0
 800ae48:	6062      	str	r2, [r4, #4]
 800ae4a:	04d9      	lsls	r1, r3, #19
 800ae4c:	6922      	ldr	r2, [r4, #16]
 800ae4e:	6022      	str	r2, [r4, #0]
 800ae50:	d504      	bpl.n	800ae5c <__sflush_r+0x7c>
 800ae52:	1c42      	adds	r2, r0, #1
 800ae54:	d101      	bne.n	800ae5a <__sflush_r+0x7a>
 800ae56:	682b      	ldr	r3, [r5, #0]
 800ae58:	b903      	cbnz	r3, 800ae5c <__sflush_r+0x7c>
 800ae5a:	6560      	str	r0, [r4, #84]	; 0x54
 800ae5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae5e:	602f      	str	r7, [r5, #0]
 800ae60:	2900      	cmp	r1, #0
 800ae62:	d0ca      	beq.n	800adfa <__sflush_r+0x1a>
 800ae64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae68:	4299      	cmp	r1, r3
 800ae6a:	d002      	beq.n	800ae72 <__sflush_r+0x92>
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	f7ff fad5 	bl	800a41c <_free_r>
 800ae72:	2000      	movs	r0, #0
 800ae74:	6360      	str	r0, [r4, #52]	; 0x34
 800ae76:	e7c1      	b.n	800adfc <__sflush_r+0x1c>
 800ae78:	6a21      	ldr	r1, [r4, #32]
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	47b0      	blx	r6
 800ae80:	1c41      	adds	r1, r0, #1
 800ae82:	d1c7      	bne.n	800ae14 <__sflush_r+0x34>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0c4      	beq.n	800ae14 <__sflush_r+0x34>
 800ae8a:	2b1d      	cmp	r3, #29
 800ae8c:	d001      	beq.n	800ae92 <__sflush_r+0xb2>
 800ae8e:	2b16      	cmp	r3, #22
 800ae90:	d101      	bne.n	800ae96 <__sflush_r+0xb6>
 800ae92:	602f      	str	r7, [r5, #0]
 800ae94:	e7b1      	b.n	800adfa <__sflush_r+0x1a>
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae9c:	81a3      	strh	r3, [r4, #12]
 800ae9e:	e7ad      	b.n	800adfc <__sflush_r+0x1c>
 800aea0:	690f      	ldr	r7, [r1, #16]
 800aea2:	2f00      	cmp	r7, #0
 800aea4:	d0a9      	beq.n	800adfa <__sflush_r+0x1a>
 800aea6:	0793      	lsls	r3, r2, #30
 800aea8:	680e      	ldr	r6, [r1, #0]
 800aeaa:	bf08      	it	eq
 800aeac:	694b      	ldreq	r3, [r1, #20]
 800aeae:	600f      	str	r7, [r1, #0]
 800aeb0:	bf18      	it	ne
 800aeb2:	2300      	movne	r3, #0
 800aeb4:	eba6 0807 	sub.w	r8, r6, r7
 800aeb8:	608b      	str	r3, [r1, #8]
 800aeba:	f1b8 0f00 	cmp.w	r8, #0
 800aebe:	dd9c      	ble.n	800adfa <__sflush_r+0x1a>
 800aec0:	6a21      	ldr	r1, [r4, #32]
 800aec2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aec4:	4643      	mov	r3, r8
 800aec6:	463a      	mov	r2, r7
 800aec8:	4628      	mov	r0, r5
 800aeca:	47b0      	blx	r6
 800aecc:	2800      	cmp	r0, #0
 800aece:	dc06      	bgt.n	800aede <__sflush_r+0xfe>
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aed6:	81a3      	strh	r3, [r4, #12]
 800aed8:	f04f 30ff 	mov.w	r0, #4294967295
 800aedc:	e78e      	b.n	800adfc <__sflush_r+0x1c>
 800aede:	4407      	add	r7, r0
 800aee0:	eba8 0800 	sub.w	r8, r8, r0
 800aee4:	e7e9      	b.n	800aeba <__sflush_r+0xda>
 800aee6:	bf00      	nop
 800aee8:	20400001 	.word	0x20400001

0800aeec <_fflush_r>:
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	690b      	ldr	r3, [r1, #16]
 800aef0:	4605      	mov	r5, r0
 800aef2:	460c      	mov	r4, r1
 800aef4:	b913      	cbnz	r3, 800aefc <_fflush_r+0x10>
 800aef6:	2500      	movs	r5, #0
 800aef8:	4628      	mov	r0, r5
 800aefa:	bd38      	pop	{r3, r4, r5, pc}
 800aefc:	b118      	cbz	r0, 800af06 <_fflush_r+0x1a>
 800aefe:	6983      	ldr	r3, [r0, #24]
 800af00:	b90b      	cbnz	r3, 800af06 <_fflush_r+0x1a>
 800af02:	f000 f887 	bl	800b014 <__sinit>
 800af06:	4b14      	ldr	r3, [pc, #80]	; (800af58 <_fflush_r+0x6c>)
 800af08:	429c      	cmp	r4, r3
 800af0a:	d11b      	bne.n	800af44 <_fflush_r+0x58>
 800af0c:	686c      	ldr	r4, [r5, #4]
 800af0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0ef      	beq.n	800aef6 <_fflush_r+0xa>
 800af16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af18:	07d0      	lsls	r0, r2, #31
 800af1a:	d404      	bmi.n	800af26 <_fflush_r+0x3a>
 800af1c:	0599      	lsls	r1, r3, #22
 800af1e:	d402      	bmi.n	800af26 <_fflush_r+0x3a>
 800af20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af22:	f000 f915 	bl	800b150 <__retarget_lock_acquire_recursive>
 800af26:	4628      	mov	r0, r5
 800af28:	4621      	mov	r1, r4
 800af2a:	f7ff ff59 	bl	800ade0 <__sflush_r>
 800af2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af30:	07da      	lsls	r2, r3, #31
 800af32:	4605      	mov	r5, r0
 800af34:	d4e0      	bmi.n	800aef8 <_fflush_r+0xc>
 800af36:	89a3      	ldrh	r3, [r4, #12]
 800af38:	059b      	lsls	r3, r3, #22
 800af3a:	d4dd      	bmi.n	800aef8 <_fflush_r+0xc>
 800af3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af3e:	f000 f908 	bl	800b152 <__retarget_lock_release_recursive>
 800af42:	e7d9      	b.n	800aef8 <_fflush_r+0xc>
 800af44:	4b05      	ldr	r3, [pc, #20]	; (800af5c <_fflush_r+0x70>)
 800af46:	429c      	cmp	r4, r3
 800af48:	d101      	bne.n	800af4e <_fflush_r+0x62>
 800af4a:	68ac      	ldr	r4, [r5, #8]
 800af4c:	e7df      	b.n	800af0e <_fflush_r+0x22>
 800af4e:	4b04      	ldr	r3, [pc, #16]	; (800af60 <_fflush_r+0x74>)
 800af50:	429c      	cmp	r4, r3
 800af52:	bf08      	it	eq
 800af54:	68ec      	ldreq	r4, [r5, #12]
 800af56:	e7da      	b.n	800af0e <_fflush_r+0x22>
 800af58:	0800b8a4 	.word	0x0800b8a4
 800af5c:	0800b8c4 	.word	0x0800b8c4
 800af60:	0800b884 	.word	0x0800b884

0800af64 <std>:
 800af64:	2300      	movs	r3, #0
 800af66:	b510      	push	{r4, lr}
 800af68:	4604      	mov	r4, r0
 800af6a:	e9c0 3300 	strd	r3, r3, [r0]
 800af6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af72:	6083      	str	r3, [r0, #8]
 800af74:	8181      	strh	r1, [r0, #12]
 800af76:	6643      	str	r3, [r0, #100]	; 0x64
 800af78:	81c2      	strh	r2, [r0, #14]
 800af7a:	6183      	str	r3, [r0, #24]
 800af7c:	4619      	mov	r1, r3
 800af7e:	2208      	movs	r2, #8
 800af80:	305c      	adds	r0, #92	; 0x5c
 800af82:	f7fd fb4d 	bl	8008620 <memset>
 800af86:	4b05      	ldr	r3, [pc, #20]	; (800af9c <std+0x38>)
 800af88:	6263      	str	r3, [r4, #36]	; 0x24
 800af8a:	4b05      	ldr	r3, [pc, #20]	; (800afa0 <std+0x3c>)
 800af8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af8e:	4b05      	ldr	r3, [pc, #20]	; (800afa4 <std+0x40>)
 800af90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af92:	4b05      	ldr	r3, [pc, #20]	; (800afa8 <std+0x44>)
 800af94:	6224      	str	r4, [r4, #32]
 800af96:	6323      	str	r3, [r4, #48]	; 0x30
 800af98:	bd10      	pop	{r4, pc}
 800af9a:	bf00      	nop
 800af9c:	0800b2b5 	.word	0x0800b2b5
 800afa0:	0800b2d7 	.word	0x0800b2d7
 800afa4:	0800b30f 	.word	0x0800b30f
 800afa8:	0800b333 	.word	0x0800b333

0800afac <_cleanup_r>:
 800afac:	4901      	ldr	r1, [pc, #4]	; (800afb4 <_cleanup_r+0x8>)
 800afae:	f000 b8af 	b.w	800b110 <_fwalk_reent>
 800afb2:	bf00      	nop
 800afb4:	0800aeed 	.word	0x0800aeed

0800afb8 <__sfmoreglue>:
 800afb8:	b570      	push	{r4, r5, r6, lr}
 800afba:	1e4a      	subs	r2, r1, #1
 800afbc:	2568      	movs	r5, #104	; 0x68
 800afbe:	4355      	muls	r5, r2
 800afc0:	460e      	mov	r6, r1
 800afc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afc6:	f7ff fa79 	bl	800a4bc <_malloc_r>
 800afca:	4604      	mov	r4, r0
 800afcc:	b140      	cbz	r0, 800afe0 <__sfmoreglue+0x28>
 800afce:	2100      	movs	r1, #0
 800afd0:	e9c0 1600 	strd	r1, r6, [r0]
 800afd4:	300c      	adds	r0, #12
 800afd6:	60a0      	str	r0, [r4, #8]
 800afd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800afdc:	f7fd fb20 	bl	8008620 <memset>
 800afe0:	4620      	mov	r0, r4
 800afe2:	bd70      	pop	{r4, r5, r6, pc}

0800afe4 <__sfp_lock_acquire>:
 800afe4:	4801      	ldr	r0, [pc, #4]	; (800afec <__sfp_lock_acquire+0x8>)
 800afe6:	f000 b8b3 	b.w	800b150 <__retarget_lock_acquire_recursive>
 800afea:	bf00      	nop
 800afec:	200008f8 	.word	0x200008f8

0800aff0 <__sfp_lock_release>:
 800aff0:	4801      	ldr	r0, [pc, #4]	; (800aff8 <__sfp_lock_release+0x8>)
 800aff2:	f000 b8ae 	b.w	800b152 <__retarget_lock_release_recursive>
 800aff6:	bf00      	nop
 800aff8:	200008f8 	.word	0x200008f8

0800affc <__sinit_lock_acquire>:
 800affc:	4801      	ldr	r0, [pc, #4]	; (800b004 <__sinit_lock_acquire+0x8>)
 800affe:	f000 b8a7 	b.w	800b150 <__retarget_lock_acquire_recursive>
 800b002:	bf00      	nop
 800b004:	200008f3 	.word	0x200008f3

0800b008 <__sinit_lock_release>:
 800b008:	4801      	ldr	r0, [pc, #4]	; (800b010 <__sinit_lock_release+0x8>)
 800b00a:	f000 b8a2 	b.w	800b152 <__retarget_lock_release_recursive>
 800b00e:	bf00      	nop
 800b010:	200008f3 	.word	0x200008f3

0800b014 <__sinit>:
 800b014:	b510      	push	{r4, lr}
 800b016:	4604      	mov	r4, r0
 800b018:	f7ff fff0 	bl	800affc <__sinit_lock_acquire>
 800b01c:	69a3      	ldr	r3, [r4, #24]
 800b01e:	b11b      	cbz	r3, 800b028 <__sinit+0x14>
 800b020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b024:	f7ff bff0 	b.w	800b008 <__sinit_lock_release>
 800b028:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b02c:	6523      	str	r3, [r4, #80]	; 0x50
 800b02e:	4b13      	ldr	r3, [pc, #76]	; (800b07c <__sinit+0x68>)
 800b030:	4a13      	ldr	r2, [pc, #76]	; (800b080 <__sinit+0x6c>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	62a2      	str	r2, [r4, #40]	; 0x28
 800b036:	42a3      	cmp	r3, r4
 800b038:	bf04      	itt	eq
 800b03a:	2301      	moveq	r3, #1
 800b03c:	61a3      	streq	r3, [r4, #24]
 800b03e:	4620      	mov	r0, r4
 800b040:	f000 f820 	bl	800b084 <__sfp>
 800b044:	6060      	str	r0, [r4, #4]
 800b046:	4620      	mov	r0, r4
 800b048:	f000 f81c 	bl	800b084 <__sfp>
 800b04c:	60a0      	str	r0, [r4, #8]
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 f818 	bl	800b084 <__sfp>
 800b054:	2200      	movs	r2, #0
 800b056:	60e0      	str	r0, [r4, #12]
 800b058:	2104      	movs	r1, #4
 800b05a:	6860      	ldr	r0, [r4, #4]
 800b05c:	f7ff ff82 	bl	800af64 <std>
 800b060:	68a0      	ldr	r0, [r4, #8]
 800b062:	2201      	movs	r2, #1
 800b064:	2109      	movs	r1, #9
 800b066:	f7ff ff7d 	bl	800af64 <std>
 800b06a:	68e0      	ldr	r0, [r4, #12]
 800b06c:	2202      	movs	r2, #2
 800b06e:	2112      	movs	r1, #18
 800b070:	f7ff ff78 	bl	800af64 <std>
 800b074:	2301      	movs	r3, #1
 800b076:	61a3      	str	r3, [r4, #24]
 800b078:	e7d2      	b.n	800b020 <__sinit+0xc>
 800b07a:	bf00      	nop
 800b07c:	0800b500 	.word	0x0800b500
 800b080:	0800afad 	.word	0x0800afad

0800b084 <__sfp>:
 800b084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b086:	4607      	mov	r7, r0
 800b088:	f7ff ffac 	bl	800afe4 <__sfp_lock_acquire>
 800b08c:	4b1e      	ldr	r3, [pc, #120]	; (800b108 <__sfp+0x84>)
 800b08e:	681e      	ldr	r6, [r3, #0]
 800b090:	69b3      	ldr	r3, [r6, #24]
 800b092:	b913      	cbnz	r3, 800b09a <__sfp+0x16>
 800b094:	4630      	mov	r0, r6
 800b096:	f7ff ffbd 	bl	800b014 <__sinit>
 800b09a:	3648      	adds	r6, #72	; 0x48
 800b09c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	d503      	bpl.n	800b0ac <__sfp+0x28>
 800b0a4:	6833      	ldr	r3, [r6, #0]
 800b0a6:	b30b      	cbz	r3, 800b0ec <__sfp+0x68>
 800b0a8:	6836      	ldr	r6, [r6, #0]
 800b0aa:	e7f7      	b.n	800b09c <__sfp+0x18>
 800b0ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0b0:	b9d5      	cbnz	r5, 800b0e8 <__sfp+0x64>
 800b0b2:	4b16      	ldr	r3, [pc, #88]	; (800b10c <__sfp+0x88>)
 800b0b4:	60e3      	str	r3, [r4, #12]
 800b0b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0ba:	6665      	str	r5, [r4, #100]	; 0x64
 800b0bc:	f000 f847 	bl	800b14e <__retarget_lock_init_recursive>
 800b0c0:	f7ff ff96 	bl	800aff0 <__sfp_lock_release>
 800b0c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0cc:	6025      	str	r5, [r4, #0]
 800b0ce:	61a5      	str	r5, [r4, #24]
 800b0d0:	2208      	movs	r2, #8
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0d8:	f7fd faa2 	bl	8008620 <memset>
 800b0dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0e8:	3468      	adds	r4, #104	; 0x68
 800b0ea:	e7d9      	b.n	800b0a0 <__sfp+0x1c>
 800b0ec:	2104      	movs	r1, #4
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	f7ff ff62 	bl	800afb8 <__sfmoreglue>
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	6030      	str	r0, [r6, #0]
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d1d5      	bne.n	800b0a8 <__sfp+0x24>
 800b0fc:	f7ff ff78 	bl	800aff0 <__sfp_lock_release>
 800b100:	230c      	movs	r3, #12
 800b102:	603b      	str	r3, [r7, #0]
 800b104:	e7ee      	b.n	800b0e4 <__sfp+0x60>
 800b106:	bf00      	nop
 800b108:	0800b500 	.word	0x0800b500
 800b10c:	ffff0001 	.word	0xffff0001

0800b110 <_fwalk_reent>:
 800b110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b114:	4606      	mov	r6, r0
 800b116:	4688      	mov	r8, r1
 800b118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b11c:	2700      	movs	r7, #0
 800b11e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b122:	f1b9 0901 	subs.w	r9, r9, #1
 800b126:	d505      	bpl.n	800b134 <_fwalk_reent+0x24>
 800b128:	6824      	ldr	r4, [r4, #0]
 800b12a:	2c00      	cmp	r4, #0
 800b12c:	d1f7      	bne.n	800b11e <_fwalk_reent+0xe>
 800b12e:	4638      	mov	r0, r7
 800b130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b134:	89ab      	ldrh	r3, [r5, #12]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d907      	bls.n	800b14a <_fwalk_reent+0x3a>
 800b13a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b13e:	3301      	adds	r3, #1
 800b140:	d003      	beq.n	800b14a <_fwalk_reent+0x3a>
 800b142:	4629      	mov	r1, r5
 800b144:	4630      	mov	r0, r6
 800b146:	47c0      	blx	r8
 800b148:	4307      	orrs	r7, r0
 800b14a:	3568      	adds	r5, #104	; 0x68
 800b14c:	e7e9      	b.n	800b122 <_fwalk_reent+0x12>

0800b14e <__retarget_lock_init_recursive>:
 800b14e:	4770      	bx	lr

0800b150 <__retarget_lock_acquire_recursive>:
 800b150:	4770      	bx	lr

0800b152 <__retarget_lock_release_recursive>:
 800b152:	4770      	bx	lr

0800b154 <__swhatbuf_r>:
 800b154:	b570      	push	{r4, r5, r6, lr}
 800b156:	460e      	mov	r6, r1
 800b158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b15c:	2900      	cmp	r1, #0
 800b15e:	b096      	sub	sp, #88	; 0x58
 800b160:	4614      	mov	r4, r2
 800b162:	461d      	mov	r5, r3
 800b164:	da07      	bge.n	800b176 <__swhatbuf_r+0x22>
 800b166:	2300      	movs	r3, #0
 800b168:	602b      	str	r3, [r5, #0]
 800b16a:	89b3      	ldrh	r3, [r6, #12]
 800b16c:	061a      	lsls	r2, r3, #24
 800b16e:	d410      	bmi.n	800b192 <__swhatbuf_r+0x3e>
 800b170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b174:	e00e      	b.n	800b194 <__swhatbuf_r+0x40>
 800b176:	466a      	mov	r2, sp
 800b178:	f000 f902 	bl	800b380 <_fstat_r>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	dbf2      	blt.n	800b166 <__swhatbuf_r+0x12>
 800b180:	9a01      	ldr	r2, [sp, #4]
 800b182:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b186:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b18a:	425a      	negs	r2, r3
 800b18c:	415a      	adcs	r2, r3
 800b18e:	602a      	str	r2, [r5, #0]
 800b190:	e7ee      	b.n	800b170 <__swhatbuf_r+0x1c>
 800b192:	2340      	movs	r3, #64	; 0x40
 800b194:	2000      	movs	r0, #0
 800b196:	6023      	str	r3, [r4, #0]
 800b198:	b016      	add	sp, #88	; 0x58
 800b19a:	bd70      	pop	{r4, r5, r6, pc}

0800b19c <__smakebuf_r>:
 800b19c:	898b      	ldrh	r3, [r1, #12]
 800b19e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1a0:	079d      	lsls	r5, r3, #30
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	460c      	mov	r4, r1
 800b1a6:	d507      	bpl.n	800b1b8 <__smakebuf_r+0x1c>
 800b1a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	6123      	str	r3, [r4, #16]
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	6163      	str	r3, [r4, #20]
 800b1b4:	b002      	add	sp, #8
 800b1b6:	bd70      	pop	{r4, r5, r6, pc}
 800b1b8:	ab01      	add	r3, sp, #4
 800b1ba:	466a      	mov	r2, sp
 800b1bc:	f7ff ffca 	bl	800b154 <__swhatbuf_r>
 800b1c0:	9900      	ldr	r1, [sp, #0]
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f7ff f979 	bl	800a4bc <_malloc_r>
 800b1ca:	b948      	cbnz	r0, 800b1e0 <__smakebuf_r+0x44>
 800b1cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1d0:	059a      	lsls	r2, r3, #22
 800b1d2:	d4ef      	bmi.n	800b1b4 <__smakebuf_r+0x18>
 800b1d4:	f023 0303 	bic.w	r3, r3, #3
 800b1d8:	f043 0302 	orr.w	r3, r3, #2
 800b1dc:	81a3      	strh	r3, [r4, #12]
 800b1de:	e7e3      	b.n	800b1a8 <__smakebuf_r+0xc>
 800b1e0:	4b0d      	ldr	r3, [pc, #52]	; (800b218 <__smakebuf_r+0x7c>)
 800b1e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	6020      	str	r0, [r4, #0]
 800b1e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1ec:	81a3      	strh	r3, [r4, #12]
 800b1ee:	9b00      	ldr	r3, [sp, #0]
 800b1f0:	6163      	str	r3, [r4, #20]
 800b1f2:	9b01      	ldr	r3, [sp, #4]
 800b1f4:	6120      	str	r0, [r4, #16]
 800b1f6:	b15b      	cbz	r3, 800b210 <__smakebuf_r+0x74>
 800b1f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	f000 f8d1 	bl	800b3a4 <_isatty_r>
 800b202:	b128      	cbz	r0, 800b210 <__smakebuf_r+0x74>
 800b204:	89a3      	ldrh	r3, [r4, #12]
 800b206:	f023 0303 	bic.w	r3, r3, #3
 800b20a:	f043 0301 	orr.w	r3, r3, #1
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	89a0      	ldrh	r0, [r4, #12]
 800b212:	4305      	orrs	r5, r0
 800b214:	81a5      	strh	r5, [r4, #12]
 800b216:	e7cd      	b.n	800b1b4 <__smakebuf_r+0x18>
 800b218:	0800afad 	.word	0x0800afad

0800b21c <_malloc_usable_size_r>:
 800b21c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b220:	1f18      	subs	r0, r3, #4
 800b222:	2b00      	cmp	r3, #0
 800b224:	bfbc      	itt	lt
 800b226:	580b      	ldrlt	r3, [r1, r0]
 800b228:	18c0      	addlt	r0, r0, r3
 800b22a:	4770      	bx	lr

0800b22c <_raise_r>:
 800b22c:	291f      	cmp	r1, #31
 800b22e:	b538      	push	{r3, r4, r5, lr}
 800b230:	4604      	mov	r4, r0
 800b232:	460d      	mov	r5, r1
 800b234:	d904      	bls.n	800b240 <_raise_r+0x14>
 800b236:	2316      	movs	r3, #22
 800b238:	6003      	str	r3, [r0, #0]
 800b23a:	f04f 30ff 	mov.w	r0, #4294967295
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b242:	b112      	cbz	r2, 800b24a <_raise_r+0x1e>
 800b244:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b248:	b94b      	cbnz	r3, 800b25e <_raise_r+0x32>
 800b24a:	4620      	mov	r0, r4
 800b24c:	f000 f830 	bl	800b2b0 <_getpid_r>
 800b250:	462a      	mov	r2, r5
 800b252:	4601      	mov	r1, r0
 800b254:	4620      	mov	r0, r4
 800b256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b25a:	f000 b817 	b.w	800b28c <_kill_r>
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d00a      	beq.n	800b278 <_raise_r+0x4c>
 800b262:	1c59      	adds	r1, r3, #1
 800b264:	d103      	bne.n	800b26e <_raise_r+0x42>
 800b266:	2316      	movs	r3, #22
 800b268:	6003      	str	r3, [r0, #0]
 800b26a:	2001      	movs	r0, #1
 800b26c:	e7e7      	b.n	800b23e <_raise_r+0x12>
 800b26e:	2400      	movs	r4, #0
 800b270:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b274:	4628      	mov	r0, r5
 800b276:	4798      	blx	r3
 800b278:	2000      	movs	r0, #0
 800b27a:	e7e0      	b.n	800b23e <_raise_r+0x12>

0800b27c <raise>:
 800b27c:	4b02      	ldr	r3, [pc, #8]	; (800b288 <raise+0xc>)
 800b27e:	4601      	mov	r1, r0
 800b280:	6818      	ldr	r0, [r3, #0]
 800b282:	f7ff bfd3 	b.w	800b22c <_raise_r>
 800b286:	bf00      	nop
 800b288:	20000034 	.word	0x20000034

0800b28c <_kill_r>:
 800b28c:	b538      	push	{r3, r4, r5, lr}
 800b28e:	4d07      	ldr	r5, [pc, #28]	; (800b2ac <_kill_r+0x20>)
 800b290:	2300      	movs	r3, #0
 800b292:	4604      	mov	r4, r0
 800b294:	4608      	mov	r0, r1
 800b296:	4611      	mov	r1, r2
 800b298:	602b      	str	r3, [r5, #0]
 800b29a:	f7f8 fe91 	bl	8003fc0 <_kill>
 800b29e:	1c43      	adds	r3, r0, #1
 800b2a0:	d102      	bne.n	800b2a8 <_kill_r+0x1c>
 800b2a2:	682b      	ldr	r3, [r5, #0]
 800b2a4:	b103      	cbz	r3, 800b2a8 <_kill_r+0x1c>
 800b2a6:	6023      	str	r3, [r4, #0]
 800b2a8:	bd38      	pop	{r3, r4, r5, pc}
 800b2aa:	bf00      	nop
 800b2ac:	200008ec 	.word	0x200008ec

0800b2b0 <_getpid_r>:
 800b2b0:	f7f8 be7e 	b.w	8003fb0 <_getpid>

0800b2b4 <__sread>:
 800b2b4:	b510      	push	{r4, lr}
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2bc:	f000 f894 	bl	800b3e8 <_read_r>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	bfab      	itete	ge
 800b2c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2c6:	89a3      	ldrhlt	r3, [r4, #12]
 800b2c8:	181b      	addge	r3, r3, r0
 800b2ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2ce:	bfac      	ite	ge
 800b2d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2d2:	81a3      	strhlt	r3, [r4, #12]
 800b2d4:	bd10      	pop	{r4, pc}

0800b2d6 <__swrite>:
 800b2d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2da:	461f      	mov	r7, r3
 800b2dc:	898b      	ldrh	r3, [r1, #12]
 800b2de:	05db      	lsls	r3, r3, #23
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	4616      	mov	r6, r2
 800b2e6:	d505      	bpl.n	800b2f4 <__swrite+0x1e>
 800b2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ec:	2302      	movs	r3, #2
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f000 f868 	bl	800b3c4 <_lseek_r>
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2fe:	81a3      	strh	r3, [r4, #12]
 800b300:	4632      	mov	r2, r6
 800b302:	463b      	mov	r3, r7
 800b304:	4628      	mov	r0, r5
 800b306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b30a:	f000 b817 	b.w	800b33c <_write_r>

0800b30e <__sseek>:
 800b30e:	b510      	push	{r4, lr}
 800b310:	460c      	mov	r4, r1
 800b312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b316:	f000 f855 	bl	800b3c4 <_lseek_r>
 800b31a:	1c43      	adds	r3, r0, #1
 800b31c:	89a3      	ldrh	r3, [r4, #12]
 800b31e:	bf15      	itete	ne
 800b320:	6560      	strne	r0, [r4, #84]	; 0x54
 800b322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b32a:	81a3      	strheq	r3, [r4, #12]
 800b32c:	bf18      	it	ne
 800b32e:	81a3      	strhne	r3, [r4, #12]
 800b330:	bd10      	pop	{r4, pc}

0800b332 <__sclose>:
 800b332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b336:	f000 b813 	b.w	800b360 <_close_r>
	...

0800b33c <_write_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4d07      	ldr	r5, [pc, #28]	; (800b35c <_write_r+0x20>)
 800b340:	4604      	mov	r4, r0
 800b342:	4608      	mov	r0, r1
 800b344:	4611      	mov	r1, r2
 800b346:	2200      	movs	r2, #0
 800b348:	602a      	str	r2, [r5, #0]
 800b34a:	461a      	mov	r2, r3
 800b34c:	f7f8 fe6f 	bl	800402e <_write>
 800b350:	1c43      	adds	r3, r0, #1
 800b352:	d102      	bne.n	800b35a <_write_r+0x1e>
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	b103      	cbz	r3, 800b35a <_write_r+0x1e>
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	bd38      	pop	{r3, r4, r5, pc}
 800b35c:	200008ec 	.word	0x200008ec

0800b360 <_close_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4d06      	ldr	r5, [pc, #24]	; (800b37c <_close_r+0x1c>)
 800b364:	2300      	movs	r3, #0
 800b366:	4604      	mov	r4, r0
 800b368:	4608      	mov	r0, r1
 800b36a:	602b      	str	r3, [r5, #0]
 800b36c:	f7f8 fe7b 	bl	8004066 <_close>
 800b370:	1c43      	adds	r3, r0, #1
 800b372:	d102      	bne.n	800b37a <_close_r+0x1a>
 800b374:	682b      	ldr	r3, [r5, #0]
 800b376:	b103      	cbz	r3, 800b37a <_close_r+0x1a>
 800b378:	6023      	str	r3, [r4, #0]
 800b37a:	bd38      	pop	{r3, r4, r5, pc}
 800b37c:	200008ec 	.word	0x200008ec

0800b380 <_fstat_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4d07      	ldr	r5, [pc, #28]	; (800b3a0 <_fstat_r+0x20>)
 800b384:	2300      	movs	r3, #0
 800b386:	4604      	mov	r4, r0
 800b388:	4608      	mov	r0, r1
 800b38a:	4611      	mov	r1, r2
 800b38c:	602b      	str	r3, [r5, #0]
 800b38e:	f7f8 fe76 	bl	800407e <_fstat>
 800b392:	1c43      	adds	r3, r0, #1
 800b394:	d102      	bne.n	800b39c <_fstat_r+0x1c>
 800b396:	682b      	ldr	r3, [r5, #0]
 800b398:	b103      	cbz	r3, 800b39c <_fstat_r+0x1c>
 800b39a:	6023      	str	r3, [r4, #0]
 800b39c:	bd38      	pop	{r3, r4, r5, pc}
 800b39e:	bf00      	nop
 800b3a0:	200008ec 	.word	0x200008ec

0800b3a4 <_isatty_r>:
 800b3a4:	b538      	push	{r3, r4, r5, lr}
 800b3a6:	4d06      	ldr	r5, [pc, #24]	; (800b3c0 <_isatty_r+0x1c>)
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	4608      	mov	r0, r1
 800b3ae:	602b      	str	r3, [r5, #0]
 800b3b0:	f7f8 fe75 	bl	800409e <_isatty>
 800b3b4:	1c43      	adds	r3, r0, #1
 800b3b6:	d102      	bne.n	800b3be <_isatty_r+0x1a>
 800b3b8:	682b      	ldr	r3, [r5, #0]
 800b3ba:	b103      	cbz	r3, 800b3be <_isatty_r+0x1a>
 800b3bc:	6023      	str	r3, [r4, #0]
 800b3be:	bd38      	pop	{r3, r4, r5, pc}
 800b3c0:	200008ec 	.word	0x200008ec

0800b3c4 <_lseek_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4d07      	ldr	r5, [pc, #28]	; (800b3e4 <_lseek_r+0x20>)
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	4608      	mov	r0, r1
 800b3cc:	4611      	mov	r1, r2
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	602a      	str	r2, [r5, #0]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	f7f8 fe6e 	bl	80040b4 <_lseek>
 800b3d8:	1c43      	adds	r3, r0, #1
 800b3da:	d102      	bne.n	800b3e2 <_lseek_r+0x1e>
 800b3dc:	682b      	ldr	r3, [r5, #0]
 800b3de:	b103      	cbz	r3, 800b3e2 <_lseek_r+0x1e>
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}
 800b3e4:	200008ec 	.word	0x200008ec

0800b3e8 <_read_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4d07      	ldr	r5, [pc, #28]	; (800b408 <_read_r+0x20>)
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	4608      	mov	r0, r1
 800b3f0:	4611      	mov	r1, r2
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	602a      	str	r2, [r5, #0]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	f7f8 fdfc 	bl	8003ff4 <_read>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d102      	bne.n	800b406 <_read_r+0x1e>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	b103      	cbz	r3, 800b406 <_read_r+0x1e>
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	bd38      	pop	{r3, r4, r5, pc}
 800b408:	200008ec 	.word	0x200008ec

0800b40c <_init>:
 800b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40e:	bf00      	nop
 800b410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b412:	bc08      	pop	{r3}
 800b414:	469e      	mov	lr, r3
 800b416:	4770      	bx	lr

0800b418 <_fini>:
 800b418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41a:	bf00      	nop
 800b41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41e:	bc08      	pop	{r3}
 800b420:	469e      	mov	lr, r3
 800b422:	4770      	bx	lr
