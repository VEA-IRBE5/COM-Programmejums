
IRBE_5_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800865c  0800865c  0001865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800875c  0800875c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800875c  0800875c  0001875c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008764  08008764  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008764  08008764  00018764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008768  08008768  00018768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800876c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  20000090  080087fc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  080087fc  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f7d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002efb  00000000  00000000  0003903d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0003bf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003d228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019833  00000000  00000000  0003e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015827  00000000  00000000  00057c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d1a8  00000000  00000000  0006d472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a61a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005594  00000000  00000000  0010a670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008644 	.word	0x08008644

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08008644 	.word	0x08008644

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

void SX1278_hw_init(SX1278_hw_t * hw) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000dec:	2101      	movs	r1, #1
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f80d 	bl	8000e0e <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6858      	ldr	r0, [r3, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4619      	mov	r1, r3
 8000e02:	f004 f97b 	bl	80050fc <HAL_GPIO_WritePin>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <SX1278_hw_SetNSS>:

void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6958      	ldr	r0, [r3, #20]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	b299      	uxth	r1, r3
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	bf0c      	ite	eq
 8000e28:	2301      	moveq	r3, #1
 8000e2a:	2300      	movne	r3, #0
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	f004 f964 	bl	80050fc <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <SX1278_hw_Reset>:

void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000e44:	2101      	movs	r1, #1
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffe1 	bl	8000e0e <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6858      	ldr	r0, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	2200      	movs	r2, #0
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f004 f94f 	bl	80050fc <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f000 f856 	bl	8000f10 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6858      	ldr	r0, [r3, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4619      	mov	r1, r3
 8000e72:	f004 f943 	bl	80050fc <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000e76:	2064      	movs	r0, #100	; 0x64
 8000e78:	f000 f84a 	bl	8000f10 <SX1278_hw_DelayMs>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <SX1278_hw_SPICommand>:

void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000e90:	2100      	movs	r1, #0
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffbb 	bl	8000e0e <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6998      	ldr	r0, [r3, #24]
 8000e9c:	1cf9      	adds	r1, r7, #3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f004 fe59 	bl	8005b5a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000ea8:	bf00      	nop
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f005 f931 	bl	8006116 <HAL_SPI_GetState>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d1f7      	bne.n	8000eaa <SX1278_hw_SPICommand+0x26>
		;
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <SX1278_hw_SPIReadByte>:

uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ff99 	bl	8000e0e <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6998      	ldr	r0, [r3, #24]
 8000ee0:	f107 020e 	add.w	r2, r7, #14
 8000ee4:	f107 010f 	add.w	r1, r7, #15
 8000ee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f004 ff6f 	bl	8005dd2 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000ef4:	bf00      	nop
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f005 f90b 	bl	8006116 <HAL_SPI_GetState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d1f7      	bne.n	8000ef6 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000f06:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <SX1278_hw_DelayMs>:

void SX1278_hw_DelayMs(uint32_t msec) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f002 fd61 	bl	80039e0 <HAL_Delay>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	78fa      	ldrb	r2, [r7, #3]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ffa2 	bl	8000e84 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ffbd 	bl	8000ec4 <SX1278_hw_SPIReadByte>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2101      	movs	r1, #1
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff5a 	bl	8000e0e <SX1278_hw_SetNSS>
	return tmp;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
 8000f70:	4613      	mov	r3, r2
 8000f72:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff47 	bl	8000e0e <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f7ff ff78 	bl	8000e84 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	78ba      	ldrb	r2, [r7, #2]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff71 	bl	8000e84 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff30 	bl	8000e0e <SX1278_hw_SetNSS>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	72fb      	strb	r3, [r7, #11]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000fca:	7abb      	ldrb	r3, [r7, #10]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d929      	bls.n	8001024 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff19 	bl	8000e0e <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	7afb      	ldrb	r3, [r7, #11]
 8000fe2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f7ff ff4a 	bl	8000e84 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	75fb      	strb	r3, [r7, #23]
 8000ff4:	e00b      	b.n	800100e <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	f7ff ff3e 	bl	8000e84 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	3301      	adds	r3, #1
 800100c:	75fb      	strb	r3, [r7, #23]
 800100e:	7dfa      	ldrb	r2, [r7, #23]
 8001010:	7abb      	ldrb	r3, [r7, #10]
 8001012:	429a      	cmp	r2, r3
 8001014:	d3ef      	bcc.n	8000ff6 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2101      	movs	r1, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fef6 	bl	8000e0e <SX1278_hw_SetNSS>
 8001022:	e000      	b.n	8001026 <SX1278_SPIBurstWrite+0x70>
		return;
 8001024:	bf00      	nop
	}
}
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af02      	add	r7, sp, #8
 8001032:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7919      	ldrb	r1, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	795a      	ldrb	r2, [r3, #5]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7998      	ldrb	r0, [r3, #6]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	79db      	ldrb	r3, [r3, #7]
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	4603      	mov	r3, r0
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f805 	bl	8001058 <SX1278_config>
			module->LoRa_BW);
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
	uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	4608      	mov	r0, r1
 8001062:	4611      	mov	r1, r2
 8001064:	461a      	mov	r2, r3
 8001066:	4603      	mov	r3, r0
 8001068:	70fb      	strb	r3, [r7, #3]
 800106a:	460b      	mov	r3, r1
 800106c:	70bb      	strb	r3, [r7, #2]
 800106e:	4613      	mov	r3, r2
 8001070:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f976 	bl	8001364 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001078:	200f      	movs	r0, #15
 800107a:	f7ff ff49 	bl	8000f10 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f980 	bl	8001384 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
	(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8001084:	78fa      	ldrb	r2, [r7, #3]
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	4a41      	ldr	r2, [pc, #260]	; (8001194 <SX1278_config+0x13c>)
 800108e:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8001090:	2303      	movs	r3, #3
 8001092:	2106      	movs	r1, #6
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff8e 	bl	8000fb6 <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, 0b10000000); //Setting output power parameter
 800109a:	2280      	movs	r2, #128	; 0x80
 800109c:	2109      	movs	r1, #9
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff60 	bl	8000f64 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80010a4:	220b      	movs	r2, #11
 80010a6:	210b      	movs	r1, #11
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff5b 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80010ae:	2223      	movs	r2, #35	; 0x23
 80010b0:	210c      	movs	r1, #12
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff56 	bl	8000f64 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 80010b8:	787b      	ldrb	r3, [r7, #1]
 80010ba:	4a37      	ldr	r2, [pc, #220]	; (8001198 <SX1278_config+0x140>)
 80010bc:	5cd3      	ldrb	r3, [r2, r3]
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d131      	bne.n	8001126 <SX1278_config+0xce>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80010c2:	7e3b      	ldrb	r3, [r7, #24]
 80010c4:	4a35      	ldr	r2, [pc, #212]	; (800119c <SX1278_config+0x144>)
 80010c6:	5cd3      	ldrb	r3, [r2, r3]
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80010cc:	3303      	adds	r3, #3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	211d      	movs	r1, #29
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff45 	bl	8000f64 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 80010da:	787b      	ldrb	r3, [r7, #1]
 80010dc:	4a2e      	ldr	r2, [pc, #184]	; (8001198 <SX1278_config+0x140>)
 80010de:	5cd3      	ldrb	r3, [r2, r3]
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80010e4:	3307      	adds	r3, #7
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	211e      	movs	r1, #30
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff39 	bl	8000f64 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 80010f2:	2131      	movs	r1, #49	; 0x31
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff16 	bl	8000f26 <SX1278_SPIRead>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	f023 0307 	bic.w	r3, r3, #7
 8001104:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	f043 0305 	orr.w	r3, r3, #5
 800110c:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	461a      	mov	r2, r3
 8001112:	2131      	movs	r1, #49	; 0x31
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff25 	bl	8000f64 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800111a:	220c      	movs	r2, #12
 800111c:	2137      	movs	r1, #55	; 0x37
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff20 	bl	8000f64 <SX1278_SPIWrite>
 8001124:	e017      	b.n	8001156 <SX1278_config+0xfe>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001126:	7e3b      	ldrb	r3, [r7, #24]
 8001128:	4a1c      	ldr	r2, [pc, #112]	; (800119c <SX1278_config+0x144>)
 800112a:	5cd3      	ldrb	r3, [r2, r3]
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001130:	3302      	adds	r3, #2
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	211d      	movs	r1, #29
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff13 	bl	8000f64 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 800113e:	787b      	ldrb	r3, [r7, #1]
 8001140:	4a15      	ldr	r2, [pc, #84]	; (8001198 <SX1278_config+0x140>)
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001148:	3307      	adds	r3, #7
 800114a:	b2db      	uxtb	r3, r3
 800114c:	461a      	mov	r2, r3
 800114e:	211e      	movs	r1, #30
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff07 	bl	8000f64 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8001156:	22ff      	movs	r2, #255	; 0xff
 8001158:	211f      	movs	r1, #31
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff02 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001160:	2200      	movs	r2, #0
 8001162:	2120      	movs	r1, #32
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fefd 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 800116a:	220c      	movs	r2, #12
 800116c:	2121      	movs	r1, #33	; 0x21
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fef8 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001174:	2201      	movs	r2, #1
 8001176:	2141      	movs	r1, #65	; 0x41
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff fef3 	bl	8000f64 <SX1278_SPIWrite>
	module->readBytes = 0;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f8dc 	bl	8001344 <SX1278_standby>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	080086f0 	.word	0x080086f0
 8001198:	080086f4 	.word	0x080086f4
 800119c:	080086fc 	.word	0x080086fc

080011a0 <SX1278_RTTY_Config>:

void SX1278_RTTY_Config(SX1278_t * module){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	SX1278_FSK_Config(module); // set base parameters
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f895 	bl	80012d8 <SX1278_FSK_Config>
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f8d8 	bl	8001364 <SX1278_sleep>

	SX1278_SPIWrite(module, LR_RegPaConfig, 0b11110000);//0x87);	//Normal and RX
 80011b4:	22f0      	movs	r2, #240	; 0xf0
 80011b6:	2109      	movs	r1, #9
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff fed3 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);
 80011be:	2284      	movs	r2, #132	; 0x84
 80011c0:	214d      	movs	r1, #77	; 0x4d
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fece 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41);
 80011c8:	2241      	movs	r2, #65	; 0x41
 80011ca:	2140      	movs	r1, #64	; 0x40
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fec9 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegPayloadLength, 8); //Payload Length 8 bytes
 80011d2:	2208      	movs	r2, #8
 80011d4:	2132      	movs	r1, #50	; 0x32
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fec4 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegFifoThresh, 8 - 1);     //Fixed length, packetformat = 0
 80011dc:	2207      	movs	r2, #7
 80011de:	2135      	movs	r1, #53	; 0x35
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff febf 	bl	8000f64 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, RegFdevLsb, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2105      	movs	r1, #5
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff feba 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_standby(module); //Entry standby mode
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f8a7 	bl	8001344 <SX1278_standby>
	SX1278_hw_DelayMs(1);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f7ff fe8a 	bl	8000f10 <SX1278_hw_DelayMs>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <SX1278_RTTY_Stop>:

void SX1278_RTTY_Stop(SX1278_t * module){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	//SX1278_SPIWrite(module, LR_RegOpMode, 0b1);
	SX1278_standby(module);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f899 	bl	8001344 <SX1278_standby>
	uint8_t ret = 1;
 8001212:	2301      	movs	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 8001216:	213e      	movs	r1, #62	; 0x3e
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fe84 	bl	8000f26 <SX1278_SPIRead>
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db00      	blt.n	800122c <SX1278_RTTY_Stop+0x28>
		ret = SX1278_SPIRead(module, 0x3e);
 800122a:	e7f4      	b.n	8001216 <SX1278_RTTY_Stop+0x12>
			break;
 800122c:	bf00      	nop
		}
	}
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <SX1278_RTTY_WriteLow>:

void SX1278_RTTY_WriteLow(SX1278_t * module){
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	SX1278_RTTY_Stop(module);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffe0 	bl	8001204 <SX1278_RTTY_Stop>
	SX1278_SPIWrite(module, RegFreqLsb, 0); //  LSB
 8001244:	2200      	movs	r2, #0
 8001246:	2108      	movs	r1, #8
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fe8b 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1010);
 800124e:	220a      	movs	r2, #10
 8001250:	2101      	movs	r1, #1
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fe86 	bl	8000f64 <SX1278_SPIWrite>

	uint8_t ret = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 800125c:	213e      	movs	r1, #62	; 0x3e
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fe61 	bl	8000f26 <SX1278_SPIRead>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 8001268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db00      	blt.n	8001272 <SX1278_RTTY_WriteLow+0x3c>
		ret = SX1278_SPIRead(module, 0x3e);
 8001270:	e7f4      	b.n	800125c <SX1278_RTTY_WriteLow+0x26>
			break;
 8001272:	bf00      	nop
		}
	}


	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);
 8001274:	220b      	movs	r2, #11
 8001276:	2101      	movs	r1, #1
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fe73 	bl	8000f64 <SX1278_SPIWrite>

}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <SX1278_RTTY_WriteHigh>:

void SX1278_RTTY_WriteHigh(SX1278_t * module){
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	SX1278_RTTY_Stop(module);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffb8 	bl	8001204 <SX1278_RTTY_Stop>
	SX1278_SPIWrite(module, RegFreqLsb, 10); //  HSB
 8001294:	220a      	movs	r2, #10
 8001296:	2108      	movs	r1, #8
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fe63 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1010);
 800129e:	220a      	movs	r2, #10
 80012a0:	2101      	movs	r1, #1
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fe5e 	bl	8000f64 <SX1278_SPIWrite>

	uint8_t ret = 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 80012ac:	213e      	movs	r1, #62	; 0x3e
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fe39 	bl	8000f26 <SX1278_SPIRead>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	db00      	blt.n	80012c2 <SX1278_RTTY_WriteHigh+0x3c>
		ret = SX1278_SPIRead(module, 0x3e);
 80012c0:	e7f4      	b.n	80012ac <SX1278_RTTY_WriteHigh+0x26>
			break;
 80012c2:	bf00      	nop
		}
	}
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);
 80012c4:	220b      	movs	r2, #11
 80012c6:	2101      	movs	r1, #1
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fe4b 	bl	8000f64 <SX1278_SPIWrite>
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <SX1278_FSK_Config>:

void SX1278_FSK_Config(SX1278_t * module) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f83f 	bl	8001364 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80012e6:	200f      	movs	r0, #15
 80012e8:	f7ff fe12 	bl	8000f10 <SX1278_hw_DelayMs>

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 80012ec:	2303      	movs	r3, #3
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <SX1278_FSK_Config+0x68>)
 80012f0:	2106      	movs	r1, #6
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fe5f 	bl	8000fb6 <SX1278_SPIBurstWrite>
	(uint8_t*) SX1278_Frequency[SX1278_433MHZ], 3); //setting  frequency parameter 434 MHz

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, 0b10000000); //Setting output power parameter
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	2109      	movs	r1, #9
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff fe31 	bl	8000f64 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8001302:	220b      	movs	r2, #11
 8001304:	210b      	movs	r1, #11
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fe2c 	bl	8000f64 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 800130c:	2223      	movs	r2, #35	; 0x23
 800130e:	210c      	movs	r1, #12
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff fe27 	bl	8000f64 <SX1278_SPIWrite>

	//SX1278_SPIWrite(module, 0x1f, 0x00);		//disable preamble detect
	//SX1278_SPIWrite(module, 0x27, 0b10000000);		//disable sync word

	SX1278_SPIWrite(module, 0x30, 0b1000);     //Fixed length, packetformat = 0
 8001316:	2208      	movs	r2, #8
 8001318:	2130      	movs	r1, #48	; 0x30
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fe22 	bl	8000f64 <SX1278_SPIWrite>
	// set datarate
	//datarate 9c40 = 800bps

	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001320:	2201      	movs	r2, #1
 8001322:	2141      	movs	r1, #65	; 0x41
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fe1d 	bl	8000f64 <SX1278_SPIWrite>
	module->readBytes = 0;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f806 	bl	8001344 <SX1278_standby>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	080086f0 	.word	0x080086f0

08001344 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 800134c:	2209      	movs	r2, #9
 800134e:	2101      	movs	r1, #1
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fe07 	bl	8000f64 <SX1278_SPIWrite>
	module->status = STANDBY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	725a      	strb	r2, [r3, #9]
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 800136c:	2208      	movs	r2, #8
 800136e:	2101      	movs	r1, #1
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fdf7 	bl	8000f64 <SX1278_SPIWrite>
	module->status = SLEEP;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	725a      	strb	r2, [r3, #9]
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 800138c:	2288      	movs	r2, #136	; 0x88
 800138e:	2101      	movs	r1, #1
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff fde7 	bl	8000f64 <SX1278_SPIWrite>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80013a6:	22ff      	movs	r2, #255	; 0xff
 80013a8:	2112      	movs	r1, #18
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fdda 	bl	8000f64 <SX1278_SPIWrite>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <SX1278_FSK_EntryRx>:

int SX1278_FSK_EntryRx(SX1278_t * module, uint8_t length) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
	module->packetLength = length;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	78fa      	ldrb	r2, [r7, #3]
 80013c8:	721a      	strb	r2, [r3, #8]

	SX1278_FSK_Config(module); // set base parameters
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ff84 	bl	80012d8 <SX1278_FSK_Config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80013d0:	2284      	movs	r2, #132	; 0x84
 80013d2:	214d      	movs	r1, #77	; 0x4d
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fdc5 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80013da:	2201      	movs	r2, #1
 80013dc:	2140      	movs	r1, #64	; 0x40
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fdc0 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x05, 0x52); // 5kHz freq deviation
 80013e4:	2252      	movs	r2, #82	; 0x52
 80013e6:	2105      	movs	r1, #5
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fdbb 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x32, length); //Payload Length 8 bytes
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	461a      	mov	r2, r3
 80013f2:	2132      	movs	r1, #50	; 0x32
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fdb5 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1101);	//Mode//Low Frequency Mode
 80013fa:	220d      	movs	r2, #13
 80013fc:	2101      	movs	r1, #1
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fdb0 	bl	8000f64 <SX1278_SPIWrite>
	module->readBytes = 0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	return 1;
 800140c:	2301      	movs	r3, #1
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <SX1278_FSK_EntryTx>:

int SX1278_FSK_EntryTx(SX1278_t * module, uint8_t length) {
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	460b      	mov	r3, r1
 8001420:	70fb      	strb	r3, [r7, #3]
	module->packetLength = length;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	721a      	strb	r2, [r3, #8]

	SX1278_FSK_Config(module); // set base parameters
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff55 	bl	80012d8 <SX1278_FSK_Config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);//0x87);	//Normal and RX
 800142e:	2284      	movs	r2, #132	; 0x84
 8001430:	214d      	movs	r1, #77	; 0x4d
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fd96 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41);
 8001438:	2241      	movs	r2, #65	; 0x41
 800143a:	2140      	movs	r1, #64	; 0x40
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fd91 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegFdevLsb, 0x52); // 5kHz freq deviation
 8001442:	2252      	movs	r2, #82	; 0x52
 8001444:	2105      	movs	r1, #5
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fd8c 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegPayloadLength, length); //Payload Length 8 bytes
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	461a      	mov	r2, r3
 8001450:	2132      	movs	r1, #50	; 0x32
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fd86 	bl	8000f64 <SX1278_SPIWrite>
	//	SX1278_SPIWrite(module, RegBitRateLsb, 0x2B);	// 1200 bps
	//	SX1278_SPIWrite(module, RegBitRateMsb, 0x68);
	SX1278_SPIWrite(module, RegFifoThresh, length - 1);     //Fixed length, packetformat = 0
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	3b01      	subs	r3, #1
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	2135      	movs	r1, #53	; 0x35
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fd7e 	bl	8000f64 <SX1278_SPIWrite>


	module->readBytes = 0;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	SX1278_hw_DelayMs(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff fd4d 	bl	8000f10 <SX1278_hw_DelayMs>
	return 1;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	460b      	mov	r3, r1
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	7afa      	ldrb	r2, [r7, #11]
 8001492:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff fdc9 	bl	800102c <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800149a:	2284      	movs	r2, #132	; 0x84
 800149c:	214d      	movs	r1, #77	; 0x4d
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f7ff fd60 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80014a4:	22ff      	movs	r2, #255	; 0xff
 80014a6:	2124      	movs	r1, #36	; 0x24
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f7ff fd5b 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80014ae:	2201      	movs	r2, #1
 80014b0:	2140      	movs	r1, #64	; 0x40
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f7ff fd56 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 80014b8:	223f      	movs	r2, #63	; 0x3f
 80014ba:	2111      	movs	r1, #17
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f7ff fd51 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f7ff ff6b 	bl	800139e <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	461a      	mov	r2, r3
 80014cc:	2122      	movs	r1, #34	; 0x22
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff fd48 	bl	8000f64 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 80014d4:	210f      	movs	r1, #15
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f7ff fd25 	bl	8000f26 <SX1278_SPIRead>
 80014dc:	4603      	mov	r3, r0
 80014de:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	461a      	mov	r2, r3
 80014e4:	210d      	movs	r1, #13
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff fd3c 	bl	8000f64 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80014ec:	228d      	movs	r2, #141	; 0x8d
 80014ee:	2101      	movs	r1, #1
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff fd37 	bl	8000f64 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80014fe:	2118      	movs	r1, #24
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f7ff fd10 	bl	8000f26 <SX1278_SPIRead>
 8001506:	4603      	mov	r3, r0
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b04      	cmp	r3, #4
 800150e:	d104      	bne.n	800151a <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2203      	movs	r2, #3
 8001514:	725a      	strb	r2, [r3, #9]
			return 1;
 8001516:	2301      	movs	r3, #1
 8001518:	e013      	b.n	8001542 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3b01      	subs	r3, #1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d109      	bne.n	800153a <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fc86 	bl	8000e3c <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff fd7b 	bl	800102c <SX1278_defaultConfig>
			return 0;
 8001536:	2300      	movs	r3, #0
 8001538:	e003      	b.n	8001542 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 800153a:	2001      	movs	r0, #1
 800153c:	f7ff fce8 	bl	8000f10 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001540:	e7dd      	b.n	80014fe <SX1278_LoRaEntryRx+0x7e>
	}
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <SX1278_FSK_TxPacket>:
			return 0;
		}
	}
}

int SX1278_FSK_TxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length, uint32_t timeout) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	4613      	mov	r3, r2
 800155a:	71fb      	strb	r3, [r7, #7]
    uint8_t gotResponse = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	77fb      	strb	r3, [r7, #31]
	uint32_t tickstart = HAL_GetTick();
 8001560:	f002 fa32 	bl	80039c8 <HAL_GetTick>
 8001564:	6178      	str	r0, [r7, #20]
	uint32_t wait = timeout;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	61bb      	str	r3, [r7, #24]
	uint8_t temp = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	74fb      	strb	r3, [r7, #19]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY){
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d005      	beq.n	8001582 <SX1278_FSK_TxPacket+0x36>
		wait += (uint32_t)(uwTickFreq);
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <SX1278_FSK_TxPacket+0x9c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	4413      	add	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
	}

	SX1278_FSK_EntryTx(module, length);
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	4619      	mov	r1, r3
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f7ff ff45 	bl	8001416 <SX1278_FSK_EntryTx>

	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	2100      	movs	r1, #0
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff fd0f 	bl	8000fb6 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);	//Mode//Low Frequency Mode
 8001598:	220b      	movs	r2, #11
 800159a:	2101      	movs	r1, #1
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f7ff fce1 	bl	8000f64 <SX1278_SPIWrite>

	while(!gotResponse){
 80015a2:	e014      	b.n	80015ce <SX1278_FSK_TxPacket+0x82>
	    temp = SX1278_SPIRead(module, RegIrqFlags2); // check if fifo sent is set
 80015a4:	213f      	movs	r1, #63	; 0x3f
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f7ff fcbd 	bl	8000f26 <SX1278_SPIRead>
 80015ac:	4603      	mov	r3, r0
 80015ae:	74fb      	strb	r3, [r7, #19]
	    if(temp & 0b1000){
 80015b0:	7cfb      	ldrb	r3, [r7, #19]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SX1278_FSK_TxPacket+0x72>
	    	gotResponse =  1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	77fb      	strb	r3, [r7, #31]
	    }
		if((HAL_GetTick() - tickstart) >= wait){
 80015be:	f002 fa03 	bl	80039c8 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d903      	bls.n	80015d6 <SX1278_FSK_TxPacket+0x8a>
	while(!gotResponse){
 80015ce:	7ffb      	ldrb	r3, [r7, #31]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0e7      	beq.n	80015a4 <SX1278_FSK_TxPacket+0x58>
 80015d4:	e000      	b.n	80015d8 <SX1278_FSK_TxPacket+0x8c>
			break;								// timeout happened
 80015d6:	bf00      	nop
		}
	}
	SX1278_standby(module);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff feb3 	bl	8001344 <SX1278_standby>
	return gotResponse;
 80015de:	7ffb      	ldrb	r3, [r7, #31]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000028 	.word	0x20000028

080015ec <SX1278_FSK_RxPacket>:

int SX1278_FSK_RxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length, uint32_t timeout) {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b08b      	sub	sp, #44	; 0x2c
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71fb      	strb	r3, [r7, #7]
    uint8_t gotResponse = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t tickstart = HAL_GetTick();
 8001602:	f002 f9e1 	bl	80039c8 <HAL_GetTick>
 8001606:	61b8      	str	r0, [r7, #24]
	uint32_t wait = timeout;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	623b      	str	r3, [r7, #32]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY){
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001612:	d005      	beq.n	8001620 <SX1278_FSK_RxPacket+0x34>
		wait += (uint32_t)(uwTickFreq);
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <SX1278_FSK_RxPacket+0xb8>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	4413      	add	r3, r2
 800161e:	623b      	str	r3, [r7, #32]
	}

	uint8_t temp = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	75fb      	strb	r3, [r7, #23]

	while(!gotResponse){
 8001624:	e031      	b.n	800168a <SX1278_FSK_RxPacket+0x9e>
		temp = SX1278_SPIRead(module, 0x3f);
 8001626:	213f      	movs	r1, #63	; 0x3f
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff fc7c 	bl	8000f26 <SX1278_SPIRead>
 800162e:	4603      	mov	r3, r0
 8001630:	75fb      	strb	r3, [r7, #23]

	    if((temp & 0b100) && temp != 255){
 8001632:	7dfb      	ldrb	r3, [r7, #23]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01e      	beq.n	800167a <SX1278_FSK_RxPacket+0x8e>
 800163c:	7dfb      	ldrb	r3, [r7, #23]
 800163e:	2bff      	cmp	r3, #255	; 0xff
 8001640:	d01b      	beq.n	800167a <SX1278_FSK_RxPacket+0x8e>
	    	gotResponse = 1;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    	for(uint8_t i = 0; i < length; i++){
 8001648:	2300      	movs	r3, #0
 800164a:	77fb      	strb	r3, [r7, #31]
 800164c:	e00b      	b.n	8001666 <SX1278_FSK_RxPacket+0x7a>
	    		txBuffer[i] = SX1278_SPIRead(module, RegFIFO);
 800164e:	7ffb      	ldrb	r3, [r7, #31]
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	18d4      	adds	r4, r2, r3
 8001654:	2100      	movs	r1, #0
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f7ff fc65 	bl	8000f26 <SX1278_SPIRead>
 800165c:	4603      	mov	r3, r0
 800165e:	7023      	strb	r3, [r4, #0]
	    	for(uint8_t i = 0; i < length; i++){
 8001660:	7ffb      	ldrb	r3, [r7, #31]
 8001662:	3301      	adds	r3, #1
 8001664:	77fb      	strb	r3, [r7, #31]
 8001666:	7ffa      	ldrb	r2, [r7, #31]
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	429a      	cmp	r2, r3
 800166c:	d3ef      	bcc.n	800164e <SX1278_FSK_RxPacket+0x62>
	    	}
	    	temp = SX1278_SPIRead(module, RegIrqFlags2);
 800166e:	213f      	movs	r1, #63	; 0x3f
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f7ff fc58 	bl	8000f26 <SX1278_SPIRead>
 8001676:	4603      	mov	r3, r0
 8001678:	75fb      	strb	r3, [r7, #23]

	    }

		if((HAL_GetTick() - tickstart) >= wait){
 800167a:	f002 f9a5 	bl	80039c8 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	6a3a      	ldr	r2, [r7, #32]
 8001686:	429a      	cmp	r2, r3
 8001688:	d904      	bls.n	8001694 <SX1278_FSK_RxPacket+0xa8>
	while(!gotResponse){
 800168a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0c9      	beq.n	8001626 <SX1278_FSK_RxPacket+0x3a>
 8001692:	e000      	b.n	8001696 <SX1278_FSK_RxPacket+0xaa>
			break;								// timeout happened
 8001694:	bf00      	nop
		}
	}

	return gotResponse;
 8001696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800169a:	4618      	mov	r0, r3
 800169c:	372c      	adds	r7, #44	; 0x2c
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000028 	.word	0x20000028

080016a8 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	4608      	mov	r0, r1
 80016b2:	4611      	mov	r1, r2
 80016b4:	461a      	mov	r2, r3
 80016b6:	4603      	mov	r3, r0
 80016b8:	70fb      	strb	r3, [r7, #3]
 80016ba:	460b      	mov	r3, r1
 80016bc:	70bb      	strb	r3, [r7, #2]
 80016be:	4613      	mov	r3, r2
 80016c0:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fb8c 	bl	8000de4 <SX1278_hw_init>
	module->frequency = frequency;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	78fa      	ldrb	r2, [r7, #3]
 80016d0:	711a      	strb	r2, [r3, #4]
	module->power = power;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	78ba      	ldrb	r2, [r7, #2]
 80016d6:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	787a      	ldrb	r2, [r7, #1]
 80016dc:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7c3a      	ldrb	r2, [r7, #16]
 80016e2:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7d3a      	ldrb	r2, [r7, #20]
 80016e8:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff fc9e 	bl	800102c <SX1278_defaultConfig>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <GPS_Receive>:
// "00.358"



/* Pass uint8_t of received data */
void GPS_Receive(uint8_t data){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
	if(data == '$'){
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	2b24      	cmp	r3, #36	; 0x24
 8001706:	d103      	bne.n	8001710 <GPS_Receive+0x18>
		gpsTempLen = 0;
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <GPS_Receive+0x68>)
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
		gpsTempLen = 255;
	}else if(gpsTempLen != 255){
		gpsTemp[gpsTempLen] = data;
		gpsTempLen++;
	}
}
 800170e:	e023      	b.n	8001758 <GPS_Receive+0x60>
	}else if((data == 13 || data == 10) && gpsTempLen != 255){
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b0d      	cmp	r3, #13
 8001714:	d002      	beq.n	800171c <GPS_Receive+0x24>
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2b0a      	cmp	r3, #10
 800171a:	d10d      	bne.n	8001738 <GPS_Receive+0x40>
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <GPS_Receive+0x68>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2bff      	cmp	r3, #255	; 0xff
 8001722:	d009      	beq.n	8001738 <GPS_Receive+0x40>
		GPS_Parse(gpsTemp, gpsTempLen);
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <GPS_Receive+0x68>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	480e      	ldr	r0, [pc, #56]	; (8001764 <GPS_Receive+0x6c>)
 800172c:	f000 f81c 	bl	8001768 <GPS_Parse>
		gpsTempLen = 255;
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <GPS_Receive+0x68>)
 8001732:	22ff      	movs	r2, #255	; 0xff
 8001734:	701a      	strb	r2, [r3, #0]
}
 8001736:	e00f      	b.n	8001758 <GPS_Receive+0x60>
	}else if(gpsTempLen != 255){
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <GPS_Receive+0x68>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2bff      	cmp	r3, #255	; 0xff
 800173e:	d00b      	beq.n	8001758 <GPS_Receive+0x60>
		gpsTemp[gpsTempLen] = data;
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <GPS_Receive+0x68>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	4a07      	ldr	r2, [pc, #28]	; (8001764 <GPS_Receive+0x6c>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	5453      	strb	r3, [r2, r1]
		gpsTempLen++;
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <GPS_Receive+0x68>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <GPS_Receive+0x68>)
 8001756:	701a      	strb	r2, [r3, #0]
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000000 	.word	0x20000000
 8001764:	20000170 	.word	0x20000170

08001768 <GPS_Parse>:

/* parses received frame */
uint8_t GPS_Parse(uint8_t *buf, uint8_t len){
 8001768:	b580      	push	{r7, lr}
 800176a:	b090      	sub	sp, #64	; 0x40
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
	if(strncmp("GPGGA", (char *)buf, 5) == 0){ // get coordinates and height
 8001774:	2205      	movs	r2, #5
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	48cb      	ldr	r0, [pc, #812]	; (8001aa8 <GPS_Parse+0x340>)
 800177a:	f006 fb51 	bl	8007e20 <strncmp>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	f040 8151 	bne.w	8001a28 <GPS_Parse+0x2c0>
		if(GPS_CheckSum(buf, len) == GPS_OK){
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	4619      	mov	r1, r3
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f9e6 	bl	8001b5c <GPS_CheckSum>
 8001790:	4603      	mov	r3, r0
 8001792:	2b01      	cmp	r3, #1
 8001794:	f040 8146 	bne.w	8001a24 <GPS_Parse+0x2bc>
			uint8_t step = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			uint8_t i = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			while(step < 8){
 80017a4:	e131      	b.n	8001a0a <GPS_Parse+0x2a2>
				if(buf[i] == ','){
 80017a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b2c      	cmp	r3, #44	; 0x2c
 80017b2:	f040 8125 	bne.w	8001a00 <GPS_Parse+0x298>
					i++;
 80017b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017ba:	3301      	adds	r3, #1
 80017bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					step++;
 80017c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017c4:	3301      	adds	r3, #1
 80017c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					if(step == 1){
 80017ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d13e      	bne.n	8001850 <GPS_Parse+0xe8>
						uint8_t tempData[6] = {0};
 80017d2:	2300      	movs	r3, #0
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
 80017d6:	2300      	movs	r3, #0
 80017d8:	86bb      	strh	r3, [r7, #52]	; 0x34
						uint8_t leng = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
						while(buf[i] != '.'){
 80017e0:	e015      	b.n	800180e <GPS_Parse+0xa6>
							tempData[leng] = buf[i];
 80017e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	441a      	add	r2, r3
 80017ea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017ee:	7812      	ldrb	r2, [r2, #0]
 80017f0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80017f4:	440b      	add	r3, r1
 80017f6:	f803 2c10 	strb.w	r2, [r3, #-16]
							leng++;
 80017fa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017fe:	3301      	adds	r3, #1
 8001800:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
							i++;
 8001804:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001808:	3301      	adds	r3, #1
 800180a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						while(buf[i] != '.'){
 800180e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b2e      	cmp	r3, #46	; 0x2e
 800181a:	d1e2      	bne.n	80017e2 <GPS_Parse+0x7a>
						}
						if(leng == 0){
 800181c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <GPS_Parse+0xc0>
							return GPS_NOK;
 8001824:	2300      	movs	r3, #0
 8001826:	e193      	b.n	8001b50 <GPS_Parse+0x3e8>
						}
						memset(gpsTime, '0', 6);
 8001828:	2206      	movs	r2, #6
 800182a:	2130      	movs	r1, #48	; 0x30
 800182c:	489f      	ldr	r0, [pc, #636]	; (8001aac <GPS_Parse+0x344>)
 800182e:	f006 fa9b 	bl	8007d68 <memset>
						memcpy(gpsTime + (6-leng), tempData, leng);
 8001832:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001836:	f1c3 0306 	rsb	r3, r3, #6
 800183a:	461a      	mov	r2, r3
 800183c:	4b9b      	ldr	r3, [pc, #620]	; (8001aac <GPS_Parse+0x344>)
 800183e:	4413      	add	r3, r2
 8001840:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001844:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001848:	4618      	mov	r0, r3
 800184a:	f006 fa7f 	bl	8007d4c <memcpy>
 800184e:	e0d7      	b.n	8001a00 <GPS_Parse+0x298>
					}else if(step == 2 || step == 3){
 8001850:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001854:	2b02      	cmp	r3, #2
 8001856:	d004      	beq.n	8001862 <GPS_Parse+0xfa>
 8001858:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800185c:	2b03      	cmp	r3, #3
 800185e:	f040 8085 	bne.w	800196c <GPS_Parse+0x204>
						uint8_t tempData[12] = {0};
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
 8001866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
						uint8_t leng = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
						while(buf[i] != ','){
 8001876:	e015      	b.n	80018a4 <GPS_Parse+0x13c>
							tempData[leng] = buf[i];
 8001878:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	441a      	add	r2, r3
 8001880:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800188a:	440b      	add	r3, r1
 800188c:	f803 2c1c 	strb.w	r2, [r3, #-28]
							leng++;
 8001890:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001894:	3301      	adds	r3, #1
 8001896:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							i++;
 800189a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800189e:	3301      	adds	r3, #1
 80018a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						while(buf[i] != ','){
 80018a4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b2c      	cmp	r3, #44	; 0x2c
 80018b0:	d1e2      	bne.n	8001878 <GPS_Parse+0x110>
						}
						if(leng == 0){
 80018b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <GPS_Parse+0x156>
							return GPS_NOK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e148      	b.n	8001b50 <GPS_Parse+0x3e8>
						}
						i++;
 80018be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018c2:	3301      	adds	r3, #1
 80018c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						if(buf[i] == 'N' || buf[i] == 'S' || buf[i] == 'E' || buf[i] == 'W'){
 80018c8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b4e      	cmp	r3, #78	; 0x4e
 80018d4:	d014      	beq.n	8001900 <GPS_Parse+0x198>
 80018d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b53      	cmp	r3, #83	; 0x53
 80018e2:	d00d      	beq.n	8001900 <GPS_Parse+0x198>
 80018e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b45      	cmp	r3, #69	; 0x45
 80018f0:	d006      	beq.n	8001900 <GPS_Parse+0x198>
 80018f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b57      	cmp	r3, #87	; 0x57
 80018fe:	d133      	bne.n	8001968 <GPS_Parse+0x200>
							memset((gpsData + (step - 2) * 12), '0', 12);
 8001900:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001904:	1e9a      	subs	r2, r3, #2
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	461a      	mov	r2, r3
 8001910:	4b67      	ldr	r3, [pc, #412]	; (8001ab0 <GPS_Parse+0x348>)
 8001912:	4413      	add	r3, r2
 8001914:	220c      	movs	r2, #12
 8001916:	2130      	movs	r1, #48	; 0x30
 8001918:	4618      	mov	r0, r3
 800191a:	f006 fa25 	bl	8007d68 <memset>
							gpsData[(step - 2) * 12 + 11] = buf[i];
 800191e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	18d1      	adds	r1, r2, r3
 8001926:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800192a:	1e9a      	subs	r2, r3, #2
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	330b      	adds	r3, #11
 8001936:	7809      	ldrb	r1, [r1, #0]
 8001938:	4a5d      	ldr	r2, [pc, #372]	; (8001ab0 <GPS_Parse+0x348>)
 800193a:	54d1      	strb	r1, [r2, r3]
						}else{
							return GPS_NOK;
						}
						memcpy(gpsData + (step - 2) * 12 + (11 - leng), tempData, leng);
 800193c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001940:	1e9a      	subs	r2, r3, #2
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	461a      	mov	r2, r3
 800194c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	330b      	adds	r3, #11
 8001954:	4a56      	ldr	r2, [pc, #344]	; (8001ab0 <GPS_Parse+0x348>)
 8001956:	4413      	add	r3, r2
 8001958:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800195c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001960:	4618      	mov	r0, r3
 8001962:	f006 f9f3 	bl	8007d4c <memcpy>
					}else if(step == 2 || step == 3){
 8001966:	e04b      	b.n	8001a00 <GPS_Parse+0x298>
							return GPS_NOK;
 8001968:	2300      	movs	r3, #0
 800196a:	e0f1      	b.n	8001b50 <GPS_Parse+0x3e8>
					}else if(step == 7){
 800196c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001970:	2b07      	cmp	r3, #7
 8001972:	d145      	bne.n	8001a00 <GPS_Parse+0x298>
						i++;
 8001974:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001978:	3301      	adds	r3, #1
 800197a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						uint8_t tempData[12] = {0};
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
						uint8_t leng = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						while(buf[i] != ','){
 8001992:	e015      	b.n	80019c0 <GPS_Parse+0x258>
							tempData[leng] = buf[i];
 8001994:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	441a      	add	r2, r3
 800199c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80019a6:	440b      	add	r3, r1
 80019a8:	f803 2c28 	strb.w	r2, [r3, #-40]
							leng++;
 80019ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019b0:	3301      	adds	r3, #1
 80019b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							i++;
 80019b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80019ba:	3301      	adds	r3, #1
 80019bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						while(buf[i] != ','){
 80019c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b2c      	cmp	r3, #44	; 0x2c
 80019cc:	d1e2      	bne.n	8001994 <GPS_Parse+0x22c>
						}
						if(leng == 0){
 80019ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <GPS_Parse+0x272>
							return GPS_NOK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e0ba      	b.n	8001b50 <GPS_Parse+0x3e8>
						}
						memset(gpsHeight, '0', 8);
 80019da:	2208      	movs	r2, #8
 80019dc:	2130      	movs	r1, #48	; 0x30
 80019de:	4835      	ldr	r0, [pc, #212]	; (8001ab4 <GPS_Parse+0x34c>)
 80019e0:	f006 f9c2 	bl	8007d68 <memset>
						memcpy(gpsHeight + (8-leng), tempData, leng);
 80019e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019e8:	f1c3 0308 	rsb	r3, r3, #8
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <GPS_Parse+0x34c>)
 80019f0:	4413      	add	r3, r2
 80019f2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80019f6:	f107 0118 	add.w	r1, r7, #24
 80019fa:	4618      	mov	r0, r3
 80019fc:	f006 f9a6 	bl	8007d4c <memcpy>
					}
				}
				i++;
 8001a00:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001a04:	3301      	adds	r3, #1
 8001a06:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			while(step < 8){
 8001a0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001a0e:	2b07      	cmp	r3, #7
 8001a10:	f67f aec9 	bls.w	80017a6 <GPS_Parse+0x3e>
			}
			isNewData = 1;
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <GPS_Parse+0x350>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
			isData = 1;
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <GPS_Parse+0x354>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
			return GPS_OK;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e095      	b.n	8001b50 <GPS_Parse+0x3e8>
		}else{
			return GPS_NOK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e093      	b.n	8001b50 <GPS_Parse+0x3e8>
		}


	}else if(strncmp("GPVTG", (char *)buf, 5) == 0){ // get speed in km/h
 8001a28:	2205      	movs	r2, #5
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4824      	ldr	r0, [pc, #144]	; (8001ac0 <GPS_Parse+0x358>)
 8001a2e:	f006 f9f7 	bl	8007e20 <strncmp>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f040 8088 	bne.w	8001b4a <GPS_Parse+0x3e2>
		if(GPS_CheckSum(buf, len) == GPS_OK){
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f88c 	bl	8001b5c <GPS_CheckSum>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d17d      	bne.n	8001b46 <GPS_Parse+0x3de>
			if(GPS_CheckSum(buf, len) == GPS_OK){
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f884 	bl	8001b5c <GPS_CheckSum>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d179      	bne.n	8001b4e <GPS_Parse+0x3e6>
				uint8_t step = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				uint8_t i = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				while(step < 8){
 8001a66:	e068      	b.n	8001b3a <GPS_Parse+0x3d2>
					if(buf[i] == ','){
 8001a68:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b2c      	cmp	r3, #44	; 0x2c
 8001a74:	d15c      	bne.n	8001b30 <GPS_Parse+0x3c8>
						step++;
 8001a76:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						if(step == 7){
 8001a80:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001a84:	2b07      	cmp	r3, #7
 8001a86:	d153      	bne.n	8001b30 <GPS_Parse+0x3c8>
							i++;
 8001a88:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
							uint8_t tempData[12] = {0};
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
							uint8_t leng = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							while(buf[i] != ','){
 8001aa6:	e023      	b.n	8001af0 <GPS_Parse+0x388>
 8001aa8:	0800865c 	.word	0x0800865c
 8001aac:	200000d4 	.word	0x200000d4
 8001ab0:	200000ac 	.word	0x200000ac
 8001ab4:	200000c4 	.word	0x200000c4
 8001ab8:	200000db 	.word	0x200000db
 8001abc:	200000da 	.word	0x200000da
 8001ac0:	08008664 	.word	0x08008664
								tempData[leng] = buf[i];
 8001ac4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	441a      	add	r2, r3
 8001acc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ad0:	7812      	ldrb	r2, [r2, #0]
 8001ad2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f803 2c34 	strb.w	r2, [r3, #-52]
								leng++;
 8001adc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
								i++;
 8001ae6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001aea:	3301      	adds	r3, #1
 8001aec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
							while(buf[i] != ','){
 8001af0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b2c      	cmp	r3, #44	; 0x2c
 8001afc:	d1e2      	bne.n	8001ac4 <GPS_Parse+0x35c>
							}
							if(leng == 0){
 8001afe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <GPS_Parse+0x3a2>
								return GPS_NOK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e022      	b.n	8001b50 <GPS_Parse+0x3e8>
							}
							memset(gpsSpeed, '0', 6);
 8001b0a:	2206      	movs	r2, #6
 8001b0c:	2130      	movs	r1, #48	; 0x30
 8001b0e:	4812      	ldr	r0, [pc, #72]	; (8001b58 <GPS_Parse+0x3f0>)
 8001b10:	f006 f92a 	bl	8007d68 <memset>
							memcpy(gpsSpeed + (6-leng), tempData, leng);
 8001b14:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b18:	f1c3 0306 	rsb	r3, r3, #6
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <GPS_Parse+0x3f0>)
 8001b20:	4413      	add	r3, r2
 8001b22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001b26:	f107 010c 	add.w	r1, r7, #12
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f006 f90e 	bl	8007d4c <memcpy>
						}
					}
					i++;
 8001b30:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001b34:	3301      	adds	r3, #1
 8001b36:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				while(step < 8){
 8001b3a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001b3e:	2b07      	cmp	r3, #7
 8001b40:	d992      	bls.n	8001a68 <GPS_Parse+0x300>
				}
			return GPS_OK;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e004      	b.n	8001b50 <GPS_Parse+0x3e8>
			}
		}else{
			return GPS_NOK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e002      	b.n	8001b50 <GPS_Parse+0x3e8>
		}
	}else{
		return GPS_NOK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e000      	b.n	8001b50 <GPS_Parse+0x3e8>
	}
	return GPS_NOK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3740      	adds	r7, #64	; 0x40
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200000cc 	.word	0x200000cc

08001b5c <GPS_CheckSum>:

/* checks checksum returns GPS_ok if data is valid*/
uint8_t GPS_CheckSum(uint8_t *buf, uint8_t len){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	70fb      	strb	r3, [r7, #3]
	uint8_t sum;
	uint8_t check = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]

	if(GPS_HexToByte((buf + len - 2), &sum) != GPS_OK){
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	3b02      	subs	r3, #2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	4413      	add	r3, r2
 8001b74:	f107 020d 	add.w	r2, r7, #13
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f822 	bl	8001bc4 <GPS_HexToByte>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d001      	beq.n	8001b8a <GPS_CheckSum+0x2e>
		return GPS_NOK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e018      	b.n	8001bbc <GPS_CheckSum+0x60>
	}

	for(uint8_t i = 0; i < (len - 3); i++){
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73bb      	strb	r3, [r7, #14]
 8001b8e:	e009      	b.n	8001ba4 <GPS_CheckSum+0x48>
		check ^= buf[i];
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	4053      	eors	r3, r2
 8001b9c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < (len - 3); i++){
 8001b9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	73bb      	strb	r3, [r7, #14]
 8001ba4:	7bba      	ldrb	r2, [r7, #14]
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dbf0      	blt.n	8001b90 <GPS_CheckSum+0x34>
	}

	if(check == sum){
 8001bae:	7b7b      	ldrb	r3, [r7, #13]
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d101      	bne.n	8001bba <GPS_CheckSum+0x5e>
		return GPS_OK;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <GPS_CheckSum+0x60>
	}

	return GPS_NOK;
 8001bba:	2300      	movs	r3, #0

}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <GPS_HexToByte>:

/* converts hex string e.g. AB (0xAB) to byte value writes to value, returns GPS_OK if valid hex */
uint8_t GPS_HexToByte(uint8_t *hex, uint8_t *value){
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	uint8_t temp[2];

	for(uint8_t i = 0; i < 2; i++){
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e04c      	b.n	8001c6e <GPS_HexToByte+0xaa>
		temp[i] = hex[i];
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	441a      	add	r2, r3
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	f107 0110 	add.w	r1, r7, #16
 8001be2:	440b      	add	r3, r1
 8001be4:	f803 2c04 	strb.w	r2, [r3, #-4]
		if(temp[i] > 47 && temp[i] < 58){
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	f107 0210 	add.w	r2, r7, #16
 8001bee:	4413      	add	r3, r2
 8001bf0:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8001bf4:	2b2f      	cmp	r3, #47	; 0x2f
 8001bf6:	d916      	bls.n	8001c26 <GPS_HexToByte+0x62>
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	f107 0210 	add.w	r2, r7, #16
 8001bfe:	4413      	add	r3, r2
 8001c00:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8001c04:	2b39      	cmp	r3, #57	; 0x39
 8001c06:	d80e      	bhi.n	8001c26 <GPS_HexToByte+0x62>
			temp[i] -= 48;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	f107 0210 	add.w	r2, r7, #16
 8001c0e:	4413      	add	r3, r2
 8001c10:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	3a30      	subs	r2, #48	; 0x30
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f107 0110 	add.w	r1, r7, #16
 8001c1e:	440b      	add	r3, r1
 8001c20:	f803 2c04 	strb.w	r2, [r3, #-4]
 8001c24:	e020      	b.n	8001c68 <GPS_HexToByte+0xa4>
		}else if(temp[i] > 64 && temp[i] < 71){
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	f107 0210 	add.w	r2, r7, #16
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8001c32:	2b40      	cmp	r3, #64	; 0x40
 8001c34:	d916      	bls.n	8001c64 <GPS_HexToByte+0xa0>
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	f107 0210 	add.w	r2, r7, #16
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8001c42:	2b46      	cmp	r3, #70	; 0x46
 8001c44:	d80e      	bhi.n	8001c64 <GPS_HexToByte+0xa0>
			temp[i] -= 55;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	f107 0210 	add.w	r2, r7, #16
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	3a37      	subs	r2, #55	; 0x37
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f107 0110 	add.w	r1, r7, #16
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f803 2c04 	strb.w	r2, [r3, #-4]
 8001c62:	e001      	b.n	8001c68 <GPS_HexToByte+0xa4>
		}else{
			return GPS_NOK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e00e      	b.n	8001c86 <GPS_HexToByte+0xc2>
	for(uint8_t i = 0; i < 2; i++){
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d9af      	bls.n	8001bd4 <GPS_HexToByte+0x10>
		}
	}

	*value = (temp[0] << 4) + temp[1];
 8001c74:	7b3b      	ldrb	r3, [r7, #12]
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	7b7b      	ldrb	r3, [r7, #13]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	701a      	strb	r2, [r3, #0]

	return GPS_OK;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <GPS_GetLat>:

/* Returns latitude of length 12...9*/
void GPS_GetLat(uint8_t *buf){
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <GPS_GetLat+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e00a      	b.n	8001cbe <GPS_GetLat+0x2a>
		buf[i - 1] = gpsData[i];
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	4909      	ldr	r1, [pc, #36]	; (8001cd8 <GPS_GetLat+0x44>)
 8001cb4:	5c8a      	ldrb	r2, [r1, r2]
 8001cb6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	2b09      	cmp	r3, #9
 8001cc2:	d9f1      	bls.n	8001ca8 <GPS_GetLat+0x14>
	}
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200000db 	.word	0x200000db
 8001cd8:	200000ac 	.word	0x200000ac

08001cdc <GPS_GetLon>:

/* Returns longitude of length 12...9*/
void GPS_GetLon(uint8_t *buf){
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <GPS_GetLon+0x44>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	e00c      	b.n	8001d0a <GPS_GetLon+0x2e>
		buf[i - 1] = gpsData[i + 12];
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	f103 020c 	add.w	r2, r3, #12
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	440b      	add	r3, r1
 8001cfe:	4909      	ldr	r1, [pc, #36]	; (8001d24 <GPS_GetLon+0x48>)
 8001d00:	5c8a      	ldrb	r2, [r1, r2]
 8001d02:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	3301      	adds	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d9ef      	bls.n	8001cf0 <GPS_GetLon+0x14>
	}
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	200000db 	.word	0x200000db
 8001d24:	200000ac 	.word	0x200000ac

08001d28 <GPS_GetSpe>:

/* Returns speed of length 6*/
void GPS_GetSpe(uint8_t *buf){
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <GPS_GetSpe+0x3c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++){
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e009      	b.n	8001d50 <GPS_GetSpe+0x28>
		buf[i] = gpsSpeed[i];
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	440b      	add	r3, r1
 8001d44:	4908      	ldr	r1, [pc, #32]	; (8001d68 <GPS_GetSpe+0x40>)
 8001d46:	5c8a      	ldrb	r2, [r1, r2]
 8001d48:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++){
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	2b05      	cmp	r3, #5
 8001d54:	d9f2      	bls.n	8001d3c <GPS_GetSpe+0x14>
	}
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	200000db 	.word	0x200000db
 8001d68:	200000cc 	.word	0x200000cc

08001d6c <GPS_GetHei>:

/* Returns height of length 8*/
void GPS_GetHei(uint8_t *buf){
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <GPS_GetHei+0x3c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]
	for(; i < 8; i++){
 8001d7e:	e009      	b.n	8001d94 <GPS_GetHei+0x28>
		buf[i] = gpsHeight[i];
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	440b      	add	r3, r1
 8001d88:	4908      	ldr	r1, [pc, #32]	; (8001dac <GPS_GetHei+0x40>)
 8001d8a:	5c8a      	ldrb	r2, [r1, r2]
 8001d8c:	701a      	strb	r2, [r3, #0]
	for(; i < 8; i++){
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	3301      	adds	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b07      	cmp	r3, #7
 8001d98:	d9f2      	bls.n	8001d80 <GPS_GetHei+0x14>
	}
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	200000db 	.word	0x200000db
 8001dac:	200000c4 	.word	0x200000c4

08001db0 <GPS_GetTime>:

/* Returns time of length 8 in format "hh:mm:ss" */
void GPS_GetTime(uint8_t *buf){
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <GPS_GetTime+0x70>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
//	}else if(strcmp((char *)temp_hour, "23") > 1){
//		uint8_t a = strcmp((char *)temp_hour, "23") > 0;
//		temp_hour[0] = (uint8_t) '0';
//		temp_hour[1] = (uint8_t) '1';
//	}
	buf[2] = ':';
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	223a      	movs	r2, #58	; 0x3a
 8001dc4:	701a      	strb	r2, [r3, #0]
	buf[5] = ':';
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3305      	adds	r3, #5
 8001dca:	223a      	movs	r2, #58	; 0x3a
 8001dcc:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++){
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	e01b      	b.n	8001e0c <GPS_GetTime+0x5c>
		//buf[i] = temp_hour[i];
		buf[i] = gpsTime[i];
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	440b      	add	r3, r1
 8001ddc:	4911      	ldr	r1, [pc, #68]	; (8001e24 <GPS_GetTime+0x74>)
 8001dde:	5c8a      	ldrb	r2, [r1, r2]
 8001de0:	701a      	strb	r2, [r3, #0]
		buf[i + 3] = gpsTime[i + 2];
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	1c9a      	adds	r2, r3, #2
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	3303      	adds	r3, #3
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	440b      	add	r3, r1
 8001dee:	490d      	ldr	r1, [pc, #52]	; (8001e24 <GPS_GetTime+0x74>)
 8001df0:	5c8a      	ldrb	r2, [r1, r2]
 8001df2:	701a      	strb	r2, [r3, #0]
		buf[i + 6] = gpsTime[i + 4];
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	1d1a      	adds	r2, r3, #4
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	3306      	adds	r3, #6
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	440b      	add	r3, r1
 8001e00:	4908      	ldr	r1, [pc, #32]	; (8001e24 <GPS_GetTime+0x74>)
 8001e02:	5c8a      	ldrb	r2, [r1, r2]
 8001e04:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++){
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d9e0      	bls.n	8001dd4 <GPS_GetTime+0x24>
	}
}
 8001e12:	bf00      	nop
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	200000db 	.word	0x200000db
 8001e24:	200000d4 	.word	0x200000d4

08001e28 <GPS_IsData>:

/* Returns GPS_OK if got any data */
uint8_t GPS_IsData(){
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
	if(isData){
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <GPS_IsData+0x24>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <GPS_IsData+0x16>
		isData = 0;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <GPS_IsData+0x24>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
		return GPS_OK;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <GPS_IsData+0x18>
	}else{
		return GPS_NOK;
 8001e3e:	2300      	movs	r3, #0
	}
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200000da 	.word	0x200000da

08001e50 <GSM_InitUart>:
#define GSM_MSG_SEND										26				//CTRL + Z
//#define GSM_MSG_SPACE										32				//SPACE


/* pass UART handle that will communicate with GSM module*/
uint8_t GSM_InitUart(UART_HandleTypeDef *huart){
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	uart = huart;
 8001e58:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <GSM_InitUart+0x2c>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6013      	str	r3, [r2, #0]
	if(huart != uart){
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <GSM_InitUart+0x2c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <GSM_InitUart+0x1c>
		return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <GSM_InitUart+0x1e>
	}else{
		return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
	}
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	200001c4 	.word	0x200001c4

08001e80 <GSM_Check_Signal>:

uint8_t GSM_Check_Signal(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
	uint8_t buf[32] = {0};
 8001e86:	2300      	movs	r3, #0
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
 8001e98:	615a      	str	r2, [r3, #20]
 8001e9a:	619a      	str	r2, [r3, #24]
	buf[0] = 'A';
 8001e9c:	2341      	movs	r3, #65	; 0x41
 8001e9e:	703b      	strb	r3, [r7, #0]
	buf[1] = 'T';
 8001ea0:	2354      	movs	r3, #84	; 0x54
 8001ea2:	707b      	strb	r3, [r7, #1]

	GSM_Send(buf, 2);
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f969 	bl	8002180 <GSM_Send>
	GSM_Receive(buf, 9);
 8001eae:	463b      	mov	r3, r7
 8001eb0:	2109      	movs	r1, #9
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f982 	bl	80021bc <GSM_Receive>

	if(GSM_IsOk(buf, 9)){
 8001eb8:	463b      	mov	r3, r7
 8001eba:	2109      	movs	r1, #9
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 f80a 	bl	8001ed6 <GSM_IsOk>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <GSM_Check_Signal+0x4c>
		return 1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <GSM_Check_Signal+0x4e>
	}

	return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3720      	adds	r7, #32
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <GSM_IsOk>:

uint8_t GSM_IsOk(uint8_t *dataBuf, uint8_t size){
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]

	uint8_t i = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]

	for(; i < size; i++){
 8001ee6:	e012      	b.n	8001f0e <GSM_IsOk+0x38>
		if(*dataBuf == 'O'){
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b4f      	cmp	r3, #79	; 0x4f
 8001eee:	d108      	bne.n	8001f02 <GSM_IsOk+0x2c>
			dataBuf++;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	607b      	str	r3, [r7, #4]
			if(*dataBuf == 'K'){
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b4b      	cmp	r3, #75	; 0x4b
 8001efc:	d101      	bne.n	8001f02 <GSM_IsOk+0x2c>
				return 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00a      	b.n	8001f18 <GSM_IsOk+0x42>
			}
		}
		dataBuf++;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3301      	adds	r3, #1
 8001f06:	607b      	str	r3, [r7, #4]
	for(; i < size; i++){
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d3e8      	bcc.n	8001ee8 <GSM_IsOk+0x12>
	}
	return 0;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <GSM_Find>:

uint8_t GSM_Find(uint8_t *dataBuf, uint8_t size, uint8_t *toFind, uint8_t tSize){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	460b      	mov	r3, r1
 8001f32:	72fb      	strb	r3, [r7, #11]
 8001f34:	4613      	mov	r3, r2
 8001f36:	72bb      	strb	r3, [r7, #10]
	uint8_t i = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t f = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t temp[16];

	memcpy(temp, toFind, tSize);
 8001f44:	7aba      	ldrb	r2, [r7, #10]
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f005 fefd 	bl	8007d4c <memcpy>

	for(; i < size; i++){
 8001f52:	e022      	b.n	8001f9a <GSM_Find+0x76>

		if(*dataBuf == temp[f]){
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	781a      	ldrb	r2, [r3, #0]
 8001f58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001f60:	440b      	add	r3, r1
 8001f62:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d105      	bne.n	8001f76 <GSM_Find+0x52>
			f++;
 8001f6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f74:	e002      	b.n	8001f7c <GSM_Find+0x58>
		}else{
			f = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if(f == tSize){
 8001f7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001f80:	7abb      	ldrb	r3, [r7, #10]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d101      	bne.n	8001f8a <GSM_Find+0x66>
			return 1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00d      	b.n	8001fa6 <GSM_Find+0x82>
		}
		dataBuf++;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
	for(; i < size; i++){
 8001f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f94:	3301      	adds	r3, #1
 8001f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f9e:	7afb      	ldrb	r3, [r7, #11]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d3d7      	bcc.n	8001f54 <GSM_Find+0x30>
	}

	return 0;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3728      	adds	r7, #40	; 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <GSM_On>:

void GSM_On(){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_SET);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fba:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <GSM_On+0x38>)
 8001fbc:	f003 f89e 	bl	80050fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RST_GPIO_Port, GSM_RST_Pin ,GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc6:	4809      	ldr	r0, [pc, #36]	; (8001fec <GSM_On+0x3c>)
 8001fc8:	f003 f898 	bl	80050fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd2:	4806      	ldr	r0, [pc, #24]	; (8001fec <GSM_On+0x3c>)
 8001fd4:	f003 f892 	bl	80050fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fde:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <GSM_On+0x38>)
 8001fe0:	f003 f88c 	bl	80050fc <HAL_GPIO_WritePin>
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020400 	.word	0x40020400

08001ff0 <GSM_Off>:

void GSM_Off(){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ffa:	480b      	ldr	r0, [pc, #44]	; (8002028 <GSM_Off+0x38>)
 8001ffc:	f003 f87e 	bl	80050fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RST_GPIO_Port, GSM_RST_Pin ,GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002006:	4809      	ldr	r0, [pc, #36]	; (800202c <GSM_Off+0x3c>)
 8002008:	f003 f878 	bl	80050fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_SET);
 800200c:	2201      	movs	r2, #1
 800200e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002012:	4806      	ldr	r0, [pc, #24]	; (800202c <GSM_Off+0x3c>)
 8002014:	f003 f872 	bl	80050fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
 8002018:	2201      	movs	r2, #1
 800201a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800201e:	4802      	ldr	r0, [pc, #8]	; (8002028 <GSM_Off+0x38>)
 8002020:	f003 f86c 	bl	80050fc <HAL_GPIO_WritePin>
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40020800 	.word	0x40020800
 800202c:	40020400 	.word	0x40020400

08002030 <GSM_Message_Send>:

uint8_t GSM_Message_Send(uint8_t *dataBuf, uint8_t size, uint32_t number){
 8002030:	b580      	push	{r7, lr}
 8002032:	b0c4      	sub	sp, #272	; 0x110
 8002034:	af00      	add	r7, sp, #0
 8002036:	f107 030c 	add.w	r3, r7, #12
 800203a:	6018      	str	r0, [r3, #0]
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	f107 030b 	add.w	r3, r7, #11
 8002044:	460a      	mov	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
	uint8_t temp[256];

	if(GSM_Check_Signal() == 0){
 8002048:	f7ff ff1a 	bl	8001e80 <GSM_Check_Signal>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <GSM_Message_Send+0x26>
		return 0;
 8002052:	2300      	movs	r3, #0
 8002054:	e082      	b.n	800215c <GSM_Message_Send+0x12c>
	}

	memcpy(temp, GSM_MODE_TEXT, 9);
 8002056:	f107 0310 	add.w	r3, r7, #16
 800205a:	2209      	movs	r2, #9
 800205c:	4942      	ldr	r1, [pc, #264]	; (8002168 <GSM_Message_Send+0x138>)
 800205e:	4618      	mov	r0, r3
 8002060:	f005 fe74 	bl	8007d4c <memcpy>
	GSM_Send(temp, 9);
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	2109      	movs	r1, #9
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f888 	bl	8002180 <GSM_Send>
	GSM_Receive(temp, 20);
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	2114      	movs	r1, #20
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f8a0 	bl	80021bc <GSM_Receive>
	if(GSM_IsOk(temp, 20) == 0){
 800207c:	f107 0310 	add.w	r3, r7, #16
 8002080:	2114      	movs	r1, #20
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff27 	bl	8001ed6 <GSM_IsOk>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <GSM_Message_Send+0x62>
		return 0;
 800208e:	2300      	movs	r3, #0
 8002090:	e064      	b.n	800215c <GSM_Message_Send+0x12c>
	}

	memcpy(temp, GSM_SET_NUMBER, 9);
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	2209      	movs	r2, #9
 8002098:	4934      	ldr	r1, [pc, #208]	; (800216c <GSM_Message_Send+0x13c>)
 800209a:	4618      	mov	r0, r3
 800209c:	f005 fe56 	bl	8007d4c <memcpy>
	sprintf((char *)(temp + 9), "%lu", number);
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	3309      	adds	r3, #9
 80020a6:	1d3a      	adds	r2, r7, #4
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	4931      	ldr	r1, [pc, #196]	; (8002170 <GSM_Message_Send+0x140>)
 80020ac:	4618      	mov	r0, r3
 80020ae:	f005 fe97 	bl	8007de0 <siprintf>
	memcpy(temp + 17, "\"", 1);
 80020b2:	f107 0310 	add.w	r3, r7, #16
 80020b6:	3311      	adds	r3, #17
 80020b8:	2201      	movs	r2, #1
 80020ba:	492e      	ldr	r1, [pc, #184]	; (8002174 <GSM_Message_Send+0x144>)
 80020bc:	4618      	mov	r0, r3
 80020be:	f005 fe45 	bl	8007d4c <memcpy>
	GSM_Send(temp, 17);
 80020c2:	f107 0310 	add.w	r3, r7, #16
 80020c6:	2111      	movs	r1, #17
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 f859 	bl	8002180 <GSM_Send>
	GSM_Receive(temp, 40);
 80020ce:	f107 0310 	add.w	r3, r7, #16
 80020d2:	2128      	movs	r1, #40	; 0x28
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 f871 	bl	80021bc <GSM_Receive>
	if(GSM_Find(temp, 40, (uint8_t *)">", 1) == 0){
 80020da:	f107 0010 	add.w	r0, r7, #16
 80020de:	2301      	movs	r3, #1
 80020e0:	4a25      	ldr	r2, [pc, #148]	; (8002178 <GSM_Message_Send+0x148>)
 80020e2:	2128      	movs	r1, #40	; 0x28
 80020e4:	f7ff ff1e 	bl	8001f24 <GSM_Find>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <GSM_Message_Send+0xc2>
		return 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e034      	b.n	800215c <GSM_Message_Send+0x12c>
	}

	temp[0] = GSM_MSG_SEND;
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	221a      	movs	r2, #26
 80020f8:	701a      	strb	r2, [r3, #0]
	GSM_Send(dataBuf, size);
 80020fa:	f107 030b 	add.w	r3, r7, #11
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	4611      	mov	r1, r2
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	f000 f83a 	bl	8002180 <GSM_Send>
	GSM_Send(temp, 1);
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	2101      	movs	r1, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f834 	bl	8002180 <GSM_Send>


	HAL_UART_Receive(uart, temp, 255, 100);
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <GSM_Message_Send+0x14c>)
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	f107 0110 	add.w	r1, r7, #16
 8002120:	2364      	movs	r3, #100	; 0x64
 8002122:	22ff      	movs	r2, #255	; 0xff
 8002124:	f004 fe23 	bl	8006d6e <HAL_UART_Receive>
	HAL_UART_Receive(uart, temp, 17, 5000);
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <GSM_Message_Send+0x14c>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	f107 0110 	add.w	r1, r7, #16
 8002130:	f241 3388 	movw	r3, #5000	; 0x1388
 8002134:	2211      	movs	r2, #17
 8002136:	f004 fe1a 	bl	8006d6e <HAL_UART_Receive>
	if(GSM_IsOk(temp, size + 40) == 0){
 800213a:	f107 030b 	add.w	r3, r7, #11
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	3328      	adds	r3, #40	; 0x28
 8002142:	b2da      	uxtb	r2, r3
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fec3 	bl	8001ed6 <GSM_IsOk>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <GSM_Message_Send+0x12a>
		return 0;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <GSM_Message_Send+0x12c>
	}

	return 1;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	0800866c 	.word	0x0800866c
 800216c:	08008678 	.word	0x08008678
 8002170:	08008684 	.word	0x08008684
 8002174:	08008688 	.word	0x08008688
 8002178:	0800868c 	.word	0x0800868c
 800217c:	200001c4 	.word	0x200001c4

08002180 <GSM_Send>:

void GSM_Send(uint8_t *dataBuf, uint8_t size){
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
	uint8_t temp = GSM_MSG_END;
 800218c:	230d      	movs	r3, #13
 800218e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(uart, dataBuf, size, 50);
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <GSM_Send+0x38>)
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	b29a      	uxth	r2, r3
 8002198:	2332      	movs	r3, #50	; 0x32
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	f004 fd55 	bl	8006c4a <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, &temp, 1, 50);
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <GSM_Send+0x38>)
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	f107 010f 	add.w	r1, r7, #15
 80021a8:	2332      	movs	r3, #50	; 0x32
 80021aa:	2201      	movs	r2, #1
 80021ac:	f004 fd4d 	bl	8006c4a <HAL_UART_Transmit>
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200001c4 	.word	0x200001c4

080021bc <GSM_Receive>:

void GSM_Receive(uint8_t *dataBuf, uint8_t size){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Receive(uart, dataBuf, size, 100);
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <GSM_Receive+0x24>)
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	2364      	movs	r3, #100	; 0x64
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	f004 fdcb 	bl	8006d6e <HAL_UART_Receive>
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	200001c4 	.word	0x200001c4

080021e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b0fc      	sub	sp, #496	; 0x1f0
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ea:	f001 fb87 	bl	80038fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ee:	f000 f999 	bl	8002524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f2:	f000 fc73 	bl	8002adc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80021f6:	f000 fbd3 	bl	80029a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021fa:	f000 fbfb 	bl	80029f4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80021fe:	f000 fc23 	bl	8002a48 <MX_USART6_UART_Init>
  MX_DMA_Init();
 8002202:	f000 fc4b 	bl	8002a9c <MX_DMA_Init>
  MX_SPI1_Init();
 8002206:	f000 fa5d 	bl	80026c4 <MX_SPI1_Init>
  MX_TIM2_Init();
 800220a:	f000 fa91 	bl	8002730 <MX_TIM2_Init>
  MX_TIM3_Init();
 800220e:	f000 fadd 	bl	80027cc <MX_TIM3_Init>
  MX_CRC_Init();
 8002212:	f000 fa43 	bl	800269c <MX_CRC_Init>
  MX_TIM4_Init();
 8002216:	f000 fb25 	bl	8002864 <MX_TIM4_Init>
  MX_TIM5_Init();
 800221a:	f000 fb71 	bl	8002900 <MX_TIM5_Init>
  MX_ADC1_Init();
 800221e:	f000 f9eb 	bl	80025f8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim5);
 8002222:	48a7      	ldr	r0, [pc, #668]	; (80024c0 <main+0x2dc>)
 8002224:	f004 f8a0 	bl	8006368 <HAL_TIM_Base_Start_IT>

  SX1278_hw_t SX1278_hw;
  SX1278_t SX1278;

 //initialize LoRa module
 SX1278_hw.dio0.port = RF_DIO0_GPIO_Port;
 8002228:	4ba6      	ldr	r3, [pc, #664]	; (80024c4 <main+0x2e0>)
 800222a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 SX1278_hw.dio0.pin = RF_DIO0_Pin;
 800222e:	2320      	movs	r3, #32
 8002230:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 SX1278_hw.nss.port = RF_NSS_GPIO_Port;
 8002234:	4ba4      	ldr	r3, [pc, #656]	; (80024c8 <main+0x2e4>)
 8002236:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 SX1278_hw.nss.pin = RF_NSS_Pin;
 800223a:	2310      	movs	r3, #16
 800223c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 SX1278_hw.reset.port = RF_RST_GPIO_Port;
 8002240:	4ba0      	ldr	r3, [pc, #640]	; (80024c4 <main+0x2e0>)
 8002242:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 SX1278_hw.reset.pin = RF_RST_Pin;
 8002246:	2340      	movs	r3, #64	; 0x40
 8002248:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 SX1278_hw.spi = &hspi1;
 800224c:	4b9f      	ldr	r3, [pc, #636]	; (80024cc <main+0x2e8>)
 800224e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 SX1278.hw = &SX1278_hw;
 8002252:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002256:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 800225a:	601a      	str	r2, [r3, #0]

 //HAL_UART_Receive_DMA(&huart1, &rxBuf, 1); DOESN"T work for some reason
 HAL_UART_Receive_IT(&huart1, &rxBuf, 1); // Works like a charm, but not as good as DMA
 800225c:	2201      	movs	r2, #1
 800225e:	499c      	ldr	r1, [pc, #624]	; (80024d0 <main+0x2ec>)
 8002260:	489c      	ldr	r0, [pc, #624]	; (80024d4 <main+0x2f0>)
 8002262:	f004 fe6b 	bl	8006f3c <HAL_UART_Receive_IT>
 while(HAL_GPIO_ReadPin(RX_GPIO_Port, RX_Pin) == 0);
 8002266:	bf00      	nop
 8002268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226c:	4896      	ldr	r0, [pc, #600]	; (80024c8 <main+0x2e4>)
 800226e:	f002 ff2d 	bl	80050cc <HAL_GPIO_ReadPin>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f7      	beq.n	8002268 <main+0x84>
 HAL_UART_Receive_IT(&huart6, UART6_RxBuf, 2);
 8002278:	2202      	movs	r2, #2
 800227a:	4997      	ldr	r1, [pc, #604]	; (80024d8 <main+0x2f4>)
 800227c:	4897      	ldr	r0, [pc, #604]	; (80024dc <main+0x2f8>)
 800227e:	f004 fe5d 	bl	8006f3c <HAL_UART_Receive_IT>

 //HAL_UART_Receive_IT(&huart2, UART6_RxBuf, 2);

 HAL_GPIO_WritePin(RF_RST_GPIO_Port, RF_RST_Pin, GPIO_PIN_SET); // very important.
 8002282:	2201      	movs	r2, #1
 8002284:	2140      	movs	r1, #64	; 0x40
 8002286:	488f      	ldr	r0, [pc, #572]	; (80024c4 <main+0x2e0>)
 8002288:	f002 ff38 	bl	80050fc <HAL_GPIO_WritePin>

 SX1278_hw_Reset(&SX1278_hw);
 800228c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fdd3 	bl	8000e3c <SX1278_hw_Reset>
//      SX1278_begin(&SX1278, SX1278_433MHZ, MIN_POWER, SX1278_LORA_SF_8, // air time ~ 495ms
//      SX1278_LORA_BW_20_8KHZ, 10);

  	//uint8_t GSM_STATE = 0;

  	GSM_Off();
 8002296:	f7ff feab 	bl	8001ff0 <GSM_Off>

  	if(GSM_InitUart(&huart2)){ // if failed, then gg
 800229a:	4891      	ldr	r0, [pc, #580]	; (80024e0 <main+0x2fc>)
 800229c:	f7ff fdd8 	bl	8001e50 <GSM_InitUart>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <main+0xc6>
  		return 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e104      	b.n	80024b4 <main+0x2d0>
  	}

	MODE_Set(&SX1278, mode);
 80022aa:	4b8e      	ldr	r3, [pc, #568]	; (80024e4 <main+0x300>)
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fd99 	bl	8002dec <MODE_Set>
	if(mode == 0){
 80022ba:	4b8a      	ldr	r3, [pc, #552]	; (80024e4 <main+0x300>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <main+0xf8>
		ret = SX1278_LoRaEntryRx(&SX1278, MIN_PACKETLENGTH, 2000);
 80022c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80022ca:	2108      	movs	r1, #8
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff f8d7 	bl	8001480 <SX1278_LoRaEntryRx>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4b84      	ldr	r3, [pc, #528]	; (80024e8 <main+0x304>)
 80022d8:	701a      	strb	r2, [r3, #0]
 80022da:	e009      	b.n	80022f0 <main+0x10c>
	}else{
		ret = SX1278_FSK_EntryRx(&SX1278, 8);
 80022dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022e0:	2108      	movs	r1, #8
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f868 	bl	80013b8 <SX1278_FSK_EntryRx>
 80022e8:	4603      	mov	r3, r0
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	4b7e      	ldr	r3, [pc, #504]	; (80024e8 <main+0x304>)
 80022ee:	701a      	strb	r2, [r3, #0]
//	uint8_t check_sum;
//	uint8_t check_sum_arr[4] = {0, 0, 0, 0};

	uint8_t tel_dataBuf[110];
	uint8_t gsm_dataBuf[80];
	memset(tel_dataBuf, 0, sizeof(tel_dataBuf));
 80022f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022f4:	226e      	movs	r2, #110	; 0x6e
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f005 fd35 	bl	8007d68 <memset>

	//HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);

	while(GPS_IsData() == GPS_NOK);
 80022fe:	bf00      	nop
 8002300:	f7ff fd92 	bl	8001e28 <GPS_IsData>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0fa      	beq.n	8002300 <main+0x11c>

	memset(UART6_RxBuf, 48, sizeof(UART6_RxBuf));
 800230a:	2232      	movs	r2, #50	; 0x32
 800230c:	2130      	movs	r1, #48	; 0x30
 800230e:	4872      	ldr	r0, [pc, #456]	; (80024d8 <main+0x2f4>)
 8002310:	f005 fd2a 	bl	8007d68 <memset>
	HAL_ADC_MspInit(&hadc1);
 8002314:	4875      	ldr	r0, [pc, #468]	; (80024ec <main+0x308>)
 8002316:	f000 ffe5 	bl	80032e4 <HAL_ADC_MspInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(gsmRec){
 800231a:	4b75      	ldr	r3, [pc, #468]	; (80024f0 <main+0x30c>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01c      	beq.n	800235c <main+0x178>
		//HAL_GPIO_ReadPin(GSM_GPIO1INT_GPIO_Port, GSM_GPIO1INT_Pin) < parbauda vai GSM ir gatavs rukat
		make_string_gsm((char *)gsm_dataBuf, sizeof(gsm_dataBuf));
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	2150      	movs	r1, #80	; 0x50
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fee0 	bl	80030ec <make_string_gsm>
		if(GSM_Check_Signal()){
 800232c:	f7ff fda8 	bl	8001e80 <GSM_Check_Signal>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <main+0x168>
			GSM_Message_Send(gsm_dataBuf, strlen((char *)gsm_dataBuf), 28654641);
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	4618      	mov	r0, r3
 800233a:	f7fd ff5b 	bl	80001f4 <strlen>
 800233e:	4603      	mov	r3, r0
 8002340:	b2d9      	uxtb	r1, r3
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	4a6b      	ldr	r2, [pc, #428]	; (80024f4 <main+0x310>)
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fe72 	bl	8002030 <GSM_Message_Send>
		}

		GSM_Off();
 800234c:	f7ff fe50 	bl	8001ff0 <GSM_Off>

		gsmRec = 0;
 8002350:	4b67      	ldr	r3, [pc, #412]	; (80024f0 <main+0x30c>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim5);
 8002356:	485a      	ldr	r0, [pc, #360]	; (80024c0 <main+0x2dc>)
 8002358:	f004 f806 	bl	8006368 <HAL_TIM_Base_Start_IT>
	}
	if(do_send_tm){ // its time to send gps coordinates
 800235c:	4b66      	ldr	r3, [pc, #408]	; (80024f8 <main+0x314>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d045      	beq.n	80023f0 <main+0x20c>
		 for(uint8_t tries = 0; tries < 5; tries++){
 8002364:	2300      	movs	r3, #0
 8002366:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 800236a:	e02d      	b.n	80023c8 <main+0x1e4>
			 UART6_TxBuf[0] = 0x03;
 800236c:	4b63      	ldr	r3, [pc, #396]	; (80024fc <main+0x318>)
 800236e:	2203      	movs	r2, #3
 8002370:	701a      	strb	r2, [r3, #0]
			 UART6_TxBuf[1] = 0x99;
 8002372:	4b62      	ldr	r3, [pc, #392]	; (80024fc <main+0x318>)
 8002374:	2299      	movs	r2, #153	; 0x99
 8002376:	705a      	strb	r2, [r3, #1]
			 HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8002378:	2201      	movs	r2, #1
 800237a:	2101      	movs	r1, #1
 800237c:	4851      	ldr	r0, [pc, #324]	; (80024c4 <main+0x2e0>)
 800237e:	f002 febd 	bl	80050fc <HAL_GPIO_WritePin>
			 HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);
 8002382:	2202      	movs	r2, #2
 8002384:	495d      	ldr	r1, [pc, #372]	; (80024fc <main+0x318>)
 8002386:	4855      	ldr	r0, [pc, #340]	; (80024dc <main+0x2f8>)
 8002388:	f004 fd93 	bl	8006eb2 <HAL_UART_Transmit_IT>
			 make_string((char *)tel_dataBuf, sizeof(tel_dataBuf));
 800238c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002390:	216e      	movs	r1, #110	; 0x6e
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fe1e 	bl	8002fd4 <make_string>
			 RTTY_Send(&SX1278, tel_dataBuf, strlen((char *)tel_dataBuf));
 8002398:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800239c:	4618      	mov	r0, r3
 800239e:	f7fd ff29 	bl	80001f4 <strlen>
 80023a2:	4603      	mov	r3, r0
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80023aa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fd90 	bl	8002ed4 <RTTY_Send>
			 HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2101      	movs	r1, #1
 80023b8:	4842      	ldr	r0, [pc, #264]	; (80024c4 <main+0x2e0>)
 80023ba:	f002 fe9f 	bl	80050fc <HAL_GPIO_WritePin>
		 for(uint8_t tries = 0; tries < 5; tries++){
 80023be:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 80023c2:	3301      	adds	r3, #1
 80023c4:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 80023c8:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d9cd      	bls.n	800236c <main+0x188>
		 }
		 SX1278_FSK_TxPacket(&SX1278, info_message, 8, 100);
 80023d0:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80023d4:	2364      	movs	r3, #100	; 0x64
 80023d6:	2208      	movs	r2, #8
 80023d8:	4949      	ldr	r1, [pc, #292]	; (8002500 <main+0x31c>)
 80023da:	f7ff f8b7 	bl	800154c <SX1278_FSK_TxPacket>
		 do_send_tm = 0;
 80023de:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <main+0x314>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
		 receive_data = 1;
 80023e4:	4b47      	ldr	r3, [pc, #284]	; (8002504 <main+0x320>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Start_IT(&htim2);
 80023ea:	4847      	ldr	r0, [pc, #284]	; (8002508 <main+0x324>)
 80023ec:	f003 ffbc 	bl	8006368 <HAL_TIM_Base_Start_IT>
	}
	if(receive_data){
 80023f0:	4b44      	ldr	r3, [pc, #272]	; (8002504 <main+0x320>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d090      	beq.n	800231a <main+0x136>
		if(sec_gps == 0){
 80023f8:	4b44      	ldr	r3, [pc, #272]	; (800250c <main+0x328>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10c      	bne.n	800241a <main+0x236>
			SX1278_FSK_EntryRx(&SX1278, 8);
 8002400:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002404:	2108      	movs	r1, #8
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe ffd6 	bl	80013b8 <SX1278_FSK_EntryRx>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800240c:	2201      	movs	r2, #1
 800240e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002412:	482c      	ldr	r0, [pc, #176]	; (80024c4 <main+0x2e0>)
 8002414:	f002 fe72 	bl	80050fc <HAL_GPIO_WritePin>
 8002418:	e015      	b.n	8002446 <main+0x262>
		}else if(sec_gps >= 5){
 800241a:	4b3c      	ldr	r3, [pc, #240]	; (800250c <main+0x328>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b04      	cmp	r3, #4
 8002420:	d911      	bls.n	8002446 <main+0x262>
			do_send_tm = 1;		// should send TM data
 8002422:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <main+0x314>)
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
			receive_data = 0;
 8002428:	4b36      	ldr	r3, [pc, #216]	; (8002504 <main+0x320>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
			sec_gps = 0;
 800242e:	4b37      	ldr	r3, [pc, #220]	; (800250c <main+0x328>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8002434:	2200      	movs	r2, #0
 8002436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800243a:	4822      	ldr	r0, [pc, #136]	; (80024c4 <main+0x2e0>)
 800243c:	f002 fe5e 	bl	80050fc <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim2);
 8002440:	4831      	ldr	r0, [pc, #196]	; (8002508 <main+0x324>)
 8002442:	f003 fff3 	bl	800642c <HAL_TIM_Base_Stop_IT>
		}
		if(loraModuleIrq){
 8002446:	4b32      	ldr	r3, [pc, #200]	; (8002510 <main+0x32c>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f43f af65 	beq.w	800231a <main+0x136>
			SX1278_FSK_RxPacket(&SX1278, loraBuf, 8, 1000);
 8002450:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8002454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002458:	2208      	movs	r2, #8
 800245a:	492e      	ldr	r1, [pc, #184]	; (8002514 <main+0x330>)
 800245c:	f7ff f8c6 	bl	80015ec <SX1278_FSK_RxPacket>
			if(strcmp((char *)loraBuf, "cutropeN") == 0){
 8002460:	492d      	ldr	r1, [pc, #180]	; (8002518 <main+0x334>)
 8002462:	482c      	ldr	r0, [pc, #176]	; (8002514 <main+0x330>)
 8002464:	f7fd febc 	bl	80001e0 <strcmp>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d117      	bne.n	800249e <main+0x2ba>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800246e:	2201      	movs	r2, #1
 8002470:	2104      	movs	r1, #4
 8002472:	4814      	ldr	r0, [pc, #80]	; (80024c4 <main+0x2e0>)
 8002474:	f002 fe42 	bl	80050fc <HAL_GPIO_WritePin>

				// SENDING COMMAND TO MCU TO CUT THE ROPE
				UART6_TxBuf[0] = 0x4f;
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <main+0x318>)
 800247a:	224f      	movs	r2, #79	; 0x4f
 800247c:	701a      	strb	r2, [r3, #0]
				UART6_TxBuf[1] = 0xcc;
 800247e:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <main+0x318>)
 8002480:	22cc      	movs	r2, #204	; 0xcc
 8002482:	705a      	strb	r2, [r3, #1]
				HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);
 8002484:	2202      	movs	r2, #2
 8002486:	491d      	ldr	r1, [pc, #116]	; (80024fc <main+0x318>)
 8002488:	4814      	ldr	r0, [pc, #80]	; (80024dc <main+0x2f8>)
 800248a:	f004 fd12 	bl	8006eb2 <HAL_UART_Transmit_IT>
				// SENDING COMMAND TO MCU TO CUT THE ROPE

				SX1278_FSK_TxPacket(&SX1278, ok_cut_rope_message, 8, 100);
 800248e:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8002492:	2364      	movs	r3, #100	; 0x64
 8002494:	2208      	movs	r2, #8
 8002496:	4921      	ldr	r1, [pc, #132]	; (800251c <main+0x338>)
 8002498:	f7ff f858 	bl	800154c <SX1278_FSK_TxPacket>
 800249c:	e006      	b.n	80024ac <main+0x2c8>
			}else{
				SX1278_FSK_TxPacket(&SX1278, nok_ack_message, 8, 100);
 800249e:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80024a2:	2364      	movs	r3, #100	; 0x64
 80024a4:	2208      	movs	r2, #8
 80024a6:	491e      	ldr	r1, [pc, #120]	; (8002520 <main+0x33c>)
 80024a8:	f7ff f850 	bl	800154c <SX1278_FSK_TxPacket>
			}
			loraModuleIrq = 0;
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <main+0x32c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
	if(gsmRec){
 80024b2:	e732      	b.n	800231a <main+0x136>
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000218 	.word	0x20000218
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020000 	.word	0x40020000
 80024cc:	200004a0 	.word	0x200004a0
 80024d0:	200001c0 	.word	0x200001c0
 80024d4:	20000350 	.word	0x20000350
 80024d8:	20000130 	.word	0x20000130
 80024dc:	200003f8 	.word	0x200003f8
 80024e0:	20000540 	.word	0x20000540
 80024e4:	2000001c 	.word	0x2000001c
 80024e8:	200000e0 	.word	0x200000e0
 80024ec:	200002a8 	.word	0x200002a8
 80024f0:	200000f4 	.word	0x200000f4
 80024f4:	01b53c31 	.word	0x01b53c31
 80024f8:	2000001d 	.word	0x2000001d
 80024fc:	200000f8 	.word	0x200000f8
 8002500:	20000004 	.word	0x20000004
 8002504:	200000f5 	.word	0x200000f5
 8002508:	200004f8 	.word	0x200004f8
 800250c:	200000f6 	.word	0x200000f6
 8002510:	200000ee 	.word	0x200000ee
 8002514:	200000e4 	.word	0x200000e4
 8002518:	08008690 	.word	0x08008690
 800251c:	2000000c 	.word	0x2000000c
 8002520:	20000014 	.word	0x20000014

08002524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b094      	sub	sp, #80	; 0x50
 8002528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252a:	f107 0320 	add.w	r3, r7, #32
 800252e:	2230      	movs	r2, #48	; 0x30
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f005 fc18 	bl	8007d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	2300      	movs	r3, #0
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <SystemClock_Config+0xcc>)
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	4a27      	ldr	r2, [pc, #156]	; (80025f0 <SystemClock_Config+0xcc>)
 8002552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002556:	6413      	str	r3, [r2, #64]	; 0x40
 8002558:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <SystemClock_Config+0xcc>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002564:	2300      	movs	r3, #0
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <SystemClock_Config+0xd0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002570:	4a20      	ldr	r2, [pc, #128]	; (80025f4 <SystemClock_Config+0xd0>)
 8002572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <SystemClock_Config+0xd0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002584:	2301      	movs	r3, #1
 8002586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800258e:	2302      	movs	r3, #2
 8002590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002598:	2304      	movs	r3, #4
 800259a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800259c:	2354      	movs	r3, #84	; 0x54
 800259e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025a0:	2302      	movs	r3, #2
 80025a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025a4:	2304      	movs	r3, #4
 80025a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a8:	f107 0320 	add.w	r3, r7, #32
 80025ac:	4618      	mov	r0, r3
 80025ae:	f002 fdd7 	bl	8005160 <HAL_RCC_OscConfig>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80025b8:	f000 fe66 	bl	8003288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025bc:	230f      	movs	r3, #15
 80025be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025c0:	2302      	movs	r3, #2
 80025c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	2102      	movs	r1, #2
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 f839 	bl	8005650 <HAL_RCC_ClockConfig>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80025e4:	f000 fe50 	bl	8003288 <Error_Handler>
  }
}
 80025e8:	bf00      	nop
 80025ea:	3750      	adds	r7, #80	; 0x50
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40007000 	.word	0x40007000

080025f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80025fe:	463b      	mov	r3, r7
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <MX_ADC1_Init+0x98>)
 800260c:	4a21      	ldr	r2, [pc, #132]	; (8002694 <MX_ADC1_Init+0x9c>)
 800260e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002610:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <MX_ADC1_Init+0x98>)
 8002612:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002616:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <MX_ADC1_Init+0x98>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <MX_ADC1_Init+0x98>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <MX_ADC1_Init+0x98>)
 8002626:	2200      	movs	r2, #0
 8002628:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <MX_ADC1_Init+0x98>)
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <MX_ADC1_Init+0x98>)
 8002634:	2200      	movs	r2, #0
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <MX_ADC1_Init+0x98>)
 800263a:	4a17      	ldr	r2, [pc, #92]	; (8002698 <MX_ADC1_Init+0xa0>)
 800263c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <MX_ADC1_Init+0x98>)
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <MX_ADC1_Init+0x98>)
 8002646:	2201      	movs	r2, #1
 8002648:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800264a:	4b11      	ldr	r3, [pc, #68]	; (8002690 <MX_ADC1_Init+0x98>)
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <MX_ADC1_Init+0x98>)
 8002654:	2201      	movs	r2, #1
 8002656:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002658:	480d      	ldr	r0, [pc, #52]	; (8002690 <MX_ADC1_Init+0x98>)
 800265a:	f001 f9e5 	bl	8003a28 <HAL_ADC_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002664:	f000 fe10 	bl	8003288 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002668:	2310      	movs	r3, #16
 800266a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800266c:	2301      	movs	r3, #1
 800266e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002674:	463b      	mov	r3, r7
 8002676:	4619      	mov	r1, r3
 8002678:	4805      	ldr	r0, [pc, #20]	; (8002690 <MX_ADC1_Init+0x98>)
 800267a:	f001 fcc5 	bl	8004008 <HAL_ADC_ConfigChannel>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002684:	f000 fe00 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200002a8 	.word	0x200002a8
 8002694:	40012000 	.word	0x40012000
 8002698:	0f000001 	.word	0x0f000001

0800269c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <MX_CRC_Init+0x20>)
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <MX_CRC_Init+0x24>)
 80026a4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80026a6:	4805      	ldr	r0, [pc, #20]	; (80026bc <MX_CRC_Init+0x20>)
 80026a8:	f001 fff3 	bl	8004692 <HAL_CRC_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80026b2:	f000 fde9 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000210 	.word	0x20000210
 80026c0:	40023000 	.word	0x40023000

080026c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026c8:	4b17      	ldr	r3, [pc, #92]	; (8002728 <MX_SPI1_Init+0x64>)
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <MX_SPI1_Init+0x68>)
 80026cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <MX_SPI1_Init+0x64>)
 80026d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <MX_SPI1_Init+0x64>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <MX_SPI1_Init+0x64>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_SPI1_Init+0x64>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <MX_SPI1_Init+0x64>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_SPI1_Init+0x64>)
 80026f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_SPI1_Init+0x64>)
 80026f8:	2220      	movs	r2, #32
 80026fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <MX_SPI1_Init+0x64>)
 80026fe:	2200      	movs	r2, #0
 8002700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_SPI1_Init+0x64>)
 8002704:	2200      	movs	r2, #0
 8002706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <MX_SPI1_Init+0x64>)
 800270a:	2200      	movs	r2, #0
 800270c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <MX_SPI1_Init+0x64>)
 8002710:	220a      	movs	r2, #10
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002714:	4804      	ldr	r0, [pc, #16]	; (8002728 <MX_SPI1_Init+0x64>)
 8002716:	f003 f997 	bl	8005a48 <HAL_SPI_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002720:	f000 fdb2 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	200004a0 	.word	0x200004a0
 800272c:	40013000 	.word	0x40013000

08002730 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002736:	f107 0308 	add.w	r3, r7, #8
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002744:	463b      	mov	r3, r7
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <MX_TIM2_Init+0x98>)
 800274e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002752:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8002754:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <MX_TIM2_Init+0x98>)
 8002756:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800275a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275c:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <MX_TIM2_Init+0x98>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2625;
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <MX_TIM2_Init+0x98>)
 8002764:	f640 2241 	movw	r2, #2625	; 0xa41
 8002768:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <MX_TIM2_Init+0x98>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <MX_TIM2_Init+0x98>)
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002776:	4814      	ldr	r0, [pc, #80]	; (80027c8 <MX_TIM2_Init+0x98>)
 8002778:	f003 fda6 	bl	80062c8 <HAL_TIM_Base_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002782:	f000 fd81 	bl	8003288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800278c:	f107 0308 	add.w	r3, r7, #8
 8002790:	4619      	mov	r1, r3
 8002792:	480d      	ldr	r0, [pc, #52]	; (80027c8 <MX_TIM2_Init+0x98>)
 8002794:	f003 ff81 	bl	800669a <HAL_TIM_ConfigClockSource>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800279e:	f000 fd73 	bl	8003288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027aa:	463b      	mov	r3, r7
 80027ac:	4619      	mov	r1, r3
 80027ae:	4806      	ldr	r0, [pc, #24]	; (80027c8 <MX_TIM2_Init+0x98>)
 80027b0:	f004 f97c 	bl	8006aac <HAL_TIMEx_MasterConfigSynchronization>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80027ba:	f000 fd65 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200004f8 	.word	0x200004f8

080027cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d2:	f107 0308 	add.w	r3, r7, #8
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e0:	463b      	mov	r3, r7
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <MX_TIM3_Init+0x90>)
 80027ea:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <MX_TIM3_Init+0x94>)
 80027ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 80027ee:	4b1b      	ldr	r3, [pc, #108]	; (800285c <MX_TIM3_Init+0x90>)
 80027f0:	2254      	movs	r2, #84	; 0x54
 80027f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <MX_TIM3_Init+0x90>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80027fa:	4b18      	ldr	r3, [pc, #96]	; (800285c <MX_TIM3_Init+0x90>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002800:	4b16      	ldr	r3, [pc, #88]	; (800285c <MX_TIM3_Init+0x90>)
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <MX_TIM3_Init+0x90>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800280c:	4813      	ldr	r0, [pc, #76]	; (800285c <MX_TIM3_Init+0x90>)
 800280e:	f003 fd5b 	bl	80062c8 <HAL_TIM_Base_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002818:	f000 fd36 	bl	8003288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800281c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	4619      	mov	r1, r3
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <MX_TIM3_Init+0x90>)
 800282a:	f003 ff36 	bl	800669a <HAL_TIM_ConfigClockSource>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002834:	f000 fd28 	bl	8003288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002838:	2300      	movs	r3, #0
 800283a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002840:	463b      	mov	r3, r7
 8002842:	4619      	mov	r1, r3
 8002844:	4805      	ldr	r0, [pc, #20]	; (800285c <MX_TIM3_Init+0x90>)
 8002846:	f004 f931 	bl	8006aac <HAL_TIMEx_MasterConfigSynchronization>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002850:	f000 fd1a 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000260 	.word	0x20000260
 8002860:	40000400 	.word	0x40000400

08002864 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800286a:	f107 0308 	add.w	r3, r7, #8
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002878:	463b      	mov	r3, r7
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <MX_TIM4_Init+0x94>)
 8002882:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <MX_TIM4_Init+0x98>)
 8002884:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000;
 8002886:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <MX_TIM4_Init+0x94>)
 8002888:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800288c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <MX_TIM4_Init+0x94>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7875;
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <MX_TIM4_Init+0x94>)
 8002896:	f641 62c3 	movw	r2, #7875	; 0x1ec3
 800289a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <MX_TIM4_Init+0x94>)
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <MX_TIM4_Init+0x94>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80028a8:	4813      	ldr	r0, [pc, #76]	; (80028f8 <MX_TIM4_Init+0x94>)
 80028aa:	f003 fd0d 	bl	80062c8 <HAL_TIM_Base_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80028b4:	f000 fce8 	bl	8003288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028be:	f107 0308 	add.w	r3, r7, #8
 80028c2:	4619      	mov	r1, r3
 80028c4:	480c      	ldr	r0, [pc, #48]	; (80028f8 <MX_TIM4_Init+0x94>)
 80028c6:	f003 fee8 	bl	800669a <HAL_TIM_ConfigClockSource>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80028d0:	f000 fcda 	bl	8003288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d4:	2300      	movs	r3, #0
 80028d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028dc:	463b      	mov	r3, r7
 80028de:	4619      	mov	r1, r3
 80028e0:	4805      	ldr	r0, [pc, #20]	; (80028f8 <MX_TIM4_Init+0x94>)
 80028e2:	f004 f8e3 	bl	8006aac <HAL_TIMEx_MasterConfigSynchronization>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80028ec:	f000 fccc 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028f0:	bf00      	nop
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200001c8 	.word	0x200001c8
 80028fc:	40000800 	.word	0x40000800

08002900 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002906:	f107 0308 	add.w	r3, r7, #8
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002914:	463b      	mov	r3, r7
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <MX_TIM5_Init+0x94>)
 800291e:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <MX_TIM5_Init+0x98>)
 8002920:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <MX_TIM5_Init+0x94>)
 8002924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002928:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292a:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <MX_TIM5_Init+0x94>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 384300;
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <MX_TIM5_Init+0x94>)
 8002932:	4a1a      	ldr	r2, [pc, #104]	; (800299c <MX_TIM5_Init+0x9c>)
 8002934:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <MX_TIM5_Init+0x94>)
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293c:	4b15      	ldr	r3, [pc, #84]	; (8002994 <MX_TIM5_Init+0x94>)
 800293e:	2200      	movs	r2, #0
 8002940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002942:	4814      	ldr	r0, [pc, #80]	; (8002994 <MX_TIM5_Init+0x94>)
 8002944:	f003 fcc0 	bl	80062c8 <HAL_TIM_Base_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800294e:	f000 fc9b 	bl	8003288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002956:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002958:	f107 0308 	add.w	r3, r7, #8
 800295c:	4619      	mov	r1, r3
 800295e:	480d      	ldr	r0, [pc, #52]	; (8002994 <MX_TIM5_Init+0x94>)
 8002960:	f003 fe9b 	bl	800669a <HAL_TIM_ConfigClockSource>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800296a:	f000 fc8d 	bl	8003288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002976:	463b      	mov	r3, r7
 8002978:	4619      	mov	r1, r3
 800297a:	4806      	ldr	r0, [pc, #24]	; (8002994 <MX_TIM5_Init+0x94>)
 800297c:	f004 f896 	bl	8006aac <HAL_TIMEx_MasterConfigSynchronization>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002986:	f000 fc7f 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000218 	.word	0x20000218
 8002998:	40000c00 	.word	0x40000c00
 800299c:	0005dd2c 	.word	0x0005dd2c

080029a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <MX_USART1_UART_Init+0x4c>)
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <MX_USART1_UART_Init+0x50>)
 80029a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <MX_USART1_UART_Init+0x4c>)
 80029ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <MX_USART1_UART_Init+0x4c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <MX_USART1_UART_Init+0x4c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029be:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <MX_USART1_UART_Init+0x4c>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <MX_USART1_UART_Init+0x4c>)
 80029c6:	220c      	movs	r2, #12
 80029c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <MX_USART1_UART_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <MX_USART1_UART_Init+0x4c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029d6:	4805      	ldr	r0, [pc, #20]	; (80029ec <MX_USART1_UART_Init+0x4c>)
 80029d8:	f004 f8ea 	bl	8006bb0 <HAL_UART_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029e2:	f000 fc51 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000350 	.word	0x20000350
 80029f0:	40011000 	.word	0x40011000

080029f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029f8:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 80029fa:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <MX_USART2_UART_Init+0x50>)
 80029fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029fe:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a2a:	4805      	ldr	r0, [pc, #20]	; (8002a40 <MX_USART2_UART_Init+0x4c>)
 8002a2c:	f004 f8c0 	bl	8006bb0 <HAL_UART_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a36:	f000 fc27 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000540 	.word	0x20000540
 8002a44:	40004400 	.word	0x40004400

08002a48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <MX_USART6_UART_Init+0x4c>)
 8002a4e:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <MX_USART6_UART_Init+0x50>)
 8002a50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <MX_USART6_UART_Init+0x4c>)
 8002a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <MX_USART6_UART_Init+0x4c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <MX_USART6_UART_Init+0x4c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <MX_USART6_UART_Init+0x4c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <MX_USART6_UART_Init+0x4c>)
 8002a6e:	220c      	movs	r2, #12
 8002a70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <MX_USART6_UART_Init+0x4c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <MX_USART6_UART_Init+0x4c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002a7e:	4805      	ldr	r0, [pc, #20]	; (8002a94 <MX_USART6_UART_Init+0x4c>)
 8002a80:	f004 f896 	bl	8006bb0 <HAL_UART_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002a8a:	f000 fbfd 	bl	8003288 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200003f8 	.word	0x200003f8
 8002a98:	40011400 	.word	0x40011400

08002a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <MX_DMA_Init+0x3c>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ad8 <MX_DMA_Init+0x3c>)
 8002aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <MX_DMA_Init+0x3c>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	203a      	movs	r0, #58	; 0x3a
 8002ac4:	f001 fdaf 	bl	8004626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002ac8:	203a      	movs	r0, #58	; 0x3a
 8002aca:	f001 fdc8 	bl	800465e <HAL_NVIC_EnableIRQ>

}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800

08002adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	4b5d      	ldr	r3, [pc, #372]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	4a5c      	ldr	r2, [pc, #368]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002afc:	f043 0304 	orr.w	r3, r3, #4
 8002b00:	6313      	str	r3, [r2, #48]	; 0x30
 8002b02:	4b5a      	ldr	r3, [pc, #360]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4b56      	ldr	r3, [pc, #344]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a55      	ldr	r2, [pc, #340]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b53      	ldr	r3, [pc, #332]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	4b4f      	ldr	r3, [pc, #316]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a4e      	ldr	r2, [pc, #312]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	4b48      	ldr	r3, [pc, #288]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a47      	ldr	r2, [pc, #284]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b45      	ldr	r3, [pc, #276]	; (8002c6c <MX_GPIO_Init+0x190>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
 8002b62:	2201      	movs	r2, #1
 8002b64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b68:	4841      	ldr	r0, [pc, #260]	; (8002c70 <MX_GPIO_Init+0x194>)
 8002b6a:	f002 fac7 	bl	80050fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b74:	483e      	ldr	r0, [pc, #248]	; (8002c70 <MX_GPIO_Init+0x194>)
 8002b76:	f002 fac1 	bl	80050fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NSS_GPIO_Port, RF_NSS_Pin, GPIO_PIN_RESET);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2110      	movs	r1, #16
 8002b7e:	483d      	ldr	r0, [pc, #244]	; (8002c74 <MX_GPIO_Init+0x198>)
 8002b80:	f002 fabc 	bl	80050fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 8002b84:	2200      	movs	r2, #0
 8002b86:	f240 7117 	movw	r1, #1815	; 0x717
 8002b8a:	483b      	ldr	r0, [pc, #236]	; (8002c78 <MX_GPIO_Init+0x19c>)
 8002b8c:	f002 fab6 	bl	80050fc <HAL_GPIO_WritePin>
                          |RF_DIO1_Pin|GSM_RST_Pin|GSM_RTS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GSM_CTS_Pin GSM_PWR_Pin */
  GPIO_InitStruct.Pin = GSM_CTS_Pin|GSM_PWR_Pin;
 8002b90:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4831      	ldr	r0, [pc, #196]	; (8002c70 <MX_GPIO_Init+0x194>)
 8002baa:	f002 f90b 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_GPIO1INT_Pin */
  GPIO_InitStruct.Pin = GSM_GPIO1INT_Pin;
 8002bae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GSM_GPIO1INT_GPIO_Port, &GPIO_InitStruct);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	482b      	ldr	r0, [pc, #172]	; (8002c70 <MX_GPIO_Init+0x194>)
 8002bc4:	f002 f8fe 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NSS_Pin */
  GPIO_InitStruct.Pin = RF_NSS_Pin;
 8002bc8:	2310      	movs	r3, #16
 8002bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_NSS_GPIO_Port, &GPIO_InitStruct);
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4825      	ldr	r0, [pc, #148]	; (8002c74 <MX_GPIO_Init+0x198>)
 8002be0:	f002 f8f0 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin
                           RF_DIO1_Pin GSM_RTS_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 8002be4:	f240 6317 	movw	r3, #1559	; 0x617
 8002be8:	617b      	str	r3, [r7, #20]
                          |RF_DIO1_Pin|GSM_RTS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bea:	2301      	movs	r3, #1
 8002bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf6:	f107 0314 	add.w	r3, r7, #20
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	481e      	ldr	r0, [pc, #120]	; (8002c78 <MX_GPIO_Init+0x19c>)
 8002bfe:	f002 f8e1 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DIO0_Pin */
  GPIO_InitStruct.Pin = RF_DIO0_Pin;
 8002c02:	2320      	movs	r3, #32
 8002c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	4619      	mov	r1, r3
 8002c16:	4818      	ldr	r0, [pc, #96]	; (8002c78 <MX_GPIO_Init+0x19c>)
 8002c18:	f002 f8d4 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_RST_Pin */
  GPIO_InitStruct.Pin = RF_RST_Pin;
 8002c1c:	2340      	movs	r3, #64	; 0x40
 8002c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_RST_GPIO_Port, &GPIO_InitStruct);
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4812      	ldr	r0, [pc, #72]	; (8002c78 <MX_GPIO_Init+0x19c>)
 8002c30:	f002 f8c8 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_RST_Pin */
  GPIO_InitStruct.Pin = GSM_RST_Pin;
 8002c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c42:	2300      	movs	r3, #0
 8002c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GSM_RST_GPIO_Port, &GPIO_InitStruct);
 8002c46:	f107 0314 	add.w	r3, r7, #20
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	480a      	ldr	r0, [pc, #40]	; (8002c78 <MX_GPIO_Init+0x19c>)
 8002c4e:	f002 f8b9 	bl	8004dc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	2017      	movs	r0, #23
 8002c58:	f001 fce5 	bl	8004626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c5c:	2017      	movs	r0, #23
 8002c5e:	f001 fcfe 	bl	800465e <HAL_NVIC_EnableIRQ>

}
 8002c62:	bf00      	nop
 8002c64:	3728      	adds	r7, #40	; 0x28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40020800 	.word	0x40020800
 8002c74:	40020000 	.word	0x40020000
 8002c78:	40020400 	.word	0x40020400

08002c7c <HAL_UART_RxCpltCallback>:
	}else{
		return CMD_ERROR;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a3c      	ldr	r2, [pc, #240]	; (8002d78 <HAL_UART_RxCpltCallback+0xfc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d109      	bne.n	8002ca0 <HAL_UART_RxCpltCallback+0x24>
		HAL_UART_Receive_IT(&huart1, &rxBuf, 1);
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	493b      	ldr	r1, [pc, #236]	; (8002d7c <HAL_UART_RxCpltCallback+0x100>)
 8002c90:	4839      	ldr	r0, [pc, #228]	; (8002d78 <HAL_UART_RxCpltCallback+0xfc>)
 8002c92:	f004 f953 	bl	8006f3c <HAL_UART_Receive_IT>
		GPS_Receive(rxBuf);
 8002c96:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <HAL_UART_RxCpltCallback+0x100>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fd2c 	bl	80016f8 <GPS_Receive>
		//HAL_UART_Receive_DMA(&huart1, &rxBuf, 1);
	}

	if(huart == &huart6)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a37      	ldr	r2, [pc, #220]	; (8002d80 <HAL_UART_RxCpltCallback+0x104>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d162      	bne.n	8002d6e <HAL_UART_RxCpltCallback+0xf2>
	{
		if(UART6_RxIsData == 1){
 8002ca8:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <HAL_UART_RxCpltCallback+0x108>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d117      	bne.n	8002ce0 <HAL_UART_RxCpltCallback+0x64>
			for (uint8_t i = 0; i < UART6_RxBytes; i++)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	e008      	b.n	8002cc8 <HAL_UART_RxCpltCallback+0x4c>
				UART6_DataBuf[i] = UART6_RxBuf[i];
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	4933      	ldr	r1, [pc, #204]	; (8002d88 <HAL_UART_RxCpltCallback+0x10c>)
 8002cbc:	5c89      	ldrb	r1, [r1, r2]
 8002cbe:	4a33      	ldr	r2, [pc, #204]	; (8002d8c <HAL_UART_RxCpltCallback+0x110>)
 8002cc0:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < UART6_RxBytes; i++)
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <HAL_UART_RxCpltCallback+0x114>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d3f1      	bcc.n	8002cb6 <HAL_UART_RxCpltCallback+0x3a>
			UART6_RxIsData = 0;
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <HAL_UART_RxCpltCallback+0x108>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
			UART6_RxBytes = 2;
 8002cd8:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_UART_RxCpltCallback+0x114>)
 8002cda:	2202      	movs	r2, #2
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e041      	b.n	8002d64 <HAL_UART_RxCpltCallback+0xe8>
		}else{
			uint8_t Command = UART6_RxBuf[0];
 8002ce0:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <HAL_UART_RxCpltCallback+0x10c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	73bb      	strb	r3, [r7, #14]
			uint8_t Parameter = UART6_RxBuf[1];
 8002ce6:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <HAL_UART_RxCpltCallback+0x10c>)
 8002ce8:	785b      	ldrb	r3, [r3, #1]
 8002cea:	737b      	strb	r3, [r7, #13]

			if(Command != 0x02){
 8002cec:	7bbb      	ldrb	r3, [r7, #14]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d007      	beq.n	8002d02 <HAL_UART_RxCpltCallback+0x86>
				UART6_RxBytes = 2;
 8002cf2:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <HAL_UART_RxCpltCallback+0x114>)
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6, UART6_RxBuf, 2);
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	4923      	ldr	r1, [pc, #140]	; (8002d88 <HAL_UART_RxCpltCallback+0x10c>)
 8002cfc:	4820      	ldr	r0, [pc, #128]	; (8002d80 <HAL_UART_RxCpltCallback+0x104>)
 8002cfe:	f004 f91d 	bl	8006f3c <HAL_UART_Receive_IT>
			}
			switch(Command){
 8002d02:	7bbb      	ldrb	r3, [r7, #14]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d002      	beq.n	8002d0e <HAL_UART_RxCpltCallback+0x92>
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d00e      	beq.n	8002d2a <HAL_UART_RxCpltCallback+0xae>
					HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, strlen((char *)UART6_TxBuf) + 1);
				break;
				default:
					//nothing happens
					//HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
				break;
 8002d0c:	e02a      	b.n	8002d64 <HAL_UART_RxCpltCallback+0xe8>
					UART6_RxIsData = 1;
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_UART_RxCpltCallback+0x108>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
					UART6_RxBytes = Parameter;
 8002d14:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <HAL_UART_RxCpltCallback+0x114>)
 8002d16:	7b7b      	ldrb	r3, [r7, #13]
 8002d18:	7013      	strb	r3, [r2, #0]
					HAL_UART_Receive_IT(&huart6, UART6_RxBuf, Parameter);
 8002d1a:	7b7b      	ldrb	r3, [r7, #13]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4919      	ldr	r1, [pc, #100]	; (8002d88 <HAL_UART_RxCpltCallback+0x10c>)
 8002d22:	4817      	ldr	r0, [pc, #92]	; (8002d80 <HAL_UART_RxCpltCallback+0x104>)
 8002d24:	f004 f90a 	bl	8006f3c <HAL_UART_Receive_IT>
				break;
 8002d28:	e01c      	b.n	8002d64 <HAL_UART_RxCpltCallback+0xe8>
					UART6_TxBuf[0] = 0x02;
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <HAL_UART_RxCpltCallback+0x118>)
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
					UART6_TxBuf[1] = Parameter;
 8002d30:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <HAL_UART_RxCpltCallback+0x118>)
 8002d32:	7b7b      	ldrb	r3, [r7, #13]
 8002d34:	7053      	strb	r3, [r2, #1]
					memcpy(&(UART6_TxBuf[2]), UART6_DataBuf, strlen((char *)UART6_DataBuf) + 1);
 8002d36:	4815      	ldr	r0, [pc, #84]	; (8002d8c <HAL_UART_RxCpltCallback+0x110>)
 8002d38:	f7fd fa5c 	bl	80001f4 <strlen>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	3301      	adds	r3, #1
 8002d40:	461a      	mov	r2, r3
 8002d42:	4912      	ldr	r1, [pc, #72]	; (8002d8c <HAL_UART_RxCpltCallback+0x110>)
 8002d44:	4814      	ldr	r0, [pc, #80]	; (8002d98 <HAL_UART_RxCpltCallback+0x11c>)
 8002d46:	f005 f801 	bl	8007d4c <memcpy>
					HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, strlen((char *)UART6_TxBuf) + 1);
 8002d4a:	4812      	ldr	r0, [pc, #72]	; (8002d94 <HAL_UART_RxCpltCallback+0x118>)
 8002d4c:	f7fd fa52 	bl	80001f4 <strlen>
 8002d50:	4603      	mov	r3, r0
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	490e      	ldr	r1, [pc, #56]	; (8002d94 <HAL_UART_RxCpltCallback+0x118>)
 8002d5c:	4808      	ldr	r0, [pc, #32]	; (8002d80 <HAL_UART_RxCpltCallback+0x104>)
 8002d5e:	f004 f8a8 	bl	8006eb2 <HAL_UART_Transmit_IT>
				break;
 8002d62:	bf00      	nop
			}
		}
		memset(UART6_RxBuf, 48, sizeof(UART6_RxBuf));
 8002d64:	2232      	movs	r2, #50	; 0x32
 8002d66:	2130      	movs	r1, #48	; 0x30
 8002d68:	4807      	ldr	r0, [pc, #28]	; (8002d88 <HAL_UART_RxCpltCallback+0x10c>)
 8002d6a:	f004 fffd 	bl	8007d68 <memset>
	}
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000350 	.word	0x20000350
 8002d7c:	200001c0 	.word	0x200001c0
 8002d80:	200003f8 	.word	0x200003f8
 8002d84:	200000f7 	.word	0x200000f7
 8002d88:	20000130 	.word	0x20000130
 8002d8c:	200000fc 	.word	0x200000fc
 8002d90:	2000001e 	.word	0x2000001e
 8002d94:	200000f8 	.word	0x200000f8
 8002d98:	200000fa 	.word	0x200000fa

08002d9c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart1, &rxBuf, 1); doesn't work for some reason...
	if(huart == &huart1){
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a0c      	ldr	r2, [pc, #48]	; (8002dd8 <HAL_UART_ErrorCallback+0x3c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d104      	bne.n	8002db6 <HAL_UART_ErrorCallback+0x1a>
		HAL_UART_Receive_IT(&huart1, &rxBuf, 1);
 8002dac:	2201      	movs	r2, #1
 8002dae:	490b      	ldr	r1, [pc, #44]	; (8002ddc <HAL_UART_ErrorCallback+0x40>)
 8002db0:	4809      	ldr	r0, [pc, #36]	; (8002dd8 <HAL_UART_ErrorCallback+0x3c>)
 8002db2:	f004 f8c3 	bl	8006f3c <HAL_UART_Receive_IT>
	}
	if(huart == &huart6){
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <HAL_UART_ErrorCallback+0x44>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d107      	bne.n	8002dce <HAL_UART_ErrorCallback+0x32>
		HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 8002dbe:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_UART_ErrorCallback+0x48>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4908      	ldr	r1, [pc, #32]	; (8002de8 <HAL_UART_ErrorCallback+0x4c>)
 8002dc8:	4805      	ldr	r0, [pc, #20]	; (8002de0 <HAL_UART_ErrorCallback+0x44>)
 8002dca:	f004 f8b7 	bl	8006f3c <HAL_UART_Receive_IT>
	}
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000350 	.word	0x20000350
 8002ddc:	200001c0 	.word	0x200001c0
 8002de0:	200003f8 	.word	0x200003f8
 8002de4:	2000001e 	.word	0x2000001e
 8002de8:	20000130 	.word	0x20000130

08002dec <MODE_Set>:

void MODE_Set(SX1278_t * module, uint8_t mode){
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	70fb      	strb	r3, [r7, #3]
	  switch(mode){
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <MODE_Set+0x18>
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d00b      	beq.n	8002e1a <MODE_Set+0x2e>
		  case 1:	// switch to FSK
			  SX1278_FSK_Config(module);
		  break;

		  default: // lets ignore that one
		  break;
 8002e02:	e00e      	b.n	8002e22 <MODE_Set+0x36>
			  SX1278_begin(module, SX1278_433MHZ, MIN_POWER, SX1278_LORA_SF_8, // air time ~ 495ms
 8002e04:	2308      	movs	r3, #8
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	2303      	movs	r3, #3
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	2203      	movs	r2, #3
 8002e10:	2100      	movs	r1, #0
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe fc48 	bl	80016a8 <SX1278_begin>
		  break;
 8002e18:	e003      	b.n	8002e22 <MODE_Set+0x36>
			  SX1278_FSK_Config(module);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe fa5c 	bl	80012d8 <SX1278_FSK_Config>
		  break;
 8002e20:	bf00      	nop
	  }
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d105      	bne.n	8002e4a <HAL_TIM_PeriodElapsedCallback+0x1e>
		sec_gps++;
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	3301      	adds	r3, #1
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002e48:	701a      	strb	r2, [r3, #0]
	}

	if(htim->Instance == TIM3){
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d102      	bne.n	8002e5a <HAL_TIM_PeriodElapsedCallback+0x2e>
		u_sec_delay = 1;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM4){
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a10      	ldr	r2, [pc, #64]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d105      	bne.n	8002e70 <HAL_TIM_PeriodElapsedCallback+0x44>
		HAL_TIM_Base_Stop_IT(&htim4);
 8002e64:	480f      	ldr	r0, [pc, #60]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002e66:	f003 fae1 	bl	800642c <HAL_TIM_Base_Stop_IT>
		gsmRec = 1;
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
	}
	if(htim->Instance == TIM5){
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d107      	bne.n	8002e8a <HAL_TIM_PeriodElapsedCallback+0x5e>
		HAL_TIM_Base_Stop_IT(&htim5);
 8002e7a:	480d      	ldr	r0, [pc, #52]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002e7c:	f003 fad6 	bl	800642c <HAL_TIM_Base_Stop_IT>
		GSM_On();
 8002e80:	f7ff f896 	bl	8001fb0 <GSM_On>
		HAL_TIM_Base_Start_IT(&htim4);
 8002e84:	4807      	ldr	r0, [pc, #28]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002e86:	f003 fa6f 	bl	8006368 <HAL_TIM_Base_Start_IT>
	}
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	200000f6 	.word	0x200000f6
 8002e98:	40000400 	.word	0x40000400
 8002e9c:	200000f0 	.word	0x200000f0
 8002ea0:	40000800 	.word	0x40000800
 8002ea4:	200001c8 	.word	0x200001c8
 8002ea8:	200000f4 	.word	0x200000f4
 8002eac:	40000c00 	.word	0x40000c00
 8002eb0:	20000218 	.word	0x20000218

08002eb4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin){
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
	loraModuleIrq = 1;
 8002ebe:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	200000ee 	.word	0x200000ee

08002ed4 <RTTY_Send>:

void RTTY_Send(SX1278_t * module, uint8_t *buf, uint8_t len){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	71fb      	strb	r3, [r7, #7]
	uint16_t baudTimeout = 20;
 8002ee2:	2314      	movs	r3, #20
 8002ee4:	82bb      	strh	r3, [r7, #20]
	uint8_t i;
	uint8_t curChar = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	74fb      	strb	r3, [r7, #19]

	SX1278_RTTY_Config(module);
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f7fe f958 	bl	80011a0 <SX1278_RTTY_Config>

	for(i = 0; i < len; i++){
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	75fb      	strb	r3, [r7, #23]
 8002ef4:	e00e      	b.n	8002f14 <RTTY_Send+0x40>
		curChar = buf[i];
 8002ef6:	7dfb      	ldrb	r3, [r7, #23]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	4413      	add	r3, r2
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	74fb      	strb	r3, [r7, #19]
		RTTY_SendSingle(module, curChar, baudTimeout);
 8002f00:	8abb      	ldrh	r3, [r7, #20]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	4619      	mov	r1, r3
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f80c 	bl	8002f26 <RTTY_SendSingle>
	for(i = 0; i < len; i++){
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	3301      	adds	r3, #1
 8002f12:	75fb      	strb	r3, [r7, #23]
 8002f14:	7dfa      	ldrb	r2, [r7, #23]
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d3ec      	bcc.n	8002ef6 <RTTY_Send+0x22>
	}
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <RTTY_SendSingle>:

void RTTY_SendSingle(SX1278_t * module, uint8_t buf, uint8_t timeout){
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	70fb      	strb	r3, [r7, #3]
 8002f32:	4613      	mov	r3, r2
 8002f34:	70bb      	strb	r3, [r7, #2]
	SX1278_RTTY_WriteLow(module); //start bit
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe f97d 	bl	8001236 <SX1278_RTTY_WriteLow>
	HAL_Delay(timeout);
 8002f3c:	78bb      	ldrb	r3, [r7, #2]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fd4e 	bl	80039e0 <HAL_Delay>
	for(uint8_t j = 0; j < 8; j++){
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e015      	b.n	8002f76 <RTTY_SendSingle+0x50>
		if(bit_set(buf, j)){
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	fa42 f303 	asr.w	r3, r2, r3
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <RTTY_SendSingle+0x3c>
			SX1278_RTTY_WriteHigh(module);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fe f993 	bl	8001286 <SX1278_RTTY_WriteHigh>
 8002f60:	e002      	b.n	8002f68 <RTTY_SendSingle+0x42>
		}else{
			SX1278_RTTY_WriteLow(module);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fe f967 	bl	8001236 <SX1278_RTTY_WriteLow>
		}
		HAL_Delay(timeout);
 8002f68:	78bb      	ldrb	r3, [r7, #2]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fd38 	bl	80039e0 <HAL_Delay>
	for(uint8_t j = 0; j < 8; j++){
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	3301      	adds	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	2b07      	cmp	r3, #7
 8002f7a:	d9e6      	bls.n	8002f4a <RTTY_SendSingle+0x24>
	}
	SX1278_RTTY_WriteHigh(module); // stop bit
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7fe f982 	bl	8001286 <SX1278_RTTY_WriteHigh>
	HAL_Delay(30);
 8002f82:	201e      	movs	r0, #30
 8002f84:	f000 fd2c 	bl	80039e0 <HAL_Delay>
	SX1278_RTTY_Stop(module);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7fe f93b 	bl	8001204 <SX1278_RTTY_Stop>
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <get_check_sum>:

uint8_t get_check_sum(char *string){
 8002f96:	b590      	push	{r4, r7, lr}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
	uint8_t XOR = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i < strlen(string) ; i++) {
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	73bb      	strb	r3, [r7, #14]
 8002fa6:	e009      	b.n	8002fbc <get_check_sum+0x26>
		XOR = XOR ^ string[i];
 8002fa8:	7bbb      	ldrb	r3, [r7, #14]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	4053      	eors	r3, r2
 8002fb4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i < strlen(string) ; i++) {
 8002fb6:	7bbb      	ldrb	r3, [r7, #14]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	73bb      	strb	r3, [r7, #14]
 8002fbc:	7bbc      	ldrb	r4, [r7, #14]
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd f918 	bl	80001f4 <strlen>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	429c      	cmp	r4, r3
 8002fc8:	d3ee      	bcc.n	8002fa8 <get_check_sum+0x12>
	}
	return XOR;
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd90      	pop	{r4, r7, pc}

08002fd4 <make_string>:

void make_string(char *s, uint8_t size){
 8002fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd6:	b099      	sub	sp, #100	; 0x64
 8002fd8:	af08      	add	r7, sp, #32
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	70fb      	strb	r3, [r7, #3]
	uint8_t lat[10];
	uint8_t lon[10];
	uint8_t hei[9];
	uint8_t spe[7];
	//CLEAR TEMP BUFFERS (SOMETIMES IT HAS INFORMATION IN IT, BECAUSE IT USES MEMORY LOCATION THAT WERE TEMP USED FOR OTHER STUFF) ONLY WHEN THERE IS +1 elemt in array
	memset(time, 0, sizeof(time));
 8002fe0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fe4:	2209      	movs	r2, #9
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f004 febd 	bl	8007d68 <memset>
	memset(lat, 0, sizeof(lat));
 8002fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ff2:	220a      	movs	r2, #10
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f004 feb6 	bl	8007d68 <memset>
	memset(lon, 0, sizeof(lon));
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	220a      	movs	r2, #10
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f004 feaf 	bl	8007d68 <memset>
	memset(hei, 0, sizeof(hei));
 800300a:	f107 0310 	add.w	r3, r7, #16
 800300e:	2209      	movs	r2, #9
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f004 fea8 	bl	8007d68 <memset>
	memset(spe, 0, sizeof(spe));
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	2207      	movs	r2, #7
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f004 fea1 	bl	8007d68 <memset>

	//Get all params from satalites data
	GPS_GetTime(time);
 8003026:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fec0 	bl	8001db0 <GPS_GetTime>
	GPS_GetLat(lat);
 8003030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fe2d 	bl	8001c94 <GPS_GetLat>
	GPS_GetLon(lon);
 800303a:	f107 031c 	add.w	r3, r7, #28
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fe4c 	bl	8001cdc <GPS_GetLon>
	GPS_GetHei(hei);
 8003044:	f107 0310 	add.w	r3, r7, #16
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe fe8f 	bl	8001d6c <GPS_GetHei>
	GPS_GetSpe(spe);
 800304e:	f107 0308 	add.w	r3, r7, #8
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fe68 	bl	8001d28 <GPS_GetSpe>

	snprintf(s, size, "\r\n$$IRBE5,%li,%s,%s,%s,%s,%s%s,%u", ++num, time, lat, lon, hei, spe, &(UART6_DataBuf[1]), sampleInput());
 8003058:	78fc      	ldrb	r4, [r7, #3]
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <make_string+0x108>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	4a1e      	ldr	r2, [pc, #120]	; (80030dc <make_string+0x108>)
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <make_string+0x108>)
 8003066:	681d      	ldr	r5, [r3, #0]
 8003068:	f000 f87e 	bl	8003168 <sampleInput>
 800306c:	4603      	mov	r3, r0
 800306e:	9306      	str	r3, [sp, #24]
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <make_string+0x10c>)
 8003072:	9305      	str	r3, [sp, #20]
 8003074:	f107 0308 	add.w	r3, r7, #8
 8003078:	9304      	str	r3, [sp, #16]
 800307a:	f107 0310 	add.w	r3, r7, #16
 800307e:	9303      	str	r3, [sp, #12]
 8003080:	f107 031c 	add.w	r3, r7, #28
 8003084:	9302      	str	r3, [sp, #8]
 8003086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	462b      	mov	r3, r5
 8003094:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <make_string+0x110>)
 8003096:	4621      	mov	r1, r4
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f004 fe6d 	bl	8007d78 <sniprintf>
	uint8_t l = strlen((char *)s);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd f8a8 	bl	80001f4 <strlen>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(snprintf(s + l, size - l, "*%02x\r\n", get_check_sum((char *)s))  > size - 4 - 1){
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	1f1c      	subs	r4, r3, #4
 80030ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	18d5      	adds	r5, r2, r3
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	461e      	mov	r6, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff68 	bl	8002f96 <get_check_sum>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <make_string+0x114>)
 80030ca:	4631      	mov	r1, r6
 80030cc:	4628      	mov	r0, r5
 80030ce:	f004 fe53 	bl	8007d78 <sniprintf>
 80030d2:	4603      	mov	r3, r0
 80030d4:	429c      	cmp	r4, r3
		//buffer overflow
		return;
	}
}
 80030d6:	3744      	adds	r7, #68	; 0x44
 80030d8:	46bd      	mov	sp, r7
 80030da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030dc:	200000dc 	.word	0x200000dc
 80030e0:	200000fd 	.word	0x200000fd
 80030e4:	0800869c 	.word	0x0800869c
 80030e8:	080086c0 	.word	0x080086c0

080030ec <make_string_gsm>:

void make_string_gsm(char *s, uint8_t size){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08e      	sub	sp, #56	; 0x38
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	70fb      	strb	r3, [r7, #3]

	uint8_t lat[10];
	uint8_t lon[10];
	uint8_t hei[9];
	//CLEAR TEMP BUFFERS (SOMETIMES IT HAS INFORMATION IN IT, BECAUSE IT USES MEMORY LOCATION THAT WERE TEMP USED FOR OTHER STUFF) ONLY WHEN THERE IS +1 elemt in array
	memset(lat, 0, sizeof(lat));
 80030f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fc:	220a      	movs	r2, #10
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f004 fe31 	bl	8007d68 <memset>
	memset(lon, 0, sizeof(lon));
 8003106:	f107 0318 	add.w	r3, r7, #24
 800310a:	220a      	movs	r2, #10
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f004 fe2a 	bl	8007d68 <memset>
	memset(hei, 0, sizeof(hei));
 8003114:	f107 030c 	add.w	r3, r7, #12
 8003118:	2209      	movs	r2, #9
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f004 fe23 	bl	8007d68 <memset>

	//Get all params from satalites data
	GPS_GetLat(lat);
 8003122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fdb4 	bl	8001c94 <GPS_GetLat>
	GPS_GetLon(lon);
 800312c:	f107 0318 	add.w	r3, r7, #24
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe fdd3 	bl	8001cdc <GPS_GetLon>
	GPS_GetHei(hei);
 8003136:	f107 030c 	add.w	r3, r7, #12
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe fe16 	bl	8001d6c <GPS_GetHei>

	snprintf(s, size, "Latitude:%s\nLongitude:%s\nHeight ASL:%s",lat, lon, hei);
 8003140:	78f9      	ldrb	r1, [r7, #3]
 8003142:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003146:	f107 030c 	add.w	r3, r7, #12
 800314a:	9301      	str	r3, [sp, #4]
 800314c:	f107 0318 	add.w	r3, r7, #24
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	4613      	mov	r3, r2
 8003154:	4a03      	ldr	r2, [pc, #12]	; (8003164 <make_string_gsm+0x78>)
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f004 fe0e 	bl	8007d78 <sniprintf>
}
 800315c:	bf00      	nop
 800315e:	3730      	adds	r7, #48	; 0x30
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	080086c8 	.word	0x080086c8

08003168 <sampleInput>:
//	temperature += 25.0; // Add the 25�C
//	result = temperature;
//
//	return result;
//}
uint16_t sampleInput(void){
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
	  float TemperatureValue = 0;
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	607b      	str	r3, [r7, #4]
	  uint16_t value = 0;
 8003174:	2300      	movs	r3, #0
 8003176:	807b      	strh	r3, [r7, #2]
	  if (HAL_ADC_Start(&hadc1) != HAL_OK){
 8003178:	483f      	ldr	r0, [pc, #252]	; (8003278 <sampleInput+0x110>)
 800317a:	f000 fc99 	bl	8003ab0 <HAL_ADC_Start>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <sampleInput+0x20>
		return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e069      	b.n	800325c <sampleInput+0xf4>
	  }
	  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 8003188:	f04f 31ff 	mov.w	r1, #4294967295
 800318c:	483a      	ldr	r0, [pc, #232]	; (8003278 <sampleInput+0x110>)
 800318e:	f000 fd43 	bl	8003c18 <HAL_ADC_PollForConversion>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <sampleInput+0x34>
	  return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e05f      	b.n	800325c <sampleInput+0xf4>
	  }
	  if((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_REG_EOC) !=  HAL_ADC_STATE_REG_EOC){
 800319c:	4836      	ldr	r0, [pc, #216]	; (8003278 <sampleInput+0x110>)
 800319e:	f001 f855 	bl	800424c <HAL_ADC_GetState>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ac:	d001      	beq.n	80031b2 <sampleInput+0x4a>
	  return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e054      	b.n	800325c <sampleInput+0xf4>
	  }
	  value = HAL_ADC_GetValue(&hadc1);
 80031b2:	4831      	ldr	r0, [pc, #196]	; (8003278 <sampleInput+0x110>)
 80031b4:	f000 fefc 	bl	8003fb0 <HAL_ADC_GetValue>
 80031b8:	4603      	mov	r3, r0
 80031ba:	807b      	strh	r3, [r7, #2]
	  TemperatureValue = value&0x0fff;// 12 bit result
 80031bc:	887b      	ldrh	r3, [r7, #2]
 80031be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ca:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue *= 3300;
 80031ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80031d2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800327c <sampleInput+0x114>
 80031d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031da:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue /= 0xfff; //Reading in mV
 80031de:	ed97 7a01 	vldr	s14, [r7, #4]
 80031e2:	eddf 6a27 	vldr	s13, [pc, #156]	; 8003280 <sampleInput+0x118>
 80031e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031ea:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue /= 1000.0; //Reading in Volts
 80031ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80031f2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003284 <sampleInput+0x11c>
 80031f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031fa:	edc7 7a01 	vstr	s15, [r7, #4]
	  TemperatureValue -= 0.760; // Subtract the reference voltage at 25�C
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd f9ba 	bl	8000578 <__aeabi_f2d>
 8003204:	a318      	add	r3, pc, #96	; (adr r3, 8003268 <sampleInput+0x100>)
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f7fd f855 	bl	80002b8 <__aeabi_dsub>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	f7fd fc19 	bl	8000a4c <__aeabi_d2f>
 800321a:	4603      	mov	r3, r0
 800321c:	607b      	str	r3, [r7, #4]
	  TemperatureValue /= .0025; // Divide by slope 2.5mV
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd f9aa 	bl	8000578 <__aeabi_f2d>
 8003224:	a312      	add	r3, pc, #72	; (adr r3, 8003270 <sampleInput+0x108>)
 8003226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322a:	f7fd fb27 	bl	800087c <__aeabi_ddiv>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	f7fd fc09 	bl	8000a4c <__aeabi_d2f>
 800323a:	4603      	mov	r3, r0
 800323c:	607b      	str	r3, [r7, #4]
	  TemperatureValue += 25.0; // Add the 25�C
 800323e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003242:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003246:	ee77 7a87 	vadd.f32	s15, s15, s14
 800324a:	edc7 7a01 	vstr	s15, [r7, #4]
	  return TemperatureValue;
 800324e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003256:	ee17 3a90 	vmov	r3, s15
 800325a:	b29b      	uxth	r3, r3
  }
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	f3af 8000 	nop.w
 8003268:	851eb852 	.word	0x851eb852
 800326c:	3fe851eb 	.word	0x3fe851eb
 8003270:	47ae147b 	.word	0x47ae147b
 8003274:	3f647ae1 	.word	0x3f647ae1
 8003278:	200002a8 	.word	0x200002a8
 800327c:	454e4000 	.word	0x454e4000
 8003280:	457ff000 	.word	0x457ff000
 8003284:	447a0000 	.word	0x447a0000

08003288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800328c:	b672      	cpsid	i
}
 800328e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003290:	e7fe      	b.n	8003290 <Error_Handler+0x8>
	...

08003294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <HAL_MspInit+0x4c>)
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_MspInit+0x4c>)
 80032a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a8:	6453      	str	r3, [r2, #68]	; 0x44
 80032aa:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_MspInit+0x4c>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_MspInit+0x4c>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	4a08      	ldr	r2, [pc, #32]	; (80032e0 <HAL_MspInit+0x4c>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_MspInit+0x4c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800

080032e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0e      	ldr	r2, [pc, #56]	; (800332c <HAL_ADC_MspInit+0x48>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d115      	bne.n	8003322 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <HAL_ADC_MspInit+0x4c>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <HAL_ADC_MspInit+0x4c>)
 8003300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003304:	6453      	str	r3, [r2, #68]	; 0x44
 8003306:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <HAL_ADC_MspInit+0x4c>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003312:	2200      	movs	r2, #0
 8003314:	2100      	movs	r1, #0
 8003316:	2012      	movs	r0, #18
 8003318:	f001 f985 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800331c:	2012      	movs	r0, #18
 800331e:	f001 f99e 	bl	800465e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40012000 	.word	0x40012000
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <HAL_CRC_MspInit+0x3c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10d      	bne.n	8003362 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_CRC_MspInit+0x40>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_CRC_MspInit+0x40>)
 8003350:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003354:	6313      	str	r3, [r2, #48]	; 0x30
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <HAL_CRC_MspInit+0x40>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40023000 	.word	0x40023000
 8003374:	40023800 	.word	0x40023800

08003378 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	; 0x28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003380:	f107 0314 	add.w	r3, r7, #20
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a19      	ldr	r2, [pc, #100]	; (80033fc <HAL_SPI_MspInit+0x84>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d12b      	bne.n	80033f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <HAL_SPI_MspInit+0x88>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	4a17      	ldr	r2, [pc, #92]	; (8003400 <HAL_SPI_MspInit+0x88>)
 80033a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033a8:	6453      	str	r3, [r2, #68]	; 0x44
 80033aa:	4b15      	ldr	r3, [pc, #84]	; (8003400 <HAL_SPI_MspInit+0x88>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <HAL_SPI_MspInit+0x88>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a10      	ldr	r2, [pc, #64]	; (8003400 <HAL_SPI_MspInit+0x88>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30
 80033c6:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <HAL_SPI_MspInit+0x88>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 80033d2:	23e0      	movs	r3, #224	; 0xe0
 80033d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033de:	2303      	movs	r3, #3
 80033e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033e2:	2305      	movs	r3, #5
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e6:	f107 0314 	add.w	r3, r7, #20
 80033ea:	4619      	mov	r1, r3
 80033ec:	4805      	ldr	r0, [pc, #20]	; (8003404 <HAL_SPI_MspInit+0x8c>)
 80033ee:	f001 fce9 	bl	8004dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033f2:	bf00      	nop
 80033f4:	3728      	adds	r7, #40	; 0x28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40013000 	.word	0x40013000
 8003400:	40023800 	.word	0x40023800
 8003404:	40020000 	.word	0x40020000

08003408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003418:	d116      	bne.n	8003448 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	4b36      	ldr	r3, [pc, #216]	; (80034f8 <HAL_TIM_Base_MspInit+0xf0>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a35      	ldr	r2, [pc, #212]	; (80034f8 <HAL_TIM_Base_MspInit+0xf0>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	4b33      	ldr	r3, [pc, #204]	; (80034f8 <HAL_TIM_Base_MspInit+0xf0>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2100      	movs	r1, #0
 800343a:	201c      	movs	r0, #28
 800343c:	f001 f8f3 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003440:	201c      	movs	r0, #28
 8003442:	f001 f90c 	bl	800465e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003446:	e052      	b.n	80034ee <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <HAL_TIM_Base_MspInit+0xf4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d116      	bne.n	8003480 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <HAL_TIM_Base_MspInit+0xf0>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4a27      	ldr	r2, [pc, #156]	; (80034f8 <HAL_TIM_Base_MspInit+0xf0>)
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	6413      	str	r3, [r2, #64]	; 0x40
 8003462:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <HAL_TIM_Base_MspInit+0xf0>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800346e:	2200      	movs	r2, #0
 8003470:	2100      	movs	r1, #0
 8003472:	201d      	movs	r0, #29
 8003474:	f001 f8d7 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003478:	201d      	movs	r0, #29
 800347a:	f001 f8f0 	bl	800465e <HAL_NVIC_EnableIRQ>
}
 800347e:	e036      	b.n	80034ee <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1e      	ldr	r2, [pc, #120]	; (8003500 <HAL_TIM_Base_MspInit+0xf8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d116      	bne.n	80034b8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <HAL_TIM_Base_MspInit+0xf0>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <HAL_TIM_Base_MspInit+0xf0>)
 8003494:	f043 0304 	orr.w	r3, r3, #4
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <HAL_TIM_Base_MspInit+0xf0>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80034a6:	2200      	movs	r2, #0
 80034a8:	2100      	movs	r1, #0
 80034aa:	201e      	movs	r0, #30
 80034ac:	f001 f8bb 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80034b0:	201e      	movs	r0, #30
 80034b2:	f001 f8d4 	bl	800465e <HAL_NVIC_EnableIRQ>
}
 80034b6:	e01a      	b.n	80034ee <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a11      	ldr	r2, [pc, #68]	; (8003504 <HAL_TIM_Base_MspInit+0xfc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d115      	bne.n	80034ee <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <HAL_TIM_Base_MspInit+0xf0>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <HAL_TIM_Base_MspInit+0xf0>)
 80034cc:	f043 0308 	orr.w	r3, r3, #8
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_TIM_Base_MspInit+0xf0>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	2032      	movs	r0, #50	; 0x32
 80034e4:	f001 f89f 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80034e8:	2032      	movs	r0, #50	; 0x32
 80034ea:	f001 f8b8 	bl	800465e <HAL_NVIC_EnableIRQ>
}
 80034ee:	bf00      	nop
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40000400 	.word	0x40000400
 8003500:	40000800 	.word	0x40000800
 8003504:	40000c00 	.word	0x40000c00

08003508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08e      	sub	sp, #56	; 0x38
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a6f      	ldr	r2, [pc, #444]	; (80036e4 <HAL_UART_MspInit+0x1dc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d164      	bne.n	80035f4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	623b      	str	r3, [r7, #32]
 800352e:	4b6e      	ldr	r3, [pc, #440]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	4a6d      	ldr	r2, [pc, #436]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003534:	f043 0310 	orr.w	r3, r3, #16
 8003538:	6453      	str	r3, [r2, #68]	; 0x44
 800353a:	4b6b      	ldr	r3, [pc, #428]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	623b      	str	r3, [r7, #32]
 8003544:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	4b67      	ldr	r3, [pc, #412]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	4a66      	ldr	r2, [pc, #408]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6313      	str	r3, [r2, #48]	; 0x30
 8003556:	4b64      	ldr	r3, [pc, #400]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	61fb      	str	r3, [r7, #28]
 8003560:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8003562:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003568:	2302      	movs	r3, #2
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003570:	2303      	movs	r3, #3
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003574:	2307      	movs	r3, #7
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357c:	4619      	mov	r1, r3
 800357e:	485b      	ldr	r0, [pc, #364]	; (80036ec <HAL_UART_MspInit+0x1e4>)
 8003580:	f001 fc20 	bl	8004dc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003584:	4b5a      	ldr	r3, [pc, #360]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 8003586:	4a5b      	ldr	r2, [pc, #364]	; (80036f4 <HAL_UART_MspInit+0x1ec>)
 8003588:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800358a:	4b59      	ldr	r3, [pc, #356]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 800358c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003590:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003592:	4b57      	ldr	r3, [pc, #348]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 8003594:	2200      	movs	r2, #0
 8003596:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003598:	4b55      	ldr	r3, [pc, #340]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 800359a:	2200      	movs	r2, #0
 800359c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800359e:	4b54      	ldr	r3, [pc, #336]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 80035a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035a6:	4b52      	ldr	r3, [pc, #328]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035ac:	4b50      	ldr	r3, [pc, #320]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80035b2:	4b4f      	ldr	r3, [pc, #316]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 80035b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035ba:	4b4d      	ldr	r3, [pc, #308]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 80035bc:	2200      	movs	r2, #0
 80035be:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035c0:	4b4b      	ldr	r3, [pc, #300]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035c6:	484a      	ldr	r0, [pc, #296]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 80035c8:	f001 f880 	bl	80046cc <HAL_DMA_Init>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80035d2:	f7ff fe59 	bl	8003288 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a45      	ldr	r2, [pc, #276]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
 80035dc:	4a44      	ldr	r2, [pc, #272]	; (80036f0 <HAL_UART_MspInit+0x1e8>)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035e2:	2200      	movs	r2, #0
 80035e4:	2100      	movs	r1, #0
 80035e6:	2025      	movs	r0, #37	; 0x25
 80035e8:	f001 f81d 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035ec:	2025      	movs	r0, #37	; 0x25
 80035ee:	f001 f836 	bl	800465e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035f2:	e073      	b.n	80036dc <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a3f      	ldr	r2, [pc, #252]	; (80036f8 <HAL_UART_MspInit+0x1f0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d134      	bne.n	8003668 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	4a38      	ldr	r2, [pc, #224]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360c:	6413      	str	r3, [r2, #64]	; 0x40
 800360e:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b2f      	ldr	r3, [pc, #188]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GSM_TX_Pin|GSM_RX_Pin;
 8003636:	230c      	movs	r3, #12
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003642:	2303      	movs	r3, #3
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003646:	2307      	movs	r3, #7
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800364e:	4619      	mov	r1, r3
 8003650:	4826      	ldr	r0, [pc, #152]	; (80036ec <HAL_UART_MspInit+0x1e4>)
 8003652:	f001 fbb7 	bl	8004dc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003656:	2200      	movs	r2, #0
 8003658:	2100      	movs	r1, #0
 800365a:	2026      	movs	r0, #38	; 0x26
 800365c:	f000 ffe3 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003660:	2026      	movs	r0, #38	; 0x26
 8003662:	f000 fffc 	bl	800465e <HAL_NVIC_EnableIRQ>
}
 8003666:	e039      	b.n	80036dc <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART6)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a23      	ldr	r2, [pc, #140]	; (80036fc <HAL_UART_MspInit+0x1f4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d134      	bne.n	80036dc <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 800367c:	f043 0320 	orr.w	r3, r3, #32
 8003680:	6453      	str	r3, [r2, #68]	; 0x44
 8003682:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6313      	str	r3, [r2, #48]	; 0x30
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_UART_MspInit+0x1e0>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80036aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b0:	2302      	movs	r3, #2
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b8:	2303      	movs	r3, #3
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80036bc:	2308      	movs	r3, #8
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c4:	4619      	mov	r1, r3
 80036c6:	4809      	ldr	r0, [pc, #36]	; (80036ec <HAL_UART_MspInit+0x1e4>)
 80036c8:	f001 fb7c 	bl	8004dc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80036cc:	2200      	movs	r2, #0
 80036ce:	2100      	movs	r1, #0
 80036d0:	2047      	movs	r0, #71	; 0x47
 80036d2:	f000 ffa8 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80036d6:	2047      	movs	r0, #71	; 0x47
 80036d8:	f000 ffc1 	bl	800465e <HAL_NVIC_EnableIRQ>
}
 80036dc:	bf00      	nop
 80036de:	3738      	adds	r7, #56	; 0x38
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40011000 	.word	0x40011000
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40020000 	.word	0x40020000
 80036f0:	200002f0 	.word	0x200002f0
 80036f4:	40026440 	.word	0x40026440
 80036f8:	40004400 	.word	0x40004400
 80036fc:	40011400 	.word	0x40011400

08003700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003704:	e7fe      	b.n	8003704 <NMI_Handler+0x4>

08003706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003706:	b480      	push	{r7}
 8003708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800370a:	e7fe      	b.n	800370a <HardFault_Handler+0x4>

0800370c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003710:	e7fe      	b.n	8003710 <MemManage_Handler+0x4>

08003712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003716:	e7fe      	b.n	8003716 <BusFault_Handler+0x4>

08003718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800371c:	e7fe      	b.n	800371c <UsageFault_Handler+0x4>

0800371e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800371e:	b480      	push	{r7}
 8003720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800373a:	b480      	push	{r7}
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800374c:	f000 f928 	bl	80039a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003750:	bf00      	nop
 8003752:	bd80      	pop	{r7, pc}

08003754 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <ADC_IRQHandler+0x10>)
 800375a:	f000 fae8 	bl	8003d2e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200002a8 	.word	0x200002a8

08003768 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_SCK_Pin);
 800376c:	2020      	movs	r0, #32
 800376e:	f001 fcdf 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <TIM2_IRQHandler+0x10>)
 800377e:	f002 fe84 	bl	800648a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200004f8 	.word	0x200004f8

0800378c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003790:	4802      	ldr	r0, [pc, #8]	; (800379c <TIM3_IRQHandler+0x10>)
 8003792:	f002 fe7a 	bl	800648a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000260 	.word	0x20000260

080037a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <TIM4_IRQHandler+0x10>)
 80037a6:	f002 fe70 	bl	800648a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200001c8 	.word	0x200001c8

080037b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037b8:	4802      	ldr	r0, [pc, #8]	; (80037c4 <USART1_IRQHandler+0x10>)
 80037ba:	f003 fbef 	bl	8006f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000350 	.word	0x20000350

080037c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037cc:	4802      	ldr	r0, [pc, #8]	; (80037d8 <USART2_IRQHandler+0x10>)
 80037ce:	f003 fbe5 	bl	8006f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000540 	.word	0x20000540

080037dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80037e0:	4802      	ldr	r0, [pc, #8]	; (80037ec <TIM5_IRQHandler+0x10>)
 80037e2:	f002 fe52 	bl	800648a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000218 	.word	0x20000218

080037f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80037f4:	4802      	ldr	r0, [pc, #8]	; (8003800 <DMA2_Stream2_IRQHandler+0x10>)
 80037f6:	f001 f8a9 	bl	800494c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200002f0 	.word	0x200002f0

08003804 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003808:	4802      	ldr	r0, [pc, #8]	; (8003814 <USART6_IRQHandler+0x10>)
 800380a:	f003 fbc7 	bl	8006f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	200003f8 	.word	0x200003f8

08003818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003820:	4a14      	ldr	r2, [pc, #80]	; (8003874 <_sbrk+0x5c>)
 8003822:	4b15      	ldr	r3, [pc, #84]	; (8003878 <_sbrk+0x60>)
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800382c:	4b13      	ldr	r3, [pc, #76]	; (800387c <_sbrk+0x64>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003834:	4b11      	ldr	r3, [pc, #68]	; (800387c <_sbrk+0x64>)
 8003836:	4a12      	ldr	r2, [pc, #72]	; (8003880 <_sbrk+0x68>)
 8003838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <_sbrk+0x64>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	429a      	cmp	r2, r3
 8003846:	d207      	bcs.n	8003858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003848:	f004 fa56 	bl	8007cf8 <__errno>
 800384c:	4603      	mov	r3, r0
 800384e:	220c      	movs	r2, #12
 8003850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	e009      	b.n	800386c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <_sbrk+0x64>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <_sbrk+0x64>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	4a05      	ldr	r2, [pc, #20]	; (800387c <_sbrk+0x64>)
 8003868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800386a:	68fb      	ldr	r3, [r7, #12]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20018000 	.word	0x20018000
 8003878:	00000400 	.word	0x00000400
 800387c:	20000164 	.word	0x20000164
 8003880:	200006c0 	.word	0x200006c0

08003884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <SystemInit+0x20>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <SystemInit+0x20>)
 8003890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80038a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038ac:	480d      	ldr	r0, [pc, #52]	; (80038e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038ae:	490e      	ldr	r1, [pc, #56]	; (80038e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038b0:	4a0e      	ldr	r2, [pc, #56]	; (80038ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038b4:	e002      	b.n	80038bc <LoopCopyDataInit>

080038b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ba:	3304      	adds	r3, #4

080038bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038c0:	d3f9      	bcc.n	80038b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038c2:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038c4:	4c0b      	ldr	r4, [pc, #44]	; (80038f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80038c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038c8:	e001      	b.n	80038ce <LoopFillZerobss>

080038ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038cc:	3204      	adds	r2, #4

080038ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038d0:	d3fb      	bcc.n	80038ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038d2:	f7ff ffd7 	bl	8003884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038d6:	f004 fa15 	bl	8007d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038da:	f7fe fc83 	bl	80021e4 <main>
  bx  lr    
 80038de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80038e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80038e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038e8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80038ec:	0800876c 	.word	0x0800876c
  ldr r2, =_sbss
 80038f0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80038f4:	200006c0 	.word	0x200006c0

080038f8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038f8:	e7fe      	b.n	80038f8 <DMA1_Stream0_IRQHandler>
	...

080038fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <HAL_Init+0x40>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0d      	ldr	r2, [pc, #52]	; (800393c <HAL_Init+0x40>)
 8003906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800390a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_Init+0x40>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0a      	ldr	r2, [pc, #40]	; (800393c <HAL_Init+0x40>)
 8003912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_Init+0x40>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a07      	ldr	r2, [pc, #28]	; (800393c <HAL_Init+0x40>)
 800391e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003924:	2003      	movs	r0, #3
 8003926:	f000 fe73 	bl	8004610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800392a:	200f      	movs	r0, #15
 800392c:	f000 f808 	bl	8003940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003930:	f7ff fcb0 	bl	8003294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023c00 	.word	0x40023c00

08003940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_InitTick+0x54>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b12      	ldr	r3, [pc, #72]	; (8003998 <HAL_InitTick+0x58>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	4619      	mov	r1, r3
 8003952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003956:	fbb3 f3f1 	udiv	r3, r3, r1
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fe8b 	bl	800467a <HAL_SYSTICK_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e00e      	b.n	800398c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b0f      	cmp	r3, #15
 8003972:	d80a      	bhi.n	800398a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003974:	2200      	movs	r2, #0
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	f000 fe53 	bl	8004626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003980:	4a06      	ldr	r2, [pc, #24]	; (800399c <HAL_InitTick+0x5c>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e000      	b.n	800398c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000020 	.word	0x20000020
 8003998:	20000028 	.word	0x20000028
 800399c:	20000024 	.word	0x20000024

080039a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_IncTick+0x20>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_IncTick+0x24>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4413      	add	r3, r2
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_IncTick+0x24>)
 80039b2:	6013      	str	r3, [r2, #0]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000028 	.word	0x20000028
 80039c4:	200006ac 	.word	0x200006ac

080039c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return uwTick;
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_GetTick+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	200006ac 	.word	0x200006ac

080039e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e8:	f7ff ffee 	bl	80039c8 <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d005      	beq.n	8003a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_Delay+0x44>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a06:	bf00      	nop
 8003a08:	f7ff ffde 	bl	80039c8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d8f7      	bhi.n	8003a08 <HAL_Delay+0x28>
  {
  }
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000028 	.word	0x20000028

08003a28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e033      	b.n	8003aa6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff fc4c 	bl	80032e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d118      	bne.n	8003a98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a6e:	f023 0302 	bic.w	r3, r3, #2
 8003a72:	f043 0202 	orr.w	r2, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fbf2 	bl	8004264 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f023 0303 	bic.w	r3, r3, #3
 8003a8e:	f043 0201 	orr.w	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
 8003a96:	e001      	b.n	8003a9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_ADC_Start+0x1a>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e097      	b.n	8003bfa <HAL_ADC_Start+0x14a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d018      	beq.n	8003b12 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003af0:	4b45      	ldr	r3, [pc, #276]	; (8003c08 <HAL_ADC_Start+0x158>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a45      	ldr	r2, [pc, #276]	; (8003c0c <HAL_ADC_Start+0x15c>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0c9a      	lsrs	r2, r3, #18
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003b04:	e002      	b.n	8003b0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f9      	bne.n	8003b06 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d15f      	bne.n	8003be0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5e:	d106      	bne.n	8003b6e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	f023 0206 	bic.w	r2, r3, #6
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
 8003b6c:	e002      	b.n	8003b74 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b7c:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_ADC_Start+0x160>)
 8003b7e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b88:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d129      	bne.n	8003bf8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	e020      	b.n	8003bf8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <HAL_ADC_Start+0x164>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_ADC_Start+0x148>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d114      	bne.n	8003bf8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bdc:	609a      	str	r2, [r3, #8]
 8003bde:	e00b      	b.n	8003bf8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	f043 0210 	orr.w	r2, r3, #16
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	f043 0201 	orr.w	r2, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000020 	.word	0x20000020
 8003c0c:	431bde83 	.word	0x431bde83
 8003c10:	40012300 	.word	0x40012300
 8003c14:	40012000 	.word	0x40012000

08003c18 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c34:	d113      	bne.n	8003c5e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c44:	d10b      	bne.n	8003c5e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f043 0220 	orr.w	r2, r3, #32
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e063      	b.n	8003d26 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003c5e:	f7ff feb3 	bl	80039c8 <HAL_GetTick>
 8003c62:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c64:	e021      	b.n	8003caa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d01d      	beq.n	8003caa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <HAL_ADC_PollForConversion+0x6c>
 8003c74:	f7ff fea8 	bl	80039c8 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d212      	bcs.n	8003caa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d00b      	beq.n	8003caa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f043 0204 	orr.w	r2, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e03d      	b.n	8003d26 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d1d6      	bne.n	8003c66 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0212 	mvn.w	r2, #18
 8003cc0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d123      	bne.n	8003d24 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11f      	bne.n	8003d24 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d006      	beq.n	8003d00 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d111      	bne.n	8003d24 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d105      	bne.n	8003d24 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f043 0201 	orr.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d049      	beq.n	8003e04 <HAL_ADC_IRQHandler+0xd6>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d046      	beq.n	8003e04 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d105      	bne.n	8003d8e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d12b      	bne.n	8003df4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d127      	bne.n	8003df4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d006      	beq.n	8003dc0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d119      	bne.n	8003df4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0220 	bic.w	r2, r2, #32
 8003dce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	f043 0201 	orr.w	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f8e8 	bl	8003fca <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f06f 0212 	mvn.w	r2, #18
 8003e02:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	bf0c      	ite	eq
 8003e12:	2301      	moveq	r3, #1
 8003e14:	2300      	movne	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b80      	cmp	r3, #128	; 0x80
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d057      	beq.n	8003ee6 <HAL_ADC_IRQHandler+0x1b8>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d054      	beq.n	8003ee6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d139      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d006      	beq.n	8003e7e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d12b      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d124      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d11d      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d119      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eb0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f043 0201 	orr.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fac0 	bl	800445c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 020c 	mvn.w	r2, #12
 8003ee4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d017      	beq.n	8003f48 <HAL_ADC_IRQHandler+0x21a>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d014      	beq.n	8003f48 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d10d      	bne.n	8003f48 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f850 	bl	8003fde <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0201 	mvn.w	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d015      	beq.n	8003fa8 <HAL_ADC_IRQHandler+0x27a>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d012      	beq.n	8003fa8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f043 0202 	orr.w	r2, r3, #2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f06f 0220 	mvn.w	r2, #32
 8003f96:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f82a 	bl	8003ff2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f06f 0220 	mvn.w	r2, #32
 8003fa6:	601a      	str	r2, [r3, #0]
  }
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x1c>
 8004020:	2302      	movs	r3, #2
 8004022:	e105      	b.n	8004230 <HAL_ADC_ConfigChannel+0x228>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b09      	cmp	r3, #9
 8004032:	d925      	bls.n	8004080 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68d9      	ldr	r1, [r3, #12]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	3b1e      	subs	r3, #30
 800404a:	2207      	movs	r2, #7
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43da      	mvns	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	400a      	ands	r2, r1
 8004058:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68d9      	ldr	r1, [r3, #12]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	4618      	mov	r0, r3
 800406c:	4603      	mov	r3, r0
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4403      	add	r3, r0
 8004072:	3b1e      	subs	r3, #30
 8004074:	409a      	lsls	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	60da      	str	r2, [r3, #12]
 800407e:	e022      	b.n	80040c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6919      	ldr	r1, [r3, #16]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	2207      	movs	r2, #7
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43da      	mvns	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	400a      	ands	r2, r1
 80040a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6919      	ldr	r1, [r3, #16]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4618      	mov	r0, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4403      	add	r3, r0
 80040bc:	409a      	lsls	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b06      	cmp	r3, #6
 80040cc:	d824      	bhi.n	8004118 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	3b05      	subs	r3, #5
 80040e0:	221f      	movs	r2, #31
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43da      	mvns	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	400a      	ands	r2, r1
 80040ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	4618      	mov	r0, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	3b05      	subs	r3, #5
 800410a:	fa00 f203 	lsl.w	r2, r0, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	635a      	str	r2, [r3, #52]	; 0x34
 8004116:	e04c      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	d824      	bhi.n	800416a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	3b23      	subs	r3, #35	; 0x23
 8004132:	221f      	movs	r2, #31
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43da      	mvns	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	400a      	ands	r2, r1
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	4618      	mov	r0, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	3b23      	subs	r3, #35	; 0x23
 800415c:	fa00 f203 	lsl.w	r2, r0, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
 8004168:	e023      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	3b41      	subs	r3, #65	; 0x41
 800417c:	221f      	movs	r2, #31
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	400a      	ands	r2, r1
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	4618      	mov	r0, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	3b41      	subs	r3, #65	; 0x41
 80041a6:	fa00 f203 	lsl.w	r2, r0, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <HAL_ADC_ConfigChannel+0x234>)
 80041b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a21      	ldr	r2, [pc, #132]	; (8004240 <HAL_ADC_ConfigChannel+0x238>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d109      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x1cc>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b12      	cmp	r3, #18
 80041c6:	d105      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a19      	ldr	r2, [pc, #100]	; (8004240 <HAL_ADC_ConfigChannel+0x238>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d123      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x21e>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d003      	beq.n	80041ee <HAL_ADC_ConfigChannel+0x1e6>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b11      	cmp	r3, #17
 80041ec:	d11b      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d111      	bne.n	8004226 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <HAL_ADC_ConfigChannel+0x23c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a10      	ldr	r2, [pc, #64]	; (8004248 <HAL_ADC_ConfigChannel+0x240>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	0c9a      	lsrs	r2, r3, #18
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004218:	e002      	b.n	8004220 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	3b01      	subs	r3, #1
 800421e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f9      	bne.n	800421a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40012300 	.word	0x40012300
 8004240:	40012000 	.word	0x40012000
 8004244:	20000020 	.word	0x20000020
 8004248:	431bde83 	.word	0x431bde83

0800424c <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800426c:	4b79      	ldr	r3, [pc, #484]	; (8004454 <ADC_Init+0x1f0>)
 800426e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	431a      	orrs	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004298:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	021a      	lsls	r2, r3, #8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6859      	ldr	r1, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	430a      	orrs	r2, r1
 80042ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6899      	ldr	r1, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	4a58      	ldr	r2, [pc, #352]	; (8004458 <ADC_Init+0x1f4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d022      	beq.n	8004342 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800430a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6899      	ldr	r1, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800432c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6899      	ldr	r1, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	e00f      	b.n	8004362 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004360:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0202 	bic.w	r2, r2, #2
 8004370:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6899      	ldr	r1, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	7e1b      	ldrb	r3, [r3, #24]
 800437c:	005a      	lsls	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3020 	ldrb.w	r3, [r3, #32]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800439e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	3b01      	subs	r3, #1
 80043bc:	035a      	lsls	r2, r3, #13
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	e007      	b.n	80043d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	051a      	lsls	r2, r3, #20
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800440c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6899      	ldr	r1, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800441a:	025a      	lsls	r2, r3, #9
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6899      	ldr	r1, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	029a      	lsls	r2, r3, #10
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
}
 8004448:	bf00      	nop
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40012300 	.word	0x40012300
 8004458:	0f000001 	.word	0x0f000001

0800445c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800448c:	4013      	ands	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800449c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044a2:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	60d3      	str	r3, [r2, #12]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044bc:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <__NVIC_GetPriorityGrouping+0x18>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	f003 0307 	and.w	r3, r3, #7
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	db0b      	blt.n	80044fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	4907      	ldr	r1, [pc, #28]	; (800450c <__NVIC_EnableIRQ+0x38>)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2001      	movs	r0, #1
 80044f6:	fa00 f202 	lsl.w	r2, r0, r2
 80044fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	e000e100 	.word	0xe000e100

08004510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	6039      	str	r1, [r7, #0]
 800451a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004520:	2b00      	cmp	r3, #0
 8004522:	db0a      	blt.n	800453a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	490c      	ldr	r1, [pc, #48]	; (800455c <__NVIC_SetPriority+0x4c>)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	0112      	lsls	r2, r2, #4
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	440b      	add	r3, r1
 8004534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004538:	e00a      	b.n	8004550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	4908      	ldr	r1, [pc, #32]	; (8004560 <__NVIC_SetPriority+0x50>)
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	3b04      	subs	r3, #4
 8004548:	0112      	lsls	r2, r2, #4
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	440b      	add	r3, r1
 800454e:	761a      	strb	r2, [r3, #24]
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	e000e100 	.word	0xe000e100
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004564:	b480      	push	{r7}
 8004566:	b089      	sub	sp, #36	; 0x24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f1c3 0307 	rsb	r3, r3, #7
 800457e:	2b04      	cmp	r3, #4
 8004580:	bf28      	it	cs
 8004582:	2304      	movcs	r3, #4
 8004584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	3304      	adds	r3, #4
 800458a:	2b06      	cmp	r3, #6
 800458c:	d902      	bls.n	8004594 <NVIC_EncodePriority+0x30>
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3b03      	subs	r3, #3
 8004592:	e000      	b.n	8004596 <NVIC_EncodePriority+0x32>
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004598:	f04f 32ff 	mov.w	r2, #4294967295
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43da      	mvns	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	401a      	ands	r2, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045ac:	f04f 31ff 	mov.w	r1, #4294967295
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	43d9      	mvns	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045bc:	4313      	orrs	r3, r2
         );
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3724      	adds	r7, #36	; 0x24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045dc:	d301      	bcc.n	80045e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045de:	2301      	movs	r3, #1
 80045e0:	e00f      	b.n	8004602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <SysTick_Config+0x40>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ea:	210f      	movs	r1, #15
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	f7ff ff8e 	bl	8004510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <SysTick_Config+0x40>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045fa:	4b04      	ldr	r3, [pc, #16]	; (800460c <SysTick_Config+0x40>)
 80045fc:	2207      	movs	r2, #7
 80045fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	e000e010 	.word	0xe000e010

08004610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff ff29 	bl	8004470 <__NVIC_SetPriorityGrouping>
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	4603      	mov	r3, r0
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004638:	f7ff ff3e 	bl	80044b8 <__NVIC_GetPriorityGrouping>
 800463c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	6978      	ldr	r0, [r7, #20]
 8004644:	f7ff ff8e 	bl	8004564 <NVIC_EncodePriority>
 8004648:	4602      	mov	r2, r0
 800464a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ff5d 	bl	8004510 <__NVIC_SetPriority>
}
 8004656:	bf00      	nop
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ff31 	bl	80044d4 <__NVIC_EnableIRQ>
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff ffa2 	bl	80045cc <SysTick_Config>
 8004688:	4603      	mov	r3, r0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e00e      	b.n	80046c2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	795b      	ldrb	r3, [r3, #5]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d105      	bne.n	80046ba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fe fe3d 	bl	8003334 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046d8:	f7ff f976 	bl	80039c8 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e099      	b.n	800481c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004708:	e00f      	b.n	800472a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800470a:	f7ff f95d 	bl	80039c8 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b05      	cmp	r3, #5
 8004716:	d908      	bls.n	800472a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2203      	movs	r2, #3
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e078      	b.n	800481c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e8      	bne.n	800470a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4b38      	ldr	r3, [pc, #224]	; (8004824 <HAL_DMA_Init+0x158>)
 8004744:	4013      	ands	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800476e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	2b04      	cmp	r3, #4
 8004782:	d107      	bne.n	8004794 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	4313      	orrs	r3, r2
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f023 0307 	bic.w	r3, r3, #7
 80047aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d117      	bne.n	80047ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00e      	beq.n	80047ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fa7b 	bl	8004ccc <DMA_CheckFifoParam>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2240      	movs	r2, #64	; 0x40
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047ea:	2301      	movs	r3, #1
 80047ec:	e016      	b.n	800481c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fa32 	bl	8004c60 <DMA_CalcBaseAndBitshift>
 80047fc:	4603      	mov	r3, r0
 80047fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004804:	223f      	movs	r2, #63	; 0x3f
 8004806:	409a      	lsls	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	f010803f 	.word	0xf010803f

08004828 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004834:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004836:	f7ff f8c7 	bl	80039c8 <HAL_GetTick>
 800483a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d008      	beq.n	800485a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e052      	b.n	8004900 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0216 	bic.w	r2, r2, #22
 8004868:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004878:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	d103      	bne.n	800488a <HAL_DMA_Abort+0x62>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0208 	bic.w	r2, r2, #8
 8004898:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0201 	bic.w	r2, r2, #1
 80048a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048aa:	e013      	b.n	80048d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ac:	f7ff f88c 	bl	80039c8 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d90c      	bls.n	80048d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2203      	movs	r2, #3
 80048c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e015      	b.n	8004900 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e4      	bne.n	80048ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e6:	223f      	movs	r2, #63	; 0x3f
 80048e8:	409a      	lsls	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d004      	beq.n	8004926 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2280      	movs	r2, #128	; 0x80
 8004920:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e00c      	b.n	8004940 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2205      	movs	r2, #5
 800492a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004958:	4b92      	ldr	r3, [pc, #584]	; (8004ba4 <HAL_DMA_IRQHandler+0x258>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a92      	ldr	r2, [pc, #584]	; (8004ba8 <HAL_DMA_IRQHandler+0x25c>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	0a9b      	lsrs	r3, r3, #10
 8004964:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004976:	2208      	movs	r2, #8
 8004978:	409a      	lsls	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d01a      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d013      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0204 	bic.w	r2, r2, #4
 800499e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a4:	2208      	movs	r2, #8
 80049a6:	409a      	lsls	r2, r3
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b0:	f043 0201 	orr.w	r2, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049bc:	2201      	movs	r2, #1
 80049be:	409a      	lsls	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d012      	beq.n	80049ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049da:	2201      	movs	r2, #1
 80049dc:	409a      	lsls	r2, r3
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e6:	f043 0202 	orr.w	r2, r3, #2
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	2204      	movs	r2, #4
 80049f4:	409a      	lsls	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d012      	beq.n	8004a24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00b      	beq.n	8004a24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a10:	2204      	movs	r2, #4
 8004a12:	409a      	lsls	r2, r3
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1c:	f043 0204 	orr.w	r2, r3, #4
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	2210      	movs	r2, #16
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d043      	beq.n	8004abc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d03c      	beq.n	8004abc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a46:	2210      	movs	r2, #16
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d018      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d108      	bne.n	8004a7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d024      	beq.n	8004abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	4798      	blx	r3
 8004a7a:	e01f      	b.n	8004abc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01b      	beq.n	8004abc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	4798      	blx	r3
 8004a8c:	e016      	b.n	8004abc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d107      	bne.n	8004aac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0208 	bic.w	r2, r2, #8
 8004aaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 808e 	beq.w	8004bea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8086 	beq.w	8004bea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b05      	cmp	r3, #5
 8004af4:	d136      	bne.n	8004b64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0216 	bic.w	r2, r2, #22
 8004b04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <HAL_DMA_IRQHandler+0x1da>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0208 	bic.w	r2, r2, #8
 8004b34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3a:	223f      	movs	r2, #63	; 0x3f
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d07d      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
        }
        return;
 8004b62:	e078      	b.n	8004c56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01c      	beq.n	8004bac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d108      	bne.n	8004b92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d030      	beq.n	8004bea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
 8004b90:	e02b      	b.n	8004bea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d027      	beq.n	8004bea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	4798      	blx	r3
 8004ba2:	e022      	b.n	8004bea <HAL_DMA_IRQHandler+0x29e>
 8004ba4:	20000020 	.word	0x20000020
 8004ba8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10f      	bne.n	8004bda <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0210 	bic.w	r2, r2, #16
 8004bc8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d032      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d022      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2205      	movs	r2, #5
 8004c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d307      	bcc.n	8004c32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f2      	bne.n	8004c16 <HAL_DMA_IRQHandler+0x2ca>
 8004c30:	e000      	b.n	8004c34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004c32:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4798      	blx	r3
 8004c54:	e000      	b.n	8004c58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004c56:	bf00      	nop
    }
  }
}
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop

08004c60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	3b10      	subs	r3, #16
 8004c70:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <DMA_CalcBaseAndBitshift+0x64>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	091b      	lsrs	r3, r3, #4
 8004c78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c7a:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <DMA_CalcBaseAndBitshift+0x68>)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d909      	bls.n	8004ca2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c96:	f023 0303 	bic.w	r3, r3, #3
 8004c9a:	1d1a      	adds	r2, r3, #4
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	659a      	str	r2, [r3, #88]	; 0x58
 8004ca0:	e007      	b.n	8004cb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	aaaaaaab 	.word	0xaaaaaaab
 8004cc8:	08008720 	.word	0x08008720

08004ccc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11f      	bne.n	8004d26 <DMA_CheckFifoParam+0x5a>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d856      	bhi.n	8004d9a <DMA_CheckFifoParam+0xce>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <DMA_CheckFifoParam+0x28>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d05 	.word	0x08004d05
 8004cf8:	08004d17 	.word	0x08004d17
 8004cfc:	08004d05 	.word	0x08004d05
 8004d00:	08004d9b 	.word	0x08004d9b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d046      	beq.n	8004d9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d14:	e043      	b.n	8004d9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d1e:	d140      	bne.n	8004da2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d24:	e03d      	b.n	8004da2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2e:	d121      	bne.n	8004d74 <DMA_CheckFifoParam+0xa8>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d837      	bhi.n	8004da6 <DMA_CheckFifoParam+0xda>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <DMA_CheckFifoParam+0x70>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004d53 	.word	0x08004d53
 8004d44:	08004d4d 	.word	0x08004d4d
 8004d48:	08004d65 	.word	0x08004d65
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d50:	e030      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d025      	beq.n	8004daa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d62:	e022      	b.n	8004daa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d6c:	d11f      	bne.n	8004dae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d72:	e01c      	b.n	8004dae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d903      	bls.n	8004d82 <DMA_CheckFifoParam+0xb6>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d003      	beq.n	8004d88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d80:	e018      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
      break;
 8004d86:	e015      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00e      	beq.n	8004db2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      break;
 8004d98:	e00b      	b.n	8004db2 <DMA_CheckFifoParam+0xe6>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e00a      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004d9e:	bf00      	nop
 8004da0:	e008      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004da2:	bf00      	nop
 8004da4:	e006      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004da6:	bf00      	nop
 8004da8:	e004      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004daa:	bf00      	nop
 8004dac:	e002      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dae:	bf00      	nop
 8004db0:	e000      	b.n	8004db4 <DMA_CheckFifoParam+0xe8>
      break;
 8004db2:	bf00      	nop
    }
  } 
  
  return status; 
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop

08004dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b089      	sub	sp, #36	; 0x24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	e159      	b.n	8005094 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004de0:	2201      	movs	r2, #1
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4013      	ands	r3, r2
 8004df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	f040 8148 	bne.w	800508e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d005      	beq.n	8004e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d130      	bne.n	8004e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	2203      	movs	r2, #3
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	43db      	mvns	r3, r3
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	091b      	lsrs	r3, r3, #4
 8004e62:	f003 0201 	and.w	r2, r3, #1
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d017      	beq.n	8004eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	2203      	movs	r2, #3
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d123      	bne.n	8004f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	08da      	lsrs	r2, r3, #3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3208      	adds	r2, #8
 8004ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	220f      	movs	r2, #15
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	08da      	lsrs	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3208      	adds	r2, #8
 8004f02:	69b9      	ldr	r1, [r7, #24]
 8004f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	2203      	movs	r2, #3
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 0203 	and.w	r2, r3, #3
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80a2 	beq.w	800508e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	4b57      	ldr	r3, [pc, #348]	; (80050ac <HAL_GPIO_Init+0x2e8>)
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	4a56      	ldr	r2, [pc, #344]	; (80050ac <HAL_GPIO_Init+0x2e8>)
 8004f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f58:	6453      	str	r3, [r2, #68]	; 0x44
 8004f5a:	4b54      	ldr	r3, [pc, #336]	; (80050ac <HAL_GPIO_Init+0x2e8>)
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f66:	4a52      	ldr	r2, [pc, #328]	; (80050b0 <HAL_GPIO_Init+0x2ec>)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	089b      	lsrs	r3, r3, #2
 8004f6c:	3302      	adds	r3, #2
 8004f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	220f      	movs	r2, #15
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	43db      	mvns	r3, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a49      	ldr	r2, [pc, #292]	; (80050b4 <HAL_GPIO_Init+0x2f0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d019      	beq.n	8004fc6 <HAL_GPIO_Init+0x202>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a48      	ldr	r2, [pc, #288]	; (80050b8 <HAL_GPIO_Init+0x2f4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <HAL_GPIO_Init+0x1fe>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a47      	ldr	r2, [pc, #284]	; (80050bc <HAL_GPIO_Init+0x2f8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00d      	beq.n	8004fbe <HAL_GPIO_Init+0x1fa>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a46      	ldr	r2, [pc, #280]	; (80050c0 <HAL_GPIO_Init+0x2fc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <HAL_GPIO_Init+0x1f6>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a45      	ldr	r2, [pc, #276]	; (80050c4 <HAL_GPIO_Init+0x300>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d101      	bne.n	8004fb6 <HAL_GPIO_Init+0x1f2>
 8004fb2:	2304      	movs	r3, #4
 8004fb4:	e008      	b.n	8004fc8 <HAL_GPIO_Init+0x204>
 8004fb6:	2307      	movs	r3, #7
 8004fb8:	e006      	b.n	8004fc8 <HAL_GPIO_Init+0x204>
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e004      	b.n	8004fc8 <HAL_GPIO_Init+0x204>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e002      	b.n	8004fc8 <HAL_GPIO_Init+0x204>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_GPIO_Init+0x204>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	f002 0203 	and.w	r2, r2, #3
 8004fce:	0092      	lsls	r2, r2, #2
 8004fd0:	4093      	lsls	r3, r2
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fd8:	4935      	ldr	r1, [pc, #212]	; (80050b0 <HAL_GPIO_Init+0x2ec>)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	089b      	lsrs	r3, r3, #2
 8004fde:	3302      	adds	r3, #2
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fe6:	4b38      	ldr	r3, [pc, #224]	; (80050c8 <HAL_GPIO_Init+0x304>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800500a:	4a2f      	ldr	r2, [pc, #188]	; (80050c8 <HAL_GPIO_Init+0x304>)
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005010:	4b2d      	ldr	r3, [pc, #180]	; (80050c8 <HAL_GPIO_Init+0x304>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	43db      	mvns	r3, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4013      	ands	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005034:	4a24      	ldr	r2, [pc, #144]	; (80050c8 <HAL_GPIO_Init+0x304>)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800503a:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <HAL_GPIO_Init+0x304>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	43db      	mvns	r3, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4013      	ands	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800505e:	4a1a      	ldr	r2, [pc, #104]	; (80050c8 <HAL_GPIO_Init+0x304>)
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005064:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <HAL_GPIO_Init+0x304>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	43db      	mvns	r3, r3
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4013      	ands	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005088:	4a0f      	ldr	r2, [pc, #60]	; (80050c8 <HAL_GPIO_Init+0x304>)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	3301      	adds	r3, #1
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	2b0f      	cmp	r3, #15
 8005098:	f67f aea2 	bls.w	8004de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800509c:	bf00      	nop
 800509e:	bf00      	nop
 80050a0:	3724      	adds	r7, #36	; 0x24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40023800 	.word	0x40023800
 80050b0:	40013800 	.word	0x40013800
 80050b4:	40020000 	.word	0x40020000
 80050b8:	40020400 	.word	0x40020400
 80050bc:	40020800 	.word	0x40020800
 80050c0:	40020c00 	.word	0x40020c00
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40013c00 	.word	0x40013c00

080050cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	887b      	ldrh	r3, [r7, #2]
 80050de:	4013      	ands	r3, r2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
 80050e8:	e001      	b.n	80050ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050ea:	2300      	movs	r3, #0
 80050ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	807b      	strh	r3, [r7, #2]
 8005108:	4613      	mov	r3, r2
 800510a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800510c:	787b      	ldrb	r3, [r7, #1]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005112:	887a      	ldrh	r2, [r7, #2]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005118:	e003      	b.n	8005122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800511a:	887b      	ldrh	r3, [r7, #2]
 800511c:	041a      	lsls	r2, r3, #16
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	619a      	str	r2, [r3, #24]
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800513a:	4b08      	ldr	r3, [pc, #32]	; (800515c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d006      	beq.n	8005154 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005146:	4a05      	ldr	r2, [pc, #20]	; (800515c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005148:	88fb      	ldrh	r3, [r7, #6]
 800514a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	4618      	mov	r0, r3
 8005150:	f7fd feb0 	bl	8002eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40013c00 	.word	0x40013c00

08005160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e264      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d075      	beq.n	800526a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800517e:	4ba3      	ldr	r3, [pc, #652]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b04      	cmp	r3, #4
 8005188:	d00c      	beq.n	80051a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800518a:	4ba0      	ldr	r3, [pc, #640]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005192:	2b08      	cmp	r3, #8
 8005194:	d112      	bne.n	80051bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005196:	4b9d      	ldr	r3, [pc, #628]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051a2:	d10b      	bne.n	80051bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	4b99      	ldr	r3, [pc, #612]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d05b      	beq.n	8005268 <HAL_RCC_OscConfig+0x108>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d157      	bne.n	8005268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e23f      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c4:	d106      	bne.n	80051d4 <HAL_RCC_OscConfig+0x74>
 80051c6:	4b91      	ldr	r3, [pc, #580]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a90      	ldr	r2, [pc, #576]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e01d      	b.n	8005210 <HAL_RCC_OscConfig+0xb0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051dc:	d10c      	bne.n	80051f8 <HAL_RCC_OscConfig+0x98>
 80051de:	4b8b      	ldr	r3, [pc, #556]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a8a      	ldr	r2, [pc, #552]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80051e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	4b88      	ldr	r3, [pc, #544]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a87      	ldr	r2, [pc, #540]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e00b      	b.n	8005210 <HAL_RCC_OscConfig+0xb0>
 80051f8:	4b84      	ldr	r3, [pc, #528]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a83      	ldr	r2, [pc, #524]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80051fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	4b81      	ldr	r3, [pc, #516]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a80      	ldr	r2, [pc, #512]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 800520a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800520e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d013      	beq.n	8005240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005218:	f7fe fbd6 	bl	80039c8 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005220:	f7fe fbd2 	bl	80039c8 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b64      	cmp	r3, #100	; 0x64
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e204      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005232:	4b76      	ldr	r3, [pc, #472]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0xc0>
 800523e:	e014      	b.n	800526a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005240:	f7fe fbc2 	bl	80039c8 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005248:	f7fe fbbe 	bl	80039c8 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b64      	cmp	r3, #100	; 0x64
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e1f0      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800525a:	4b6c      	ldr	r3, [pc, #432]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0xe8>
 8005266:	e000      	b.n	800526a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d063      	beq.n	800533e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005276:	4b65      	ldr	r3, [pc, #404]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00b      	beq.n	800529a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005282:	4b62      	ldr	r3, [pc, #392]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800528a:	2b08      	cmp	r3, #8
 800528c:	d11c      	bne.n	80052c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800528e:	4b5f      	ldr	r3, [pc, #380]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d116      	bne.n	80052c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800529a:	4b5c      	ldr	r3, [pc, #368]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <HAL_RCC_OscConfig+0x152>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d001      	beq.n	80052b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e1c4      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b2:	4b56      	ldr	r3, [pc, #344]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4952      	ldr	r1, [pc, #328]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052c6:	e03a      	b.n	800533e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d020      	beq.n	8005312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052d0:	4b4f      	ldr	r3, [pc, #316]	; (8005410 <HAL_RCC_OscConfig+0x2b0>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d6:	f7fe fb77 	bl	80039c8 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052de:	f7fe fb73 	bl	80039c8 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e1a5      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f0:	4b46      	ldr	r3, [pc, #280]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f0      	beq.n	80052de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fc:	4b43      	ldr	r3, [pc, #268]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	4940      	ldr	r1, [pc, #256]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 800530c:	4313      	orrs	r3, r2
 800530e:	600b      	str	r3, [r1, #0]
 8005310:	e015      	b.n	800533e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005312:	4b3f      	ldr	r3, [pc, #252]	; (8005410 <HAL_RCC_OscConfig+0x2b0>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fe fb56 	bl	80039c8 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005320:	f7fe fb52 	bl	80039c8 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e184      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005332:	4b36      	ldr	r3, [pc, #216]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d030      	beq.n	80053ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d016      	beq.n	8005380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005352:	4b30      	ldr	r3, [pc, #192]	; (8005414 <HAL_RCC_OscConfig+0x2b4>)
 8005354:	2201      	movs	r2, #1
 8005356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005358:	f7fe fb36 	bl	80039c8 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005360:	f7fe fb32 	bl	80039c8 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e164      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005372:	4b26      	ldr	r3, [pc, #152]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 8005374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0x200>
 800537e:	e015      	b.n	80053ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005380:	4b24      	ldr	r3, [pc, #144]	; (8005414 <HAL_RCC_OscConfig+0x2b4>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005386:	f7fe fb1f 	bl	80039c8 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800538e:	f7fe fb1b 	bl	80039c8 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e14d      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053a0:	4b1a      	ldr	r3, [pc, #104]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80053a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1f0      	bne.n	800538e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80a0 	beq.w	80054fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ba:	2300      	movs	r3, #0
 80053bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053be:	4b13      	ldr	r3, [pc, #76]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10f      	bne.n	80053ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	4b0f      	ldr	r3, [pc, #60]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	4a0e      	ldr	r2, [pc, #56]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80053d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d8:	6413      	str	r3, [r2, #64]	; 0x40
 80053da:	4b0c      	ldr	r3, [pc, #48]	; (800540c <HAL_RCC_OscConfig+0x2ac>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e2:	60bb      	str	r3, [r7, #8]
 80053e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053e6:	2301      	movs	r3, #1
 80053e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ea:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <HAL_RCC_OscConfig+0x2b8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d121      	bne.n	800543a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053f6:	4b08      	ldr	r3, [pc, #32]	; (8005418 <HAL_RCC_OscConfig+0x2b8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a07      	ldr	r2, [pc, #28]	; (8005418 <HAL_RCC_OscConfig+0x2b8>)
 80053fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005402:	f7fe fae1 	bl	80039c8 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005408:	e011      	b.n	800542e <HAL_RCC_OscConfig+0x2ce>
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
 8005410:	42470000 	.word	0x42470000
 8005414:	42470e80 	.word	0x42470e80
 8005418:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800541c:	f7fe fad4 	bl	80039c8 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e106      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800542e:	4b85      	ldr	r3, [pc, #532]	; (8005644 <HAL_RCC_OscConfig+0x4e4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d106      	bne.n	8005450 <HAL_RCC_OscConfig+0x2f0>
 8005442:	4b81      	ldr	r3, [pc, #516]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	4a80      	ldr	r2, [pc, #512]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 8005448:	f043 0301 	orr.w	r3, r3, #1
 800544c:	6713      	str	r3, [r2, #112]	; 0x70
 800544e:	e01c      	b.n	800548a <HAL_RCC_OscConfig+0x32a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b05      	cmp	r3, #5
 8005456:	d10c      	bne.n	8005472 <HAL_RCC_OscConfig+0x312>
 8005458:	4b7b      	ldr	r3, [pc, #492]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 800545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545c:	4a7a      	ldr	r2, [pc, #488]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 800545e:	f043 0304 	orr.w	r3, r3, #4
 8005462:	6713      	str	r3, [r2, #112]	; 0x70
 8005464:	4b78      	ldr	r3, [pc, #480]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 8005466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005468:	4a77      	ldr	r2, [pc, #476]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 800546a:	f043 0301 	orr.w	r3, r3, #1
 800546e:	6713      	str	r3, [r2, #112]	; 0x70
 8005470:	e00b      	b.n	800548a <HAL_RCC_OscConfig+0x32a>
 8005472:	4b75      	ldr	r3, [pc, #468]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	4a74      	ldr	r2, [pc, #464]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 8005478:	f023 0301 	bic.w	r3, r3, #1
 800547c:	6713      	str	r3, [r2, #112]	; 0x70
 800547e:	4b72      	ldr	r3, [pc, #456]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 8005480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005482:	4a71      	ldr	r2, [pc, #452]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 8005484:	f023 0304 	bic.w	r3, r3, #4
 8005488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d015      	beq.n	80054be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005492:	f7fe fa99 	bl	80039c8 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005498:	e00a      	b.n	80054b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800549a:	f7fe fa95 	bl	80039c8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e0c5      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b0:	4b65      	ldr	r3, [pc, #404]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 80054b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0ee      	beq.n	800549a <HAL_RCC_OscConfig+0x33a>
 80054bc:	e014      	b.n	80054e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054be:	f7fe fa83 	bl	80039c8 <HAL_GetTick>
 80054c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c4:	e00a      	b.n	80054dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c6:	f7fe fa7f 	bl	80039c8 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e0af      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054dc:	4b5a      	ldr	r3, [pc, #360]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 80054de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1ee      	bne.n	80054c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d105      	bne.n	80054fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ee:	4b56      	ldr	r3, [pc, #344]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	4a55      	ldr	r2, [pc, #340]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 80054f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 809b 	beq.w	800563a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005504:	4b50      	ldr	r3, [pc, #320]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b08      	cmp	r3, #8
 800550e:	d05c      	beq.n	80055ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d141      	bne.n	800559c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005518:	4b4c      	ldr	r3, [pc, #304]	; (800564c <HAL_RCC_OscConfig+0x4ec>)
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551e:	f7fe fa53 	bl	80039c8 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005526:	f7fe fa4f 	bl	80039c8 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e081      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005538:	4b43      	ldr	r3, [pc, #268]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1f0      	bne.n	8005526 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	019b      	lsls	r3, r3, #6
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	085b      	lsrs	r3, r3, #1
 800555c:	3b01      	subs	r3, #1
 800555e:	041b      	lsls	r3, r3, #16
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	061b      	lsls	r3, r3, #24
 8005568:	4937      	ldr	r1, [pc, #220]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 800556a:	4313      	orrs	r3, r2
 800556c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800556e:	4b37      	ldr	r3, [pc, #220]	; (800564c <HAL_RCC_OscConfig+0x4ec>)
 8005570:	2201      	movs	r2, #1
 8005572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005574:	f7fe fa28 	bl	80039c8 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557c:	f7fe fa24 	bl	80039c8 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e056      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800558e:	4b2e      	ldr	r3, [pc, #184]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0f0      	beq.n	800557c <HAL_RCC_OscConfig+0x41c>
 800559a:	e04e      	b.n	800563a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559c:	4b2b      	ldr	r3, [pc, #172]	; (800564c <HAL_RCC_OscConfig+0x4ec>)
 800559e:	2200      	movs	r2, #0
 80055a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a2:	f7fe fa11 	bl	80039c8 <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055aa:	f7fe fa0d 	bl	80039c8 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e03f      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055bc:	4b22      	ldr	r3, [pc, #136]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1f0      	bne.n	80055aa <HAL_RCC_OscConfig+0x44a>
 80055c8:	e037      	b.n	800563a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e032      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055d6:	4b1c      	ldr	r3, [pc, #112]	; (8005648 <HAL_RCC_OscConfig+0x4e8>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d028      	beq.n	8005636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d121      	bne.n	8005636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d11a      	bne.n	8005636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005606:	4013      	ands	r3, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800560c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800560e:	4293      	cmp	r3, r2
 8005610:	d111      	bne.n	8005636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	3b01      	subs	r3, #1
 8005620:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005622:	429a      	cmp	r2, r3
 8005624:	d107      	bne.n	8005636 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005632:	429a      	cmp	r2, r3
 8005634:	d001      	beq.n	800563a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40007000 	.word	0x40007000
 8005648:	40023800 	.word	0x40023800
 800564c:	42470060 	.word	0x42470060

08005650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e0cc      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005664:	4b68      	ldr	r3, [pc, #416]	; (8005808 <HAL_RCC_ClockConfig+0x1b8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d90c      	bls.n	800568c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005672:	4b65      	ldr	r3, [pc, #404]	; (8005808 <HAL_RCC_ClockConfig+0x1b8>)
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b63      	ldr	r3, [pc, #396]	; (8005808 <HAL_RCC_ClockConfig+0x1b8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0b8      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d020      	beq.n	80056da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056a4:	4b59      	ldr	r3, [pc, #356]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	4a58      	ldr	r2, [pc, #352]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056bc:	4b53      	ldr	r3, [pc, #332]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	4a52      	ldr	r2, [pc, #328]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c8:	4b50      	ldr	r3, [pc, #320]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	494d      	ldr	r1, [pc, #308]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d044      	beq.n	8005770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d107      	bne.n	80056fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ee:	4b47      	ldr	r3, [pc, #284]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d119      	bne.n	800572e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e07f      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d003      	beq.n	800570e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800570a:	2b03      	cmp	r3, #3
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570e:	4b3f      	ldr	r3, [pc, #252]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d109      	bne.n	800572e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e06f      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800571e:	4b3b      	ldr	r3, [pc, #236]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e067      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800572e:	4b37      	ldr	r3, [pc, #220]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f023 0203 	bic.w	r2, r3, #3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4934      	ldr	r1, [pc, #208]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 800573c:	4313      	orrs	r3, r2
 800573e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005740:	f7fe f942 	bl	80039c8 <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005746:	e00a      	b.n	800575e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005748:	f7fe f93e 	bl	80039c8 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3288 	movw	r2, #5000	; 0x1388
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e04f      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575e:	4b2b      	ldr	r3, [pc, #172]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 020c 	and.w	r2, r3, #12
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	429a      	cmp	r2, r3
 800576e:	d1eb      	bne.n	8005748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005770:	4b25      	ldr	r3, [pc, #148]	; (8005808 <HAL_RCC_ClockConfig+0x1b8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d20c      	bcs.n	8005798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577e:	4b22      	ldr	r3, [pc, #136]	; (8005808 <HAL_RCC_ClockConfig+0x1b8>)
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005786:	4b20      	ldr	r3, [pc, #128]	; (8005808 <HAL_RCC_ClockConfig+0x1b8>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d001      	beq.n	8005798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e032      	b.n	80057fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057a4:	4b19      	ldr	r3, [pc, #100]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	4916      	ldr	r1, [pc, #88]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057c2:	4b12      	ldr	r3, [pc, #72]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	490e      	ldr	r1, [pc, #56]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057d6:	f000 f821 	bl	800581c <HAL_RCC_GetSysClockFreq>
 80057da:	4602      	mov	r2, r0
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	091b      	lsrs	r3, r3, #4
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	490a      	ldr	r1, [pc, #40]	; (8005810 <HAL_RCC_ClockConfig+0x1c0>)
 80057e8:	5ccb      	ldrb	r3, [r1, r3]
 80057ea:	fa22 f303 	lsr.w	r3, r2, r3
 80057ee:	4a09      	ldr	r2, [pc, #36]	; (8005814 <HAL_RCC_ClockConfig+0x1c4>)
 80057f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057f2:	4b09      	ldr	r3, [pc, #36]	; (8005818 <HAL_RCC_ClockConfig+0x1c8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe f8a2 	bl	8003940 <HAL_InitTick>

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40023c00 	.word	0x40023c00
 800580c:	40023800 	.word	0x40023800
 8005810:	08008708 	.word	0x08008708
 8005814:	20000020 	.word	0x20000020
 8005818:	20000024 	.word	0x20000024

0800581c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800581c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	607b      	str	r3, [r7, #4]
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	2300      	movs	r3, #0
 800582e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005834:	4b67      	ldr	r3, [pc, #412]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 030c 	and.w	r3, r3, #12
 800583c:	2b08      	cmp	r3, #8
 800583e:	d00d      	beq.n	800585c <HAL_RCC_GetSysClockFreq+0x40>
 8005840:	2b08      	cmp	r3, #8
 8005842:	f200 80bd 	bhi.w	80059c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0x34>
 800584a:	2b04      	cmp	r3, #4
 800584c:	d003      	beq.n	8005856 <HAL_RCC_GetSysClockFreq+0x3a>
 800584e:	e0b7      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005850:	4b61      	ldr	r3, [pc, #388]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005852:	60bb      	str	r3, [r7, #8]
       break;
 8005854:	e0b7      	b.n	80059c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005856:	4b61      	ldr	r3, [pc, #388]	; (80059dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005858:	60bb      	str	r3, [r7, #8]
      break;
 800585a:	e0b4      	b.n	80059c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800585c:	4b5d      	ldr	r3, [pc, #372]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005864:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005866:	4b5b      	ldr	r3, [pc, #364]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d04d      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005872:	4b58      	ldr	r3, [pc, #352]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	099b      	lsrs	r3, r3, #6
 8005878:	461a      	mov	r2, r3
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005882:	f04f 0100 	mov.w	r1, #0
 8005886:	ea02 0800 	and.w	r8, r2, r0
 800588a:	ea03 0901 	and.w	r9, r3, r1
 800588e:	4640      	mov	r0, r8
 8005890:	4649      	mov	r1, r9
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	f04f 0300 	mov.w	r3, #0
 800589a:	014b      	lsls	r3, r1, #5
 800589c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058a0:	0142      	lsls	r2, r0, #5
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	ebb0 0008 	subs.w	r0, r0, r8
 80058aa:	eb61 0109 	sbc.w	r1, r1, r9
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	018b      	lsls	r3, r1, #6
 80058b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058bc:	0182      	lsls	r2, r0, #6
 80058be:	1a12      	subs	r2, r2, r0
 80058c0:	eb63 0301 	sbc.w	r3, r3, r1
 80058c4:	f04f 0000 	mov.w	r0, #0
 80058c8:	f04f 0100 	mov.w	r1, #0
 80058cc:	00d9      	lsls	r1, r3, #3
 80058ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058d2:	00d0      	lsls	r0, r2, #3
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	eb12 0208 	adds.w	r2, r2, r8
 80058dc:	eb43 0309 	adc.w	r3, r3, r9
 80058e0:	f04f 0000 	mov.w	r0, #0
 80058e4:	f04f 0100 	mov.w	r1, #0
 80058e8:	0259      	lsls	r1, r3, #9
 80058ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80058ee:	0250      	lsls	r0, r2, #9
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4610      	mov	r0, r2
 80058f6:	4619      	mov	r1, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	461a      	mov	r2, r3
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	f7fb f8f4 	bl	8000aec <__aeabi_uldivmod>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4613      	mov	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	e04a      	b.n	80059a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800590e:	4b31      	ldr	r3, [pc, #196]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	099b      	lsrs	r3, r3, #6
 8005914:	461a      	mov	r2, r3
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800591e:	f04f 0100 	mov.w	r1, #0
 8005922:	ea02 0400 	and.w	r4, r2, r0
 8005926:	ea03 0501 	and.w	r5, r3, r1
 800592a:	4620      	mov	r0, r4
 800592c:	4629      	mov	r1, r5
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f04f 0300 	mov.w	r3, #0
 8005936:	014b      	lsls	r3, r1, #5
 8005938:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800593c:	0142      	lsls	r2, r0, #5
 800593e:	4610      	mov	r0, r2
 8005940:	4619      	mov	r1, r3
 8005942:	1b00      	subs	r0, r0, r4
 8005944:	eb61 0105 	sbc.w	r1, r1, r5
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	018b      	lsls	r3, r1, #6
 8005952:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005956:	0182      	lsls	r2, r0, #6
 8005958:	1a12      	subs	r2, r2, r0
 800595a:	eb63 0301 	sbc.w	r3, r3, r1
 800595e:	f04f 0000 	mov.w	r0, #0
 8005962:	f04f 0100 	mov.w	r1, #0
 8005966:	00d9      	lsls	r1, r3, #3
 8005968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800596c:	00d0      	lsls	r0, r2, #3
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	1912      	adds	r2, r2, r4
 8005974:	eb45 0303 	adc.w	r3, r5, r3
 8005978:	f04f 0000 	mov.w	r0, #0
 800597c:	f04f 0100 	mov.w	r1, #0
 8005980:	0299      	lsls	r1, r3, #10
 8005982:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005986:	0290      	lsls	r0, r2, #10
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	4610      	mov	r0, r2
 800598e:	4619      	mov	r1, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	461a      	mov	r2, r3
 8005994:	f04f 0300 	mov.w	r3, #0
 8005998:	f7fb f8a8 	bl	8000aec <__aeabi_uldivmod>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4613      	mov	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	0c1b      	lsrs	r3, r3, #16
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	3301      	adds	r3, #1
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	60bb      	str	r3, [r7, #8]
      break;
 80059be:	e002      	b.n	80059c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059c0:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80059c2:	60bb      	str	r3, [r7, #8]
      break;
 80059c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059c6:	68bb      	ldr	r3, [r7, #8]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80059d2:	bf00      	nop
 80059d4:	40023800 	.word	0x40023800
 80059d8:	00f42400 	.word	0x00f42400
 80059dc:	007a1200 	.word	0x007a1200

080059e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059e4:	4b03      	ldr	r3, [pc, #12]	; (80059f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80059e6:	681b      	ldr	r3, [r3, #0]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	20000020 	.word	0x20000020

080059f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059fc:	f7ff fff0 	bl	80059e0 <HAL_RCC_GetHCLKFreq>
 8005a00:	4602      	mov	r2, r0
 8005a02:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	0a9b      	lsrs	r3, r3, #10
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	4903      	ldr	r1, [pc, #12]	; (8005a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a0e:	5ccb      	ldrb	r3, [r1, r3]
 8005a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	08008718 	.word	0x08008718

08005a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a24:	f7ff ffdc 	bl	80059e0 <HAL_RCC_GetHCLKFreq>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	0b5b      	lsrs	r3, r3, #13
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	4903      	ldr	r1, [pc, #12]	; (8005a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a36:	5ccb      	ldrb	r3, [r1, r3]
 8005a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40023800 	.word	0x40023800
 8005a44:	08008718 	.word	0x08008718

08005a48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e07b      	b.n	8005b52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d108      	bne.n	8005a74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a6a:	d009      	beq.n	8005a80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	61da      	str	r2, [r3, #28]
 8005a72:	e005      	b.n	8005a80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fd fc6c 	bl	8003378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b04:	ea42 0103 	orr.w	r1, r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	0c1b      	lsrs	r3, r3, #16
 8005b1e:	f003 0104 	and.w	r1, r3, #4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	f003 0210 	and.w	r2, r3, #16
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69da      	ldr	r2, [r3, #28]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b088      	sub	sp, #32
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	603b      	str	r3, [r7, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_SPI_Transmit+0x22>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e126      	b.n	8005dca <HAL_SPI_Transmit+0x270>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b84:	f7fd ff20 	bl	80039c8 <HAL_GetTick>
 8005b88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d002      	beq.n	8005ba0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b9e:	e10b      	b.n	8005db8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <HAL_SPI_Transmit+0x52>
 8005ba6:	88fb      	ldrh	r3, [r7, #6]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bb0:	e102      	b.n	8005db8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	88fa      	ldrh	r2, [r7, #6]
 8005bca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	88fa      	ldrh	r2, [r7, #6]
 8005bd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf8:	d10f      	bne.n	8005c1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c24:	2b40      	cmp	r3, #64	; 0x40
 8005c26:	d007      	beq.n	8005c38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c40:	d14b      	bne.n	8005cda <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <HAL_SPI_Transmit+0xf6>
 8005c4a:	8afb      	ldrh	r3, [r7, #22]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d13e      	bne.n	8005cce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c54:	881a      	ldrh	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	1c9a      	adds	r2, r3, #2
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c74:	e02b      	b.n	8005cce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d112      	bne.n	8005caa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c88:	881a      	ldrh	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	1c9a      	adds	r2, r3, #2
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ca8:	e011      	b.n	8005cce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005caa:	f7fd fe8d 	bl	80039c8 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d803      	bhi.n	8005cc2 <HAL_SPI_Transmit+0x168>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d102      	bne.n	8005cc8 <HAL_SPI_Transmit+0x16e>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ccc:	e074      	b.n	8005db8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1ce      	bne.n	8005c76 <HAL_SPI_Transmit+0x11c>
 8005cd8:	e04c      	b.n	8005d74 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_SPI_Transmit+0x18e>
 8005ce2:	8afb      	ldrh	r3, [r7, #22]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d140      	bne.n	8005d6a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	7812      	ldrb	r2, [r2, #0]
 8005cf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d0e:	e02c      	b.n	8005d6a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d113      	bne.n	8005d46 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	330c      	adds	r3, #12
 8005d28:	7812      	ldrb	r2, [r2, #0]
 8005d2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d44:	e011      	b.n	8005d6a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d46:	f7fd fe3f 	bl	80039c8 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d803      	bhi.n	8005d5e <HAL_SPI_Transmit+0x204>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d102      	bne.n	8005d64 <HAL_SPI_Transmit+0x20a>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d68:	e026      	b.n	8005db8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1cd      	bne.n	8005d10 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fa63 	bl	8006244 <SPI_EndRxTxTransaction>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d92:	2300      	movs	r3, #0
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	613b      	str	r3, [r7, #16]
 8005da6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e000      	b.n	8005db8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005db6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005dc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3720      	adds	r7, #32
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b08c      	sub	sp, #48	; 0x30
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005de0:	2301      	movs	r3, #1
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_SPI_TransmitReceive+0x26>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e18a      	b.n	800610e <HAL_SPI_TransmitReceive+0x33c>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e00:	f7fd fde2 	bl	80039c8 <HAL_GetTick>
 8005e04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e16:	887b      	ldrh	r3, [r7, #2]
 8005e18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d00f      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x70>
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e28:	d107      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d103      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x68>
 8005e32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d003      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e40:	e15b      	b.n	80060fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <HAL_SPI_TransmitReceive+0x82>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <HAL_SPI_TransmitReceive+0x82>
 8005e4e:	887b      	ldrh	r3, [r7, #2]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d103      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e5a:	e14e      	b.n	80060fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d003      	beq.n	8005e70 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2205      	movs	r2, #5
 8005e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	887a      	ldrh	r2, [r7, #2]
 8005e80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	887a      	ldrh	r2, [r7, #2]
 8005e86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	887a      	ldrh	r2, [r7, #2]
 8005e92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	887a      	ldrh	r2, [r7, #2]
 8005e98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb0:	2b40      	cmp	r3, #64	; 0x40
 8005eb2:	d007      	beq.n	8005ec4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ecc:	d178      	bne.n	8005fc0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_SPI_TransmitReceive+0x10a>
 8005ed6:	8b7b      	ldrh	r3, [r7, #26]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d166      	bne.n	8005faa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	881a      	ldrh	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eec:	1c9a      	adds	r2, r3, #2
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f00:	e053      	b.n	8005faa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d11b      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x176>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d016      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0x176>
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d113      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	881a      	ldrh	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	1c9a      	adds	r2, r3, #2
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d119      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x1b8>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d014      	beq.n	8005f8a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	b292      	uxth	r2, r2
 8005f6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	1c9a      	adds	r2, r3, #2
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f86:	2301      	movs	r3, #1
 8005f88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f8a:	f7fd fd1d 	bl	80039c8 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d807      	bhi.n	8005faa <HAL_SPI_TransmitReceive+0x1d8>
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d003      	beq.n	8005faa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fa8:	e0a7      	b.n	80060fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1a6      	bne.n	8005f02 <HAL_SPI_TransmitReceive+0x130>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1a1      	bne.n	8005f02 <HAL_SPI_TransmitReceive+0x130>
 8005fbe:	e07c      	b.n	80060ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_SPI_TransmitReceive+0x1fc>
 8005fc8:	8b7b      	ldrh	r3, [r7, #26]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d16b      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	7812      	ldrb	r2, [r2, #0]
 8005fda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff4:	e057      	b.n	80060a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b02      	cmp	r3, #2
 8006002:	d11c      	bne.n	800603e <HAL_SPI_TransmitReceive+0x26c>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d017      	beq.n	800603e <HAL_SPI_TransmitReceive+0x26c>
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d114      	bne.n	800603e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	330c      	adds	r3, #12
 800601e:	7812      	ldrb	r2, [r2, #0]
 8006020:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b01      	cmp	r3, #1
 800604a:	d119      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x2ae>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d014      	beq.n	8006080 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800607c:	2301      	movs	r3, #1
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006080:	f7fd fca2 	bl	80039c8 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800608c:	429a      	cmp	r2, r3
 800608e:	d803      	bhi.n	8006098 <HAL_SPI_TransmitReceive+0x2c6>
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006096:	d102      	bne.n	800609e <HAL_SPI_TransmitReceive+0x2cc>
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060a4:	e029      	b.n	80060fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1a2      	bne.n	8005ff6 <HAL_SPI_TransmitReceive+0x224>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d19d      	bne.n	8005ff6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 f8c0 	bl	8006244 <SPI_EndRxTxTransaction>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d006      	beq.n	80060d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80060d6:	e010      	b.n	80060fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10b      	bne.n	80060f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	e000      	b.n	80060fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80060f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800610a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800610e:	4618      	mov	r0, r3
 8006110:	3730      	adds	r7, #48	; 0x30
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006124:	b2db      	uxtb	r3, r3
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	4613      	mov	r3, r2
 8006142:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006144:	f7fd fc40 	bl	80039c8 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	1a9b      	subs	r3, r3, r2
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	4413      	add	r3, r2
 8006152:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006154:	f7fd fc38 	bl	80039c8 <HAL_GetTick>
 8006158:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800615a:	4b39      	ldr	r3, [pc, #228]	; (8006240 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	015b      	lsls	r3, r3, #5
 8006160:	0d1b      	lsrs	r3, r3, #20
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	fb02 f303 	mul.w	r3, r2, r3
 8006168:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800616a:	e054      	b.n	8006216 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006172:	d050      	beq.n	8006216 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006174:	f7fd fc28 	bl	80039c8 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	429a      	cmp	r2, r3
 8006182:	d902      	bls.n	800618a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d13d      	bne.n	8006206 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a2:	d111      	bne.n	80061c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ac:	d004      	beq.n	80061b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b6:	d107      	bne.n	80061c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d0:	d10f      	bne.n	80061f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e017      	b.n	8006236 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	3b01      	subs	r3, #1
 8006214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4013      	ands	r3, r2
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	429a      	cmp	r2, r3
 8006224:	bf0c      	ite	eq
 8006226:	2301      	moveq	r3, #1
 8006228:	2300      	movne	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	429a      	cmp	r2, r3
 8006232:	d19b      	bne.n	800616c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20000020 	.word	0x20000020

08006244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006250:	4b1b      	ldr	r3, [pc, #108]	; (80062c0 <SPI_EndRxTxTransaction+0x7c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <SPI_EndRxTxTransaction+0x80>)
 8006256:	fba2 2303 	umull	r2, r3, r2, r3
 800625a:	0d5b      	lsrs	r3, r3, #21
 800625c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006260:	fb02 f303 	mul.w	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800626e:	d112      	bne.n	8006296 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2200      	movs	r2, #0
 8006278:	2180      	movs	r1, #128	; 0x80
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff ff5a 	bl	8006134 <SPI_WaitFlagStateUntilTimeout>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d016      	beq.n	80062b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	f043 0220 	orr.w	r2, r3, #32
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e00f      	b.n	80062b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	3b01      	subs	r3, #1
 80062a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	d0f2      	beq.n	8006296 <SPI_EndRxTxTransaction+0x52>
 80062b0:	e000      	b.n	80062b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80062b2:	bf00      	nop
  }

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000020 	.word	0x20000020
 80062c4:	165e9f81 	.word	0x165e9f81

080062c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e041      	b.n	800635e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fd f88a 	bl	8003408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	4619      	mov	r1, r3
 8006306:	4610      	mov	r0, r2
 8006308:	f000 fab6 	bl	8006878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	d001      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e044      	b.n	800640a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0201 	orr.w	r2, r2, #1
 8006396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1e      	ldr	r2, [pc, #120]	; (8006418 <HAL_TIM_Base_Start_IT+0xb0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d018      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x6c>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063aa:	d013      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x6c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a1a      	ldr	r2, [pc, #104]	; (800641c <HAL_TIM_Base_Start_IT+0xb4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00e      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x6c>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a19      	ldr	r2, [pc, #100]	; (8006420 <HAL_TIM_Base_Start_IT+0xb8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d009      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x6c>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a17      	ldr	r2, [pc, #92]	; (8006424 <HAL_TIM_Base_Start_IT+0xbc>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d004      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0x6c>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a16      	ldr	r2, [pc, #88]	; (8006428 <HAL_TIM_Base_Start_IT+0xc0>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d111      	bne.n	80063f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b06      	cmp	r3, #6
 80063e4:	d010      	beq.n	8006408 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0201 	orr.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f6:	e007      	b.n	8006408 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40010000 	.word	0x40010000
 800641c:	40000400 	.word	0x40000400
 8006420:	40000800 	.word	0x40000800
 8006424:	40000c00 	.word	0x40000c00
 8006428:	40014000 	.word	0x40014000

0800642c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0201 	bic.w	r2, r2, #1
 8006442:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6a1a      	ldr	r2, [r3, #32]
 800644a:	f241 1311 	movw	r3, #4369	; 0x1111
 800644e:	4013      	ands	r3, r2
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10f      	bne.n	8006474 <HAL_TIM_Base_Stop_IT+0x48>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6a1a      	ldr	r2, [r3, #32]
 800645a:	f240 4344 	movw	r3, #1092	; 0x444
 800645e:	4013      	ands	r3, r2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d107      	bne.n	8006474 <HAL_TIM_Base_Stop_IT+0x48>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0201 	bic.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b02      	cmp	r3, #2
 800649e:	d122      	bne.n	80064e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d11b      	bne.n	80064e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f06f 0202 	mvn.w	r2, #2
 80064b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	f003 0303 	and.w	r3, r3, #3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f9b5 	bl	800683c <HAL_TIM_IC_CaptureCallback>
 80064d2:	e005      	b.n	80064e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f9a7 	bl	8006828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f9b8 	bl	8006850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d122      	bne.n	800653a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d11b      	bne.n	800653a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f06f 0204 	mvn.w	r2, #4
 800650a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f98b 	bl	800683c <HAL_TIM_IC_CaptureCallback>
 8006526:	e005      	b.n	8006534 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f97d 	bl	8006828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f98e 	bl	8006850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b08      	cmp	r3, #8
 8006546:	d122      	bne.n	800658e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b08      	cmp	r3, #8
 8006554:	d11b      	bne.n	800658e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f06f 0208 	mvn.w	r2, #8
 800655e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2204      	movs	r2, #4
 8006564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	f003 0303 	and.w	r3, r3, #3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f961 	bl	800683c <HAL_TIM_IC_CaptureCallback>
 800657a:	e005      	b.n	8006588 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f953 	bl	8006828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f964 	bl	8006850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	f003 0310 	and.w	r3, r3, #16
 8006598:	2b10      	cmp	r3, #16
 800659a:	d122      	bne.n	80065e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0310 	and.w	r3, r3, #16
 80065a6:	2b10      	cmp	r3, #16
 80065a8:	d11b      	bne.n	80065e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f06f 0210 	mvn.w	r2, #16
 80065b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2208      	movs	r2, #8
 80065b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f937 	bl	800683c <HAL_TIM_IC_CaptureCallback>
 80065ce:	e005      	b.n	80065dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f929 	bl	8006828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f93a 	bl	8006850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d10e      	bne.n	800660e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d107      	bne.n	800660e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f06f 0201 	mvn.w	r2, #1
 8006606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7fc fc0f 	bl	8002e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006618:	2b80      	cmp	r3, #128	; 0x80
 800661a:	d10e      	bne.n	800663a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006626:	2b80      	cmp	r3, #128	; 0x80
 8006628:	d107      	bne.n	800663a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fab1 	bl	8006b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d10e      	bne.n	8006666 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006652:	2b40      	cmp	r3, #64	; 0x40
 8006654:	d107      	bne.n	8006666 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800665e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f8ff 	bl	8006864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b20      	cmp	r3, #32
 8006672:	d10e      	bne.n	8006692 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b20      	cmp	r3, #32
 8006680:	d107      	bne.n	8006692 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f06f 0220 	mvn.w	r2, #32
 800668a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fa7b 	bl	8006b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d101      	bne.n	80066b6 <HAL_TIM_ConfigClockSource+0x1c>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e0b4      	b.n	8006820 <HAL_TIM_ConfigClockSource+0x186>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2202      	movs	r2, #2
 80066c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ee:	d03e      	beq.n	800676e <HAL_TIM_ConfigClockSource+0xd4>
 80066f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f4:	f200 8087 	bhi.w	8006806 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fc:	f000 8086 	beq.w	800680c <HAL_TIM_ConfigClockSource+0x172>
 8006700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006704:	d87f      	bhi.n	8006806 <HAL_TIM_ConfigClockSource+0x16c>
 8006706:	2b70      	cmp	r3, #112	; 0x70
 8006708:	d01a      	beq.n	8006740 <HAL_TIM_ConfigClockSource+0xa6>
 800670a:	2b70      	cmp	r3, #112	; 0x70
 800670c:	d87b      	bhi.n	8006806 <HAL_TIM_ConfigClockSource+0x16c>
 800670e:	2b60      	cmp	r3, #96	; 0x60
 8006710:	d050      	beq.n	80067b4 <HAL_TIM_ConfigClockSource+0x11a>
 8006712:	2b60      	cmp	r3, #96	; 0x60
 8006714:	d877      	bhi.n	8006806 <HAL_TIM_ConfigClockSource+0x16c>
 8006716:	2b50      	cmp	r3, #80	; 0x50
 8006718:	d03c      	beq.n	8006794 <HAL_TIM_ConfigClockSource+0xfa>
 800671a:	2b50      	cmp	r3, #80	; 0x50
 800671c:	d873      	bhi.n	8006806 <HAL_TIM_ConfigClockSource+0x16c>
 800671e:	2b40      	cmp	r3, #64	; 0x40
 8006720:	d058      	beq.n	80067d4 <HAL_TIM_ConfigClockSource+0x13a>
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d86f      	bhi.n	8006806 <HAL_TIM_ConfigClockSource+0x16c>
 8006726:	2b30      	cmp	r3, #48	; 0x30
 8006728:	d064      	beq.n	80067f4 <HAL_TIM_ConfigClockSource+0x15a>
 800672a:	2b30      	cmp	r3, #48	; 0x30
 800672c:	d86b      	bhi.n	8006806 <HAL_TIM_ConfigClockSource+0x16c>
 800672e:	2b20      	cmp	r3, #32
 8006730:	d060      	beq.n	80067f4 <HAL_TIM_ConfigClockSource+0x15a>
 8006732:	2b20      	cmp	r3, #32
 8006734:	d867      	bhi.n	8006806 <HAL_TIM_ConfigClockSource+0x16c>
 8006736:	2b00      	cmp	r3, #0
 8006738:	d05c      	beq.n	80067f4 <HAL_TIM_ConfigClockSource+0x15a>
 800673a:	2b10      	cmp	r3, #16
 800673c:	d05a      	beq.n	80067f4 <HAL_TIM_ConfigClockSource+0x15a>
 800673e:	e062      	b.n	8006806 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	6899      	ldr	r1, [r3, #8]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f000 f98c 	bl	8006a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006762:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	609a      	str	r2, [r3, #8]
      break;
 800676c:	e04f      	b.n	800680e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6899      	ldr	r1, [r3, #8]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f000 f975 	bl	8006a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006790:	609a      	str	r2, [r3, #8]
      break;
 8006792:	e03c      	b.n	800680e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	6859      	ldr	r1, [r3, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	461a      	mov	r2, r3
 80067a2:	f000 f8e9 	bl	8006978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2150      	movs	r1, #80	; 0x50
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 f942 	bl	8006a36 <TIM_ITRx_SetConfig>
      break;
 80067b2:	e02c      	b.n	800680e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	6859      	ldr	r1, [r3, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	461a      	mov	r2, r3
 80067c2:	f000 f908 	bl	80069d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2160      	movs	r1, #96	; 0x60
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 f932 	bl	8006a36 <TIM_ITRx_SetConfig>
      break;
 80067d2:	e01c      	b.n	800680e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	6859      	ldr	r1, [r3, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	461a      	mov	r2, r3
 80067e2:	f000 f8c9 	bl	8006978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2140      	movs	r1, #64	; 0x40
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 f922 	bl	8006a36 <TIM_ITRx_SetConfig>
      break;
 80067f2:	e00c      	b.n	800680e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f000 f919 	bl	8006a36 <TIM_ITRx_SetConfig>
      break;
 8006804:	e003      	b.n	800680e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	73fb      	strb	r3, [r7, #15]
      break;
 800680a:	e000      	b.n	800680e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800680c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a34      	ldr	r2, [pc, #208]	; (800695c <TIM_Base_SetConfig+0xe4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00f      	beq.n	80068b0 <TIM_Base_SetConfig+0x38>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006896:	d00b      	beq.n	80068b0 <TIM_Base_SetConfig+0x38>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a31      	ldr	r2, [pc, #196]	; (8006960 <TIM_Base_SetConfig+0xe8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_Base_SetConfig+0x38>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a30      	ldr	r2, [pc, #192]	; (8006964 <TIM_Base_SetConfig+0xec>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_Base_SetConfig+0x38>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a2f      	ldr	r2, [pc, #188]	; (8006968 <TIM_Base_SetConfig+0xf0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d108      	bne.n	80068c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a25      	ldr	r2, [pc, #148]	; (800695c <TIM_Base_SetConfig+0xe4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d01b      	beq.n	8006902 <TIM_Base_SetConfig+0x8a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d0:	d017      	beq.n	8006902 <TIM_Base_SetConfig+0x8a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a22      	ldr	r2, [pc, #136]	; (8006960 <TIM_Base_SetConfig+0xe8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <TIM_Base_SetConfig+0x8a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a21      	ldr	r2, [pc, #132]	; (8006964 <TIM_Base_SetConfig+0xec>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00f      	beq.n	8006902 <TIM_Base_SetConfig+0x8a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a20      	ldr	r2, [pc, #128]	; (8006968 <TIM_Base_SetConfig+0xf0>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00b      	beq.n	8006902 <TIM_Base_SetConfig+0x8a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a1f      	ldr	r2, [pc, #124]	; (800696c <TIM_Base_SetConfig+0xf4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d007      	beq.n	8006902 <TIM_Base_SetConfig+0x8a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a1e      	ldr	r2, [pc, #120]	; (8006970 <TIM_Base_SetConfig+0xf8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_Base_SetConfig+0x8a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <TIM_Base_SetConfig+0xfc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d108      	bne.n	8006914 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a08      	ldr	r2, [pc, #32]	; (800695c <TIM_Base_SetConfig+0xe4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d103      	bne.n	8006948 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	615a      	str	r2, [r3, #20]
}
 800694e:	bf00      	nop
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40010000 	.word	0x40010000
 8006960:	40000400 	.word	0x40000400
 8006964:	40000800 	.word	0x40000800
 8006968:	40000c00 	.word	0x40000c00
 800696c:	40014000 	.word	0x40014000
 8006970:	40014400 	.word	0x40014400
 8006974:	40014800 	.word	0x40014800

08006978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	f023 0201 	bic.w	r2, r3, #1
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f023 030a 	bic.w	r3, r3, #10
 80069b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	621a      	str	r2, [r3, #32]
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b087      	sub	sp, #28
 80069da:	af00      	add	r7, sp, #0
 80069dc:	60f8      	str	r0, [r7, #12]
 80069de:	60b9      	str	r1, [r7, #8]
 80069e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f023 0210 	bic.w	r2, r3, #16
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	031b      	lsls	r3, r3, #12
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	621a      	str	r2, [r3, #32]
}
 8006a2a:	bf00      	nop
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f043 0307 	orr.w	r3, r3, #7
 8006a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	609a      	str	r2, [r3, #8]
}
 8006a60:	bf00      	nop
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	021a      	lsls	r2, r3, #8
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	609a      	str	r2, [r3, #8]
}
 8006aa0:	bf00      	nop
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e050      	b.n	8006b66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2202      	movs	r2, #2
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a1c      	ldr	r2, [pc, #112]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d018      	beq.n	8006b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b10:	d013      	beq.n	8006b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a18      	ldr	r2, [pc, #96]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00e      	beq.n	8006b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a16      	ldr	r2, [pc, #88]	; (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d009      	beq.n	8006b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a15      	ldr	r2, [pc, #84]	; (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d004      	beq.n	8006b3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a13      	ldr	r2, [pc, #76]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d10c      	bne.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	40010000 	.word	0x40010000
 8006b78:	40000400 	.word	0x40000400
 8006b7c:	40000800 	.word	0x40000800
 8006b80:	40000c00 	.word	0x40000c00
 8006b84:	40014000 	.word	0x40014000

08006b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e03f      	b.n	8006c42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fc fc96 	bl	8003508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2224      	movs	r2, #36	; 0x24
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 feb7 	bl	8007968 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691a      	ldr	r2, [r3, #16]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	695a      	ldr	r2, [r3, #20]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b08a      	sub	sp, #40	; 0x28
 8006c4e:	af02      	add	r7, sp, #8
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	603b      	str	r3, [r7, #0]
 8006c56:	4613      	mov	r3, r2
 8006c58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d17c      	bne.n	8006d64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <HAL_UART_Transmit+0x2c>
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e075      	b.n	8006d66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_UART_Transmit+0x3e>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e06e      	b.n	8006d66 <HAL_UART_Transmit+0x11c>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2221      	movs	r2, #33	; 0x21
 8006c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c9e:	f7fc fe93 	bl	80039c8 <HAL_GetTick>
 8006ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	88fa      	ldrh	r2, [r7, #6]
 8006ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	88fa      	ldrh	r2, [r7, #6]
 8006cae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb8:	d108      	bne.n	8006ccc <HAL_UART_Transmit+0x82>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d104      	bne.n	8006ccc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e003      	b.n	8006cd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006cdc:	e02a      	b.n	8006d34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2180      	movs	r1, #128	; 0x80
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 fbfb 	bl	80074e4 <UART_WaitOnFlagUntilTimeout>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e036      	b.n	8006d66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10b      	bne.n	8006d16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	3302      	adds	r3, #2
 8006d12:	61bb      	str	r3, [r7, #24]
 8006d14:	e007      	b.n	8006d26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	3301      	adds	r3, #1
 8006d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1cf      	bne.n	8006cde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2200      	movs	r2, #0
 8006d46:	2140      	movs	r1, #64	; 0x40
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f000 fbcb 	bl	80074e4 <UART_WaitOnFlagUntilTimeout>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e006      	b.n	8006d66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	e000      	b.n	8006d66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d64:	2302      	movs	r3, #2
  }
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3720      	adds	r7, #32
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b08a      	sub	sp, #40	; 0x28
 8006d72:	af02      	add	r7, sp, #8
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	603b      	str	r3, [r7, #0]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	f040 808c 	bne.w	8006ea8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_UART_Receive+0x2e>
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e084      	b.n	8006eaa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_UART_Receive+0x40>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e07d      	b.n	8006eaa <HAL_UART_Receive+0x13c>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2222      	movs	r2, #34	; 0x22
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dca:	f7fc fdfd 	bl	80039c8 <HAL_GetTick>
 8006dce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	88fa      	ldrh	r2, [r7, #6]
 8006dd4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	88fa      	ldrh	r2, [r7, #6]
 8006dda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de4:	d108      	bne.n	8006df8 <HAL_UART_Receive+0x8a>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d104      	bne.n	8006df8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	e003      	b.n	8006e00 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006e08:	e043      	b.n	8006e92 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2200      	movs	r2, #0
 8006e12:	2120      	movs	r1, #32
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fb65 	bl	80074e4 <UART_WaitOnFlagUntilTimeout>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e042      	b.n	8006eaa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10c      	bne.n	8006e44 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	3302      	adds	r3, #2
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	e01f      	b.n	8006e84 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4c:	d007      	beq.n	8006e5e <HAL_UART_Receive+0xf0>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <HAL_UART_Receive+0xfe>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	e008      	b.n	8006e7e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	3301      	adds	r3, #1
 8006e82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1b6      	bne.n	8006e0a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e000      	b.n	8006eaa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006ea8:	2302      	movs	r3, #2
  }
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3720      	adds	r7, #32
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b085      	sub	sp, #20
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d130      	bne.n	8006f2e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <HAL_UART_Transmit_IT+0x26>
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e029      	b.n	8006f30 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d101      	bne.n	8006eea <HAL_UART_Transmit_IT+0x38>
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	e022      	b.n	8006f30 <HAL_UART_Transmit_IT+0x7e>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	88fa      	ldrh	r2, [r7, #6]
 8006f02:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2221      	movs	r2, #33	; 0x21
 8006f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f28:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	e000      	b.n	8006f30 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006f2e:	2302      	movs	r3, #2
  }
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d11d      	bne.n	8006f92 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <HAL_UART_Receive_IT+0x26>
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e016      	b.n	8006f94 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_UART_Receive_IT+0x38>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e00f      	b.n	8006f94 <HAL_UART_Receive_IT+0x58>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	461a      	mov	r2, r3
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fb19 	bl	80075c0 <UART_Start_Receive_IT>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	e000      	b.n	8006f94 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006f92:	2302      	movs	r3, #2
  }
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b0ba      	sub	sp, #232	; 0xe8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd2:	f003 030f 	and.w	r3, r3, #15
 8006fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10f      	bne.n	8007002 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <HAL_UART_IRQHandler+0x66>
 8006fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fbf9 	bl	80077f2 <UART_Receive_IT>
      return;
 8007000:	e256      	b.n	80074b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 80de 	beq.w	80071c8 <HAL_UART_IRQHandler+0x22c>
 800700c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	d106      	bne.n	8007026 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800701c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80d1 	beq.w	80071c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <HAL_UART_IRQHandler+0xae>
 8007032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	f043 0201 	orr.w	r2, r3, #1
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800704a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00b      	beq.n	800706e <HAL_UART_IRQHandler+0xd2>
 8007056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d005      	beq.n	800706e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	f043 0202 	orr.w	r2, r3, #2
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800706e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <HAL_UART_IRQHandler+0xf6>
 800707a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d005      	beq.n	8007092 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	f043 0204 	orr.w	r2, r3, #4
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007096:	f003 0308 	and.w	r3, r3, #8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d011      	beq.n	80070c2 <HAL_UART_IRQHandler+0x126>
 800709e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d105      	bne.n	80070b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	f043 0208 	orr.w	r2, r3, #8
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 81ed 	beq.w	80074a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <HAL_UART_IRQHandler+0x14e>
 80070d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fb84 	bl	80077f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f4:	2b40      	cmp	r3, #64	; 0x40
 80070f6:	bf0c      	ite	eq
 80070f8:	2301      	moveq	r3, #1
 80070fa:	2300      	movne	r3, #0
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d103      	bne.n	8007116 <HAL_UART_IRQHandler+0x17a>
 800710e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007112:	2b00      	cmp	r3, #0
 8007114:	d04f      	beq.n	80071b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa8c 	bl	8007634 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007126:	2b40      	cmp	r3, #64	; 0x40
 8007128:	d141      	bne.n	80071ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3314      	adds	r3, #20
 8007130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3314      	adds	r3, #20
 8007152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007156:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800715a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800716e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1d9      	bne.n	800712a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	2b00      	cmp	r3, #0
 800717c:	d013      	beq.n	80071a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	4a7d      	ldr	r2, [pc, #500]	; (8007378 <HAL_UART_IRQHandler+0x3dc>)
 8007184:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	4618      	mov	r0, r3
 800718c:	f7fd fbbc 	bl	8004908 <HAL_DMA_Abort_IT>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d016      	beq.n	80071c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071a0:	4610      	mov	r0, r2
 80071a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a4:	e00e      	b.n	80071c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fb fdf8 	bl	8002d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ac:	e00a      	b.n	80071c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fb fdf4 	bl	8002d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b4:	e006      	b.n	80071c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7fb fdf0 	bl	8002d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80071c2:	e170      	b.n	80074a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	bf00      	nop
    return;
 80071c6:	e16e      	b.n	80074a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	f040 814a 	bne.w	8007466 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80071d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d6:	f003 0310 	and.w	r3, r3, #16
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 8143 	beq.w	8007466 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80071e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 813c 	beq.w	8007466 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071ee:	2300      	movs	r3, #0
 80071f0:	60bb      	str	r3, [r7, #8]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60bb      	str	r3, [r7, #8]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	60bb      	str	r3, [r7, #8]
 8007202:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720e:	2b40      	cmp	r3, #64	; 0x40
 8007210:	f040 80b4 	bne.w	800737c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007220:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 8140 	beq.w	80074aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800722e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007232:	429a      	cmp	r2, r3
 8007234:	f080 8139 	bcs.w	80074aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800723e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800724a:	f000 8088 	beq.w	800735e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	330c      	adds	r3, #12
 8007254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800726c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	330c      	adds	r3, #12
 8007276:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800727a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800727e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007286:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1d9      	bne.n	800724e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3314      	adds	r3, #20
 80072a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072ac:	f023 0301 	bic.w	r3, r3, #1
 80072b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3314      	adds	r3, #20
 80072ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e1      	bne.n	800729a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3314      	adds	r3, #20
 80072dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3314      	adds	r3, #20
 80072f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007300:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e3      	bne.n	80072d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2220      	movs	r2, #32
 8007312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800732c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800732e:	f023 0310 	bic.w	r3, r3, #16
 8007332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	330c      	adds	r3, #12
 800733c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007340:	65ba      	str	r2, [r7, #88]	; 0x58
 8007342:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007346:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800734e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e3      	bne.n	800731c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	4618      	mov	r0, r3
 800735a:	f7fd fa65 	bl	8004828 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007366:	b29b      	uxth	r3, r3
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	b29b      	uxth	r3, r3
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f8ac 	bl	80074cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007374:	e099      	b.n	80074aa <HAL_UART_IRQHandler+0x50e>
 8007376:	bf00      	nop
 8007378:	080076fb 	.word	0x080076fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007384:	b29b      	uxth	r3, r3
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 808b 	beq.w	80074ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007398:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8086 	beq.w	80074ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	330c      	adds	r3, #12
 80073c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80073c6:	647a      	str	r2, [r7, #68]	; 0x44
 80073c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e3      	bne.n	80073a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3314      	adds	r3, #20
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	623b      	str	r3, [r7, #32]
   return(result);
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	f023 0301 	bic.w	r3, r3, #1
 80073f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3314      	adds	r3, #20
 80073fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073fe:	633a      	str	r2, [r7, #48]	; 0x30
 8007400:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e3      	bne.n	80073da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	330c      	adds	r3, #12
 8007426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	e853 3f00 	ldrex	r3, [r3]
 800742e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0310 	bic.w	r3, r3, #16
 8007436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	330c      	adds	r3, #12
 8007440:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007444:	61fa      	str	r2, [r7, #28]
 8007446:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	69b9      	ldr	r1, [r7, #24]
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	617b      	str	r3, [r7, #20]
   return(result);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e3      	bne.n	8007420 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f834 	bl	80074cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007464:	e023      	b.n	80074ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746e:	2b00      	cmp	r3, #0
 8007470:	d009      	beq.n	8007486 <HAL_UART_IRQHandler+0x4ea>
 8007472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f94f 	bl	8007722 <UART_Transmit_IT>
    return;
 8007484:	e014      	b.n	80074b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00e      	beq.n	80074b0 <HAL_UART_IRQHandler+0x514>
 8007492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749a:	2b00      	cmp	r3, #0
 800749c:	d008      	beq.n	80074b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f98f 	bl	80077c2 <UART_EndTransmit_IT>
    return;
 80074a4:	e004      	b.n	80074b0 <HAL_UART_IRQHandler+0x514>
    return;
 80074a6:	bf00      	nop
 80074a8:	e002      	b.n	80074b0 <HAL_UART_IRQHandler+0x514>
      return;
 80074aa:	bf00      	nop
 80074ac:	e000      	b.n	80074b0 <HAL_UART_IRQHandler+0x514>
      return;
 80074ae:	bf00      	nop
  }
}
 80074b0:	37e8      	adds	r7, #232	; 0xe8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop

080074b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b090      	sub	sp, #64	; 0x40
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	4613      	mov	r3, r2
 80074f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f4:	e050      	b.n	8007598 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fc:	d04c      	beq.n	8007598 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <UART_WaitOnFlagUntilTimeout+0x30>
 8007504:	f7fc fa60 	bl	80039c8 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007510:	429a      	cmp	r2, r3
 8007512:	d241      	bcs.n	8007598 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	330c      	adds	r3, #12
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	e853 3f00 	ldrex	r3, [r3]
 8007522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800752a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	330c      	adds	r3, #12
 8007532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007534:	637a      	str	r2, [r7, #52]	; 0x34
 8007536:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800753a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800753c:	e841 2300 	strex	r3, r2, [r1]
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e5      	bne.n	8007514 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3314      	adds	r3, #20
 800754e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	e853 3f00 	ldrex	r3, [r3]
 8007556:	613b      	str	r3, [r7, #16]
   return(result);
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f023 0301 	bic.w	r3, r3, #1
 800755e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3314      	adds	r3, #20
 8007566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007568:	623a      	str	r2, [r7, #32]
 800756a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	69f9      	ldr	r1, [r7, #28]
 800756e:	6a3a      	ldr	r2, [r7, #32]
 8007570:	e841 2300 	strex	r3, r2, [r1]
 8007574:	61bb      	str	r3, [r7, #24]
   return(result);
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e5      	bne.n	8007548 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2220      	movs	r2, #32
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e00f      	b.n	80075b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	4013      	ands	r3, r2
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	bf0c      	ite	eq
 80075a8:	2301      	moveq	r3, #1
 80075aa:	2300      	movne	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	461a      	mov	r2, r3
 80075b0:	79fb      	ldrb	r3, [r7, #7]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d09f      	beq.n	80074f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3740      	adds	r7, #64	; 0x40
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	4613      	mov	r3, r2
 80075cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	88fa      	ldrh	r2, [r7, #6]
 80075d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	88fa      	ldrh	r2, [r7, #6]
 80075de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2222      	movs	r2, #34	; 0x22
 80075ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007604:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695a      	ldr	r2, [r3, #20]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f042 0201 	orr.w	r2, r2, #1
 8007614:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f042 0220 	orr.w	r2, r2, #32
 8007624:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007634:	b480      	push	{r7}
 8007636:	b095      	sub	sp, #84	; 0x54
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	330c      	adds	r3, #12
 8007642:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	330c      	adds	r3, #12
 800765a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800765c:	643a      	str	r2, [r7, #64]	; 0x40
 800765e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007662:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007664:	e841 2300 	strex	r3, r2, [r1]
 8007668:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e5      	bne.n	800763c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3314      	adds	r3, #20
 8007676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	f023 0301 	bic.w	r3, r3, #1
 8007686:	64bb      	str	r3, [r7, #72]	; 0x48
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3314      	adds	r3, #20
 800768e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007690:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007692:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e5      	bne.n	8007670 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d119      	bne.n	80076e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	330c      	adds	r3, #12
 80076b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f023 0310 	bic.w	r3, r3, #16
 80076c2:	647b      	str	r3, [r7, #68]	; 0x44
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	330c      	adds	r3, #12
 80076ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076cc:	61ba      	str	r2, [r7, #24]
 80076ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	6979      	ldr	r1, [r7, #20]
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	613b      	str	r3, [r7, #16]
   return(result);
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e5      	bne.n	80076ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076ee:	bf00      	nop
 80076f0:	3754      	adds	r7, #84	; 0x54
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f7fb fb41 	bl	8002d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800771a:	bf00      	nop
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b21      	cmp	r3, #33	; 0x21
 8007734:	d13e      	bne.n	80077b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800773e:	d114      	bne.n	800776a <UART_Transmit_IT+0x48>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d110      	bne.n	800776a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800775c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	1c9a      	adds	r2, r3, #2
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	621a      	str	r2, [r3, #32]
 8007768:	e008      	b.n	800777c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	1c59      	adds	r1, r3, #1
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6211      	str	r1, [r2, #32]
 8007774:	781a      	ldrb	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007780:	b29b      	uxth	r3, r3
 8007782:	3b01      	subs	r3, #1
 8007784:	b29b      	uxth	r3, r3
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	4619      	mov	r1, r3
 800778a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10f      	bne.n	80077b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800779e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	e000      	b.n	80077b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077b4:	2302      	movs	r3, #2
  }
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2220      	movs	r2, #32
 80077de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff fe68 	bl	80074b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b08c      	sub	sp, #48	; 0x30
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b22      	cmp	r3, #34	; 0x22
 8007804:	f040 80ab 	bne.w	800795e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007810:	d117      	bne.n	8007842 <UART_Receive_IT+0x50>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d113      	bne.n	8007842 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007822:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	b29b      	uxth	r3, r3
 800782c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007830:	b29a      	uxth	r2, r3
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783a:	1c9a      	adds	r2, r3, #2
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	629a      	str	r2, [r3, #40]	; 0x28
 8007840:	e026      	b.n	8007890 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007848:	2300      	movs	r3, #0
 800784a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007854:	d007      	beq.n	8007866 <UART_Receive_IT+0x74>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <UART_Receive_IT+0x82>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d106      	bne.n	8007874 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	b2da      	uxtb	r2, r3
 800786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007870:	701a      	strb	r2, [r3, #0]
 8007872:	e008      	b.n	8007886 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007880:	b2da      	uxtb	r2, r3
 8007882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007884:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007894:	b29b      	uxth	r3, r3
 8007896:	3b01      	subs	r3, #1
 8007898:	b29b      	uxth	r3, r3
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	4619      	mov	r1, r3
 800789e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d15a      	bne.n	800795a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0220 	bic.w	r2, r2, #32
 80078b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	695a      	ldr	r2, [r3, #20]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0201 	bic.w	r2, r2, #1
 80078d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2220      	movs	r2, #32
 80078d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d135      	bne.n	8007950 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	330c      	adds	r3, #12
 80078f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	613b      	str	r3, [r7, #16]
   return(result);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f023 0310 	bic.w	r3, r3, #16
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	330c      	adds	r3, #12
 8007908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800790a:	623a      	str	r2, [r7, #32]
 800790c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	69f9      	ldr	r1, [r7, #28]
 8007910:	6a3a      	ldr	r2, [r7, #32]
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	61bb      	str	r3, [r7, #24]
   return(result);
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e5      	bne.n	80078ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0310 	and.w	r3, r3, #16
 8007928:	2b10      	cmp	r3, #16
 800792a:	d10a      	bne.n	8007942 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff fdbf 	bl	80074cc <HAL_UARTEx_RxEventCallback>
 800794e:	e002      	b.n	8007956 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7fb f993 	bl	8002c7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	e002      	b.n	8007960 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	e000      	b.n	8007960 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800795e:	2302      	movs	r3, #2
  }
}
 8007960:	4618      	mov	r0, r3
 8007962:	3730      	adds	r7, #48	; 0x30
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	b09f      	sub	sp, #124	; 0x7c
 800796e:	af00      	add	r7, sp, #0
 8007970:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800797c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800797e:	68d9      	ldr	r1, [r3, #12]
 8007980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	ea40 0301 	orr.w	r3, r0, r1
 8007988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800798a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	431a      	orrs	r2, r3
 8007994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	431a      	orrs	r2, r3
 800799a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	4313      	orrs	r3, r2
 80079a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80079a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079ac:	f021 010c 	bic.w	r1, r1, #12
 80079b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079b6:	430b      	orrs	r3, r1
 80079b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c6:	6999      	ldr	r1, [r3, #24]
 80079c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	ea40 0301 	orr.w	r3, r0, r1
 80079d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	4bc5      	ldr	r3, [pc, #788]	; (8007cec <UART_SetConfig+0x384>)
 80079d8:	429a      	cmp	r2, r3
 80079da:	d004      	beq.n	80079e6 <UART_SetConfig+0x7e>
 80079dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	4bc3      	ldr	r3, [pc, #780]	; (8007cf0 <UART_SetConfig+0x388>)
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d103      	bne.n	80079ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079e6:	f7fe f81b 	bl	8005a20 <HAL_RCC_GetPCLK2Freq>
 80079ea:	6778      	str	r0, [r7, #116]	; 0x74
 80079ec:	e002      	b.n	80079f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079ee:	f7fe f803 	bl	80059f8 <HAL_RCC_GetPCLK1Freq>
 80079f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079fc:	f040 80b6 	bne.w	8007b6c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a02:	461c      	mov	r4, r3
 8007a04:	f04f 0500 	mov.w	r5, #0
 8007a08:	4622      	mov	r2, r4
 8007a0a:	462b      	mov	r3, r5
 8007a0c:	1891      	adds	r1, r2, r2
 8007a0e:	6439      	str	r1, [r7, #64]	; 0x40
 8007a10:	415b      	adcs	r3, r3
 8007a12:	647b      	str	r3, [r7, #68]	; 0x44
 8007a14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a18:	1912      	adds	r2, r2, r4
 8007a1a:	eb45 0303 	adc.w	r3, r5, r3
 8007a1e:	f04f 0000 	mov.w	r0, #0
 8007a22:	f04f 0100 	mov.w	r1, #0
 8007a26:	00d9      	lsls	r1, r3, #3
 8007a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a2c:	00d0      	lsls	r0, r2, #3
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	1911      	adds	r1, r2, r4
 8007a34:	6639      	str	r1, [r7, #96]	; 0x60
 8007a36:	416b      	adcs	r3, r5
 8007a38:	667b      	str	r3, [r7, #100]	; 0x64
 8007a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	1891      	adds	r1, r2, r2
 8007a46:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a48:	415b      	adcs	r3, r3
 8007a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007a54:	f7f9 f84a 	bl	8000aec <__aeabi_uldivmod>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4ba5      	ldr	r3, [pc, #660]	; (8007cf4 <UART_SetConfig+0x38c>)
 8007a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a62:	095b      	lsrs	r3, r3, #5
 8007a64:	011e      	lsls	r6, r3, #4
 8007a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a68:	461c      	mov	r4, r3
 8007a6a:	f04f 0500 	mov.w	r5, #0
 8007a6e:	4622      	mov	r2, r4
 8007a70:	462b      	mov	r3, r5
 8007a72:	1891      	adds	r1, r2, r2
 8007a74:	6339      	str	r1, [r7, #48]	; 0x30
 8007a76:	415b      	adcs	r3, r3
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
 8007a7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a7e:	1912      	adds	r2, r2, r4
 8007a80:	eb45 0303 	adc.w	r3, r5, r3
 8007a84:	f04f 0000 	mov.w	r0, #0
 8007a88:	f04f 0100 	mov.w	r1, #0
 8007a8c:	00d9      	lsls	r1, r3, #3
 8007a8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a92:	00d0      	lsls	r0, r2, #3
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	1911      	adds	r1, r2, r4
 8007a9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a9c:	416b      	adcs	r3, r5
 8007a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	1891      	adds	r1, r2, r2
 8007aac:	62b9      	str	r1, [r7, #40]	; 0x28
 8007aae:	415b      	adcs	r3, r3
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ab6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007aba:	f7f9 f817 	bl	8000aec <__aeabi_uldivmod>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4b8c      	ldr	r3, [pc, #560]	; (8007cf4 <UART_SetConfig+0x38c>)
 8007ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ac8:	095b      	lsrs	r3, r3, #5
 8007aca:	2164      	movs	r1, #100	; 0x64
 8007acc:	fb01 f303 	mul.w	r3, r1, r3
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	3332      	adds	r3, #50	; 0x32
 8007ad6:	4a87      	ldr	r2, [pc, #540]	; (8007cf4 <UART_SetConfig+0x38c>)
 8007ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8007adc:	095b      	lsrs	r3, r3, #5
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ae4:	441e      	add	r6, r3
 8007ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f04f 0100 	mov.w	r1, #0
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	1894      	adds	r4, r2, r2
 8007af4:	623c      	str	r4, [r7, #32]
 8007af6:	415b      	adcs	r3, r3
 8007af8:	627b      	str	r3, [r7, #36]	; 0x24
 8007afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007afe:	1812      	adds	r2, r2, r0
 8007b00:	eb41 0303 	adc.w	r3, r1, r3
 8007b04:	f04f 0400 	mov.w	r4, #0
 8007b08:	f04f 0500 	mov.w	r5, #0
 8007b0c:	00dd      	lsls	r5, r3, #3
 8007b0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b12:	00d4      	lsls	r4, r2, #3
 8007b14:	4622      	mov	r2, r4
 8007b16:	462b      	mov	r3, r5
 8007b18:	1814      	adds	r4, r2, r0
 8007b1a:	653c      	str	r4, [r7, #80]	; 0x50
 8007b1c:	414b      	adcs	r3, r1
 8007b1e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	461a      	mov	r2, r3
 8007b26:	f04f 0300 	mov.w	r3, #0
 8007b2a:	1891      	adds	r1, r2, r2
 8007b2c:	61b9      	str	r1, [r7, #24]
 8007b2e:	415b      	adcs	r3, r3
 8007b30:	61fb      	str	r3, [r7, #28]
 8007b32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b3a:	f7f8 ffd7 	bl	8000aec <__aeabi_uldivmod>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4b6c      	ldr	r3, [pc, #432]	; (8007cf4 <UART_SetConfig+0x38c>)
 8007b44:	fba3 1302 	umull	r1, r3, r3, r2
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	2164      	movs	r1, #100	; 0x64
 8007b4c:	fb01 f303 	mul.w	r3, r1, r3
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	3332      	adds	r3, #50	; 0x32
 8007b56:	4a67      	ldr	r2, [pc, #412]	; (8007cf4 <UART_SetConfig+0x38c>)
 8007b58:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5c:	095b      	lsrs	r3, r3, #5
 8007b5e:	f003 0207 	and.w	r2, r3, #7
 8007b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4432      	add	r2, r6
 8007b68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b6a:	e0b9      	b.n	8007ce0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b6e:	461c      	mov	r4, r3
 8007b70:	f04f 0500 	mov.w	r5, #0
 8007b74:	4622      	mov	r2, r4
 8007b76:	462b      	mov	r3, r5
 8007b78:	1891      	adds	r1, r2, r2
 8007b7a:	6139      	str	r1, [r7, #16]
 8007b7c:	415b      	adcs	r3, r3
 8007b7e:	617b      	str	r3, [r7, #20]
 8007b80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007b84:	1912      	adds	r2, r2, r4
 8007b86:	eb45 0303 	adc.w	r3, r5, r3
 8007b8a:	f04f 0000 	mov.w	r0, #0
 8007b8e:	f04f 0100 	mov.w	r1, #0
 8007b92:	00d9      	lsls	r1, r3, #3
 8007b94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b98:	00d0      	lsls	r0, r2, #3
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	eb12 0804 	adds.w	r8, r2, r4
 8007ba2:	eb43 0905 	adc.w	r9, r3, r5
 8007ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f04f 0100 	mov.w	r1, #0
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	008b      	lsls	r3, r1, #2
 8007bba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007bbe:	0082      	lsls	r2, r0, #2
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	f7f8 ff92 	bl	8000aec <__aeabi_uldivmod>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4b49      	ldr	r3, [pc, #292]	; (8007cf4 <UART_SetConfig+0x38c>)
 8007bce:	fba3 2302 	umull	r2, r3, r3, r2
 8007bd2:	095b      	lsrs	r3, r3, #5
 8007bd4:	011e      	lsls	r6, r3, #4
 8007bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f04f 0100 	mov.w	r1, #0
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	1894      	adds	r4, r2, r2
 8007be4:	60bc      	str	r4, [r7, #8]
 8007be6:	415b      	adcs	r3, r3
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bee:	1812      	adds	r2, r2, r0
 8007bf0:	eb41 0303 	adc.w	r3, r1, r3
 8007bf4:	f04f 0400 	mov.w	r4, #0
 8007bf8:	f04f 0500 	mov.w	r5, #0
 8007bfc:	00dd      	lsls	r5, r3, #3
 8007bfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c02:	00d4      	lsls	r4, r2, #3
 8007c04:	4622      	mov	r2, r4
 8007c06:	462b      	mov	r3, r5
 8007c08:	1814      	adds	r4, r2, r0
 8007c0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007c0c:	414b      	adcs	r3, r1
 8007c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f04f 0100 	mov.w	r1, #0
 8007c1a:	f04f 0200 	mov.w	r2, #0
 8007c1e:	f04f 0300 	mov.w	r3, #0
 8007c22:	008b      	lsls	r3, r1, #2
 8007c24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c28:	0082      	lsls	r2, r0, #2
 8007c2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007c2e:	f7f8 ff5d 	bl	8000aec <__aeabi_uldivmod>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4b2f      	ldr	r3, [pc, #188]	; (8007cf4 <UART_SetConfig+0x38c>)
 8007c38:	fba3 1302 	umull	r1, r3, r3, r2
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	2164      	movs	r1, #100	; 0x64
 8007c40:	fb01 f303 	mul.w	r3, r1, r3
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	3332      	adds	r3, #50	; 0x32
 8007c4a:	4a2a      	ldr	r2, [pc, #168]	; (8007cf4 <UART_SetConfig+0x38c>)
 8007c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c50:	095b      	lsrs	r3, r3, #5
 8007c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c56:	441e      	add	r6, r3
 8007c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f04f 0100 	mov.w	r1, #0
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	1894      	adds	r4, r2, r2
 8007c66:	603c      	str	r4, [r7, #0]
 8007c68:	415b      	adcs	r3, r3
 8007c6a:	607b      	str	r3, [r7, #4]
 8007c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c70:	1812      	adds	r2, r2, r0
 8007c72:	eb41 0303 	adc.w	r3, r1, r3
 8007c76:	f04f 0400 	mov.w	r4, #0
 8007c7a:	f04f 0500 	mov.w	r5, #0
 8007c7e:	00dd      	lsls	r5, r3, #3
 8007c80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c84:	00d4      	lsls	r4, r2, #3
 8007c86:	4622      	mov	r2, r4
 8007c88:	462b      	mov	r3, r5
 8007c8a:	eb12 0a00 	adds.w	sl, r2, r0
 8007c8e:	eb43 0b01 	adc.w	fp, r3, r1
 8007c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f04f 0100 	mov.w	r1, #0
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	008b      	lsls	r3, r1, #2
 8007ca6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007caa:	0082      	lsls	r2, r0, #2
 8007cac:	4650      	mov	r0, sl
 8007cae:	4659      	mov	r1, fp
 8007cb0:	f7f8 ff1c 	bl	8000aec <__aeabi_uldivmod>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4b0e      	ldr	r3, [pc, #56]	; (8007cf4 <UART_SetConfig+0x38c>)
 8007cba:	fba3 1302 	umull	r1, r3, r3, r2
 8007cbe:	095b      	lsrs	r3, r3, #5
 8007cc0:	2164      	movs	r1, #100	; 0x64
 8007cc2:	fb01 f303 	mul.w	r3, r1, r3
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	3332      	adds	r3, #50	; 0x32
 8007ccc:	4a09      	ldr	r2, [pc, #36]	; (8007cf4 <UART_SetConfig+0x38c>)
 8007cce:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd2:	095b      	lsrs	r3, r3, #5
 8007cd4:	f003 020f 	and.w	r2, r3, #15
 8007cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4432      	add	r2, r6
 8007cde:	609a      	str	r2, [r3, #8]
}
 8007ce0:	bf00      	nop
 8007ce2:	377c      	adds	r7, #124	; 0x7c
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cea:	bf00      	nop
 8007cec:	40011000 	.word	0x40011000
 8007cf0:	40011400 	.word	0x40011400
 8007cf4:	51eb851f 	.word	0x51eb851f

08007cf8 <__errno>:
 8007cf8:	4b01      	ldr	r3, [pc, #4]	; (8007d00 <__errno+0x8>)
 8007cfa:	6818      	ldr	r0, [r3, #0]
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	2000002c 	.word	0x2000002c

08007d04 <__libc_init_array>:
 8007d04:	b570      	push	{r4, r5, r6, lr}
 8007d06:	4d0d      	ldr	r5, [pc, #52]	; (8007d3c <__libc_init_array+0x38>)
 8007d08:	4c0d      	ldr	r4, [pc, #52]	; (8007d40 <__libc_init_array+0x3c>)
 8007d0a:	1b64      	subs	r4, r4, r5
 8007d0c:	10a4      	asrs	r4, r4, #2
 8007d0e:	2600      	movs	r6, #0
 8007d10:	42a6      	cmp	r6, r4
 8007d12:	d109      	bne.n	8007d28 <__libc_init_array+0x24>
 8007d14:	4d0b      	ldr	r5, [pc, #44]	; (8007d44 <__libc_init_array+0x40>)
 8007d16:	4c0c      	ldr	r4, [pc, #48]	; (8007d48 <__libc_init_array+0x44>)
 8007d18:	f000 fc94 	bl	8008644 <_init>
 8007d1c:	1b64      	subs	r4, r4, r5
 8007d1e:	10a4      	asrs	r4, r4, #2
 8007d20:	2600      	movs	r6, #0
 8007d22:	42a6      	cmp	r6, r4
 8007d24:	d105      	bne.n	8007d32 <__libc_init_array+0x2e>
 8007d26:	bd70      	pop	{r4, r5, r6, pc}
 8007d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d2c:	4798      	blx	r3
 8007d2e:	3601      	adds	r6, #1
 8007d30:	e7ee      	b.n	8007d10 <__libc_init_array+0xc>
 8007d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d36:	4798      	blx	r3
 8007d38:	3601      	adds	r6, #1
 8007d3a:	e7f2      	b.n	8007d22 <__libc_init_array+0x1e>
 8007d3c:	08008764 	.word	0x08008764
 8007d40:	08008764 	.word	0x08008764
 8007d44:	08008764 	.word	0x08008764
 8007d48:	08008768 	.word	0x08008768

08007d4c <memcpy>:
 8007d4c:	440a      	add	r2, r1
 8007d4e:	4291      	cmp	r1, r2
 8007d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d54:	d100      	bne.n	8007d58 <memcpy+0xc>
 8007d56:	4770      	bx	lr
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d62:	4291      	cmp	r1, r2
 8007d64:	d1f9      	bne.n	8007d5a <memcpy+0xe>
 8007d66:	bd10      	pop	{r4, pc}

08007d68 <memset>:
 8007d68:	4402      	add	r2, r0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d100      	bne.n	8007d72 <memset+0xa>
 8007d70:	4770      	bx	lr
 8007d72:	f803 1b01 	strb.w	r1, [r3], #1
 8007d76:	e7f9      	b.n	8007d6c <memset+0x4>

08007d78 <sniprintf>:
 8007d78:	b40c      	push	{r2, r3}
 8007d7a:	b530      	push	{r4, r5, lr}
 8007d7c:	4b17      	ldr	r3, [pc, #92]	; (8007ddc <sniprintf+0x64>)
 8007d7e:	1e0c      	subs	r4, r1, #0
 8007d80:	681d      	ldr	r5, [r3, #0]
 8007d82:	b09d      	sub	sp, #116	; 0x74
 8007d84:	da08      	bge.n	8007d98 <sniprintf+0x20>
 8007d86:	238b      	movs	r3, #139	; 0x8b
 8007d88:	602b      	str	r3, [r5, #0]
 8007d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8e:	b01d      	add	sp, #116	; 0x74
 8007d90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d94:	b002      	add	sp, #8
 8007d96:	4770      	bx	lr
 8007d98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007d9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007da0:	bf14      	ite	ne
 8007da2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007da6:	4623      	moveq	r3, r4
 8007da8:	9304      	str	r3, [sp, #16]
 8007daa:	9307      	str	r3, [sp, #28]
 8007dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007db0:	9002      	str	r0, [sp, #8]
 8007db2:	9006      	str	r0, [sp, #24]
 8007db4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007db8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007dba:	ab21      	add	r3, sp, #132	; 0x84
 8007dbc:	a902      	add	r1, sp, #8
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	f000 f89b 	bl	8007efc <_svfiprintf_r>
 8007dc6:	1c43      	adds	r3, r0, #1
 8007dc8:	bfbc      	itt	lt
 8007dca:	238b      	movlt	r3, #139	; 0x8b
 8007dcc:	602b      	strlt	r3, [r5, #0]
 8007dce:	2c00      	cmp	r4, #0
 8007dd0:	d0dd      	beq.n	8007d8e <sniprintf+0x16>
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	701a      	strb	r2, [r3, #0]
 8007dd8:	e7d9      	b.n	8007d8e <sniprintf+0x16>
 8007dda:	bf00      	nop
 8007ddc:	2000002c 	.word	0x2000002c

08007de0 <siprintf>:
 8007de0:	b40e      	push	{r1, r2, r3}
 8007de2:	b500      	push	{lr}
 8007de4:	b09c      	sub	sp, #112	; 0x70
 8007de6:	ab1d      	add	r3, sp, #116	; 0x74
 8007de8:	9002      	str	r0, [sp, #8]
 8007dea:	9006      	str	r0, [sp, #24]
 8007dec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007df0:	4809      	ldr	r0, [pc, #36]	; (8007e18 <siprintf+0x38>)
 8007df2:	9107      	str	r1, [sp, #28]
 8007df4:	9104      	str	r1, [sp, #16]
 8007df6:	4909      	ldr	r1, [pc, #36]	; (8007e1c <siprintf+0x3c>)
 8007df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dfc:	9105      	str	r1, [sp, #20]
 8007dfe:	6800      	ldr	r0, [r0, #0]
 8007e00:	9301      	str	r3, [sp, #4]
 8007e02:	a902      	add	r1, sp, #8
 8007e04:	f000 f87a 	bl	8007efc <_svfiprintf_r>
 8007e08:	9b02      	ldr	r3, [sp, #8]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	b01c      	add	sp, #112	; 0x70
 8007e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e14:	b003      	add	sp, #12
 8007e16:	4770      	bx	lr
 8007e18:	2000002c 	.word	0x2000002c
 8007e1c:	ffff0208 	.word	0xffff0208

08007e20 <strncmp>:
 8007e20:	b510      	push	{r4, lr}
 8007e22:	b16a      	cbz	r2, 8007e40 <strncmp+0x20>
 8007e24:	3901      	subs	r1, #1
 8007e26:	1884      	adds	r4, r0, r2
 8007e28:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007e2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d103      	bne.n	8007e3c <strncmp+0x1c>
 8007e34:	42a0      	cmp	r0, r4
 8007e36:	d001      	beq.n	8007e3c <strncmp+0x1c>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f5      	bne.n	8007e28 <strncmp+0x8>
 8007e3c:	1a98      	subs	r0, r3, r2
 8007e3e:	bd10      	pop	{r4, pc}
 8007e40:	4610      	mov	r0, r2
 8007e42:	e7fc      	b.n	8007e3e <strncmp+0x1e>

08007e44 <__ssputs_r>:
 8007e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	688e      	ldr	r6, [r1, #8]
 8007e4a:	429e      	cmp	r6, r3
 8007e4c:	4682      	mov	sl, r0
 8007e4e:	460c      	mov	r4, r1
 8007e50:	4690      	mov	r8, r2
 8007e52:	461f      	mov	r7, r3
 8007e54:	d838      	bhi.n	8007ec8 <__ssputs_r+0x84>
 8007e56:	898a      	ldrh	r2, [r1, #12]
 8007e58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e5c:	d032      	beq.n	8007ec4 <__ssputs_r+0x80>
 8007e5e:	6825      	ldr	r5, [r4, #0]
 8007e60:	6909      	ldr	r1, [r1, #16]
 8007e62:	eba5 0901 	sub.w	r9, r5, r1
 8007e66:	6965      	ldr	r5, [r4, #20]
 8007e68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e70:	3301      	adds	r3, #1
 8007e72:	444b      	add	r3, r9
 8007e74:	106d      	asrs	r5, r5, #1
 8007e76:	429d      	cmp	r5, r3
 8007e78:	bf38      	it	cc
 8007e7a:	461d      	movcc	r5, r3
 8007e7c:	0553      	lsls	r3, r2, #21
 8007e7e:	d531      	bpl.n	8007ee4 <__ssputs_r+0xa0>
 8007e80:	4629      	mov	r1, r5
 8007e82:	f000 fb39 	bl	80084f8 <_malloc_r>
 8007e86:	4606      	mov	r6, r0
 8007e88:	b950      	cbnz	r0, 8007ea0 <__ssputs_r+0x5c>
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	f8ca 3000 	str.w	r3, [sl]
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e96:	81a3      	strh	r3, [r4, #12]
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea0:	6921      	ldr	r1, [r4, #16]
 8007ea2:	464a      	mov	r2, r9
 8007ea4:	f7ff ff52 	bl	8007d4c <memcpy>
 8007ea8:	89a3      	ldrh	r3, [r4, #12]
 8007eaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	6126      	str	r6, [r4, #16]
 8007eb6:	6165      	str	r5, [r4, #20]
 8007eb8:	444e      	add	r6, r9
 8007eba:	eba5 0509 	sub.w	r5, r5, r9
 8007ebe:	6026      	str	r6, [r4, #0]
 8007ec0:	60a5      	str	r5, [r4, #8]
 8007ec2:	463e      	mov	r6, r7
 8007ec4:	42be      	cmp	r6, r7
 8007ec6:	d900      	bls.n	8007eca <__ssputs_r+0x86>
 8007ec8:	463e      	mov	r6, r7
 8007eca:	4632      	mov	r2, r6
 8007ecc:	6820      	ldr	r0, [r4, #0]
 8007ece:	4641      	mov	r1, r8
 8007ed0:	f000 faa8 	bl	8008424 <memmove>
 8007ed4:	68a3      	ldr	r3, [r4, #8]
 8007ed6:	6822      	ldr	r2, [r4, #0]
 8007ed8:	1b9b      	subs	r3, r3, r6
 8007eda:	4432      	add	r2, r6
 8007edc:	60a3      	str	r3, [r4, #8]
 8007ede:	6022      	str	r2, [r4, #0]
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	e7db      	b.n	8007e9c <__ssputs_r+0x58>
 8007ee4:	462a      	mov	r2, r5
 8007ee6:	f000 fb61 	bl	80085ac <_realloc_r>
 8007eea:	4606      	mov	r6, r0
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d1e1      	bne.n	8007eb4 <__ssputs_r+0x70>
 8007ef0:	6921      	ldr	r1, [r4, #16]
 8007ef2:	4650      	mov	r0, sl
 8007ef4:	f000 fab0 	bl	8008458 <_free_r>
 8007ef8:	e7c7      	b.n	8007e8a <__ssputs_r+0x46>
	...

08007efc <_svfiprintf_r>:
 8007efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f00:	4698      	mov	r8, r3
 8007f02:	898b      	ldrh	r3, [r1, #12]
 8007f04:	061b      	lsls	r3, r3, #24
 8007f06:	b09d      	sub	sp, #116	; 0x74
 8007f08:	4607      	mov	r7, r0
 8007f0a:	460d      	mov	r5, r1
 8007f0c:	4614      	mov	r4, r2
 8007f0e:	d50e      	bpl.n	8007f2e <_svfiprintf_r+0x32>
 8007f10:	690b      	ldr	r3, [r1, #16]
 8007f12:	b963      	cbnz	r3, 8007f2e <_svfiprintf_r+0x32>
 8007f14:	2140      	movs	r1, #64	; 0x40
 8007f16:	f000 faef 	bl	80084f8 <_malloc_r>
 8007f1a:	6028      	str	r0, [r5, #0]
 8007f1c:	6128      	str	r0, [r5, #16]
 8007f1e:	b920      	cbnz	r0, 8007f2a <_svfiprintf_r+0x2e>
 8007f20:	230c      	movs	r3, #12
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295
 8007f28:	e0d1      	b.n	80080ce <_svfiprintf_r+0x1d2>
 8007f2a:	2340      	movs	r3, #64	; 0x40
 8007f2c:	616b      	str	r3, [r5, #20]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	9309      	str	r3, [sp, #36]	; 0x24
 8007f32:	2320      	movs	r3, #32
 8007f34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f38:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f3c:	2330      	movs	r3, #48	; 0x30
 8007f3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080e8 <_svfiprintf_r+0x1ec>
 8007f42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f46:	f04f 0901 	mov.w	r9, #1
 8007f4a:	4623      	mov	r3, r4
 8007f4c:	469a      	mov	sl, r3
 8007f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f52:	b10a      	cbz	r2, 8007f58 <_svfiprintf_r+0x5c>
 8007f54:	2a25      	cmp	r2, #37	; 0x25
 8007f56:	d1f9      	bne.n	8007f4c <_svfiprintf_r+0x50>
 8007f58:	ebba 0b04 	subs.w	fp, sl, r4
 8007f5c:	d00b      	beq.n	8007f76 <_svfiprintf_r+0x7a>
 8007f5e:	465b      	mov	r3, fp
 8007f60:	4622      	mov	r2, r4
 8007f62:	4629      	mov	r1, r5
 8007f64:	4638      	mov	r0, r7
 8007f66:	f7ff ff6d 	bl	8007e44 <__ssputs_r>
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	f000 80aa 	beq.w	80080c4 <_svfiprintf_r+0x1c8>
 8007f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f72:	445a      	add	r2, fp
 8007f74:	9209      	str	r2, [sp, #36]	; 0x24
 8007f76:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 80a2 	beq.w	80080c4 <_svfiprintf_r+0x1c8>
 8007f80:	2300      	movs	r3, #0
 8007f82:	f04f 32ff 	mov.w	r2, #4294967295
 8007f86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f8a:	f10a 0a01 	add.w	sl, sl, #1
 8007f8e:	9304      	str	r3, [sp, #16]
 8007f90:	9307      	str	r3, [sp, #28]
 8007f92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f96:	931a      	str	r3, [sp, #104]	; 0x68
 8007f98:	4654      	mov	r4, sl
 8007f9a:	2205      	movs	r2, #5
 8007f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa0:	4851      	ldr	r0, [pc, #324]	; (80080e8 <_svfiprintf_r+0x1ec>)
 8007fa2:	f7f8 f935 	bl	8000210 <memchr>
 8007fa6:	9a04      	ldr	r2, [sp, #16]
 8007fa8:	b9d8      	cbnz	r0, 8007fe2 <_svfiprintf_r+0xe6>
 8007faa:	06d0      	lsls	r0, r2, #27
 8007fac:	bf44      	itt	mi
 8007fae:	2320      	movmi	r3, #32
 8007fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fb4:	0711      	lsls	r1, r2, #28
 8007fb6:	bf44      	itt	mi
 8007fb8:	232b      	movmi	r3, #43	; 0x2b
 8007fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8007fc4:	d015      	beq.n	8007ff2 <_svfiprintf_r+0xf6>
 8007fc6:	9a07      	ldr	r2, [sp, #28]
 8007fc8:	4654      	mov	r4, sl
 8007fca:	2000      	movs	r0, #0
 8007fcc:	f04f 0c0a 	mov.w	ip, #10
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fd6:	3b30      	subs	r3, #48	; 0x30
 8007fd8:	2b09      	cmp	r3, #9
 8007fda:	d94e      	bls.n	800807a <_svfiprintf_r+0x17e>
 8007fdc:	b1b0      	cbz	r0, 800800c <_svfiprintf_r+0x110>
 8007fde:	9207      	str	r2, [sp, #28]
 8007fe0:	e014      	b.n	800800c <_svfiprintf_r+0x110>
 8007fe2:	eba0 0308 	sub.w	r3, r0, r8
 8007fe6:	fa09 f303 	lsl.w	r3, r9, r3
 8007fea:	4313      	orrs	r3, r2
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	46a2      	mov	sl, r4
 8007ff0:	e7d2      	b.n	8007f98 <_svfiprintf_r+0x9c>
 8007ff2:	9b03      	ldr	r3, [sp, #12]
 8007ff4:	1d19      	adds	r1, r3, #4
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	9103      	str	r1, [sp, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	bfbb      	ittet	lt
 8007ffe:	425b      	neglt	r3, r3
 8008000:	f042 0202 	orrlt.w	r2, r2, #2
 8008004:	9307      	strge	r3, [sp, #28]
 8008006:	9307      	strlt	r3, [sp, #28]
 8008008:	bfb8      	it	lt
 800800a:	9204      	strlt	r2, [sp, #16]
 800800c:	7823      	ldrb	r3, [r4, #0]
 800800e:	2b2e      	cmp	r3, #46	; 0x2e
 8008010:	d10c      	bne.n	800802c <_svfiprintf_r+0x130>
 8008012:	7863      	ldrb	r3, [r4, #1]
 8008014:	2b2a      	cmp	r3, #42	; 0x2a
 8008016:	d135      	bne.n	8008084 <_svfiprintf_r+0x188>
 8008018:	9b03      	ldr	r3, [sp, #12]
 800801a:	1d1a      	adds	r2, r3, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	9203      	str	r2, [sp, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	bfb8      	it	lt
 8008024:	f04f 33ff 	movlt.w	r3, #4294967295
 8008028:	3402      	adds	r4, #2
 800802a:	9305      	str	r3, [sp, #20]
 800802c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080f8 <_svfiprintf_r+0x1fc>
 8008030:	7821      	ldrb	r1, [r4, #0]
 8008032:	2203      	movs	r2, #3
 8008034:	4650      	mov	r0, sl
 8008036:	f7f8 f8eb 	bl	8000210 <memchr>
 800803a:	b140      	cbz	r0, 800804e <_svfiprintf_r+0x152>
 800803c:	2340      	movs	r3, #64	; 0x40
 800803e:	eba0 000a 	sub.w	r0, r0, sl
 8008042:	fa03 f000 	lsl.w	r0, r3, r0
 8008046:	9b04      	ldr	r3, [sp, #16]
 8008048:	4303      	orrs	r3, r0
 800804a:	3401      	adds	r4, #1
 800804c:	9304      	str	r3, [sp, #16]
 800804e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008052:	4826      	ldr	r0, [pc, #152]	; (80080ec <_svfiprintf_r+0x1f0>)
 8008054:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008058:	2206      	movs	r2, #6
 800805a:	f7f8 f8d9 	bl	8000210 <memchr>
 800805e:	2800      	cmp	r0, #0
 8008060:	d038      	beq.n	80080d4 <_svfiprintf_r+0x1d8>
 8008062:	4b23      	ldr	r3, [pc, #140]	; (80080f0 <_svfiprintf_r+0x1f4>)
 8008064:	bb1b      	cbnz	r3, 80080ae <_svfiprintf_r+0x1b2>
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	3307      	adds	r3, #7
 800806a:	f023 0307 	bic.w	r3, r3, #7
 800806e:	3308      	adds	r3, #8
 8008070:	9303      	str	r3, [sp, #12]
 8008072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008074:	4433      	add	r3, r6
 8008076:	9309      	str	r3, [sp, #36]	; 0x24
 8008078:	e767      	b.n	8007f4a <_svfiprintf_r+0x4e>
 800807a:	fb0c 3202 	mla	r2, ip, r2, r3
 800807e:	460c      	mov	r4, r1
 8008080:	2001      	movs	r0, #1
 8008082:	e7a5      	b.n	8007fd0 <_svfiprintf_r+0xd4>
 8008084:	2300      	movs	r3, #0
 8008086:	3401      	adds	r4, #1
 8008088:	9305      	str	r3, [sp, #20]
 800808a:	4619      	mov	r1, r3
 800808c:	f04f 0c0a 	mov.w	ip, #10
 8008090:	4620      	mov	r0, r4
 8008092:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008096:	3a30      	subs	r2, #48	; 0x30
 8008098:	2a09      	cmp	r2, #9
 800809a:	d903      	bls.n	80080a4 <_svfiprintf_r+0x1a8>
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0c5      	beq.n	800802c <_svfiprintf_r+0x130>
 80080a0:	9105      	str	r1, [sp, #20]
 80080a2:	e7c3      	b.n	800802c <_svfiprintf_r+0x130>
 80080a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80080a8:	4604      	mov	r4, r0
 80080aa:	2301      	movs	r3, #1
 80080ac:	e7f0      	b.n	8008090 <_svfiprintf_r+0x194>
 80080ae:	ab03      	add	r3, sp, #12
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	462a      	mov	r2, r5
 80080b4:	4b0f      	ldr	r3, [pc, #60]	; (80080f4 <_svfiprintf_r+0x1f8>)
 80080b6:	a904      	add	r1, sp, #16
 80080b8:	4638      	mov	r0, r7
 80080ba:	f3af 8000 	nop.w
 80080be:	1c42      	adds	r2, r0, #1
 80080c0:	4606      	mov	r6, r0
 80080c2:	d1d6      	bne.n	8008072 <_svfiprintf_r+0x176>
 80080c4:	89ab      	ldrh	r3, [r5, #12]
 80080c6:	065b      	lsls	r3, r3, #25
 80080c8:	f53f af2c 	bmi.w	8007f24 <_svfiprintf_r+0x28>
 80080cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080ce:	b01d      	add	sp, #116	; 0x74
 80080d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d4:	ab03      	add	r3, sp, #12
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	462a      	mov	r2, r5
 80080da:	4b06      	ldr	r3, [pc, #24]	; (80080f4 <_svfiprintf_r+0x1f8>)
 80080dc:	a904      	add	r1, sp, #16
 80080de:	4638      	mov	r0, r7
 80080e0:	f000 f87a 	bl	80081d8 <_printf_i>
 80080e4:	e7eb      	b.n	80080be <_svfiprintf_r+0x1c2>
 80080e6:	bf00      	nop
 80080e8:	08008728 	.word	0x08008728
 80080ec:	08008732 	.word	0x08008732
 80080f0:	00000000 	.word	0x00000000
 80080f4:	08007e45 	.word	0x08007e45
 80080f8:	0800872e 	.word	0x0800872e

080080fc <_printf_common>:
 80080fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008100:	4616      	mov	r6, r2
 8008102:	4699      	mov	r9, r3
 8008104:	688a      	ldr	r2, [r1, #8]
 8008106:	690b      	ldr	r3, [r1, #16]
 8008108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800810c:	4293      	cmp	r3, r2
 800810e:	bfb8      	it	lt
 8008110:	4613      	movlt	r3, r2
 8008112:	6033      	str	r3, [r6, #0]
 8008114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008118:	4607      	mov	r7, r0
 800811a:	460c      	mov	r4, r1
 800811c:	b10a      	cbz	r2, 8008122 <_printf_common+0x26>
 800811e:	3301      	adds	r3, #1
 8008120:	6033      	str	r3, [r6, #0]
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	0699      	lsls	r1, r3, #26
 8008126:	bf42      	ittt	mi
 8008128:	6833      	ldrmi	r3, [r6, #0]
 800812a:	3302      	addmi	r3, #2
 800812c:	6033      	strmi	r3, [r6, #0]
 800812e:	6825      	ldr	r5, [r4, #0]
 8008130:	f015 0506 	ands.w	r5, r5, #6
 8008134:	d106      	bne.n	8008144 <_printf_common+0x48>
 8008136:	f104 0a19 	add.w	sl, r4, #25
 800813a:	68e3      	ldr	r3, [r4, #12]
 800813c:	6832      	ldr	r2, [r6, #0]
 800813e:	1a9b      	subs	r3, r3, r2
 8008140:	42ab      	cmp	r3, r5
 8008142:	dc26      	bgt.n	8008192 <_printf_common+0x96>
 8008144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008148:	1e13      	subs	r3, r2, #0
 800814a:	6822      	ldr	r2, [r4, #0]
 800814c:	bf18      	it	ne
 800814e:	2301      	movne	r3, #1
 8008150:	0692      	lsls	r2, r2, #26
 8008152:	d42b      	bmi.n	80081ac <_printf_common+0xb0>
 8008154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008158:	4649      	mov	r1, r9
 800815a:	4638      	mov	r0, r7
 800815c:	47c0      	blx	r8
 800815e:	3001      	adds	r0, #1
 8008160:	d01e      	beq.n	80081a0 <_printf_common+0xa4>
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	68e5      	ldr	r5, [r4, #12]
 8008166:	6832      	ldr	r2, [r6, #0]
 8008168:	f003 0306 	and.w	r3, r3, #6
 800816c:	2b04      	cmp	r3, #4
 800816e:	bf08      	it	eq
 8008170:	1aad      	subeq	r5, r5, r2
 8008172:	68a3      	ldr	r3, [r4, #8]
 8008174:	6922      	ldr	r2, [r4, #16]
 8008176:	bf0c      	ite	eq
 8008178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800817c:	2500      	movne	r5, #0
 800817e:	4293      	cmp	r3, r2
 8008180:	bfc4      	itt	gt
 8008182:	1a9b      	subgt	r3, r3, r2
 8008184:	18ed      	addgt	r5, r5, r3
 8008186:	2600      	movs	r6, #0
 8008188:	341a      	adds	r4, #26
 800818a:	42b5      	cmp	r5, r6
 800818c:	d11a      	bne.n	80081c4 <_printf_common+0xc8>
 800818e:	2000      	movs	r0, #0
 8008190:	e008      	b.n	80081a4 <_printf_common+0xa8>
 8008192:	2301      	movs	r3, #1
 8008194:	4652      	mov	r2, sl
 8008196:	4649      	mov	r1, r9
 8008198:	4638      	mov	r0, r7
 800819a:	47c0      	blx	r8
 800819c:	3001      	adds	r0, #1
 800819e:	d103      	bne.n	80081a8 <_printf_common+0xac>
 80081a0:	f04f 30ff 	mov.w	r0, #4294967295
 80081a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a8:	3501      	adds	r5, #1
 80081aa:	e7c6      	b.n	800813a <_printf_common+0x3e>
 80081ac:	18e1      	adds	r1, r4, r3
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	2030      	movs	r0, #48	; 0x30
 80081b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081b6:	4422      	add	r2, r4
 80081b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081c0:	3302      	adds	r3, #2
 80081c2:	e7c7      	b.n	8008154 <_printf_common+0x58>
 80081c4:	2301      	movs	r3, #1
 80081c6:	4622      	mov	r2, r4
 80081c8:	4649      	mov	r1, r9
 80081ca:	4638      	mov	r0, r7
 80081cc:	47c0      	blx	r8
 80081ce:	3001      	adds	r0, #1
 80081d0:	d0e6      	beq.n	80081a0 <_printf_common+0xa4>
 80081d2:	3601      	adds	r6, #1
 80081d4:	e7d9      	b.n	800818a <_printf_common+0x8e>
	...

080081d8 <_printf_i>:
 80081d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	460c      	mov	r4, r1
 80081de:	4691      	mov	r9, r2
 80081e0:	7e27      	ldrb	r7, [r4, #24]
 80081e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081e4:	2f78      	cmp	r7, #120	; 0x78
 80081e6:	4680      	mov	r8, r0
 80081e8:	469a      	mov	sl, r3
 80081ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ee:	d807      	bhi.n	8008200 <_printf_i+0x28>
 80081f0:	2f62      	cmp	r7, #98	; 0x62
 80081f2:	d80a      	bhi.n	800820a <_printf_i+0x32>
 80081f4:	2f00      	cmp	r7, #0
 80081f6:	f000 80d8 	beq.w	80083aa <_printf_i+0x1d2>
 80081fa:	2f58      	cmp	r7, #88	; 0x58
 80081fc:	f000 80a3 	beq.w	8008346 <_printf_i+0x16e>
 8008200:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008208:	e03a      	b.n	8008280 <_printf_i+0xa8>
 800820a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800820e:	2b15      	cmp	r3, #21
 8008210:	d8f6      	bhi.n	8008200 <_printf_i+0x28>
 8008212:	a001      	add	r0, pc, #4	; (adr r0, 8008218 <_printf_i+0x40>)
 8008214:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008218:	08008271 	.word	0x08008271
 800821c:	08008285 	.word	0x08008285
 8008220:	08008201 	.word	0x08008201
 8008224:	08008201 	.word	0x08008201
 8008228:	08008201 	.word	0x08008201
 800822c:	08008201 	.word	0x08008201
 8008230:	08008285 	.word	0x08008285
 8008234:	08008201 	.word	0x08008201
 8008238:	08008201 	.word	0x08008201
 800823c:	08008201 	.word	0x08008201
 8008240:	08008201 	.word	0x08008201
 8008244:	08008391 	.word	0x08008391
 8008248:	080082b5 	.word	0x080082b5
 800824c:	08008373 	.word	0x08008373
 8008250:	08008201 	.word	0x08008201
 8008254:	08008201 	.word	0x08008201
 8008258:	080083b3 	.word	0x080083b3
 800825c:	08008201 	.word	0x08008201
 8008260:	080082b5 	.word	0x080082b5
 8008264:	08008201 	.word	0x08008201
 8008268:	08008201 	.word	0x08008201
 800826c:	0800837b 	.word	0x0800837b
 8008270:	680b      	ldr	r3, [r1, #0]
 8008272:	1d1a      	adds	r2, r3, #4
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	600a      	str	r2, [r1, #0]
 8008278:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800827c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008280:	2301      	movs	r3, #1
 8008282:	e0a3      	b.n	80083cc <_printf_i+0x1f4>
 8008284:	6825      	ldr	r5, [r4, #0]
 8008286:	6808      	ldr	r0, [r1, #0]
 8008288:	062e      	lsls	r6, r5, #24
 800828a:	f100 0304 	add.w	r3, r0, #4
 800828e:	d50a      	bpl.n	80082a6 <_printf_i+0xce>
 8008290:	6805      	ldr	r5, [r0, #0]
 8008292:	600b      	str	r3, [r1, #0]
 8008294:	2d00      	cmp	r5, #0
 8008296:	da03      	bge.n	80082a0 <_printf_i+0xc8>
 8008298:	232d      	movs	r3, #45	; 0x2d
 800829a:	426d      	negs	r5, r5
 800829c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a0:	485e      	ldr	r0, [pc, #376]	; (800841c <_printf_i+0x244>)
 80082a2:	230a      	movs	r3, #10
 80082a4:	e019      	b.n	80082da <_printf_i+0x102>
 80082a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80082aa:	6805      	ldr	r5, [r0, #0]
 80082ac:	600b      	str	r3, [r1, #0]
 80082ae:	bf18      	it	ne
 80082b0:	b22d      	sxthne	r5, r5
 80082b2:	e7ef      	b.n	8008294 <_printf_i+0xbc>
 80082b4:	680b      	ldr	r3, [r1, #0]
 80082b6:	6825      	ldr	r5, [r4, #0]
 80082b8:	1d18      	adds	r0, r3, #4
 80082ba:	6008      	str	r0, [r1, #0]
 80082bc:	0628      	lsls	r0, r5, #24
 80082be:	d501      	bpl.n	80082c4 <_printf_i+0xec>
 80082c0:	681d      	ldr	r5, [r3, #0]
 80082c2:	e002      	b.n	80082ca <_printf_i+0xf2>
 80082c4:	0669      	lsls	r1, r5, #25
 80082c6:	d5fb      	bpl.n	80082c0 <_printf_i+0xe8>
 80082c8:	881d      	ldrh	r5, [r3, #0]
 80082ca:	4854      	ldr	r0, [pc, #336]	; (800841c <_printf_i+0x244>)
 80082cc:	2f6f      	cmp	r7, #111	; 0x6f
 80082ce:	bf0c      	ite	eq
 80082d0:	2308      	moveq	r3, #8
 80082d2:	230a      	movne	r3, #10
 80082d4:	2100      	movs	r1, #0
 80082d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082da:	6866      	ldr	r6, [r4, #4]
 80082dc:	60a6      	str	r6, [r4, #8]
 80082de:	2e00      	cmp	r6, #0
 80082e0:	bfa2      	ittt	ge
 80082e2:	6821      	ldrge	r1, [r4, #0]
 80082e4:	f021 0104 	bicge.w	r1, r1, #4
 80082e8:	6021      	strge	r1, [r4, #0]
 80082ea:	b90d      	cbnz	r5, 80082f0 <_printf_i+0x118>
 80082ec:	2e00      	cmp	r6, #0
 80082ee:	d04d      	beq.n	800838c <_printf_i+0x1b4>
 80082f0:	4616      	mov	r6, r2
 80082f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80082f6:	fb03 5711 	mls	r7, r3, r1, r5
 80082fa:	5dc7      	ldrb	r7, [r0, r7]
 80082fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008300:	462f      	mov	r7, r5
 8008302:	42bb      	cmp	r3, r7
 8008304:	460d      	mov	r5, r1
 8008306:	d9f4      	bls.n	80082f2 <_printf_i+0x11a>
 8008308:	2b08      	cmp	r3, #8
 800830a:	d10b      	bne.n	8008324 <_printf_i+0x14c>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	07df      	lsls	r7, r3, #31
 8008310:	d508      	bpl.n	8008324 <_printf_i+0x14c>
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	6861      	ldr	r1, [r4, #4]
 8008316:	4299      	cmp	r1, r3
 8008318:	bfde      	ittt	le
 800831a:	2330      	movle	r3, #48	; 0x30
 800831c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008320:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008324:	1b92      	subs	r2, r2, r6
 8008326:	6122      	str	r2, [r4, #16]
 8008328:	f8cd a000 	str.w	sl, [sp]
 800832c:	464b      	mov	r3, r9
 800832e:	aa03      	add	r2, sp, #12
 8008330:	4621      	mov	r1, r4
 8008332:	4640      	mov	r0, r8
 8008334:	f7ff fee2 	bl	80080fc <_printf_common>
 8008338:	3001      	adds	r0, #1
 800833a:	d14c      	bne.n	80083d6 <_printf_i+0x1fe>
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	b004      	add	sp, #16
 8008342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008346:	4835      	ldr	r0, [pc, #212]	; (800841c <_printf_i+0x244>)
 8008348:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	680e      	ldr	r6, [r1, #0]
 8008350:	061f      	lsls	r7, r3, #24
 8008352:	f856 5b04 	ldr.w	r5, [r6], #4
 8008356:	600e      	str	r6, [r1, #0]
 8008358:	d514      	bpl.n	8008384 <_printf_i+0x1ac>
 800835a:	07d9      	lsls	r1, r3, #31
 800835c:	bf44      	itt	mi
 800835e:	f043 0320 	orrmi.w	r3, r3, #32
 8008362:	6023      	strmi	r3, [r4, #0]
 8008364:	b91d      	cbnz	r5, 800836e <_printf_i+0x196>
 8008366:	6823      	ldr	r3, [r4, #0]
 8008368:	f023 0320 	bic.w	r3, r3, #32
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	2310      	movs	r3, #16
 8008370:	e7b0      	b.n	80082d4 <_printf_i+0xfc>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	f043 0320 	orr.w	r3, r3, #32
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	2378      	movs	r3, #120	; 0x78
 800837c:	4828      	ldr	r0, [pc, #160]	; (8008420 <_printf_i+0x248>)
 800837e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008382:	e7e3      	b.n	800834c <_printf_i+0x174>
 8008384:	065e      	lsls	r6, r3, #25
 8008386:	bf48      	it	mi
 8008388:	b2ad      	uxthmi	r5, r5
 800838a:	e7e6      	b.n	800835a <_printf_i+0x182>
 800838c:	4616      	mov	r6, r2
 800838e:	e7bb      	b.n	8008308 <_printf_i+0x130>
 8008390:	680b      	ldr	r3, [r1, #0]
 8008392:	6826      	ldr	r6, [r4, #0]
 8008394:	6960      	ldr	r0, [r4, #20]
 8008396:	1d1d      	adds	r5, r3, #4
 8008398:	600d      	str	r5, [r1, #0]
 800839a:	0635      	lsls	r5, r6, #24
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	d501      	bpl.n	80083a4 <_printf_i+0x1cc>
 80083a0:	6018      	str	r0, [r3, #0]
 80083a2:	e002      	b.n	80083aa <_printf_i+0x1d2>
 80083a4:	0671      	lsls	r1, r6, #25
 80083a6:	d5fb      	bpl.n	80083a0 <_printf_i+0x1c8>
 80083a8:	8018      	strh	r0, [r3, #0]
 80083aa:	2300      	movs	r3, #0
 80083ac:	6123      	str	r3, [r4, #16]
 80083ae:	4616      	mov	r6, r2
 80083b0:	e7ba      	b.n	8008328 <_printf_i+0x150>
 80083b2:	680b      	ldr	r3, [r1, #0]
 80083b4:	1d1a      	adds	r2, r3, #4
 80083b6:	600a      	str	r2, [r1, #0]
 80083b8:	681e      	ldr	r6, [r3, #0]
 80083ba:	6862      	ldr	r2, [r4, #4]
 80083bc:	2100      	movs	r1, #0
 80083be:	4630      	mov	r0, r6
 80083c0:	f7f7 ff26 	bl	8000210 <memchr>
 80083c4:	b108      	cbz	r0, 80083ca <_printf_i+0x1f2>
 80083c6:	1b80      	subs	r0, r0, r6
 80083c8:	6060      	str	r0, [r4, #4]
 80083ca:	6863      	ldr	r3, [r4, #4]
 80083cc:	6123      	str	r3, [r4, #16]
 80083ce:	2300      	movs	r3, #0
 80083d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083d4:	e7a8      	b.n	8008328 <_printf_i+0x150>
 80083d6:	6923      	ldr	r3, [r4, #16]
 80083d8:	4632      	mov	r2, r6
 80083da:	4649      	mov	r1, r9
 80083dc:	4640      	mov	r0, r8
 80083de:	47d0      	blx	sl
 80083e0:	3001      	adds	r0, #1
 80083e2:	d0ab      	beq.n	800833c <_printf_i+0x164>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	079b      	lsls	r3, r3, #30
 80083e8:	d413      	bmi.n	8008412 <_printf_i+0x23a>
 80083ea:	68e0      	ldr	r0, [r4, #12]
 80083ec:	9b03      	ldr	r3, [sp, #12]
 80083ee:	4298      	cmp	r0, r3
 80083f0:	bfb8      	it	lt
 80083f2:	4618      	movlt	r0, r3
 80083f4:	e7a4      	b.n	8008340 <_printf_i+0x168>
 80083f6:	2301      	movs	r3, #1
 80083f8:	4632      	mov	r2, r6
 80083fa:	4649      	mov	r1, r9
 80083fc:	4640      	mov	r0, r8
 80083fe:	47d0      	blx	sl
 8008400:	3001      	adds	r0, #1
 8008402:	d09b      	beq.n	800833c <_printf_i+0x164>
 8008404:	3501      	adds	r5, #1
 8008406:	68e3      	ldr	r3, [r4, #12]
 8008408:	9903      	ldr	r1, [sp, #12]
 800840a:	1a5b      	subs	r3, r3, r1
 800840c:	42ab      	cmp	r3, r5
 800840e:	dcf2      	bgt.n	80083f6 <_printf_i+0x21e>
 8008410:	e7eb      	b.n	80083ea <_printf_i+0x212>
 8008412:	2500      	movs	r5, #0
 8008414:	f104 0619 	add.w	r6, r4, #25
 8008418:	e7f5      	b.n	8008406 <_printf_i+0x22e>
 800841a:	bf00      	nop
 800841c:	08008739 	.word	0x08008739
 8008420:	0800874a 	.word	0x0800874a

08008424 <memmove>:
 8008424:	4288      	cmp	r0, r1
 8008426:	b510      	push	{r4, lr}
 8008428:	eb01 0402 	add.w	r4, r1, r2
 800842c:	d902      	bls.n	8008434 <memmove+0x10>
 800842e:	4284      	cmp	r4, r0
 8008430:	4623      	mov	r3, r4
 8008432:	d807      	bhi.n	8008444 <memmove+0x20>
 8008434:	1e43      	subs	r3, r0, #1
 8008436:	42a1      	cmp	r1, r4
 8008438:	d008      	beq.n	800844c <memmove+0x28>
 800843a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800843e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008442:	e7f8      	b.n	8008436 <memmove+0x12>
 8008444:	4402      	add	r2, r0
 8008446:	4601      	mov	r1, r0
 8008448:	428a      	cmp	r2, r1
 800844a:	d100      	bne.n	800844e <memmove+0x2a>
 800844c:	bd10      	pop	{r4, pc}
 800844e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008456:	e7f7      	b.n	8008448 <memmove+0x24>

08008458 <_free_r>:
 8008458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800845a:	2900      	cmp	r1, #0
 800845c:	d048      	beq.n	80084f0 <_free_r+0x98>
 800845e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008462:	9001      	str	r0, [sp, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f1a1 0404 	sub.w	r4, r1, #4
 800846a:	bfb8      	it	lt
 800846c:	18e4      	addlt	r4, r4, r3
 800846e:	f000 f8d3 	bl	8008618 <__malloc_lock>
 8008472:	4a20      	ldr	r2, [pc, #128]	; (80084f4 <_free_r+0x9c>)
 8008474:	9801      	ldr	r0, [sp, #4]
 8008476:	6813      	ldr	r3, [r2, #0]
 8008478:	4615      	mov	r5, r2
 800847a:	b933      	cbnz	r3, 800848a <_free_r+0x32>
 800847c:	6063      	str	r3, [r4, #4]
 800847e:	6014      	str	r4, [r2, #0]
 8008480:	b003      	add	sp, #12
 8008482:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008486:	f000 b8cd 	b.w	8008624 <__malloc_unlock>
 800848a:	42a3      	cmp	r3, r4
 800848c:	d90b      	bls.n	80084a6 <_free_r+0x4e>
 800848e:	6821      	ldr	r1, [r4, #0]
 8008490:	1862      	adds	r2, r4, r1
 8008492:	4293      	cmp	r3, r2
 8008494:	bf04      	itt	eq
 8008496:	681a      	ldreq	r2, [r3, #0]
 8008498:	685b      	ldreq	r3, [r3, #4]
 800849a:	6063      	str	r3, [r4, #4]
 800849c:	bf04      	itt	eq
 800849e:	1852      	addeq	r2, r2, r1
 80084a0:	6022      	streq	r2, [r4, #0]
 80084a2:	602c      	str	r4, [r5, #0]
 80084a4:	e7ec      	b.n	8008480 <_free_r+0x28>
 80084a6:	461a      	mov	r2, r3
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	b10b      	cbz	r3, 80084b0 <_free_r+0x58>
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	d9fa      	bls.n	80084a6 <_free_r+0x4e>
 80084b0:	6811      	ldr	r1, [r2, #0]
 80084b2:	1855      	adds	r5, r2, r1
 80084b4:	42a5      	cmp	r5, r4
 80084b6:	d10b      	bne.n	80084d0 <_free_r+0x78>
 80084b8:	6824      	ldr	r4, [r4, #0]
 80084ba:	4421      	add	r1, r4
 80084bc:	1854      	adds	r4, r2, r1
 80084be:	42a3      	cmp	r3, r4
 80084c0:	6011      	str	r1, [r2, #0]
 80084c2:	d1dd      	bne.n	8008480 <_free_r+0x28>
 80084c4:	681c      	ldr	r4, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	6053      	str	r3, [r2, #4]
 80084ca:	4421      	add	r1, r4
 80084cc:	6011      	str	r1, [r2, #0]
 80084ce:	e7d7      	b.n	8008480 <_free_r+0x28>
 80084d0:	d902      	bls.n	80084d8 <_free_r+0x80>
 80084d2:	230c      	movs	r3, #12
 80084d4:	6003      	str	r3, [r0, #0]
 80084d6:	e7d3      	b.n	8008480 <_free_r+0x28>
 80084d8:	6825      	ldr	r5, [r4, #0]
 80084da:	1961      	adds	r1, r4, r5
 80084dc:	428b      	cmp	r3, r1
 80084de:	bf04      	itt	eq
 80084e0:	6819      	ldreq	r1, [r3, #0]
 80084e2:	685b      	ldreq	r3, [r3, #4]
 80084e4:	6063      	str	r3, [r4, #4]
 80084e6:	bf04      	itt	eq
 80084e8:	1949      	addeq	r1, r1, r5
 80084ea:	6021      	streq	r1, [r4, #0]
 80084ec:	6054      	str	r4, [r2, #4]
 80084ee:	e7c7      	b.n	8008480 <_free_r+0x28>
 80084f0:	b003      	add	sp, #12
 80084f2:	bd30      	pop	{r4, r5, pc}
 80084f4:	20000168 	.word	0x20000168

080084f8 <_malloc_r>:
 80084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fa:	1ccd      	adds	r5, r1, #3
 80084fc:	f025 0503 	bic.w	r5, r5, #3
 8008500:	3508      	adds	r5, #8
 8008502:	2d0c      	cmp	r5, #12
 8008504:	bf38      	it	cc
 8008506:	250c      	movcc	r5, #12
 8008508:	2d00      	cmp	r5, #0
 800850a:	4606      	mov	r6, r0
 800850c:	db01      	blt.n	8008512 <_malloc_r+0x1a>
 800850e:	42a9      	cmp	r1, r5
 8008510:	d903      	bls.n	800851a <_malloc_r+0x22>
 8008512:	230c      	movs	r3, #12
 8008514:	6033      	str	r3, [r6, #0]
 8008516:	2000      	movs	r0, #0
 8008518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800851a:	f000 f87d 	bl	8008618 <__malloc_lock>
 800851e:	4921      	ldr	r1, [pc, #132]	; (80085a4 <_malloc_r+0xac>)
 8008520:	680a      	ldr	r2, [r1, #0]
 8008522:	4614      	mov	r4, r2
 8008524:	b99c      	cbnz	r4, 800854e <_malloc_r+0x56>
 8008526:	4f20      	ldr	r7, [pc, #128]	; (80085a8 <_malloc_r+0xb0>)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	b923      	cbnz	r3, 8008536 <_malloc_r+0x3e>
 800852c:	4621      	mov	r1, r4
 800852e:	4630      	mov	r0, r6
 8008530:	f000 f862 	bl	80085f8 <_sbrk_r>
 8008534:	6038      	str	r0, [r7, #0]
 8008536:	4629      	mov	r1, r5
 8008538:	4630      	mov	r0, r6
 800853a:	f000 f85d 	bl	80085f8 <_sbrk_r>
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	d123      	bne.n	800858a <_malloc_r+0x92>
 8008542:	230c      	movs	r3, #12
 8008544:	6033      	str	r3, [r6, #0]
 8008546:	4630      	mov	r0, r6
 8008548:	f000 f86c 	bl	8008624 <__malloc_unlock>
 800854c:	e7e3      	b.n	8008516 <_malloc_r+0x1e>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	1b5b      	subs	r3, r3, r5
 8008552:	d417      	bmi.n	8008584 <_malloc_r+0x8c>
 8008554:	2b0b      	cmp	r3, #11
 8008556:	d903      	bls.n	8008560 <_malloc_r+0x68>
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	441c      	add	r4, r3
 800855c:	6025      	str	r5, [r4, #0]
 800855e:	e004      	b.n	800856a <_malloc_r+0x72>
 8008560:	6863      	ldr	r3, [r4, #4]
 8008562:	42a2      	cmp	r2, r4
 8008564:	bf0c      	ite	eq
 8008566:	600b      	streq	r3, [r1, #0]
 8008568:	6053      	strne	r3, [r2, #4]
 800856a:	4630      	mov	r0, r6
 800856c:	f000 f85a 	bl	8008624 <__malloc_unlock>
 8008570:	f104 000b 	add.w	r0, r4, #11
 8008574:	1d23      	adds	r3, r4, #4
 8008576:	f020 0007 	bic.w	r0, r0, #7
 800857a:	1ac2      	subs	r2, r0, r3
 800857c:	d0cc      	beq.n	8008518 <_malloc_r+0x20>
 800857e:	1a1b      	subs	r3, r3, r0
 8008580:	50a3      	str	r3, [r4, r2]
 8008582:	e7c9      	b.n	8008518 <_malloc_r+0x20>
 8008584:	4622      	mov	r2, r4
 8008586:	6864      	ldr	r4, [r4, #4]
 8008588:	e7cc      	b.n	8008524 <_malloc_r+0x2c>
 800858a:	1cc4      	adds	r4, r0, #3
 800858c:	f024 0403 	bic.w	r4, r4, #3
 8008590:	42a0      	cmp	r0, r4
 8008592:	d0e3      	beq.n	800855c <_malloc_r+0x64>
 8008594:	1a21      	subs	r1, r4, r0
 8008596:	4630      	mov	r0, r6
 8008598:	f000 f82e 	bl	80085f8 <_sbrk_r>
 800859c:	3001      	adds	r0, #1
 800859e:	d1dd      	bne.n	800855c <_malloc_r+0x64>
 80085a0:	e7cf      	b.n	8008542 <_malloc_r+0x4a>
 80085a2:	bf00      	nop
 80085a4:	20000168 	.word	0x20000168
 80085a8:	2000016c 	.word	0x2000016c

080085ac <_realloc_r>:
 80085ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ae:	4607      	mov	r7, r0
 80085b0:	4614      	mov	r4, r2
 80085b2:	460e      	mov	r6, r1
 80085b4:	b921      	cbnz	r1, 80085c0 <_realloc_r+0x14>
 80085b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80085ba:	4611      	mov	r1, r2
 80085bc:	f7ff bf9c 	b.w	80084f8 <_malloc_r>
 80085c0:	b922      	cbnz	r2, 80085cc <_realloc_r+0x20>
 80085c2:	f7ff ff49 	bl	8008458 <_free_r>
 80085c6:	4625      	mov	r5, r4
 80085c8:	4628      	mov	r0, r5
 80085ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085cc:	f000 f830 	bl	8008630 <_malloc_usable_size_r>
 80085d0:	42a0      	cmp	r0, r4
 80085d2:	d20f      	bcs.n	80085f4 <_realloc_r+0x48>
 80085d4:	4621      	mov	r1, r4
 80085d6:	4638      	mov	r0, r7
 80085d8:	f7ff ff8e 	bl	80084f8 <_malloc_r>
 80085dc:	4605      	mov	r5, r0
 80085de:	2800      	cmp	r0, #0
 80085e0:	d0f2      	beq.n	80085c8 <_realloc_r+0x1c>
 80085e2:	4631      	mov	r1, r6
 80085e4:	4622      	mov	r2, r4
 80085e6:	f7ff fbb1 	bl	8007d4c <memcpy>
 80085ea:	4631      	mov	r1, r6
 80085ec:	4638      	mov	r0, r7
 80085ee:	f7ff ff33 	bl	8008458 <_free_r>
 80085f2:	e7e9      	b.n	80085c8 <_realloc_r+0x1c>
 80085f4:	4635      	mov	r5, r6
 80085f6:	e7e7      	b.n	80085c8 <_realloc_r+0x1c>

080085f8 <_sbrk_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4d06      	ldr	r5, [pc, #24]	; (8008614 <_sbrk_r+0x1c>)
 80085fc:	2300      	movs	r3, #0
 80085fe:	4604      	mov	r4, r0
 8008600:	4608      	mov	r0, r1
 8008602:	602b      	str	r3, [r5, #0]
 8008604:	f7fb f908 	bl	8003818 <_sbrk>
 8008608:	1c43      	adds	r3, r0, #1
 800860a:	d102      	bne.n	8008612 <_sbrk_r+0x1a>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	b103      	cbz	r3, 8008612 <_sbrk_r+0x1a>
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	bd38      	pop	{r3, r4, r5, pc}
 8008614:	200006b0 	.word	0x200006b0

08008618 <__malloc_lock>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__malloc_lock+0x8>)
 800861a:	f000 b811 	b.w	8008640 <__retarget_lock_acquire_recursive>
 800861e:	bf00      	nop
 8008620:	200006b8 	.word	0x200006b8

08008624 <__malloc_unlock>:
 8008624:	4801      	ldr	r0, [pc, #4]	; (800862c <__malloc_unlock+0x8>)
 8008626:	f000 b80c 	b.w	8008642 <__retarget_lock_release_recursive>
 800862a:	bf00      	nop
 800862c:	200006b8 	.word	0x200006b8

08008630 <_malloc_usable_size_r>:
 8008630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008634:	1f18      	subs	r0, r3, #4
 8008636:	2b00      	cmp	r3, #0
 8008638:	bfbc      	itt	lt
 800863a:	580b      	ldrlt	r3, [r1, r0]
 800863c:	18c0      	addlt	r0, r0, r3
 800863e:	4770      	bx	lr

08008640 <__retarget_lock_acquire_recursive>:
 8008640:	4770      	bx	lr

08008642 <__retarget_lock_release_recursive>:
 8008642:	4770      	bx	lr

08008644 <_init>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	bf00      	nop
 8008648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864a:	bc08      	pop	{r3}
 800864c:	469e      	mov	lr, r3
 800864e:	4770      	bx	lr

08008650 <_fini>:
 8008650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008652:	bf00      	nop
 8008654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008656:	bc08      	pop	{r3}
 8008658:	469e      	mov	lr, r3
 800865a:	4770      	bx	lr
