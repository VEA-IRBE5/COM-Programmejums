
IRBE_5_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08006898  08006898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800694c  0800694c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006954  08006954  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006958  08006958  00016958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800695c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  20000090  080069ec  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  080069ec  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c45  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b11  00000000  00000000  00036d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00039818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  0003a950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181ba  00000000  00000000  0003b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001311c  00000000  00000000  00053b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009127e  00000000  00000000  00066c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f7efc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca4  00000000  00000000  000f7f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006880 	.word	0x08006880

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08006880 	.word	0x08006880

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

void SX1278_hw_init(SX1278_hw_t * hw) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80005b0:	2101      	movs	r1, #1
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 f80d 	bl	80005d2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6858      	ldr	r0, [r3, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	2201      	movs	r2, #1
 80005c4:	4619      	mov	r1, r3
 80005c6:	f003 f879 	bl	80036bc <HAL_GPIO_WritePin>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <SX1278_hw_SetNSS>:

void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6958      	ldr	r0, [r3, #20]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	b299      	uxth	r1, r3
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	bf0c      	ite	eq
 80005ec:	2301      	moveq	r3, #1
 80005ee:	2300      	movne	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	f003 f862 	bl	80036bc <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <SX1278_hw_Reset>:

void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000608:	2101      	movs	r1, #1
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ffe1 	bl	80005d2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6858      	ldr	r0, [r3, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	b29b      	uxth	r3, r3
 800061a:	2200      	movs	r2, #0
 800061c:	4619      	mov	r1, r3
 800061e:	f003 f84d 	bl	80036bc <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f000 f856 	bl	80006d4 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6858      	ldr	r0, [r3, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	b29b      	uxth	r3, r3
 8000632:	2201      	movs	r2, #1
 8000634:	4619      	mov	r1, r3
 8000636:	f003 f841 	bl	80036bc <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f000 f84a 	bl	80006d4 <SX1278_hw_DelayMs>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <SX1278_hw_SPICommand>:

void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000654:	2100      	movs	r1, #0
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ffbb 	bl	80005d2 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6998      	ldr	r0, [r3, #24]
 8000660:	1cf9      	adds	r1, r7, #3
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	2201      	movs	r2, #1
 8000668:	f003 fd57 	bl	800411a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800066c:	bf00      	nop
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4618      	mov	r0, r3
 8000674:	f004 f82f 	bl	80046d6 <HAL_SPI_GetState>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d1f7      	bne.n	800066e <SX1278_hw_SPICommand+0x26>
		;
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <SX1278_hw_SPIReadByte>:

uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000694:	2300      	movs	r3, #0
 8000696:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000698:	2100      	movs	r1, #0
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ff99 	bl	80005d2 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6998      	ldr	r0, [r3, #24]
 80006a4:	f107 020e 	add.w	r2, r7, #14
 80006a8:	f107 010f 	add.w	r1, r7, #15
 80006ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2301      	movs	r3, #1
 80006b4:	f003 fe6d 	bl	8004392 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80006b8:	bf00      	nop
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 f809 	bl	80046d6 <HAL_SPI_GetState>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d1f7      	bne.n	80006ba <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80006ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <SX1278_hw_DelayMs>:

void SX1278_hw_DelayMs(uint32_t msec) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f002 f983 	bl	80029e8 <HAL_Delay>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b084      	sub	sp, #16
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	460b      	mov	r3, r1
 80006f4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	78fa      	ldrb	r2, [r7, #3]
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffa2 	bl	8000648 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffbd 	bl	8000688 <SX1278_hw_SPIReadByte>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2101      	movs	r1, #1
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff5a 	bl	80005d2 <SX1278_hw_SetNSS>
	return tmp;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
 8000734:	4613      	mov	r3, r2
 8000736:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff47 	bl	80005d2 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	4610      	mov	r0, r2
 8000754:	f7ff ff78 	bl	8000648 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	78ba      	ldrb	r2, [r7, #2]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff71 	bl	8000648 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2101      	movs	r1, #1
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff30 	bl	80005d2 <SX1278_hw_SetNSS>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	461a      	mov	r2, r3
 8000786:	460b      	mov	r3, r1
 8000788:	72fb      	strb	r3, [r7, #11]
 800078a:	4613      	mov	r3, r2
 800078c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800078e:	7abb      	ldrb	r3, [r7, #10]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d929      	bls.n	80007e8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff19 	bl	80005d2 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	7afb      	ldrb	r3, [r7, #11]
 80007a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	4610      	mov	r0, r2
 80007b0:	f7ff ff4a 	bl	8000648 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	75fb      	strb	r3, [r7, #23]
 80007b8:	e00b      	b.n	80007d2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	7dfb      	ldrb	r3, [r7, #23]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4619      	mov	r1, r3
 80007c8:	f7ff ff3e 	bl	8000648 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	3301      	adds	r3, #1
 80007d0:	75fb      	strb	r3, [r7, #23]
 80007d2:	7dfa      	ldrb	r2, [r7, #23]
 80007d4:	7abb      	ldrb	r3, [r7, #10]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d3ef      	bcc.n	80007ba <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fef6 	bl	80005d2 <SX1278_hw_SetNSS>
 80007e6:	e000      	b.n	80007ea <SX1278_SPIBurstWrite+0x70>
		return;
 80007e8:	bf00      	nop
	}
}
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7919      	ldrb	r1, [r3, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	795a      	ldrb	r2, [r3, #5]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7998      	ldrb	r0, [r3, #6]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	79db      	ldrb	r3, [r3, #7]
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	4603      	mov	r3, r0
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f805 	bl	800081c <SX1278_config>
			module->LoRa_BW);
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
	uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	4608      	mov	r0, r1
 8000826:	4611      	mov	r1, r2
 8000828:	461a      	mov	r2, r3
 800082a:	4603      	mov	r3, r0
 800082c:	70fb      	strb	r3, [r7, #3]
 800082e:	460b      	mov	r3, r1
 8000830:	70bb      	strb	r3, [r7, #2]
 8000832:	4613      	mov	r3, r2
 8000834:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f000 f972 	bl	8000b20 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800083c:	200f      	movs	r0, #15
 800083e:	f7ff ff49 	bl	80006d4 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 f97c 	bl	8000b40 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
	(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8000848:	78fa      	ldrb	r2, [r7, #3]
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	4a41      	ldr	r2, [pc, #260]	; (8000958 <SX1278_config+0x13c>)
 8000852:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8000854:	2303      	movs	r3, #3
 8000856:	2106      	movs	r1, #6
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff8e 	bl	800077a <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, 0b10000000); //Setting output power parameter
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	2109      	movs	r1, #9
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff60 	bl	8000728 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000868:	220b      	movs	r2, #11
 800086a:	210b      	movs	r1, #11
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff5b 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000872:	2223      	movs	r2, #35	; 0x23
 8000874:	210c      	movs	r1, #12
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ff56 	bl	8000728 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 800087c:	787b      	ldrb	r3, [r7, #1]
 800087e:	4a37      	ldr	r2, [pc, #220]	; (800095c <SX1278_config+0x140>)
 8000880:	5cd3      	ldrb	r3, [r2, r3]
 8000882:	2b06      	cmp	r3, #6
 8000884:	d131      	bne.n	80008ea <SX1278_config+0xce>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000886:	7e3b      	ldrb	r3, [r7, #24]
 8000888:	4a35      	ldr	r2, [pc, #212]	; (8000960 <SX1278_config+0x144>)
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000890:	3303      	adds	r3, #3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	211d      	movs	r1, #29
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff45 	bl	8000728 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 800089e:	787b      	ldrb	r3, [r7, #1]
 80008a0:	4a2e      	ldr	r2, [pc, #184]	; (800095c <SX1278_config+0x140>)
 80008a2:	5cd3      	ldrb	r3, [r2, r3]
 80008a4:	011b      	lsls	r3, r3, #4
 80008a6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80008a8:	3307      	adds	r3, #7
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	211e      	movs	r1, #30
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff39 	bl	8000728 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 80008b6:	2131      	movs	r1, #49	; 0x31
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ff16 	bl	80006ea <SX1278_SPIRead>
 80008be:	4603      	mov	r3, r0
 80008c0:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	f023 0307 	bic.w	r3, r3, #7
 80008c8:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	f043 0305 	orr.w	r3, r3, #5
 80008d0:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	461a      	mov	r2, r3
 80008d6:	2131      	movs	r1, #49	; 0x31
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ff25 	bl	8000728 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80008de:	220c      	movs	r2, #12
 80008e0:	2137      	movs	r1, #55	; 0x37
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ff20 	bl	8000728 <SX1278_SPIWrite>
 80008e8:	e017      	b.n	800091a <SX1278_config+0xfe>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80008ea:	7e3b      	ldrb	r3, [r7, #24]
 80008ec:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <SX1278_config+0x144>)
 80008ee:	5cd3      	ldrb	r3, [r2, r3]
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80008f4:	3302      	adds	r3, #2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	461a      	mov	r2, r3
 80008fa:	211d      	movs	r1, #29
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff13 	bl	8000728 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <SX1278_config+0x140>)
 8000906:	5cd3      	ldrb	r3, [r2, r3]
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800090c:	3307      	adds	r3, #7
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	211e      	movs	r1, #30
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff07 	bl	8000728 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800091a:	22ff      	movs	r2, #255	; 0xff
 800091c:	211f      	movs	r1, #31
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ff02 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000924:	2200      	movs	r2, #0
 8000926:	2120      	movs	r1, #32
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fefd 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 800092e:	220c      	movs	r2, #12
 8000930:	2121      	movs	r1, #33	; 0x21
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fef8 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000938:	2201      	movs	r2, #1
 800093a:	2141      	movs	r1, #65	; 0x41
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff fef3 	bl	8000728 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 f8d8 	bl	8000b00 <SX1278_standby>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	080068e0 	.word	0x080068e0
 800095c:	080068e4 	.word	0x080068e4
 8000960:	080068ec 	.word	0x080068ec

08000964 <SX1278_RTTY_Config>:

void SX1278_RTTY_Config(SX1278_t * module){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

	SX1278_FSK_Config(module); // set base parameters
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 f891 	bl	8000a94 <SX1278_FSK_Config>
	SX1278_SPIWrite(module, 0x09, 0b11110000);//0x87);	//Normal and RX
 8000972:	22f0      	movs	r2, #240	; 0xf0
 8000974:	2109      	movs	r1, #9
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fed6 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);//0x87);	//Normal and RX
 800097c:	2284      	movs	r2, #132	; 0x84
 800097e:	214d      	movs	r1, #77	; 0x4d
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f7ff fed1 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41);
 8000986:	2241      	movs	r2, #65	; 0x41
 8000988:	2140      	movs	r1, #64	; 0x40
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fecc 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x32, 5); //Payload Length 8 bytes
 8000990:	2205      	movs	r2, #5
 8000992:	2132      	movs	r1, #50	; 0x32
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff fec7 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x35, 5 - 1);     //Fixed length, packetformat = 0
 800099a:	2204      	movs	r2, #4
 800099c:	2135      	movs	r1, #53	; 0x35
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff fec2 	bl	8000728 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, RegFdevLsb, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2105      	movs	r1, #5
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff febd 	bl	8000728 <SX1278_SPIWrite>
	SX1278_hw_DelayMs(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff fe90 	bl	80006d4 <SX1278_hw_DelayMs>

	//SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);	//Mode//Low Frequency Mod
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <SX1278_RTTY_Stop>:

void SX1278_RTTY_Stop(SX1278_t * module){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2101      	movs	r1, #1
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff fead 	bl	8000728 <SX1278_SPIWrite>

	uint8_t ret = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 80009d2:	213e      	movs	r1, #62	; 0x3e
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff fe88 	bl	80006ea <SX1278_SPIRead>
 80009da:	4603      	mov	r3, r0
 80009dc:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 80009de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db00      	blt.n	80009e8 <SX1278_RTTY_Stop+0x2c>
		ret = SX1278_SPIRead(module, 0x3e);
 80009e6:	e7f4      	b.n	80009d2 <SX1278_RTTY_Stop+0x16>
			break;
 80009e8:	bf00      	nop
		}
	}
}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <SX1278_RTTY_WriteLow>:

void SX1278_RTTY_WriteLow(SX1278_t * module){
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b084      	sub	sp, #16
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	SX1278_RTTY_Stop(module);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ffde 	bl	80009bc <SX1278_RTTY_Stop>
//	uint8_t rx = 0;
//	while(1){
		SX1278_SPIWrite(module, 0x08, 0); //  write to RegFrfLsb
 8000a00:	2200      	movs	r2, #0
 8000a02:	2108      	movs	r1, #8
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff fe8f 	bl	8000728 <SX1278_SPIWrite>
//		rx = SX1278_SPIRead(module, 0x08); //  write to RegFrfLsb
//		if(rx == 0){
//			break;
//		}
//	}
		SX1278_SPIWrite(module, LR_RegOpMode, 0b1010);
 8000a0a:	220a      	movs	r2, #10
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fe8a 	bl	8000728 <SX1278_SPIWrite>

		uint8_t ret = 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
		while(1){
			ret = SX1278_SPIRead(module, 0x3e);
 8000a18:	213e      	movs	r1, #62	; 0x3e
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff fe65 	bl	80006ea <SX1278_SPIRead>
 8000a20:	4603      	mov	r3, r0
 8000a22:	73fb      	strb	r3, [r7, #15]
			if(ret & 0b10000000){
 8000a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db00      	blt.n	8000a2e <SX1278_RTTY_WriteLow+0x3c>
			ret = SX1278_SPIRead(module, 0x3e);
 8000a2c:	e7f4      	b.n	8000a18 <SX1278_RTTY_WriteLow+0x26>
				break;
 8000a2e:	bf00      	nop
			}
		}


	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);
 8000a30:	220b      	movs	r2, #11
 8000a32:	2101      	movs	r1, #1
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fe77 	bl	8000728 <SX1278_SPIWrite>

}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <SX1278_RTTY_WriteHigh>:

void SX1278_RTTY_WriteHigh(SX1278_t * module){
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b084      	sub	sp, #16
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
	SX1278_RTTY_Stop(module);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ffb6 	bl	80009bc <SX1278_RTTY_Stop>
//	uint8_t rx = 0;
//	while(1){
		SX1278_SPIWrite(module, 0x08, 10); //  write to RegFrfLsb
 8000a50:	220a      	movs	r2, #10
 8000a52:	2108      	movs	r1, #8
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fe67 	bl	8000728 <SX1278_SPIWrite>
//		rx = SX1278_SPIRead(module, 0x08); //  write to RegFrfLsb
//		if(rx == 10){
//			break;
//		}
//	}
		SX1278_SPIWrite(module, LR_RegOpMode, 0b1010);
 8000a5a:	220a      	movs	r2, #10
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fe62 	bl	8000728 <SX1278_SPIWrite>

		uint8_t ret = 1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
		while(1){
			ret = SX1278_SPIRead(module, 0x3e);
 8000a68:	213e      	movs	r1, #62	; 0x3e
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff fe3d 	bl	80006ea <SX1278_SPIRead>
 8000a70:	4603      	mov	r3, r0
 8000a72:	73fb      	strb	r3, [r7, #15]
			if(ret & 0b10000000){
 8000a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db00      	blt.n	8000a7e <SX1278_RTTY_WriteHigh+0x3c>
			ret = SX1278_SPIRead(module, 0x3e);
 8000a7c:	e7f4      	b.n	8000a68 <SX1278_RTTY_WriteHigh+0x26>
				break;
 8000a7e:	bf00      	nop
			}
		}

	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);
 8000a80:	220b      	movs	r2, #11
 8000a82:	2101      	movs	r1, #1
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff fe4f 	bl	8000728 <SX1278_SPIWrite>
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <SX1278_FSK_Config>:

void SX1278_FSK_Config(SX1278_t * module) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f83f 	bl	8000b20 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f7ff fe16 	bl	80006d4 <SX1278_hw_DelayMs>

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	4a14      	ldr	r2, [pc, #80]	; (8000afc <SX1278_FSK_Config+0x68>)
 8000aac:	2106      	movs	r1, #6
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff fe63 	bl	800077a <SX1278_SPIBurstWrite>
	(uint8_t*) SX1278_Frequency[SX1278_433MHZ], 3); //setting  frequency parameter 434 MHz

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, 0b10000000); //Setting output power parameter
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	2109      	movs	r1, #9
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fe35 	bl	8000728 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000abe:	220b      	movs	r2, #11
 8000ac0:	210b      	movs	r1, #11
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fe30 	bl	8000728 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000ac8:	2223      	movs	r2, #35	; 0x23
 8000aca:	210c      	movs	r1, #12
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff fe2b 	bl	8000728 <SX1278_SPIWrite>

	//SX1278_SPIWrite(module, 0x1f, 0x00);		//disable preamble detect
	//SX1278_SPIWrite(module, 0x27, 0b10000000);		//disable sync word

	SX1278_SPIWrite(module, 0x30, 0b1000);     //Fixed length, packetformat = 0
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	2130      	movs	r1, #48	; 0x30
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fe26 	bl	8000728 <SX1278_SPIWrite>
	// set datarate
	//datarate 9c40 = 800bps

	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000adc:	2201      	movs	r2, #1
 8000ade:	2141      	movs	r1, #65	; 0x41
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff fe21 	bl	8000728 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f806 	bl	8000b00 <SX1278_standby>
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	080068e0 	.word	0x080068e0

08000b00 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000b08:	2209      	movs	r2, #9
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fe0b 	bl	8000728 <SX1278_SPIWrite>
	module->status = STANDBY;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2201      	movs	r2, #1
 8000b16:	725a      	strb	r2, [r3, #9]
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000b28:	2208      	movs	r2, #8
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff fdfb 	bl	8000728 <SX1278_SPIWrite>
	module->status = SLEEP;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	725a      	strb	r2, [r3, #9]
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000b48:	2288      	movs	r2, #136	; 0x88
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff fdeb 	bl	8000728 <SX1278_SPIWrite>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000b62:	22ff      	movs	r2, #255	; 0xff
 8000b64:	2112      	movs	r1, #18
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff fdde 	bl	8000728 <SX1278_SPIWrite>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SX1278_FSK_EntryRx>:

int SX1278_FSK_EntryRx(SX1278_t * module, uint8_t length) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
	module->packetLength = length;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	78fa      	ldrb	r2, [r7, #3]
 8000b84:	721a      	strb	r2, [r3, #8]

	SX1278_FSK_Config(module); // set base parameters
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff84 	bl	8000a94 <SX1278_FSK_Config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000b8c:	2284      	movs	r2, #132	; 0x84
 8000b8e:	214d      	movs	r1, #77	; 0x4d
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fdc9 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000b96:	2201      	movs	r2, #1
 8000b98:	2140      	movs	r1, #64	; 0x40
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fdc4 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x05, 0x52); // 5kHz freq deviation
 8000ba0:	2252      	movs	r2, #82	; 0x52
 8000ba2:	2105      	movs	r1, #5
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fdbf 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x32, length); //Payload Length 8 bytes
 8000baa:	78fb      	ldrb	r3, [r7, #3]
 8000bac:	461a      	mov	r2, r3
 8000bae:	2132      	movs	r1, #50	; 0x32
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff fdb9 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1101);	//Mode//Low Frequency Mode
 8000bb6:	220d      	movs	r2, #13
 8000bb8:	2101      	movs	r1, #1
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff fdb4 	bl	8000728 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	return 1;
 8000bc8:	2301      	movs	r3, #1
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <SX1278_FSK_EntryTx>:

int SX1278_FSK_EntryTx(SX1278_t * module, uint8_t length) {
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	460b      	mov	r3, r1
 8000bdc:	70fb      	strb	r3, [r7, #3]
	module->packetLength = length;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	78fa      	ldrb	r2, [r7, #3]
 8000be2:	721a      	strb	r2, [r3, #8]

	SX1278_FSK_Config(module); // set base parameters
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff55 	bl	8000a94 <SX1278_FSK_Config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);//0x87);	//Normal and RX
 8000bea:	2284      	movs	r2, #132	; 0x84
 8000bec:	214d      	movs	r1, #77	; 0x4d
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff fd9a 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41);
 8000bf4:	2241      	movs	r2, #65	; 0x41
 8000bf6:	2140      	movs	r1, #64	; 0x40
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fd95 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x05, 0x52); // 5kHz freq deviation
 8000bfe:	2252      	movs	r2, #82	; 0x52
 8000c00:	2105      	movs	r1, #5
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fd90 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x32, length); //Payload Length 8 bytes
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	2132      	movs	r1, #50	; 0x32
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff fd8a 	bl	8000728 <SX1278_SPIWrite>
	//	SX1278_SPIWrite(module, RegBitRateLsb, 0x2B);	// 1200 bps
	//	SX1278_SPIWrite(module, RegBitRateMsb, 0x68);
	SX1278_SPIWrite(module, 0x35, length - 1);     //Fixed length, packetformat = 0
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	2135      	movs	r1, #53	; 0x35
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fd82 	bl	8000728 <SX1278_SPIWrite>


	module->readBytes = 0;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	SX1278_hw_DelayMs(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff fd51 	bl	80006d4 <SX1278_hw_DelayMs>
	return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	460b      	mov	r3, r1
 8000c46:	607a      	str	r2, [r7, #4]
 8000c48:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	7afa      	ldrb	r2, [r7, #11]
 8000c4e:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f7ff fdcd 	bl	80007f0 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000c56:	2284      	movs	r2, #132	; 0x84
 8000c58:	214d      	movs	r1, #77	; 0x4d
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff fd64 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000c60:	22ff      	movs	r2, #255	; 0xff
 8000c62:	2124      	movs	r1, #36	; 0x24
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f7ff fd5f 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2140      	movs	r1, #64	; 0x40
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff fd5a 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000c74:	223f      	movs	r2, #63	; 0x3f
 8000c76:	2111      	movs	r1, #17
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f7ff fd55 	bl	8000728 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff ff6b 	bl	8000b5a <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000c84:	7afb      	ldrb	r3, [r7, #11]
 8000c86:	461a      	mov	r2, r3
 8000c88:	2122      	movs	r1, #34	; 0x22
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f7ff fd4c 	bl	8000728 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000c90:	210f      	movs	r1, #15
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff fd29 	bl	80006ea <SX1278_SPIRead>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	210d      	movs	r1, #13
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff fd40 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000ca8:	228d      	movs	r2, #141	; 0x8d
 8000caa:	2101      	movs	r1, #1
 8000cac:	68f8      	ldr	r0, [r7, #12]
 8000cae:	f7ff fd3b 	bl	8000728 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000cba:	2118      	movs	r1, #24
 8000cbc:	68f8      	ldr	r0, [r7, #12]
 8000cbe:	f7ff fd14 	bl	80006ea <SX1278_SPIRead>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d104      	bne.n	8000cd6 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2203      	movs	r2, #3
 8000cd0:	725a      	strb	r2, [r3, #9]
			return 1;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e013      	b.n	8000cfe <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d109      	bne.n	8000cf6 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fc8a 	bl	8000600 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	f7ff fd7f 	bl	80007f0 <SX1278_defaultConfig>
			return 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e003      	b.n	8000cfe <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f7ff fcec 	bl	80006d4 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000cfc:	e7dd      	b.n	8000cba <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <SX1278_FSK_TxPacket>:
			return 0;
		}
	}
}

int SX1278_FSK_TxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length, uint32_t timeout) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	4613      	mov	r3, r2
 8000d16:	71fb      	strb	r3, [r7, #7]
    uint8_t gotResponse = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	77fb      	strb	r3, [r7, #31]
	uint32_t tickstart = HAL_GetTick();
 8000d1c:	f001 fe58 	bl	80029d0 <HAL_GetTick>
 8000d20:	6178      	str	r0, [r7, #20]
	uint32_t wait = timeout;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	61bb      	str	r3, [r7, #24]
	uint8_t temp = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	74fb      	strb	r3, [r7, #19]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY){
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <SX1278_FSK_TxPacket+0x36>
		wait += (uint32_t)(uwTickFreq);
 8000d32:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <SX1278_FSK_TxPacket+0x98>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
	}

	SX1278_FSK_EntryTx(module, length);
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	4619      	mov	r1, r3
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f7ff ff45 	bl	8000bd2 <SX1278_FSK_EntryTx>

	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f7ff fd13 	bl	800077a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);	//Mode//Low Frequency Mode
 8000d54:	220b      	movs	r2, #11
 8000d56:	2101      	movs	r1, #1
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f7ff fce5 	bl	8000728 <SX1278_SPIWrite>

	while(!gotResponse){
 8000d5e:	e014      	b.n	8000d8a <SX1278_FSK_TxPacket+0x82>
	    temp = SX1278_SPIRead(module, RegIrqFlags2); // check if fifo sent is set
 8000d60:	213f      	movs	r1, #63	; 0x3f
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f7ff fcc1 	bl	80006ea <SX1278_SPIRead>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	74fb      	strb	r3, [r7, #19]
	    if(temp & 0b1000){
 8000d6c:	7cfb      	ldrb	r3, [r7, #19]
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SX1278_FSK_TxPacket+0x72>
	    	gotResponse =  1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	77fb      	strb	r3, [r7, #31]
	    }
		if((HAL_GetTick() - tickstart) >= wait){
 8000d7a:	f001 fe29 	bl	80029d0 <HAL_GetTick>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d903      	bls.n	8000d92 <SX1278_FSK_TxPacket+0x8a>
	while(!gotResponse){
 8000d8a:	7ffb      	ldrb	r3, [r7, #31]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0e7      	beq.n	8000d60 <SX1278_FSK_TxPacket+0x58>
 8000d90:	e000      	b.n	8000d94 <SX1278_FSK_TxPacket+0x8c>
			break;								// timeout happened
 8000d92:	bf00      	nop
		}
	}
	return gotResponse;
 8000d94:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000028 	.word	0x20000028

08000da4 <SX1278_FSK_RxPacket>:

int SX1278_FSK_RxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length, uint32_t timeout) {
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b08b      	sub	sp, #44	; 0x2c
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71fb      	strb	r3, [r7, #7]
    uint8_t gotResponse = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t tickstart = HAL_GetTick();
 8000dba:	f001 fe09 	bl	80029d0 <HAL_GetTick>
 8000dbe:	61b8      	str	r0, [r7, #24]
	uint32_t wait = timeout;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	623b      	str	r3, [r7, #32]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY){
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
 8000dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dca:	d005      	beq.n	8000dd8 <SX1278_FSK_RxPacket+0x34>
		wait += (uint32_t)(uwTickFreq);
 8000dcc:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <SX1278_FSK_RxPacket+0xb8>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	6a3b      	ldr	r3, [r7, #32]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	623b      	str	r3, [r7, #32]
	}

	uint8_t temp = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	75fb      	strb	r3, [r7, #23]

	while(!gotResponse){
 8000ddc:	e031      	b.n	8000e42 <SX1278_FSK_RxPacket+0x9e>
		temp = SX1278_SPIRead(module, 0x3f);
 8000dde:	213f      	movs	r1, #63	; 0x3f
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff fc82 	bl	80006ea <SX1278_SPIRead>
 8000de6:	4603      	mov	r3, r0
 8000de8:	75fb      	strb	r3, [r7, #23]

	    if((temp & 0b100) && temp != 255){
 8000dea:	7dfb      	ldrb	r3, [r7, #23]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d01e      	beq.n	8000e32 <SX1278_FSK_RxPacket+0x8e>
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	2bff      	cmp	r3, #255	; 0xff
 8000df8:	d01b      	beq.n	8000e32 <SX1278_FSK_RxPacket+0x8e>
	    	gotResponse = 1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    	for(uint8_t i = 0; i < length; i++){
 8000e00:	2300      	movs	r3, #0
 8000e02:	77fb      	strb	r3, [r7, #31]
 8000e04:	e00b      	b.n	8000e1e <SX1278_FSK_RxPacket+0x7a>
	    		txBuffer[i] = SX1278_SPIRead(module, RegFIFO);
 8000e06:	7ffb      	ldrb	r3, [r7, #31]
 8000e08:	68ba      	ldr	r2, [r7, #8]
 8000e0a:	18d4      	adds	r4, r2, r3
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff fc6b 	bl	80006ea <SX1278_SPIRead>
 8000e14:	4603      	mov	r3, r0
 8000e16:	7023      	strb	r3, [r4, #0]
	    	for(uint8_t i = 0; i < length; i++){
 8000e18:	7ffb      	ldrb	r3, [r7, #31]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	77fb      	strb	r3, [r7, #31]
 8000e1e:	7ffa      	ldrb	r2, [r7, #31]
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d3ef      	bcc.n	8000e06 <SX1278_FSK_RxPacket+0x62>
	    	}
	    	temp = SX1278_SPIRead(module, RegIrqFlags2);
 8000e26:	213f      	movs	r1, #63	; 0x3f
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f7ff fc5e 	bl	80006ea <SX1278_SPIRead>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	75fb      	strb	r3, [r7, #23]

	    }

		if((HAL_GetTick() - tickstart) >= wait){
 8000e32:	f001 fdcd 	bl	80029d0 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	6a3a      	ldr	r2, [r7, #32]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d904      	bls.n	8000e4c <SX1278_FSK_RxPacket+0xa8>
	while(!gotResponse){
 8000e42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0c9      	beq.n	8000dde <SX1278_FSK_RxPacket+0x3a>
 8000e4a:	e000      	b.n	8000e4e <SX1278_FSK_RxPacket+0xaa>
			break;								// timeout happened
 8000e4c:	bf00      	nop
		}
	}

	return gotResponse;
 8000e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	372c      	adds	r7, #44	; 0x2c
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000028 	.word	0x20000028

08000e60 <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	4608      	mov	r0, r1
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	70fb      	strb	r3, [r7, #3]
 8000e72:	460b      	mov	r3, r1
 8000e74:	70bb      	strb	r3, [r7, #2]
 8000e76:	4613      	mov	r3, r2
 8000e78:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fb92 	bl	80005a8 <SX1278_hw_init>
	module->frequency = frequency;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	78fa      	ldrb	r2, [r7, #3]
 8000e88:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	78ba      	ldrb	r2, [r7, #2]
 8000e8e:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	787a      	ldrb	r2, [r7, #1]
 8000e94:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7c3a      	ldrb	r2, [r7, #16]
 8000e9a:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7d3a      	ldrb	r2, [r7, #20]
 8000ea0:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fca4 	bl	80007f0 <SX1278_defaultConfig>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <GPS_Receive>:
// "00.358"



/* Pass uint8_t of received data */
void GPS_Receive(uint8_t data){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	if(data == '$'){
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b24      	cmp	r3, #36	; 0x24
 8000ebe:	d103      	bne.n	8000ec8 <GPS_Receive+0x18>
		gpsTempLen = 0;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <GPS_Receive+0x68>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
		gpsTempLen = 255;
	}else if(gpsTempLen != 255){
		gpsTemp[gpsTempLen] = data;
		gpsTempLen++;
	}
}
 8000ec6:	e023      	b.n	8000f10 <GPS_Receive+0x60>
	}else if((data == 13 || data == 10) && gpsTempLen != 255){
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2b0d      	cmp	r3, #13
 8000ecc:	d002      	beq.n	8000ed4 <GPS_Receive+0x24>
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b0a      	cmp	r3, #10
 8000ed2:	d10d      	bne.n	8000ef0 <GPS_Receive+0x40>
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <GPS_Receive+0x68>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2bff      	cmp	r3, #255	; 0xff
 8000eda:	d009      	beq.n	8000ef0 <GPS_Receive+0x40>
		GPS_Parse(gpsTemp, gpsTempLen);
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <GPS_Receive+0x68>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480e      	ldr	r0, [pc, #56]	; (8000f1c <GPS_Receive+0x6c>)
 8000ee4:	f000 f81c 	bl	8000f20 <GPS_Parse>
		gpsTempLen = 255;
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <GPS_Receive+0x68>)
 8000eea:	22ff      	movs	r2, #255	; 0xff
 8000eec:	701a      	strb	r2, [r3, #0]
}
 8000eee:	e00f      	b.n	8000f10 <GPS_Receive+0x60>
	}else if(gpsTempLen != 255){
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <GPS_Receive+0x68>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2bff      	cmp	r3, #255	; 0xff
 8000ef6:	d00b      	beq.n	8000f10 <GPS_Receive+0x60>
		gpsTemp[gpsTempLen] = data;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <GPS_Receive+0x68>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <GPS_Receive+0x6c>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	5453      	strb	r3, [r2, r1]
		gpsTempLen++;
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <GPS_Receive+0x68>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <GPS_Receive+0x68>)
 8000f0e:	701a      	strb	r2, [r3, #0]
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000174 	.word	0x20000174

08000f20 <GPS_Parse>:

/* parses received frame */
uint8_t GPS_Parse(uint8_t *buf, uint8_t len){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b090      	sub	sp, #64	; 0x40
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	70fb      	strb	r3, [r7, #3]
	if(strncmp("GPGGA", (char *)buf, 5) == 0){ // get coordinates and height
 8000f2c:	2205      	movs	r2, #5
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	48cb      	ldr	r0, [pc, #812]	; (8001260 <GPS_Parse+0x340>)
 8000f32:	f005 f893 	bl	800605c <strncmp>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f040 8151 	bne.w	80011e0 <GPS_Parse+0x2c0>
		if(GPS_CheckSum(buf, len) == GPS_OK){
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	4619      	mov	r1, r3
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f9e6 	bl	8001314 <GPS_CheckSum>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	f040 8146 	bne.w	80011dc <GPS_Parse+0x2bc>
			uint8_t step = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			uint8_t i = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			while(step < 8){
 8000f5c:	e131      	b.n	80011c2 <GPS_Parse+0x2a2>
				if(buf[i] == ','){
 8000f5e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b2c      	cmp	r3, #44	; 0x2c
 8000f6a:	f040 8125 	bne.w	80011b8 <GPS_Parse+0x298>
					i++;
 8000f6e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f72:	3301      	adds	r3, #1
 8000f74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					step++;
 8000f78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					if(step == 1){
 8000f82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d13e      	bne.n	8001008 <GPS_Parse+0xe8>
						uint8_t tempData[6] = {0};
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8000f8e:	2300      	movs	r3, #0
 8000f90:	86bb      	strh	r3, [r7, #52]	; 0x34
						uint8_t leng = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
						while(buf[i] != '.'){
 8000f98:	e015      	b.n	8000fc6 <GPS_Parse+0xa6>
							tempData[leng] = buf[i];
 8000f9a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	441a      	add	r2, r3
 8000fa2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000fa6:	7812      	ldrb	r2, [r2, #0]
 8000fa8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000fac:	440b      	add	r3, r1
 8000fae:	f803 2c10 	strb.w	r2, [r3, #-16]
							leng++;
 8000fb2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
							i++;
 8000fbc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						while(buf[i] != '.'){
 8000fc6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8000fd2:	d1e2      	bne.n	8000f9a <GPS_Parse+0x7a>
						}
					if(leng == 0){
 8000fd4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <GPS_Parse+0xc0>
						return GPS_NOK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e193      	b.n	8001308 <GPS_Parse+0x3e8>
					}
					memset(gpsTime, '0', 6);
 8000fe0:	2206      	movs	r2, #6
 8000fe2:	2130      	movs	r1, #48	; 0x30
 8000fe4:	489f      	ldr	r0, [pc, #636]	; (8001264 <GPS_Parse+0x344>)
 8000fe6:	f004 fffd 	bl	8005fe4 <memset>
					memcpy(gpsTime + (6-leng), tempData, leng);
 8000fea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000fee:	f1c3 0306 	rsb	r3, r3, #6
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b9b      	ldr	r3, [pc, #620]	; (8001264 <GPS_Parse+0x344>)
 8000ff6:	4413      	add	r3, r2
 8000ff8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000ffc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001000:	4618      	mov	r0, r3
 8001002:	f004 ffe1 	bl	8005fc8 <memcpy>
 8001006:	e0d7      	b.n	80011b8 <GPS_Parse+0x298>
				}else if(step == 2 || step == 3){
 8001008:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800100c:	2b02      	cmp	r3, #2
 800100e:	d004      	beq.n	800101a <GPS_Parse+0xfa>
 8001010:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001014:	2b03      	cmp	r3, #3
 8001016:	f040 8085 	bne.w	8001124 <GPS_Parse+0x204>
						uint8_t tempData[12] = {0};
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
 800101e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
						uint8_t leng = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
						while(buf[i] != ','){
 800102e:	e015      	b.n	800105c <GPS_Parse+0x13c>
							tempData[leng] = buf[i];
 8001030:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	441a      	add	r2, r3
 8001038:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001042:	440b      	add	r3, r1
 8001044:	f803 2c1c 	strb.w	r2, [r3, #-28]
							leng++;
 8001048:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800104c:	3301      	adds	r3, #1
 800104e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							i++;
 8001052:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001056:	3301      	adds	r3, #1
 8001058:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						while(buf[i] != ','){
 800105c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b2c      	cmp	r3, #44	; 0x2c
 8001068:	d1e2      	bne.n	8001030 <GPS_Parse+0x110>
						}
						if(leng == 0){
 800106a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <GPS_Parse+0x156>
							return GPS_NOK;
 8001072:	2300      	movs	r3, #0
 8001074:	e148      	b.n	8001308 <GPS_Parse+0x3e8>
						}
						i++;
 8001076:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800107a:	3301      	adds	r3, #1
 800107c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						if(buf[i] == 'N' || buf[i] == 'S' || buf[i] == 'E' || buf[i] == 'W'){
 8001080:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4413      	add	r3, r2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b4e      	cmp	r3, #78	; 0x4e
 800108c:	d014      	beq.n	80010b8 <GPS_Parse+0x198>
 800108e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b53      	cmp	r3, #83	; 0x53
 800109a:	d00d      	beq.n	80010b8 <GPS_Parse+0x198>
 800109c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b45      	cmp	r3, #69	; 0x45
 80010a8:	d006      	beq.n	80010b8 <GPS_Parse+0x198>
 80010aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b57      	cmp	r3, #87	; 0x57
 80010b6:	d133      	bne.n	8001120 <GPS_Parse+0x200>
							memset((gpsData + (step - 2) * 12), '0', 12);
 80010b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010bc:	1e9a      	subs	r2, r3, #2
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b67      	ldr	r3, [pc, #412]	; (8001268 <GPS_Parse+0x348>)
 80010ca:	4413      	add	r3, r2
 80010cc:	220c      	movs	r2, #12
 80010ce:	2130      	movs	r1, #48	; 0x30
 80010d0:	4618      	mov	r0, r3
 80010d2:	f004 ff87 	bl	8005fe4 <memset>
							gpsData[(step - 2) * 12 + 11] = buf[i];
 80010d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	18d1      	adds	r1, r2, r3
 80010de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010e2:	1e9a      	subs	r2, r3, #2
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	330b      	adds	r3, #11
 80010ee:	7809      	ldrb	r1, [r1, #0]
 80010f0:	4a5d      	ldr	r2, [pc, #372]	; (8001268 <GPS_Parse+0x348>)
 80010f2:	54d1      	strb	r1, [r2, r3]
						}else{
							return GPS_NOK;
						}
						memcpy(gpsData + (step - 2) * 12 + (11 - leng), tempData, leng);
 80010f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010f8:	1e9a      	subs	r2, r3, #2
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	461a      	mov	r2, r3
 8001104:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	330b      	adds	r3, #11
 800110c:	4a56      	ldr	r2, [pc, #344]	; (8001268 <GPS_Parse+0x348>)
 800110e:	4413      	add	r3, r2
 8001110:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001114:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001118:	4618      	mov	r0, r3
 800111a:	f004 ff55 	bl	8005fc8 <memcpy>
				}else if(step == 2 || step == 3){
 800111e:	e04b      	b.n	80011b8 <GPS_Parse+0x298>
							return GPS_NOK;
 8001120:	2300      	movs	r3, #0
 8001122:	e0f1      	b.n	8001308 <GPS_Parse+0x3e8>
					}else if(step == 7){
 8001124:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001128:	2b07      	cmp	r3, #7
 800112a:	d145      	bne.n	80011b8 <GPS_Parse+0x298>
						i++;
 800112c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001130:	3301      	adds	r3, #1
 8001132:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						uint8_t tempData[12] = {0};
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
						uint8_t leng = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						while(buf[i] != ','){
 800114a:	e015      	b.n	8001178 <GPS_Parse+0x258>
							tempData[leng] = buf[i];
 800114c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	441a      	add	r2, r3
 8001154:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001158:	7812      	ldrb	r2, [r2, #0]
 800115a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800115e:	440b      	add	r3, r1
 8001160:	f803 2c28 	strb.w	r2, [r3, #-40]
							leng++;
 8001164:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001168:	3301      	adds	r3, #1
 800116a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							i++;
 800116e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001172:	3301      	adds	r3, #1
 8001174:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						while(buf[i] != ','){
 8001178:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b2c      	cmp	r3, #44	; 0x2c
 8001184:	d1e2      	bne.n	800114c <GPS_Parse+0x22c>
						}
						if(leng == 0){
 8001186:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <GPS_Parse+0x272>
							return GPS_NOK;
 800118e:	2300      	movs	r3, #0
 8001190:	e0ba      	b.n	8001308 <GPS_Parse+0x3e8>
						}
						memset(gpsHeight, '0', 8);
 8001192:	2208      	movs	r2, #8
 8001194:	2130      	movs	r1, #48	; 0x30
 8001196:	4835      	ldr	r0, [pc, #212]	; (800126c <GPS_Parse+0x34c>)
 8001198:	f004 ff24 	bl	8005fe4 <memset>
						memcpy(gpsHeight + (8-leng), tempData, leng);
 800119c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80011a0:	f1c3 0308 	rsb	r3, r3, #8
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b31      	ldr	r3, [pc, #196]	; (800126c <GPS_Parse+0x34c>)
 80011a8:	4413      	add	r3, r2
 80011aa:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80011ae:	f107 0118 	add.w	r1, r7, #24
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 ff08 	bl	8005fc8 <memcpy>
					}
				}
				i++;
 80011b8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80011bc:	3301      	adds	r3, #1
 80011be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			while(step < 8){
 80011c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	f67f aec9 	bls.w	8000f5e <GPS_Parse+0x3e>
			}
			isNewData = 1;
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <GPS_Parse+0x350>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
			isData = 1;
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <GPS_Parse+0x354>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
			return GPS_OK;
 80011d8:	2301      	movs	r3, #1
 80011da:	e095      	b.n	8001308 <GPS_Parse+0x3e8>
		}else{
			return GPS_NOK;
 80011dc:	2300      	movs	r3, #0
 80011de:	e093      	b.n	8001308 <GPS_Parse+0x3e8>
		}


	}else if(strncmp("GPVTG", (char *)buf, 5) == 0){ // get speed in km/h
 80011e0:	2205      	movs	r2, #5
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4824      	ldr	r0, [pc, #144]	; (8001278 <GPS_Parse+0x358>)
 80011e6:	f004 ff39 	bl	800605c <strncmp>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f040 8088 	bne.w	8001302 <GPS_Parse+0x3e2>
		if(GPS_CheckSum(buf, len) == GPS_OK){
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	4619      	mov	r1, r3
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f88c 	bl	8001314 <GPS_CheckSum>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d17d      	bne.n	80012fe <GPS_Parse+0x3de>
			if(GPS_CheckSum(buf, len) == GPS_OK){
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f884 	bl	8001314 <GPS_CheckSum>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d179      	bne.n	8001306 <GPS_Parse+0x3e6>
				uint8_t step = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				uint8_t i = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				while(step < 8){
 800121e:	e068      	b.n	80012f2 <GPS_Parse+0x3d2>
					if(buf[i] == ','){
 8001220:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b2c      	cmp	r3, #44	; 0x2c
 800122c:	d15c      	bne.n	80012e8 <GPS_Parse+0x3c8>
						step++;
 800122e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001232:	3301      	adds	r3, #1
 8001234:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						if(step == 7){
 8001238:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800123c:	2b07      	cmp	r3, #7
 800123e:	d153      	bne.n	80012e8 <GPS_Parse+0x3c8>
							i++;
 8001240:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001244:	3301      	adds	r3, #1
 8001246:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
							uint8_t tempData[12] = {0};
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
							uint8_t leng = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							while(buf[i] != ','){
 800125e:	e023      	b.n	80012a8 <GPS_Parse+0x388>
 8001260:	08006898 	.word	0x08006898
 8001264:	200000d4 	.word	0x200000d4
 8001268:	200000ac 	.word	0x200000ac
 800126c:	200000c4 	.word	0x200000c4
 8001270:	200000db 	.word	0x200000db
 8001274:	200000da 	.word	0x200000da
 8001278:	080068a0 	.word	0x080068a0
								tempData[leng] = buf[i];
 800127c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	441a      	add	r2, r3
 8001284:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001288:	7812      	ldrb	r2, [r2, #0]
 800128a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800128e:	440b      	add	r3, r1
 8001290:	f803 2c34 	strb.w	r2, [r3, #-52]
								leng++;
 8001294:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001298:	3301      	adds	r3, #1
 800129a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
								i++;
 800129e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80012a2:	3301      	adds	r3, #1
 80012a4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
							while(buf[i] != ','){
 80012a8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b2c      	cmp	r3, #44	; 0x2c
 80012b4:	d1e2      	bne.n	800127c <GPS_Parse+0x35c>
							}
							if(leng == 0){
 80012b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <GPS_Parse+0x3a2>
								return GPS_NOK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e022      	b.n	8001308 <GPS_Parse+0x3e8>
							}
							memset(gpsSpeed, '0', 6);
 80012c2:	2206      	movs	r2, #6
 80012c4:	2130      	movs	r1, #48	; 0x30
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <GPS_Parse+0x3f0>)
 80012c8:	f004 fe8c 	bl	8005fe4 <memset>
							memcpy(gpsSpeed + (6-leng), tempData, leng);
 80012cc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012d0:	f1c3 0306 	rsb	r3, r3, #6
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <GPS_Parse+0x3f0>)
 80012d8:	4413      	add	r3, r2
 80012da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80012de:	f107 010c 	add.w	r1, r7, #12
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fe70 	bl	8005fc8 <memcpy>
						}
					}
					i++;
 80012e8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80012ec:	3301      	adds	r3, #1
 80012ee:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				while(step < 8){
 80012f2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	d992      	bls.n	8001220 <GPS_Parse+0x300>
				}
			return GPS_OK;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e004      	b.n	8001308 <GPS_Parse+0x3e8>
			}
		}else{
			return GPS_NOK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e002      	b.n	8001308 <GPS_Parse+0x3e8>
		}
	}else{
		return GPS_NOK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <GPS_Parse+0x3e8>
	}
	return GPS_NOK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3740      	adds	r7, #64	; 0x40
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200000cc 	.word	0x200000cc

08001314 <GPS_CheckSum>:

/* checks checksum returns GPS_ok if data is valid*/
uint8_t GPS_CheckSum(uint8_t *buf, uint8_t len){
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
	uint8_t sum;
	uint8_t check = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]

	if(GPS_HexToByte((buf + len - 2), &sum) != GPS_OK){
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	3b02      	subs	r3, #2
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	f107 020d 	add.w	r2, r7, #13
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f822 	bl	800137c <GPS_HexToByte>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	d001      	beq.n	8001342 <GPS_CheckSum+0x2e>
		return GPS_NOK;
 800133e:	2300      	movs	r3, #0
 8001340:	e018      	b.n	8001374 <GPS_CheckSum+0x60>
	}

	for(uint8_t i = 0; i < (len - 3); i++){
 8001342:	2300      	movs	r3, #0
 8001344:	73bb      	strb	r3, [r7, #14]
 8001346:	e009      	b.n	800135c <GPS_CheckSum+0x48>
		check ^= buf[i];
 8001348:	7bbb      	ldrb	r3, [r7, #14]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	781a      	ldrb	r2, [r3, #0]
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	4053      	eors	r3, r2
 8001354:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < (len - 3); i++){
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	3301      	adds	r3, #1
 800135a:	73bb      	strb	r3, [r7, #14]
 800135c:	7bba      	ldrb	r2, [r7, #14]
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	3b03      	subs	r3, #3
 8001362:	429a      	cmp	r2, r3
 8001364:	dbf0      	blt.n	8001348 <GPS_CheckSum+0x34>
	}

	if(check == sum){
 8001366:	7b7b      	ldrb	r3, [r7, #13]
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	429a      	cmp	r2, r3
 800136c:	d101      	bne.n	8001372 <GPS_CheckSum+0x5e>
		return GPS_OK;
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <GPS_CheckSum+0x60>
	}

	return GPS_NOK;
 8001372:	2300      	movs	r3, #0

}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <GPS_HexToByte>:

/* converts hex string e.g. AB (0xAB) to byte value writes to value, returns GPS_OK if valid hex */
uint8_t GPS_HexToByte(uint8_t *hex, uint8_t *value){
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	uint8_t temp[2];

	for(uint8_t i = 0; i < 2; i++){
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e04c      	b.n	8001426 <GPS_HexToByte+0xaa>
		temp[i] = hex[i];
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	441a      	add	r2, r3
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	7812      	ldrb	r2, [r2, #0]
 8001396:	f107 0110 	add.w	r1, r7, #16
 800139a:	440b      	add	r3, r1
 800139c:	f803 2c04 	strb.w	r2, [r3, #-4]
		if(temp[i] > 47 && temp[i] < 58){
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	f107 0210 	add.w	r2, r7, #16
 80013a6:	4413      	add	r3, r2
 80013a8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80013ac:	2b2f      	cmp	r3, #47	; 0x2f
 80013ae:	d916      	bls.n	80013de <GPS_HexToByte+0x62>
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	f107 0210 	add.w	r2, r7, #16
 80013b6:	4413      	add	r3, r2
 80013b8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80013bc:	2b39      	cmp	r3, #57	; 0x39
 80013be:	d80e      	bhi.n	80013de <GPS_HexToByte+0x62>
			temp[i] -= 48;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	f107 0210 	add.w	r2, r7, #16
 80013c6:	4413      	add	r3, r2
 80013c8:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	3a30      	subs	r2, #48	; 0x30
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	f107 0110 	add.w	r1, r7, #16
 80013d6:	440b      	add	r3, r1
 80013d8:	f803 2c04 	strb.w	r2, [r3, #-4]
 80013dc:	e020      	b.n	8001420 <GPS_HexToByte+0xa4>
		}else if(temp[i] > 64 && temp[i] < 71){
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	f107 0210 	add.w	r2, r7, #16
 80013e4:	4413      	add	r3, r2
 80013e6:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80013ea:	2b40      	cmp	r3, #64	; 0x40
 80013ec:	d916      	bls.n	800141c <GPS_HexToByte+0xa0>
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	f107 0210 	add.w	r2, r7, #16
 80013f4:	4413      	add	r3, r2
 80013f6:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80013fa:	2b46      	cmp	r3, #70	; 0x46
 80013fc:	d80e      	bhi.n	800141c <GPS_HexToByte+0xa0>
			temp[i] -= 55;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	f107 0210 	add.w	r2, r7, #16
 8001404:	4413      	add	r3, r2
 8001406:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	3a37      	subs	r2, #55	; 0x37
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	f107 0110 	add.w	r1, r7, #16
 8001414:	440b      	add	r3, r1
 8001416:	f803 2c04 	strb.w	r2, [r3, #-4]
 800141a:	e001      	b.n	8001420 <GPS_HexToByte+0xa4>
		}else{
			return GPS_NOK;
 800141c:	2300      	movs	r3, #0
 800141e:	e00e      	b.n	800143e <GPS_HexToByte+0xc2>
	for(uint8_t i = 0; i < 2; i++){
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	3301      	adds	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d9af      	bls.n	800138c <GPS_HexToByte+0x10>
		}
	}

	*value = (temp[0] << 4) + temp[1];
 800142c:	7b3b      	ldrb	r3, [r7, #12]
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	b2da      	uxtb	r2, r3
 8001432:	7b7b      	ldrb	r3, [r7, #13]
 8001434:	4413      	add	r3, r2
 8001436:	b2da      	uxtb	r2, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	701a      	strb	r2, [r3, #0]

	return GPS_OK;
 800143c:	2301      	movs	r3, #1
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <GPS_GetLat>:

/* Returns latitude of length 12*/
void GPS_GetLat(uint8_t *buf){
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <GPS_GetLat+0x3c>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	73fb      	strb	r3, [r7, #15]
	for(; i < 12; i++){
 800145e:	e009      	b.n	8001474 <GPS_GetLat+0x28>
		buf[i] = gpsData[i];
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	440b      	add	r3, r1
 8001468:	4908      	ldr	r1, [pc, #32]	; (800148c <GPS_GetLat+0x40>)
 800146a:	5c8a      	ldrb	r2, [r1, r2]
 800146c:	701a      	strb	r2, [r3, #0]
	for(; i < 12; i++){
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	3301      	adds	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	2b0b      	cmp	r3, #11
 8001478:	d9f2      	bls.n	8001460 <GPS_GetLat+0x14>
	}
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	200000db 	.word	0x200000db
 800148c:	200000ac 	.word	0x200000ac

08001490 <GPS_GetLon>:

/* Returns longitude of length 12*/
void GPS_GetLon(uint8_t *buf){
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <GPS_GetLon+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
	for(; i < 12; i++){
 80014a2:	e00b      	b.n	80014bc <GPS_GetLon+0x2c>
		buf[i] = gpsData[i + 12];
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	f103 020c 	add.w	r2, r3, #12
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	440b      	add	r3, r1
 80014b0:	4908      	ldr	r1, [pc, #32]	; (80014d4 <GPS_GetLon+0x44>)
 80014b2:	5c8a      	ldrb	r2, [r1, r2]
 80014b4:	701a      	strb	r2, [r3, #0]
	for(; i < 12; i++){
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	3301      	adds	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2b0b      	cmp	r3, #11
 80014c0:	d9f0      	bls.n	80014a4 <GPS_GetLon+0x14>
	}
}
 80014c2:	bf00      	nop
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	200000db 	.word	0x200000db
 80014d4:	200000ac 	.word	0x200000ac

080014d8 <GPS_GetSpe>:

/* Returns speed of length 6*/
void GPS_GetSpe(uint8_t *buf){
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <GPS_GetSpe+0x3c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
	for(; i < 6; i++){
 80014ea:	e009      	b.n	8001500 <GPS_GetSpe+0x28>
		buf[i] = gpsSpeed[i];
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	440b      	add	r3, r1
 80014f4:	4908      	ldr	r1, [pc, #32]	; (8001518 <GPS_GetSpe+0x40>)
 80014f6:	5c8a      	ldrb	r2, [r1, r2]
 80014f8:	701a      	strb	r2, [r3, #0]
	for(; i < 6; i++){
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	3301      	adds	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b05      	cmp	r3, #5
 8001504:	d9f2      	bls.n	80014ec <GPS_GetSpe+0x14>
	}
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	200000db 	.word	0x200000db
 8001518:	200000cc 	.word	0x200000cc

0800151c <GPS_GetHei>:

/* Returns height of length 8*/
void GPS_GetHei(uint8_t *buf){
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <GPS_GetHei+0x3c>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
	for(; i < 8; i++){
 800152e:	e009      	b.n	8001544 <GPS_GetHei+0x28>
		buf[i] = gpsHeight[i];
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	440b      	add	r3, r1
 8001538:	4908      	ldr	r1, [pc, #32]	; (800155c <GPS_GetHei+0x40>)
 800153a:	5c8a      	ldrb	r2, [r1, r2]
 800153c:	701a      	strb	r2, [r3, #0]
	for(; i < 8; i++){
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	3301      	adds	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	2b07      	cmp	r3, #7
 8001548:	d9f2      	bls.n	8001530 <GPS_GetHei+0x14>
	}
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	200000db 	.word	0x200000db
 800155c:	200000c4 	.word	0x200000c4

08001560 <GPS_GetTime>:

/* Returns time of length 8 in format "hh:mm:ss" */
void GPS_GetTime(uint8_t *buf){
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <GPS_GetTime+0x70>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
//	}else if(strcmp((char *)temp_hour, "23") > 1){
//		uint8_t a = strcmp((char *)temp_hour, "23") > 0;
//		temp_hour[0] = (uint8_t) '0';
//		temp_hour[1] = (uint8_t) '1';
//	}
	buf[2] = ':';
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3302      	adds	r3, #2
 8001572:	223a      	movs	r2, #58	; 0x3a
 8001574:	701a      	strb	r2, [r3, #0]
	buf[5] = ':';
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3305      	adds	r3, #5
 800157a:	223a      	movs	r2, #58	; 0x3a
 800157c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++){
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	e01b      	b.n	80015bc <GPS_GetTime+0x5c>
		//buf[i] = temp_hour[i];
		buf[i] = gpsTime[i];
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	440b      	add	r3, r1
 800158c:	4911      	ldr	r1, [pc, #68]	; (80015d4 <GPS_GetTime+0x74>)
 800158e:	5c8a      	ldrb	r2, [r1, r2]
 8001590:	701a      	strb	r2, [r3, #0]
		buf[i + 3] = gpsTime[i + 2];
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	1c9a      	adds	r2, r3, #2
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	3303      	adds	r3, #3
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	440b      	add	r3, r1
 800159e:	490d      	ldr	r1, [pc, #52]	; (80015d4 <GPS_GetTime+0x74>)
 80015a0:	5c8a      	ldrb	r2, [r1, r2]
 80015a2:	701a      	strb	r2, [r3, #0]
		buf[i + 6] = gpsTime[i + 4];
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	1d1a      	adds	r2, r3, #4
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	3306      	adds	r3, #6
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	440b      	add	r3, r1
 80015b0:	4908      	ldr	r1, [pc, #32]	; (80015d4 <GPS_GetTime+0x74>)
 80015b2:	5c8a      	ldrb	r2, [r1, r2]
 80015b4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++){
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	3301      	adds	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d9e0      	bls.n	8001584 <GPS_GetTime+0x24>
	}
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	200000db 	.word	0x200000db
 80015d4:	200000d4 	.word	0x200000d4

080015d8 <GPS_IsData>:

/* Returns GPS_OK if got any data */
uint8_t GPS_IsData(){
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
	if(isData){
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <GPS_IsData+0x24>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d004      	beq.n	80015ee <GPS_IsData+0x16>
		isData = 0;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <GPS_IsData+0x24>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
		return GPS_OK;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <GPS_IsData+0x18>
	}else{
		return GPS_NOK;
 80015ee:	2300      	movs	r3, #0
	}
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200000da 	.word	0x200000da

08001600 <GSM_Off>:
	HAL_GPIO_WritePin(GSM_RST_GPIO_Port, GSM_RST_Pin ,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_RESET);
}

void GSM_Off(){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800160a:	480b      	ldr	r0, [pc, #44]	; (8001638 <GSM_Off+0x38>)
 800160c:	f002 f856 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RST_GPIO_Port, GSM_RST_Pin ,GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001616:	4809      	ldr	r0, [pc, #36]	; (800163c <GSM_Off+0x3c>)
 8001618:	f002 f850 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <GSM_Off+0x3c>)
 8001624:	f002 f84a 	bl	80036bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162e:	4802      	ldr	r0, [pc, #8]	; (8001638 <GSM_Off+0x38>)
 8001630:	f002 f844 	bl	80036bc <HAL_GPIO_WritePin>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40020800 	.word	0x40020800
 800163c:	40020400 	.word	0x40020400

08001640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b0ea      	sub	sp, #424	; 0x1a8
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001646:	f001 f95d 	bl	8002904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800164a:	f000 f945 	bl	80018d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164e:	f000 fb7d 	bl	8001d4c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001652:	f000 fadd 	bl	8001c10 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001656:	f000 fb05 	bl	8001c64 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800165a:	f000 fb2d 	bl	8001cb8 <MX_USART6_UART_Init>
  MX_DMA_Init();
 800165e:	f000 fb55 	bl	8001d0c <MX_DMA_Init>
  MX_SPI1_Init();
 8001662:	f000 f9b7 	bl	80019d4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001666:	f000 f9eb 	bl	8001a40 <MX_TIM2_Init>
  MX_TIM3_Init();
 800166a:	f000 fa37 	bl	8001adc <MX_TIM3_Init>
  MX_CRC_Init();
 800166e:	f000 f99d 	bl	80019ac <MX_CRC_Init>
  MX_TIM4_Init();
 8001672:	f000 fa7f 	bl	8001b74 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001676:	4883      	ldr	r0, [pc, #524]	; (8001884 <main+0x244>)
 8001678:	f003 f956 	bl	8004928 <HAL_TIM_Base_Start_IT>

  SX1278_hw_t SX1278_hw;
  SX1278_t SX1278;

 //initialize LoRa module
 SX1278_hw.dio0.port = RF_DIO0_GPIO_Port;
 800167c:	4b82      	ldr	r3, [pc, #520]	; (8001888 <main+0x248>)
 800167e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 SX1278_hw.dio0.pin = RF_DIO0_Pin;
 8001682:	2320      	movs	r3, #32
 8001684:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 SX1278_hw.nss.port = RF_NSS_GPIO_Port;
 8001688:	4b80      	ldr	r3, [pc, #512]	; (800188c <main+0x24c>)
 800168a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 SX1278_hw.nss.pin = RF_NSS_Pin;
 800168e:	2310      	movs	r3, #16
 8001690:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 SX1278_hw.reset.port = RF_RST_GPIO_Port;
 8001694:	4b7c      	ldr	r3, [pc, #496]	; (8001888 <main+0x248>)
 8001696:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 SX1278_hw.reset.pin = RF_RST_Pin;
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 SX1278_hw.spi = &hspi1;
 80016a0:	4b7b      	ldr	r3, [pc, #492]	; (8001890 <main+0x250>)
 80016a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 SX1278.hw = &SX1278_hw;
 80016a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016aa:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80016ae:	601a      	str	r2, [r3, #0]

 //HAL_UART_Receive_DMA(&huart1, &rxBuf, 1); DOESN"T work for some reason
 HAL_UART_Receive_IT(&huart1, &rxBuf, 1); // Works like a charm, but not as good as DMA
 80016b0:	2201      	movs	r2, #1
 80016b2:	4978      	ldr	r1, [pc, #480]	; (8001894 <main+0x254>)
 80016b4:	4878      	ldr	r0, [pc, #480]	; (8001898 <main+0x258>)
 80016b6:	f003 fded 	bl	8005294 <HAL_UART_Receive_IT>
 while(HAL_GPIO_ReadPin(RX_GPIO_Port, RX_Pin) == 0);
 80016ba:	bf00      	nop
 80016bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c0:	4872      	ldr	r0, [pc, #456]	; (800188c <main+0x24c>)
 80016c2:	f001 ffe3 	bl	800368c <HAL_GPIO_ReadPin>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f7      	beq.n	80016bc <main+0x7c>
 HAL_UART_Receive_IT(&huart6, UART6_RxBuf, 2);
 80016cc:	2202      	movs	r2, #2
 80016ce:	4973      	ldr	r1, [pc, #460]	; (800189c <main+0x25c>)
 80016d0:	4873      	ldr	r0, [pc, #460]	; (80018a0 <main+0x260>)
 80016d2:	f003 fddf 	bl	8005294 <HAL_UART_Receive_IT>
 HAL_GPIO_WritePin(RF_RST_GPIO_Port, RF_RST_Pin, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	2140      	movs	r1, #64	; 0x40
 80016da:	486b      	ldr	r0, [pc, #428]	; (8001888 <main+0x248>)
 80016dc:	f001 ffee 	bl	80036bc <HAL_GPIO_WritePin>

 SX1278_hw_Reset(&SX1278_hw);
 80016e0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff8b 	bl	8000600 <SX1278_hw_Reset>
//      SX1278_begin(&SX1278, SX1278_433MHZ, MIN_POWER, SX1278_LORA_SF_8, // air time ~ 495ms
//      SX1278_LORA_BW_20_8KHZ, 10);

  	//uint8_t GSM_STATE = 0;

  	GSM_Off();
 80016ea:	f7ff ff89 	bl	8001600 <GSM_Off>

//	 if(GSM_Check_Signal()){
//		GSM_Message_Send(text, sizeof(text), 28654641);
//	  }

	MODE_Set(&SX1278, mode);
 80016ee:	4b6d      	ldr	r3, [pc, #436]	; (80018a4 <main+0x264>)
 80016f0:	781a      	ldrb	r2, [r3, #0]
 80016f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fcaf 	bl	800205c <MODE_Set>
	if(mode == 0){
 80016fe:	4b69      	ldr	r3, [pc, #420]	; (80018a4 <main+0x264>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10c      	bne.n	8001720 <main+0xe0>
		ret = SX1278_LoRaEntryRx(&SX1278, MIN_PACKETLENGTH, 2000);
 8001706:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800170a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800170e:	2108      	movs	r1, #8
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fa93 	bl	8000c3c <SX1278_LoRaEntryRx>
 8001716:	4603      	mov	r3, r0
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <main+0x268>)
 800171c:	701a      	strb	r2, [r3, #0]
 800171e:	e009      	b.n	8001734 <main+0xf4>
	}else{
		ret = SX1278_FSK_EntryRx(&SX1278, 8);
 8001720:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001724:	2108      	movs	r1, #8
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fa24 	bl	8000b74 <SX1278_FSK_EntryRx>
 800172c:	4603      	mov	r3, r0
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <main+0x268>)
 8001732:	701a      	strb	r2, [r3, #0]
	}

	 //HAL_UART_Receive_DMA(&huart6, &cmd_rx_buffer, cmd_rx_buffer_size);
	uint8_t check_sum;
	uint8_t check_sum_arr[4] = {0, 0, 0, 0};
 8001734:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
	char tel_dataBuf[120];
	memset(tel_dataBuf, 0, sizeof(tel_dataBuf));
 800173c:	463b      	mov	r3, r7
 800173e:	2278      	movs	r2, #120	; 0x78
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f004 fc4e 	bl	8005fe4 <memset>

	uint8_t temp;

	HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);
 8001748:	2202      	movs	r2, #2
 800174a:	4958      	ldr	r1, [pc, #352]	; (80018ac <main+0x26c>)
 800174c:	4854      	ldr	r0, [pc, #336]	; (80018a0 <main+0x260>)
 800174e:	f003 fd5c 	bl	800520a <HAL_UART_Transmit_IT>

	while(GPS_IsData() == GPS_NOK);
 8001752:	bf00      	nop
 8001754:	f7ff ff40 	bl	80015d8 <GPS_IsData>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0fa      	beq.n	8001754 <main+0x114>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	if(uartRec){
 800175e:	4b54      	ldr	r3, [pc, #336]	; (80018b0 <main+0x270>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <main+0x136>
	  		GPS_Receive(rxBuf);
 8001766:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <main+0x254>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fba0 	bl	8000eb0 <GPS_Receive>
	  		uartRec = 0;
 8001770:	4b4f      	ldr	r3, [pc, #316]	; (80018b0 <main+0x270>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
	  	}
	  	 if(do_send_tm){ // its time to send gps coordinates
 8001776:	4b4f      	ldr	r3, [pc, #316]	; (80018b4 <main+0x274>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d03a      	beq.n	80017f4 <main+0x1b4>
	  		 //if(GPS_IsData()){
			 //doRecData = 0; NAV VAJADZIGS JO PROCESI NENOTIEK PARARELI //Igo dumbness//
			 UART6_TxBuf[0] = 0x03;
 800177e:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <main+0x26c>)
 8001780:	2203      	movs	r2, #3
 8001782:	701a      	strb	r2, [r3, #0]
			 UART6_TxBuf[1] = 0x99;
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <main+0x26c>)
 8001786:	2299      	movs	r2, #153	; 0x99
 8001788:	705a      	strb	r2, [r3, #1]
			 HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	2101      	movs	r1, #1
 800178e:	483e      	ldr	r0, [pc, #248]	; (8001888 <main+0x248>)
 8001790:	f001 ff94 	bl	80036bc <HAL_GPIO_WritePin>
			 HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);
 8001794:	2202      	movs	r2, #2
 8001796:	4945      	ldr	r1, [pc, #276]	; (80018ac <main+0x26c>)
 8001798:	4841      	ldr	r0, [pc, #260]	; (80018a0 <main+0x260>)
 800179a:	f003 fd36 	bl	800520a <HAL_UART_Transmit_IT>
			 if(GPS_IsData()){
 800179e:	f7ff ff1b 	bl	80015d8 <GPS_IsData>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <main+0x172>
			 	 make_string(tel_dataBuf, sizeof(tel_dataBuf));
 80017a8:	463b      	mov	r3, r7
 80017aa:	2178      	movs	r1, #120	; 0x78
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fd65 	bl	800227c <make_string>
			 }
			 RTTY_Send(&SX1278, tel_dataBuf, strlen(tel_dataBuf));
 80017b2:	463b      	mov	r3, r7
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fd1d 	bl	80001f4 <strlen>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4639      	mov	r1, r7
 80017c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fccf 	bl	8002168 <RTTY_Send>
			 SX1278_FSK_TxPacket(&SX1278, info_message, 8, 100);
 80017ca:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80017ce:	2364      	movs	r3, #100	; 0x64
 80017d0:	2208      	movs	r2, #8
 80017d2:	4939      	ldr	r1, [pc, #228]	; (80018b8 <main+0x278>)
 80017d4:	f7ff fa98 	bl	8000d08 <SX1278_FSK_TxPacket>
			 SX1278_FSK_EntryRx(&SX1278, 8);
 80017d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017dc:	2108      	movs	r1, #8
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f9c8 	bl	8000b74 <SX1278_FSK_EntryRx>
			 //doRecData = 1;
			 HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2101      	movs	r1, #1
 80017e8:	4827      	ldr	r0, [pc, #156]	; (8001888 <main+0x248>)
 80017ea:	f001 ff67 	bl	80036bc <HAL_GPIO_WritePin>

			 HAL_TIM_Base_Start_IT(&htim4);
 80017ee:	4833      	ldr	r0, [pc, #204]	; (80018bc <main+0x27c>)
 80017f0:	f003 f89a 	bl	8004928 <HAL_TIM_Base_Start_IT>
	  		 //}
	  	}
	  	 if(loraModuleIrq && doRecData){
 80017f4:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <main+0x280>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0b0      	beq.n	800175e <main+0x11e>
 80017fc:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <main+0x284>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ac      	beq.n	800175e <main+0x11e>
			temp = SX1278_FSK_RxPacket(&SX1278, loraBuf, 8, 1000);
 8001804:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180c:	2208      	movs	r2, #8
 800180e:	492e      	ldr	r1, [pc, #184]	; (80018c8 <main+0x288>)
 8001810:	f7ff fac8 	bl	8000da4 <SX1278_FSK_RxPacket>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
			if(strcmp((char *)loraBuf, "cutropeN") == 0){
 800181a:	492c      	ldr	r1, [pc, #176]	; (80018cc <main+0x28c>)
 800181c:	482a      	ldr	r0, [pc, #168]	; (80018c8 <main+0x288>)
 800181e:	f7fe fcdf 	bl	80001e0 <strcmp>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d117      	bne.n	8001858 <main+0x218>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001828:	2201      	movs	r2, #1
 800182a:	2104      	movs	r1, #4
 800182c:	4816      	ldr	r0, [pc, #88]	; (8001888 <main+0x248>)
 800182e:	f001 ff45 	bl	80036bc <HAL_GPIO_WritePin>

				// SENDING COMMAND TO MCU TO CUT THE ROPE
				UART6_TxBuf[0] = 0x4f;
 8001832:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <main+0x26c>)
 8001834:	224f      	movs	r2, #79	; 0x4f
 8001836:	701a      	strb	r2, [r3, #0]
				UART6_TxBuf[1] = 0xcc;
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <main+0x26c>)
 800183a:	22cc      	movs	r2, #204	; 0xcc
 800183c:	705a      	strb	r2, [r3, #1]
				HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);
 800183e:	2202      	movs	r2, #2
 8001840:	491a      	ldr	r1, [pc, #104]	; (80018ac <main+0x26c>)
 8001842:	4817      	ldr	r0, [pc, #92]	; (80018a0 <main+0x260>)
 8001844:	f003 fce1 	bl	800520a <HAL_UART_Transmit_IT>
				// SENDING COMMAND TO MCU TO CUT THE ROPE

				SX1278_FSK_TxPacket(&SX1278, ok_cut_rope_message, 8, 100);
 8001848:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800184c:	2364      	movs	r3, #100	; 0x64
 800184e:	2208      	movs	r2, #8
 8001850:	491f      	ldr	r1, [pc, #124]	; (80018d0 <main+0x290>)
 8001852:	f7ff fa59 	bl	8000d08 <SX1278_FSK_TxPacket>
 8001856:	e006      	b.n	8001866 <main+0x226>
			}else{
				SX1278_FSK_TxPacket(&SX1278, nok_ack_message, 8, 100);
 8001858:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800185c:	2364      	movs	r3, #100	; 0x64
 800185e:	2208      	movs	r2, #8
 8001860:	491c      	ldr	r1, [pc, #112]	; (80018d4 <main+0x294>)
 8001862:	f7ff fa51 	bl	8000d08 <SX1278_FSK_TxPacket>
			}
			ret = SX1278_FSK_EntryRx(&SX1278, 8);
 8001866:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800186a:	2108      	movs	r1, #8
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff f981 	bl	8000b74 <SX1278_FSK_EntryRx>
 8001872:	4603      	mov	r3, r0
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <main+0x268>)
 8001878:	701a      	strb	r2, [r3, #0]
	  		loraModuleIrq = 0;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <main+0x280>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
	  	if(uartRec){
 8001880:	e76d      	b.n	800175e <main+0x11e>
 8001882:	bf00      	nop
 8001884:	20000468 	.word	0x20000468
 8001888:	40020400 	.word	0x40020400
 800188c:	40020000 	.word	0x40020000
 8001890:	20000410 	.word	0x20000410
 8001894:	200001c4 	.word	0x200001c4
 8001898:	200002c0 	.word	0x200002c0
 800189c:	20000134 	.word	0x20000134
 80018a0:	20000368 	.word	0x20000368
 80018a4:	2000001c 	.word	0x2000001c
 80018a8:	200000e4 	.word	0x200000e4
 80018ac:	200000fc 	.word	0x200000fc
 80018b0:	200000dc 	.word	0x200000dc
 80018b4:	200000f8 	.word	0x200000f8
 80018b8:	20000004 	.word	0x20000004
 80018bc:	200001c8 	.word	0x200001c8
 80018c0:	200000f2 	.word	0x200000f2
 80018c4:	2000001d 	.word	0x2000001d
 80018c8:	200000e8 	.word	0x200000e8
 80018cc:	080068a8 	.word	0x080068a8
 80018d0:	2000000c 	.word	0x2000000c
 80018d4:	20000014 	.word	0x20000014

080018d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b094      	sub	sp, #80	; 0x50
 80018dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018de:	f107 0320 	add.w	r3, r7, #32
 80018e2:	2230      	movs	r2, #48	; 0x30
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f004 fb7c 	bl	8005fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <SystemClock_Config+0xcc>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	4a27      	ldr	r2, [pc, #156]	; (80019a4 <SystemClock_Config+0xcc>)
 8001906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190a:	6413      	str	r3, [r2, #64]	; 0x40
 800190c:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <SystemClock_Config+0xcc>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <SystemClock_Config+0xd0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001924:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <SystemClock_Config+0xd0>)
 8001926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <SystemClock_Config+0xd0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001938:	2301      	movs	r3, #1
 800193a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800193c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001942:	2302      	movs	r3, #2
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001946:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800194c:	2304      	movs	r3, #4
 800194e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001950:	2354      	movs	r3, #84	; 0x54
 8001952:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001954:	2302      	movs	r3, #2
 8001956:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001958:	2304      	movs	r3, #4
 800195a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195c:	f107 0320 	add.w	r3, r7, #32
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fedd 	bl	8003720 <HAL_RCC_OscConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800196c:	f000 fcea 	bl	8002344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001970:	230f      	movs	r3, #15
 8001972:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001974:	2302      	movs	r3, #2
 8001976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800197c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001980:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	2102      	movs	r1, #2
 800198c:	4618      	mov	r0, r3
 800198e:	f002 f93f 	bl	8003c10 <HAL_RCC_ClockConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001998:	f000 fcd4 	bl	8002344 <Error_Handler>
  }
}
 800199c:	bf00      	nop
 800199e:	3750      	adds	r7, #80	; 0x50
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40007000 	.word	0x40007000

080019ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_CRC_Init+0x20>)
 80019b2:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <MX_CRC_Init+0x24>)
 80019b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_CRC_Init+0x20>)
 80019b8:	f001 f94b 	bl	8002c52 <HAL_CRC_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80019c2:	f000 fcbf 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000210 	.word	0x20000210
 80019d0:	40023000 	.word	0x40023000

080019d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <MX_SPI1_Init+0x64>)
 80019da:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <MX_SPI1_Init+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_SPI1_Init+0x64>)
 80019e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_SPI1_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_SPI1_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_SPI1_Init+0x64>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_SPI1_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a08:	2220      	movs	r2, #32
 8001a0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a20:	220a      	movs	r2, #10
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_SPI1_Init+0x64>)
 8001a26:	f002 faef 	bl	8004008 <HAL_SPI_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a30:	f000 fc88 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000410 	.word	0x20000410
 8001a3c:	40013000 	.word	0x40013000

08001a40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	463b      	mov	r3, r7
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a66:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001a6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2625;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a74:	f640 2241 	movw	r2, #2625	; 0xa41
 8001a78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a86:	4814      	ldr	r0, [pc, #80]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001a88:	f002 fefe 	bl	8004888 <HAL_TIM_Base_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a92:	f000 fc57 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001aa4:	f003 f8d9 	bl	8004c5a <HAL_TIM_ConfigClockSource>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001aae:	f000 fc49 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <MX_TIM2_Init+0x98>)
 8001ac0:	f003 fad4 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001aca:	f000 fc3b 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000468 	.word	0x20000468

08001adc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	463b      	mov	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <MX_TIM3_Init+0x90>)
 8001afa:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <MX_TIM3_Init+0x94>)
 8001afc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <MX_TIM3_Init+0x90>)
 8001b00:	2254      	movs	r2, #84	; 0x54
 8001b02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <MX_TIM3_Init+0x90>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <MX_TIM3_Init+0x90>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <MX_TIM3_Init+0x90>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_TIM3_Init+0x90>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b1c:	4813      	ldr	r0, [pc, #76]	; (8001b6c <MX_TIM3_Init+0x90>)
 8001b1e:	f002 feb3 	bl	8004888 <HAL_TIM_Base_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001b28:	f000 fc0c 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4619      	mov	r1, r3
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <MX_TIM3_Init+0x90>)
 8001b3a:	f003 f88e 	bl	8004c5a <HAL_TIM_ConfigClockSource>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001b44:	f000 fbfe 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b50:	463b      	mov	r3, r7
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_TIM3_Init+0x90>)
 8001b56:	f003 fa89 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001b60:	f000 fbf0 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000218 	.word	0x20000218
 8001b70:	40000400 	.word	0x40000400

08001b74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_TIM4_Init+0x94>)
 8001b92:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <MX_TIM4_Init+0x98>)
 8001b94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <MX_TIM4_Init+0x94>)
 8001b98:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001b9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_TIM4_Init+0x94>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2625;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_TIM4_Init+0x94>)
 8001ba6:	f640 2241 	movw	r2, #2625	; 0xa41
 8001baa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_TIM4_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_TIM4_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001bb8:	4813      	ldr	r0, [pc, #76]	; (8001c08 <MX_TIM4_Init+0x94>)
 8001bba:	f002 fe65 	bl	8004888 <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001bc4:	f000 fbbe 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <MX_TIM4_Init+0x94>)
 8001bd6:	f003 f840 	bl	8004c5a <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001be0:	f000 fbb0 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bec:	463b      	mov	r3, r7
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_TIM4_Init+0x94>)
 8001bf2:	f003 fa3b 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001bfc:	f000 fba2 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200001c8 	.word	0x200001c8
 8001c0c:	40000800 	.word	0x40000800

08001c10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <MX_USART1_UART_Init+0x50>)
 8001c18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c36:	220c      	movs	r2, #12
 8001c38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c48:	f003 fa92 	bl	8005170 <HAL_UART_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c52:	f000 fb77 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200002c0 	.word	0x200002c0
 8001c60:	40011000 	.word	0x40011000

08001c64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <MX_USART2_UART_Init+0x50>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c9c:	f003 fa68 	bl	8005170 <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ca6:	f000 fb4d 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200004b0 	.word	0x200004b0
 8001cb4:	40004400 	.word	0x40004400

08001cb8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <MX_USART6_UART_Init+0x50>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_USART6_UART_Init+0x4c>)
 8001cf0:	f003 fa3e 	bl	8005170 <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001cfa:	f000 fb23 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000368 	.word	0x20000368
 8001d08:	40011400 	.word	0x40011400

08001d0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_DMA_Init+0x3c>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <MX_DMA_Init+0x3c>)
 8001d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_DMA_Init+0x3c>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	203a      	movs	r0, #58	; 0x3a
 8001d34:	f000 ff57 	bl	8002be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001d38:	203a      	movs	r0, #58	; 0x3a
 8001d3a:	f000 ff70 	bl	8002c1e <HAL_NVIC_EnableIRQ>

}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <MX_GPIO_Init+0x190>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a5c      	ldr	r2, [pc, #368]	; (8001edc <MX_GPIO_Init+0x190>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b5a      	ldr	r3, [pc, #360]	; (8001edc <MX_GPIO_Init+0x190>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b56      	ldr	r3, [pc, #344]	; (8001edc <MX_GPIO_Init+0x190>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a55      	ldr	r2, [pc, #340]	; (8001edc <MX_GPIO_Init+0x190>)
 8001d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b53      	ldr	r3, [pc, #332]	; (8001edc <MX_GPIO_Init+0x190>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b4f      	ldr	r3, [pc, #316]	; (8001edc <MX_GPIO_Init+0x190>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a4e      	ldr	r2, [pc, #312]	; (8001edc <MX_GPIO_Init+0x190>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b4c      	ldr	r3, [pc, #304]	; (8001edc <MX_GPIO_Init+0x190>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b48      	ldr	r3, [pc, #288]	; (8001edc <MX_GPIO_Init+0x190>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a47      	ldr	r2, [pc, #284]	; (8001edc <MX_GPIO_Init+0x190>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b45      	ldr	r3, [pc, #276]	; (8001edc <MX_GPIO_Init+0x190>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd8:	4841      	ldr	r0, [pc, #260]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001dda:	f001 fc6f 	bl	80036bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001de4:	483e      	ldr	r0, [pc, #248]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001de6:	f001 fc69 	bl	80036bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NSS_GPIO_Port, RF_NSS_Pin, GPIO_PIN_RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2110      	movs	r1, #16
 8001dee:	483d      	ldr	r0, [pc, #244]	; (8001ee4 <MX_GPIO_Init+0x198>)
 8001df0:	f001 fc64 	bl	80036bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 8001df4:	2200      	movs	r2, #0
 8001df6:	f240 7117 	movw	r1, #1815	; 0x717
 8001dfa:	483b      	ldr	r0, [pc, #236]	; (8001ee8 <MX_GPIO_Init+0x19c>)
 8001dfc:	f001 fc5e 	bl	80036bc <HAL_GPIO_WritePin>
                          |RF_DIO1_Pin|GSM_RST_Pin|GSM_RTS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GSM_CTS_Pin GSM_PWR_Pin */
  GPIO_InitStruct.Pin = GSM_CTS_Pin|GSM_PWR_Pin;
 8001e00:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	4831      	ldr	r0, [pc, #196]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001e1a:	f001 fab3 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_GPIO1INT_Pin */
  GPIO_InitStruct.Pin = GSM_GPIO1INT_Pin;
 8001e1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GSM_GPIO1INT_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	482b      	ldr	r0, [pc, #172]	; (8001ee0 <MX_GPIO_Init+0x194>)
 8001e34:	f001 faa6 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NSS_Pin */
  GPIO_InitStruct.Pin = RF_NSS_Pin;
 8001e38:	2310      	movs	r3, #16
 8001e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_NSS_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4825      	ldr	r0, [pc, #148]	; (8001ee4 <MX_GPIO_Init+0x198>)
 8001e50:	f001 fa98 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin
                           RF_DIO1_Pin GSM_RTS_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 8001e54:	f240 6317 	movw	r3, #1559	; 0x617
 8001e58:	617b      	str	r3, [r7, #20]
                          |RF_DIO1_Pin|GSM_RTS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	481e      	ldr	r0, [pc, #120]	; (8001ee8 <MX_GPIO_Init+0x19c>)
 8001e6e:	f001 fa89 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DIO0_Pin */
  GPIO_InitStruct.Pin = RF_DIO0_Pin;
 8001e72:	2320      	movs	r3, #32
 8001e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_DIO0_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	4818      	ldr	r0, [pc, #96]	; (8001ee8 <MX_GPIO_Init+0x19c>)
 8001e88:	f001 fa7c 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_RST_Pin */
  GPIO_InitStruct.Pin = RF_RST_Pin;
 8001e8c:	2340      	movs	r3, #64	; 0x40
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_RST_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4812      	ldr	r0, [pc, #72]	; (8001ee8 <MX_GPIO_Init+0x19c>)
 8001ea0:	f001 fa70 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_RST_Pin */
  GPIO_InitStruct.Pin = GSM_RST_Pin;
 8001ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GSM_RST_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <MX_GPIO_Init+0x19c>)
 8001ebe:	f001 fa61 	bl	8003384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2017      	movs	r0, #23
 8001ec8:	f000 fe8d 	bl	8002be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ecc:	2017      	movs	r0, #23
 8001ece:	f000 fea6 	bl	8002c1e <HAL_NVIC_EnableIRQ>

}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020800 	.word	0x40020800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400

08001eec <HAL_UART_RxCpltCallback>:
	}else{
		return CMD_ERROR;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	//gsmRec = 1;
	if(huart == &huart1){
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a3c      	ldr	r2, [pc, #240]	; (8001fe8 <HAL_UART_RxCpltCallback+0xfc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d107      	bne.n	8001f0c <HAL_UART_RxCpltCallback+0x20>
		HAL_UART_Receive_IT(&huart1, &rxBuf, 1);
 8001efc:	2201      	movs	r2, #1
 8001efe:	493b      	ldr	r1, [pc, #236]	; (8001fec <HAL_UART_RxCpltCallback+0x100>)
 8001f00:	4839      	ldr	r0, [pc, #228]	; (8001fe8 <HAL_UART_RxCpltCallback+0xfc>)
 8001f02:	f003 f9c7 	bl	8005294 <HAL_UART_Receive_IT>
		//HAL_UART_Receive_DMA(&huart1, &rxBuf, 1);
		uartRec = 1;
 8001f06:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <HAL_UART_RxCpltCallback+0x104>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
	}

	if(huart == &huart6)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a39      	ldr	r2, [pc, #228]	; (8001ff4 <HAL_UART_RxCpltCallback+0x108>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d164      	bne.n	8001fde <HAL_UART_RxCpltCallback+0xf2>
	{
		if(UART6_RxIsData == 1){
 8001f14:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_UART_RxCpltCallback+0x10c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d117      	bne.n	8001f4c <HAL_UART_RxCpltCallback+0x60>
			for (uint8_t i = 0; i < UART6_RxBytes; i++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e008      	b.n	8001f34 <HAL_UART_RxCpltCallback+0x48>
				UART6_DataBuf[i] = UART6_RxBuf[i];
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	4935      	ldr	r1, [pc, #212]	; (8001ffc <HAL_UART_RxCpltCallback+0x110>)
 8001f28:	5c89      	ldrb	r1, [r1, r2]
 8001f2a:	4a35      	ldr	r2, [pc, #212]	; (8002000 <HAL_UART_RxCpltCallback+0x114>)
 8001f2c:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < UART6_RxBytes; i++)
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	3301      	adds	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_UART_RxCpltCallback+0x118>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d3f1      	bcc.n	8001f22 <HAL_UART_RxCpltCallback+0x36>
			UART6_RxIsData = 0;
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_UART_RxCpltCallback+0x10c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
			UART6_RxBytes = 2;
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_UART_RxCpltCallback+0x118>)
 8001f46:	2202      	movs	r2, #2
 8001f48:	701a      	strb	r2, [r3, #0]
 8001f4a:	e043      	b.n	8001fd4 <HAL_UART_RxCpltCallback+0xe8>
		}else{
			uint8_t Command = UART6_RxBuf[0];
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_UART_RxCpltCallback+0x110>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	737b      	strb	r3, [r7, #13]
			uint8_t Parameter = UART6_RxBuf[1];
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <HAL_UART_RxCpltCallback+0x110>)
 8001f54:	785b      	ldrb	r3, [r3, #1]
 8001f56:	733b      	strb	r3, [r7, #12]

			if(Command != 0x02){
 8001f58:	7b7b      	ldrb	r3, [r7, #13]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d007      	beq.n	8001f6e <HAL_UART_RxCpltCallback+0x82>
				UART6_RxBytes = 2;
 8001f5e:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_UART_RxCpltCallback+0x118>)
 8001f60:	2202      	movs	r2, #2
 8001f62:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6, UART6_RxBuf, 2);
 8001f64:	2202      	movs	r2, #2
 8001f66:	4925      	ldr	r1, [pc, #148]	; (8001ffc <HAL_UART_RxCpltCallback+0x110>)
 8001f68:	4822      	ldr	r0, [pc, #136]	; (8001ff4 <HAL_UART_RxCpltCallback+0x108>)
 8001f6a:	f003 f993 	bl	8005294 <HAL_UART_Receive_IT>
			}
			switch(Command){
 8001f6e:	7b7b      	ldrb	r3, [r7, #13]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d002      	beq.n	8001f7a <HAL_UART_RxCpltCallback+0x8e>
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d00e      	beq.n	8001f96 <HAL_UART_RxCpltCallback+0xaa>
					HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, Parameter);
				break;
				default:
					//nothing happens
					//HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
				break;
 8001f78:	e02c      	b.n	8001fd4 <HAL_UART_RxCpltCallback+0xe8>
					UART6_RxIsData = 1;
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_UART_RxCpltCallback+0x10c>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
					UART6_RxBytes = Parameter;
 8001f80:	4a20      	ldr	r2, [pc, #128]	; (8002004 <HAL_UART_RxCpltCallback+0x118>)
 8001f82:	7b3b      	ldrb	r3, [r7, #12]
 8001f84:	7013      	strb	r3, [r2, #0]
					HAL_UART_Receive_IT(&huart6, UART6_RxBuf, Parameter);
 8001f86:	7b3b      	ldrb	r3, [r7, #12]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	491b      	ldr	r1, [pc, #108]	; (8001ffc <HAL_UART_RxCpltCallback+0x110>)
 8001f8e:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <HAL_UART_RxCpltCallback+0x108>)
 8001f90:	f003 f980 	bl	8005294 <HAL_UART_Receive_IT>
				break;
 8001f94:	e01e      	b.n	8001fd4 <HAL_UART_RxCpltCallback+0xe8>
					UART6_TxBuf[0] = 0x02;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_UART_RxCpltCallback+0x11c>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	701a      	strb	r2, [r3, #0]
					UART6_TxBuf[1] = Parameter;
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_UART_RxCpltCallback+0x11c>)
 8001f9e:	7b3b      	ldrb	r3, [r7, #12]
 8001fa0:	7053      	strb	r3, [r2, #1]
					for(uint8_t i = 0; i < Parameter; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73bb      	strb	r3, [r7, #14]
 8001fa6:	e009      	b.n	8001fbc <HAL_UART_RxCpltCallback+0xd0>
						UART6_TxBuf[2 + i] = UART6_DataBuf[i];
 8001fa8:	7bba      	ldrb	r2, [r7, #14]
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	3302      	adds	r3, #2
 8001fae:	4914      	ldr	r1, [pc, #80]	; (8002000 <HAL_UART_RxCpltCallback+0x114>)
 8001fb0:	5c89      	ldrb	r1, [r1, r2]
 8001fb2:	4a15      	ldr	r2, [pc, #84]	; (8002008 <HAL_UART_RxCpltCallback+0x11c>)
 8001fb4:	54d1      	strb	r1, [r2, r3]
					for(uint8_t i = 0; i < Parameter; i++)
 8001fb6:	7bbb      	ldrb	r3, [r7, #14]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	73bb      	strb	r3, [r7, #14]
 8001fbc:	7bba      	ldrb	r2, [r7, #14]
 8001fbe:	7b3b      	ldrb	r3, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d3f1      	bcc.n	8001fa8 <HAL_UART_RxCpltCallback+0xbc>
					HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, Parameter);
 8001fc4:	7b3b      	ldrb	r3, [r7, #12]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	490f      	ldr	r1, [pc, #60]	; (8002008 <HAL_UART_RxCpltCallback+0x11c>)
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <HAL_UART_RxCpltCallback+0x108>)
 8001fce:	f003 f91c 	bl	800520a <HAL_UART_Transmit_IT>
				break;
 8001fd2:	bf00      	nop
			}
		}
		memset(UART6_RxBuf, 0, sizeof(UART6_RxBuf));
 8001fd4:	2232      	movs	r2, #50	; 0x32
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4808      	ldr	r0, [pc, #32]	; (8001ffc <HAL_UART_RxCpltCallback+0x110>)
 8001fda:	f004 f803 	bl	8005fe4 <memset>
	}
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200002c0 	.word	0x200002c0
 8001fec:	200001c4 	.word	0x200001c4
 8001ff0:	200000dc 	.word	0x200000dc
 8001ff4:	20000368 	.word	0x20000368
 8001ff8:	200000f9 	.word	0x200000f9
 8001ffc:	20000134 	.word	0x20000134
 8002000:	20000100 	.word	0x20000100
 8002004:	2000001e 	.word	0x2000001e
 8002008:	200000fc 	.word	0x200000fc

0800200c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart1, &rxBuf, 1); doesn't work for some reason...
	if(huart == &huart1){
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_UART_ErrorCallback+0x3c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d104      	bne.n	8002026 <HAL_UART_ErrorCallback+0x1a>
		HAL_UART_Receive_IT(&huart1, &rxBuf, 1);
 800201c:	2201      	movs	r2, #1
 800201e:	490b      	ldr	r1, [pc, #44]	; (800204c <HAL_UART_ErrorCallback+0x40>)
 8002020:	4809      	ldr	r0, [pc, #36]	; (8002048 <HAL_UART_ErrorCallback+0x3c>)
 8002022:	f003 f937 	bl	8005294 <HAL_UART_Receive_IT>
	}
	if(huart == &huart6){
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_UART_ErrorCallback+0x44>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d107      	bne.n	800203e <HAL_UART_ErrorCallback+0x32>
		HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_UART_ErrorCallback+0x48>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <HAL_UART_ErrorCallback+0x4c>)
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <HAL_UART_ErrorCallback+0x44>)
 800203a:	f003 f92b 	bl	8005294 <HAL_UART_Receive_IT>
	}
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200002c0 	.word	0x200002c0
 800204c:	200001c4 	.word	0x200001c4
 8002050:	20000368 	.word	0x20000368
 8002054:	2000001e 	.word	0x2000001e
 8002058:	20000134 	.word	0x20000134

0800205c <MODE_Set>:

void MODE_Set(SX1278_t * module, uint8_t mode){
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af02      	add	r7, sp, #8
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]
	  switch(mode){
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <MODE_Set+0x18>
 800206e:	2b01      	cmp	r3, #1
 8002070:	d00b      	beq.n	800208a <MODE_Set+0x2e>
		  case 1:	// switch to FSK
			  SX1278_FSK_Config(module);
		  break;

		  default: // lets ignore that one
		  break;
 8002072:	e00e      	b.n	8002092 <MODE_Set+0x36>
			  SX1278_begin(module, SX1278_433MHZ, MIN_POWER, SX1278_LORA_SF_8, // air time ~ 495ms
 8002074:	2308      	movs	r3, #8
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2303      	movs	r3, #3
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	2302      	movs	r3, #2
 800207e:	2203      	movs	r2, #3
 8002080:	2100      	movs	r1, #0
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe feec 	bl	8000e60 <SX1278_begin>
		  break;
 8002088:	e003      	b.n	8002092 <MODE_Set+0x36>
			  SX1278_FSK_Config(module);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7fe fd02 	bl	8000a94 <SX1278_FSK_Config>
		  break;
 8002090:	bf00      	nop
	  }
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d102      	bne.n	80020b4 <HAL_TIM_PeriodElapsedCallback+0x18>
		u_sec_delay = 1;
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM2){
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020bc:	d10f      	bne.n	80020de <HAL_TIM_PeriodElapsedCallback+0x42>
		uint8_t sec_gps = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
		sec_gps++;
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	3301      	adds	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
		if((sec_gps >= 3) == 0){
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d807      	bhi.n	80020de <HAL_TIM_PeriodElapsedCallback+0x42>
			do_send_tm = 1;		// should send TM data
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
			sec_gps = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]
			HAL_TIM_Base_Stop_IT(&htim2);
 80020d8:	4817      	ldr	r0, [pc, #92]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80020da:	f002 fc87 	bl	80049ec <HAL_TIM_Base_Stop_IT>
		}
	}
	if(htim->Instance == TIM4){
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a16      	ldr	r2, [pc, #88]	; (800213c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d11d      	bne.n	8002124 <HAL_TIM_PeriodElapsedCallback+0x88>
		uint8_t sec_lora_rec = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	73bb      	strb	r3, [r7, #14]
		if(sec_lora_rec == 0)
 80020ec:	7bbb      	ldrb	r3, [r7, #14]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <HAL_TIM_PeriodElapsedCallback+0x62>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80020f2:	2201      	movs	r2, #1
 80020f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020f8:	4811      	ldr	r0, [pc, #68]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80020fa:	f001 fadf 	bl	80036bc <HAL_GPIO_WritePin>
		if(sec_lora_rec++ >= 2){
 80020fe:	7bbb      	ldrb	r3, [r7, #14]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	73ba      	strb	r2, [r7, #14]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d90d      	bls.n	8002124 <HAL_TIM_PeriodElapsedCallback+0x88>
			sec_lora_rec = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	73bb      	strb	r3, [r7, #14]
			HAL_TIM_Base_Stop_IT(&htim4);
 800210c:	480d      	ldr	r0, [pc, #52]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800210e:	f002 fc6d 	bl	80049ec <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim2);
 8002112:	4809      	ldr	r0, [pc, #36]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002114:	f002 fc08 	bl	8004928 <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800211e:	4808      	ldr	r0, [pc, #32]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002120:	f001 facc 	bl	80036bc <HAL_GPIO_WritePin>
		}
	}
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40000400 	.word	0x40000400
 8002130:	200000f4 	.word	0x200000f4
 8002134:	200000f8 	.word	0x200000f8
 8002138:	20000468 	.word	0x20000468
 800213c:	40000800 	.word	0x40000800
 8002140:	40020400 	.word	0x40020400
 8002144:	200001c8 	.word	0x200001c8

08002148 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin){
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
	loraModuleIrq = 1;
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	200000f2 	.word	0x200000f2

08002168 <RTTY_Send>:

void RTTY_Send(SX1278_t * module, uint8_t *buf, uint8_t len){
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	4613      	mov	r3, r2
 8002174:	71fb      	strb	r3, [r7, #7]
	uint16_t baudTimeout = 20;
 8002176:	2314      	movs	r3, #20
 8002178:	82bb      	strh	r3, [r7, #20]
	uint8_t i;
//	uint8_t curMode = 3; // 0 - letters, 1 - numbers, 2 - SPACE/NULL/CR
//	uint8_t mode = 0;
	uint8_t curChar = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	74fb      	strb	r3, [r7, #19]

	SX1278_RTTY_Config(module);
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7fe fbf0 	bl	8000964 <SX1278_RTTY_Config>
//	RTTY_SendSingle(module, LF, baudTimeout);
//	SX1278_RTTY_WriteHigh(module);
//	SX1278_RTTY_WriteHigh(module); // start bits
//	RTTY_SendSingle(module, LF, baudTimeout);

	SX1278_RTTY_WriteHigh(module);
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f7fe fc5c 	bl	8000a42 <SX1278_RTTY_WriteHigh>
	HAL_Delay(baudTimeout);
 800218a:	8abb      	ldrh	r3, [r7, #20]
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fc2b 	bl	80029e8 <HAL_Delay>

	for(i = 0; i < len; i++){
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]
 8002196:	e00e      	b.n	80021b6 <RTTY_Send+0x4e>

		curChar = buf[i];
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	4413      	add	r3, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	74fb      	strb	r3, [r7, #19]
//		}

//		if(i == 26){
//			RTTY_SendSingle(module, NMBR, baudTimeout); /////////////What is this?
//		}
		RTTY_SendSingle(module, curChar, baudTimeout);
 80021a2:	8abb      	ldrh	r3, [r7, #20]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	7cfb      	ldrb	r3, [r7, #19]
 80021a8:	4619      	mov	r1, r3
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f812 	bl	80021d4 <RTTY_SendSingle>
	for(i = 0; i < len; i++){
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	3301      	adds	r3, #1
 80021b4:	75fb      	strb	r3, [r7, #23]
 80021b6:	7dfa      	ldrb	r2, [r7, #23]
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d3ec      	bcc.n	8002198 <RTTY_Send+0x30>
	}

	SX1278_RTTY_Stop(module);
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7fe fbfc 	bl	80009bc <SX1278_RTTY_Stop>
	HAL_Delay(baudTimeout);
 80021c4:	8abb      	ldrh	r3, [r7, #20]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fc0e 	bl	80029e8 <HAL_Delay>

}
 80021cc:	bf00      	nop
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <RTTY_SendSingle>:

void RTTY_SendSingle(SX1278_t * module, uint8_t buf, uint8_t timeout){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
 80021e0:	4613      	mov	r3, r2
 80021e2:	70bb      	strb	r3, [r7, #2]
	SX1278_RTTY_WriteLow(module); //start bit
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7fe fc04 	bl	80009f2 <SX1278_RTTY_WriteLow>
	HAL_Delay(timeout);
 80021ea:	78bb      	ldrb	r3, [r7, #2]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fbfb 	bl	80029e8 <HAL_Delay>
	for(uint8_t j = 0; j < 8; j++){
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	e015      	b.n	8002224 <RTTY_SendSingle+0x50>
		if(bit_set(buf, j)){
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	fa42 f303 	asr.w	r3, r2, r3
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <RTTY_SendSingle+0x3c>
			SX1278_RTTY_WriteHigh(module);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7fe fc1a 	bl	8000a42 <SX1278_RTTY_WriteHigh>
 800220e:	e002      	b.n	8002216 <RTTY_SendSingle+0x42>
		}else{
			SX1278_RTTY_WriteLow(module);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7fe fbee 	bl	80009f2 <SX1278_RTTY_WriteLow>
		}
		HAL_Delay(timeout);
 8002216:	78bb      	ldrb	r3, [r7, #2]
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fbe5 	bl	80029e8 <HAL_Delay>
	for(uint8_t j = 0; j < 8; j++){
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	3301      	adds	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b07      	cmp	r3, #7
 8002228:	d9e6      	bls.n	80021f8 <RTTY_SendSingle+0x24>
	}
	SX1278_RTTY_WriteHigh(module); // stop bit
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fc09 	bl	8000a42 <SX1278_RTTY_WriteHigh>
	HAL_Delay(33);
 8002230:	2021      	movs	r0, #33	; 0x21
 8002232:	f000 fbd9 	bl	80029e8 <HAL_Delay>
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <get_check_sum>:
//
//	*buf = temp;
//	return ret;
//}

uint8_t get_check_sum(char *string){
 800223e:	b590      	push	{r4, r7, lr}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
	uint8_t XOR = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i < strlen(string) ; i++) {
 800224a:	2302      	movs	r3, #2
 800224c:	73bb      	strb	r3, [r7, #14]
 800224e:	e009      	b.n	8002264 <get_check_sum+0x26>
		XOR = XOR ^ string[i];
 8002250:	7bbb      	ldrb	r3, [r7, #14]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	4053      	eors	r3, r2
 800225c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i < strlen(string) ; i++) {
 800225e:	7bbb      	ldrb	r3, [r7, #14]
 8002260:	3301      	adds	r3, #1
 8002262:	73bb      	strb	r3, [r7, #14]
 8002264:	7bbc      	ldrb	r4, [r7, #14]
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fd ffc4 	bl	80001f4 <strlen>
 800226c:	4603      	mov	r3, r0
 800226e:	429c      	cmp	r4, r3
 8002270:	d3ee      	bcc.n	8002250 <get_check_sum+0x12>
	}
	return XOR;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bd90      	pop	{r4, r7, pc}

0800227c <make_string>:

void make_string(char *s, uint8_t size){
 800227c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227e:	b097      	sub	sp, #92	; 0x5c
 8002280:	af06      	add	r7, sp, #24
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	70fb      	strb	r3, [r7, #3]
//	memset(lon, 0, sizeof(lon));
//	memset(hei, 0, sizeof(hei));
//	memset(spe, 0, sizeof(spe));

	//Get all params from satalites data
	GPS_GetTime(time);
 8002288:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff f967 	bl	8001560 <GPS_GetTime>
	GPS_GetLat(lat);
 8002292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f8d8 	bl	800144c <GPS_GetLat>
	GPS_GetLon(lon);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff f8f5 	bl	8001490 <GPS_GetLon>
	GPS_GetHei(hei);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff f936 	bl	800151c <GPS_GetHei>
	GPS_GetSpe(spe);
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f90f 	bl	80014d8 <GPS_GetSpe>

	snprintf(s, size, "\r\n$$$$$$IRBE5,%li,%s,%s,%s,%s,%s,%s", ++num, time, lat, lon, hei, spe, &(UART6_DataBuf[0]));
 80022ba:	78f9      	ldrb	r1, [r7, #3]
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <make_string+0xb8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <make_string+0xb8>)
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <make_string+0xb8>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <make_string+0xbc>)
 80022cc:	9305      	str	r3, [sp, #20]
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	9304      	str	r3, [sp, #16]
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	9303      	str	r3, [sp, #12]
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	9302      	str	r3, [sp, #8]
 80022e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	4a13      	ldr	r2, [pc, #76]	; (800233c <make_string+0xc0>)
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f003 fe7f 	bl	8005ff4 <sniprintf>
	uint8_t l = strlen(s);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fd ff7c 	bl	80001f4 <strlen>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(snprintf(s + l, size - l, "*%02x\r\n", get_check_sum(s))  > size - 4 - 1){
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	1f1c      	subs	r4, r3, #4
 8002306:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	18d5      	adds	r5, r2, r3
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	461e      	mov	r6, r3
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff90 	bl	800223e <get_check_sum>
 800231e:	4603      	mov	r3, r0
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <make_string+0xc4>)
 8002322:	4631      	mov	r1, r6
 8002324:	4628      	mov	r0, r5
 8002326:	f003 fe65 	bl	8005ff4 <sniprintf>
 800232a:	4603      	mov	r3, r0
 800232c:	429c      	cmp	r4, r3
		//buffer overflow
		return;
	}
}
 800232e:	3744      	adds	r7, #68	; 0x44
 8002330:	46bd      	mov	sp, r7
 8002332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002334:	200000e0 	.word	0x200000e0
 8002338:	20000100 	.word	0x20000100
 800233c:	080068b4 	.word	0x080068b4
 8002340:	080068d8 	.word	0x080068d8

08002344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800234c:	e7fe      	b.n	800234c <Error_Handler+0x8>
	...

08002350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_MspInit+0x4c>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a0f      	ldr	r2, [pc, #60]	; (800239c <HAL_MspInit+0x4c>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <HAL_MspInit+0x4c>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_MspInit+0x4c>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_MspInit+0x4c>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_MspInit+0x4c>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800

080023a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <HAL_CRC_MspInit+0x3c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10d      	bne.n	80023ce <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_CRC_MspInit+0x40>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_CRC_MspInit+0x40>)
 80023bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <HAL_CRC_MspInit+0x40>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40023000 	.word	0x40023000
 80023e0:	40023800 	.word	0x40023800

080023e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_SPI_MspInit+0x84>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d12b      	bne.n	800245e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_SPI_MspInit+0x88>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a17      	ldr	r2, [pc, #92]	; (800246c <HAL_SPI_MspInit+0x88>)
 8002410:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <HAL_SPI_MspInit+0x88>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_SPI_MspInit+0x88>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_SPI_MspInit+0x88>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_SPI_MspInit+0x88>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 800243e:	23e0      	movs	r3, #224	; 0xe0
 8002440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244a:	2303      	movs	r3, #3
 800244c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800244e:	2305      	movs	r3, #5
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4619      	mov	r1, r3
 8002458:	4805      	ldr	r0, [pc, #20]	; (8002470 <HAL_SPI_MspInit+0x8c>)
 800245a:	f000 ff93 	bl	8003384 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800245e:	bf00      	nop
 8002460:	3728      	adds	r7, #40	; 0x28
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40013000 	.word	0x40013000
 800246c:	40023800 	.word	0x40023800
 8002470:	40020000 	.word	0x40020000

08002474 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002484:	d116      	bne.n	80024b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_TIM_Base_MspInit+0xb8>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	4a27      	ldr	r2, [pc, #156]	; (800252c <HAL_TIM_Base_MspInit+0xb8>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6413      	str	r3, [r2, #64]	; 0x40
 8002496:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_TIM_Base_MspInit+0xb8>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	201c      	movs	r0, #28
 80024a8:	f000 fb9d 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024ac:	201c      	movs	r0, #28
 80024ae:	f000 fbb6 	bl	8002c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024b2:	e036      	b.n	8002522 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <HAL_TIM_Base_MspInit+0xbc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d116      	bne.n	80024ec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HAL_TIM_Base_MspInit+0xb8>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a19      	ldr	r2, [pc, #100]	; (800252c <HAL_TIM_Base_MspInit+0xb8>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <HAL_TIM_Base_MspInit+0xb8>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	201d      	movs	r0, #29
 80024e0:	f000 fb81 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024e4:	201d      	movs	r0, #29
 80024e6:	f000 fb9a 	bl	8002c1e <HAL_NVIC_EnableIRQ>
}
 80024ea:	e01a      	b.n	8002522 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a10      	ldr	r2, [pc, #64]	; (8002534 <HAL_TIM_Base_MspInit+0xc0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d115      	bne.n	8002522 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <HAL_TIM_Base_MspInit+0xb8>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a0b      	ldr	r2, [pc, #44]	; (800252c <HAL_TIM_Base_MspInit+0xb8>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_TIM_Base_MspInit+0xb8>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	201e      	movs	r0, #30
 8002518:	f000 fb65 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800251c:	201e      	movs	r0, #30
 800251e:	f000 fb7e 	bl	8002c1e <HAL_NVIC_EnableIRQ>
}
 8002522:	bf00      	nop
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	40000400 	.word	0x40000400
 8002534:	40000800 	.word	0x40000800

08002538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08e      	sub	sp, #56	; 0x38
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a6f      	ldr	r2, [pc, #444]	; (8002714 <HAL_UART_MspInit+0x1dc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d164      	bne.n	8002624 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	4b6e      	ldr	r3, [pc, #440]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	4a6d      	ldr	r2, [pc, #436]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 8002564:	f043 0310 	orr.w	r3, r3, #16
 8002568:	6453      	str	r3, [r2, #68]	; 0x44
 800256a:	4b6b      	ldr	r3, [pc, #428]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	623b      	str	r3, [r7, #32]
 8002574:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	4b67      	ldr	r3, [pc, #412]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a66      	ldr	r2, [pc, #408]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b64      	ldr	r3, [pc, #400]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002592:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025a4:	2307      	movs	r3, #7
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ac:	4619      	mov	r1, r3
 80025ae:	485b      	ldr	r0, [pc, #364]	; (800271c <HAL_UART_MspInit+0x1e4>)
 80025b0:	f000 fee8 	bl	8003384 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80025b4:	4b5a      	ldr	r3, [pc, #360]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 80025b6:	4a5b      	ldr	r2, [pc, #364]	; (8002724 <HAL_UART_MspInit+0x1ec>)
 80025b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80025ba:	4b59      	ldr	r3, [pc, #356]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 80025bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025c2:	4b57      	ldr	r3, [pc, #348]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025c8:	4b55      	ldr	r3, [pc, #340]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025ce:	4b54      	ldr	r3, [pc, #336]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 80025d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025d6:	4b52      	ldr	r3, [pc, #328]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 80025d8:	2200      	movs	r2, #0
 80025da:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025dc:	4b50      	ldr	r3, [pc, #320]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 80025de:	2200      	movs	r2, #0
 80025e0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80025e2:	4b4f      	ldr	r3, [pc, #316]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 80025e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025ea:	4b4d      	ldr	r3, [pc, #308]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025f0:	4b4b      	ldr	r3, [pc, #300]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025f6:	484a      	ldr	r0, [pc, #296]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 80025f8:	f000 fb48 	bl	8002c8c <HAL_DMA_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002602:	f7ff fe9f 	bl	8002344 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a45      	ldr	r2, [pc, #276]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 800260a:	639a      	str	r2, [r3, #56]	; 0x38
 800260c:	4a44      	ldr	r2, [pc, #272]	; (8002720 <HAL_UART_MspInit+0x1e8>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2100      	movs	r1, #0
 8002616:	2025      	movs	r0, #37	; 0x25
 8002618:	f000 fae5 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800261c:	2025      	movs	r0, #37	; 0x25
 800261e:	f000 fafe 	bl	8002c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002622:	e073      	b.n	800270c <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART2)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a3f      	ldr	r2, [pc, #252]	; (8002728 <HAL_UART_MspInit+0x1f0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d134      	bne.n	8002698 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	4b39      	ldr	r3, [pc, #228]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4a38      	ldr	r2, [pc, #224]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 8002638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800263c:	6413      	str	r3, [r2, #64]	; 0x40
 800263e:	4b36      	ldr	r3, [pc, #216]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	4b32      	ldr	r3, [pc, #200]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a31      	ldr	r2, [pc, #196]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GSM_TX_Pin|GSM_RX_Pin;
 8002666:	230c      	movs	r3, #12
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002676:	2307      	movs	r3, #7
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800267e:	4619      	mov	r1, r3
 8002680:	4826      	ldr	r0, [pc, #152]	; (800271c <HAL_UART_MspInit+0x1e4>)
 8002682:	f000 fe7f 	bl	8003384 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	2026      	movs	r0, #38	; 0x26
 800268c:	f000 faab 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002690:	2026      	movs	r0, #38	; 0x26
 8002692:	f000 fac4 	bl	8002c1e <HAL_NVIC_EnableIRQ>
}
 8002696:	e039      	b.n	800270c <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART6)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a23      	ldr	r2, [pc, #140]	; (800272c <HAL_UART_MspInit+0x1f4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d134      	bne.n	800270c <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a1b      	ldr	r2, [pc, #108]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 80026ac:	f043 0320 	orr.w	r3, r3, #32
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a14      	ldr	r2, [pc, #80]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_UART_MspInit+0x1e0>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80026da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80026ec:	2308      	movs	r3, #8
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f4:	4619      	mov	r1, r3
 80026f6:	4809      	ldr	r0, [pc, #36]	; (800271c <HAL_UART_MspInit+0x1e4>)
 80026f8:	f000 fe44 	bl	8003384 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	2047      	movs	r0, #71	; 0x47
 8002702:	f000 fa70 	bl	8002be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002706:	2047      	movs	r0, #71	; 0x47
 8002708:	f000 fa89 	bl	8002c1e <HAL_NVIC_EnableIRQ>
}
 800270c:	bf00      	nop
 800270e:	3738      	adds	r7, #56	; 0x38
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40011000 	.word	0x40011000
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000
 8002720:	20000260 	.word	0x20000260
 8002724:	40026440 	.word	0x40026440
 8002728:	40004400 	.word	0x40004400
 800272c:	40011400 	.word	0x40011400

08002730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <NMI_Handler+0x4>

08002736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <HardFault_Handler+0x4>

0800273c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <MemManage_Handler+0x4>

08002742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <BusFault_Handler+0x4>

08002748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <UsageFault_Handler+0x4>

0800274e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800277c:	f000 f914 	bl	80029a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}

08002784 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_SCK_Pin);
 8002788:	2020      	movs	r0, #32
 800278a:	f000 ffb1 	bl	80036f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <TIM2_IRQHandler+0x10>)
 800279a:	f002 f956 	bl	8004a4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000468 	.word	0x20000468

080027a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <TIM3_IRQHandler+0x10>)
 80027ae:	f002 f94c 	bl	8004a4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000218 	.word	0x20000218

080027bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <TIM4_IRQHandler+0x10>)
 80027c2:	f002 f942 	bl	8004a4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200001c8 	.word	0x200001c8

080027d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027d4:	4802      	ldr	r0, [pc, #8]	; (80027e0 <USART1_IRQHandler+0x10>)
 80027d6:	f002 fd8d 	bl	80052f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200002c0 	.word	0x200002c0

080027e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027e8:	4802      	ldr	r0, [pc, #8]	; (80027f4 <USART2_IRQHandler+0x10>)
 80027ea:	f002 fd83 	bl	80052f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200004b0 	.word	0x200004b0

080027f8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <DMA2_Stream2_IRQHandler+0x10>)
 80027fe:	f000 fb85 	bl	8002f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000260 	.word	0x20000260

0800280c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <USART6_IRQHandler+0x10>)
 8002812:	f002 fd6f 	bl	80052f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000368 	.word	0x20000368

08002820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <_sbrk+0x5c>)
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <_sbrk+0x60>)
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <_sbrk+0x64>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <_sbrk+0x64>)
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <_sbrk+0x68>)
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <_sbrk+0x64>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	429a      	cmp	r2, r3
 800284e:	d207      	bcs.n	8002860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002850:	f003 fb90 	bl	8005f74 <__errno>
 8002854:	4603      	mov	r3, r0
 8002856:	220c      	movs	r2, #12
 8002858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	e009      	b.n	8002874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <_sbrk+0x64>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	4a05      	ldr	r2, [pc, #20]	; (8002884 <_sbrk+0x64>)
 8002870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002872:	68fb      	ldr	r3, [r7, #12]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20018000 	.word	0x20018000
 8002880:	00000400 	.word	0x00000400
 8002884:	20000168 	.word	0x20000168
 8002888:	20000630 	.word	0x20000630

0800288c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <SystemInit+0x20>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	4a05      	ldr	r2, [pc, #20]	; (80028ac <SystemInit+0x20>)
 8002898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800289c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80028b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028b4:	480d      	ldr	r0, [pc, #52]	; (80028ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028b6:	490e      	ldr	r1, [pc, #56]	; (80028f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028b8:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028bc:	e002      	b.n	80028c4 <LoopCopyDataInit>

080028be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c2:	3304      	adds	r3, #4

080028c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c8:	d3f9      	bcc.n	80028be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ca:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028cc:	4c0b      	ldr	r4, [pc, #44]	; (80028fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80028ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d0:	e001      	b.n	80028d6 <LoopFillZerobss>

080028d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d4:	3204      	adds	r2, #4

080028d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d8:	d3fb      	bcc.n	80028d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028da:	f7ff ffd7 	bl	800288c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028de:	f003 fb4f 	bl	8005f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028e2:	f7fe fead 	bl	8001640 <main>
  bx  lr    
 80028e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80028f4:	0800695c 	.word	0x0800695c
  ldr r2, =_sbss
 80028f8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80028fc:	20000630 	.word	0x20000630

08002900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002900:	e7fe      	b.n	8002900 <ADC_IRQHandler>
	...

08002904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002908:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <HAL_Init+0x40>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <HAL_Init+0x40>)
 800290e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_Init+0x40>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <HAL_Init+0x40>)
 800291a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <HAL_Init+0x40>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a07      	ldr	r2, [pc, #28]	; (8002944 <HAL_Init+0x40>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292c:	2003      	movs	r0, #3
 800292e:	f000 f94f 	bl	8002bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002932:	200f      	movs	r0, #15
 8002934:	f000 f808 	bl	8002948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002938:	f7ff fd0a 	bl	8002350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023c00 	.word	0x40023c00

08002948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_InitTick+0x54>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_InitTick+0x58>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	4619      	mov	r1, r3
 800295a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	4618      	mov	r0, r3
 8002968:	f000 f967 	bl	8002c3a <HAL_SYSTICK_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e00e      	b.n	8002994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b0f      	cmp	r3, #15
 800297a:	d80a      	bhi.n	8002992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800297c:	2200      	movs	r2, #0
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	f04f 30ff 	mov.w	r0, #4294967295
 8002984:	f000 f92f 	bl	8002be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002988:	4a06      	ldr	r2, [pc, #24]	; (80029a4 <HAL_InitTick+0x5c>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000020 	.word	0x20000020
 80029a0:	20000028 	.word	0x20000028
 80029a4:	20000024 	.word	0x20000024

080029a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_IncTick+0x20>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_IncTick+0x24>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <HAL_IncTick+0x24>)
 80029ba:	6013      	str	r3, [r2, #0]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000028 	.word	0x20000028
 80029cc:	2000061c 	.word	0x2000061c

080029d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return uwTick;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_GetTick+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	2000061c 	.word	0x2000061c

080029e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff ffee 	bl	80029d0 <HAL_GetTick>
 80029f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d005      	beq.n	8002a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_Delay+0x44>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a0e:	bf00      	nop
 8002a10:	f7ff ffde 	bl	80029d0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d8f7      	bhi.n	8002a10 <HAL_Delay+0x28>
  {
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000028 	.word	0x20000028

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <__NVIC_EnableIRQ+0x38>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b9c:	d301      	bcc.n	8002ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e00f      	b.n	8002bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <SysTick_Config+0x40>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002baa:	210f      	movs	r1, #15
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	f7ff ff8e 	bl	8002ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <SysTick_Config+0x40>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bba:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <SysTick_Config+0x40>)
 8002bbc:	2207      	movs	r2, #7
 8002bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	e000e010 	.word	0xe000e010

08002bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ff29 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf8:	f7ff ff3e 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	6978      	ldr	r0, [r7, #20]
 8002c04:	f7ff ff8e 	bl	8002b24 <NVIC_EncodePriority>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff5d 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002c16:	bf00      	nop
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff31 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ffa2 	bl	8002b8c <SysTick_Config>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e00e      	b.n	8002c82 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	795b      	ldrb	r3, [r3, #5]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d105      	bne.n	8002c7a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff fb93 	bl	80023a0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7ff fe9a 	bl	80029d0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e099      	b.n	8002ddc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc8:	e00f      	b.n	8002cea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cca:	f7ff fe81 	bl	80029d0 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b05      	cmp	r3, #5
 8002cd6:	d908      	bls.n	8002cea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e078      	b.n	8002ddc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e8      	bne.n	8002cca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4b38      	ldr	r3, [pc, #224]	; (8002de4 <HAL_DMA_Init+0x158>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d107      	bne.n	8002d54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 0307 	bic.w	r3, r3, #7
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d117      	bne.n	8002dae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fa7b 	bl	800328c <DMA_CheckFifoParam>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2240      	movs	r2, #64	; 0x40
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002daa:	2301      	movs	r3, #1
 8002dac:	e016      	b.n	8002ddc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fa32 	bl	8003220 <DMA_CalcBaseAndBitshift>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	223f      	movs	r2, #63	; 0x3f
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	f010803f 	.word	0xf010803f

08002de8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002df6:	f7ff fdeb 	bl	80029d0 <HAL_GetTick>
 8002dfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d008      	beq.n	8002e1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2280      	movs	r2, #128	; 0x80
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e052      	b.n	8002ec0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0216 	bic.w	r2, r2, #22
 8002e28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <HAL_DMA_Abort+0x62>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0208 	bic.w	r2, r2, #8
 8002e58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6a:	e013      	b.n	8002e94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6c:	f7ff fdb0 	bl	80029d0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d90c      	bls.n	8002e94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2203      	movs	r2, #3
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e015      	b.n	8002ec0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e4      	bne.n	8002e6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	223f      	movs	r2, #63	; 0x3f
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d004      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00c      	b.n	8002f00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2205      	movs	r2, #5
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f18:	4b92      	ldr	r3, [pc, #584]	; (8003164 <HAL_DMA_IRQHandler+0x258>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a92      	ldr	r2, [pc, #584]	; (8003168 <HAL_DMA_IRQHandler+0x25c>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	0a9b      	lsrs	r3, r3, #10
 8002f24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	2208      	movs	r2, #8
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01a      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0204 	bic.w	r2, r2, #4
 8002f5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	2208      	movs	r2, #8
 8002f66:	409a      	lsls	r2, r3
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f043 0201 	orr.w	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d012      	beq.n	8002fae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa6:	f043 0202 	orr.w	r2, r3, #2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d012      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	f043 0204 	orr.w	r2, r3, #4
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe8:	2210      	movs	r2, #16
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d043      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d03c      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	2210      	movs	r2, #16
 8003008:	409a      	lsls	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d018      	beq.n	800304e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d108      	bne.n	800303c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d024      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
 800303a:	e01f      	b.n	800307c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e016      	b.n	800307c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0208 	bic.w	r2, r2, #8
 800306a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	2220      	movs	r2, #32
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 808e 	beq.w	80031aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8086 	beq.w	80031aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a2:	2220      	movs	r2, #32
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	d136      	bne.n	8003124 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0216 	bic.w	r2, r2, #22
 80030c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <HAL_DMA_IRQHandler+0x1da>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0208 	bic.w	r2, r2, #8
 80030f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	223f      	movs	r2, #63	; 0x3f
 80030fc:	409a      	lsls	r2, r3
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003116:	2b00      	cmp	r3, #0
 8003118:	d07d      	beq.n	8003216 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4798      	blx	r3
        }
        return;
 8003122:	e078      	b.n	8003216 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01c      	beq.n	800316c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	2b00      	cmp	r3, #0
 8003146:	d030      	beq.n	80031aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
 8003150:	e02b      	b.n	80031aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d027      	beq.n	80031aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4798      	blx	r3
 8003162:	e022      	b.n	80031aa <HAL_DMA_IRQHandler+0x29e>
 8003164:	20000020 	.word	0x20000020
 8003168:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0210 	bic.w	r2, r2, #16
 8003188:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d032      	beq.n	8003218 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d022      	beq.n	8003204 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2205      	movs	r2, #5
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	3301      	adds	r3, #1
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d307      	bcc.n	80031f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f2      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x2ca>
 80031f0:	e000      	b.n	80031f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
 8003214:	e000      	b.n	8003218 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003216:	bf00      	nop
    }
  }
}
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop

08003220 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	3b10      	subs	r3, #16
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <DMA_CalcBaseAndBitshift+0x64>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800323a:	4a13      	ldr	r2, [pc, #76]	; (8003288 <DMA_CalcBaseAndBitshift+0x68>)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d909      	bls.n	8003262 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	659a      	str	r2, [r3, #88]	; 0x58
 8003260:	e007      	b.n	8003272 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	aaaaaaab 	.word	0xaaaaaaab
 8003288:	08006910 	.word	0x08006910

0800328c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11f      	bne.n	80032e6 <DMA_CheckFifoParam+0x5a>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d856      	bhi.n	800335a <DMA_CheckFifoParam+0xce>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <DMA_CheckFifoParam+0x28>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032d7 	.word	0x080032d7
 80032bc:	080032c5 	.word	0x080032c5
 80032c0:	0800335b 	.word	0x0800335b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d046      	beq.n	800335e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d4:	e043      	b.n	800335e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032de:	d140      	bne.n	8003362 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e4:	e03d      	b.n	8003362 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ee:	d121      	bne.n	8003334 <DMA_CheckFifoParam+0xa8>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d837      	bhi.n	8003366 <DMA_CheckFifoParam+0xda>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <DMA_CheckFifoParam+0x70>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	08003313 	.word	0x08003313
 8003304:	0800330d 	.word	0x0800330d
 8003308:	08003325 	.word	0x08003325
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      break;
 8003310:	e030      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d025      	beq.n	800336a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003322:	e022      	b.n	800336a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800332c:	d11f      	bne.n	800336e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003332:	e01c      	b.n	800336e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d903      	bls.n	8003342 <DMA_CheckFifoParam+0xb6>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d003      	beq.n	8003348 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003340:	e018      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
      break;
 8003346:	e015      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00e      	beq.n	8003372 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e00b      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 800335a:	bf00      	nop
 800335c:	e00a      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 800335e:	bf00      	nop
 8003360:	e008      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 8003362:	bf00      	nop
 8003364:	e006      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 8003366:	bf00      	nop
 8003368:	e004      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e002      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;   
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
    }
  } 
  
  return status; 
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop

08003384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	e159      	b.n	8003654 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a0:	2201      	movs	r2, #1
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	f040 8148 	bne.w	800364e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d005      	beq.n	80033d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d130      	bne.n	8003438 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	2203      	movs	r2, #3
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800340c:	2201      	movs	r2, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 0201 	and.w	r2, r3, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b03      	cmp	r3, #3
 8003442:	d017      	beq.n	8003474 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d123      	bne.n	80034c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	08da      	lsrs	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3208      	adds	r2, #8
 8003488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	220f      	movs	r2, #15
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	08da      	lsrs	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3208      	adds	r2, #8
 80034c2:	69b9      	ldr	r1, [r7, #24]
 80034c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2203      	movs	r2, #3
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0203 	and.w	r2, r3, #3
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80a2 	beq.w	800364e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	4b57      	ldr	r3, [pc, #348]	; (800366c <HAL_GPIO_Init+0x2e8>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	4a56      	ldr	r2, [pc, #344]	; (800366c <HAL_GPIO_Init+0x2e8>)
 8003514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003518:	6453      	str	r3, [r2, #68]	; 0x44
 800351a:	4b54      	ldr	r3, [pc, #336]	; (800366c <HAL_GPIO_Init+0x2e8>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003526:	4a52      	ldr	r2, [pc, #328]	; (8003670 <HAL_GPIO_Init+0x2ec>)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	3302      	adds	r3, #2
 800352e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	220f      	movs	r2, #15
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4013      	ands	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a49      	ldr	r2, [pc, #292]	; (8003674 <HAL_GPIO_Init+0x2f0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d019      	beq.n	8003586 <HAL_GPIO_Init+0x202>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a48      	ldr	r2, [pc, #288]	; (8003678 <HAL_GPIO_Init+0x2f4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_GPIO_Init+0x1fe>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a47      	ldr	r2, [pc, #284]	; (800367c <HAL_GPIO_Init+0x2f8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00d      	beq.n	800357e <HAL_GPIO_Init+0x1fa>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a46      	ldr	r2, [pc, #280]	; (8003680 <HAL_GPIO_Init+0x2fc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <HAL_GPIO_Init+0x1f6>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a45      	ldr	r2, [pc, #276]	; (8003684 <HAL_GPIO_Init+0x300>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_GPIO_Init+0x1f2>
 8003572:	2304      	movs	r3, #4
 8003574:	e008      	b.n	8003588 <HAL_GPIO_Init+0x204>
 8003576:	2307      	movs	r3, #7
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x204>
 800357a:	2303      	movs	r3, #3
 800357c:	e004      	b.n	8003588 <HAL_GPIO_Init+0x204>
 800357e:	2302      	movs	r3, #2
 8003580:	e002      	b.n	8003588 <HAL_GPIO_Init+0x204>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_GPIO_Init+0x204>
 8003586:	2300      	movs	r3, #0
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	f002 0203 	and.w	r2, r2, #3
 800358e:	0092      	lsls	r2, r2, #2
 8003590:	4093      	lsls	r3, r2
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003598:	4935      	ldr	r1, [pc, #212]	; (8003670 <HAL_GPIO_Init+0x2ec>)
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	3302      	adds	r3, #2
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035a6:	4b38      	ldr	r3, [pc, #224]	; (8003688 <HAL_GPIO_Init+0x304>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ca:	4a2f      	ldr	r2, [pc, #188]	; (8003688 <HAL_GPIO_Init+0x304>)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035d0:	4b2d      	ldr	r3, [pc, #180]	; (8003688 <HAL_GPIO_Init+0x304>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035f4:	4a24      	ldr	r2, [pc, #144]	; (8003688 <HAL_GPIO_Init+0x304>)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <HAL_GPIO_Init+0x304>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	43db      	mvns	r3, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4013      	ands	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800361e:	4a1a      	ldr	r2, [pc, #104]	; (8003688 <HAL_GPIO_Init+0x304>)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003624:	4b18      	ldr	r3, [pc, #96]	; (8003688 <HAL_GPIO_Init+0x304>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003648:	4a0f      	ldr	r2, [pc, #60]	; (8003688 <HAL_GPIO_Init+0x304>)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3301      	adds	r3, #1
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b0f      	cmp	r3, #15
 8003658:	f67f aea2 	bls.w	80033a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3724      	adds	r7, #36	; 0x24
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	40013800 	.word	0x40013800
 8003674:	40020000 	.word	0x40020000
 8003678:	40020400 	.word	0x40020400
 800367c:	40020800 	.word	0x40020800
 8003680:	40020c00 	.word	0x40020c00
 8003684:	40021000 	.word	0x40021000
 8003688:	40013c00 	.word	0x40013c00

0800368c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
 80036a8:	e001      	b.n	80036ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
 80036c8:	4613      	mov	r3, r2
 80036ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036cc:	787b      	ldrb	r3, [r7, #1]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036d8:	e003      	b.n	80036e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036da:	887b      	ldrh	r3, [r7, #2]
 80036dc:	041a      	lsls	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	619a      	str	r2, [r3, #24]
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	4013      	ands	r3, r2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d006      	beq.n	8003714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fd1a 	bl	8002148 <HAL_GPIO_EXTI_Callback>
  }
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40013c00 	.word	0x40013c00

08003720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e264      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d075      	beq.n	800382a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800373e:	4ba3      	ldr	r3, [pc, #652]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
 8003746:	2b04      	cmp	r3, #4
 8003748:	d00c      	beq.n	8003764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374a:	4ba0      	ldr	r3, [pc, #640]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003752:	2b08      	cmp	r3, #8
 8003754:	d112      	bne.n	800377c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b9d      	ldr	r3, [pc, #628]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003762:	d10b      	bne.n	800377c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	4b99      	ldr	r3, [pc, #612]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05b      	beq.n	8003828 <HAL_RCC_OscConfig+0x108>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d157      	bne.n	8003828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e23f      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x74>
 8003786:	4b91      	ldr	r3, [pc, #580]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a90      	ldr	r2, [pc, #576]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e01d      	b.n	80037d0 <HAL_RCC_OscConfig+0xb0>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x98>
 800379e:	4b8b      	ldr	r3, [pc, #556]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a8a      	ldr	r2, [pc, #552]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b88      	ldr	r3, [pc, #544]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a87      	ldr	r2, [pc, #540]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00b      	b.n	80037d0 <HAL_RCC_OscConfig+0xb0>
 80037b8:	4b84      	ldr	r3, [pc, #528]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a83      	ldr	r2, [pc, #524]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b81      	ldr	r3, [pc, #516]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a80      	ldr	r2, [pc, #512]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7ff f8fa 	bl	80029d0 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e0:	f7ff f8f6 	bl	80029d0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e204      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4b76      	ldr	r3, [pc, #472]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0xc0>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7ff f8e6 	bl	80029d0 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003808:	f7ff f8e2 	bl	80029d0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1f0      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	4b6c      	ldr	r3, [pc, #432]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0xe8>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d063      	beq.n	80038fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003836:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003842:	4b62      	ldr	r3, [pc, #392]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800384a:	2b08      	cmp	r3, #8
 800384c:	d11c      	bne.n	8003888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b5f      	ldr	r3, [pc, #380]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d116      	bne.n	8003888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385a:	4b5c      	ldr	r3, [pc, #368]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_RCC_OscConfig+0x152>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d001      	beq.n	8003872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e1c4      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003872:	4b56      	ldr	r3, [pc, #344]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4952      	ldr	r1, [pc, #328]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003886:	e03a      	b.n	80038fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d020      	beq.n	80038d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003890:	4b4f      	ldr	r3, [pc, #316]	; (80039d0 <HAL_RCC_OscConfig+0x2b0>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003896:	f7ff f89b 	bl	80029d0 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800389e:	f7ff f897 	bl	80029d0 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e1a5      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b0:	4b46      	ldr	r3, [pc, #280]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038bc:	4b43      	ldr	r3, [pc, #268]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4940      	ldr	r1, [pc, #256]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]
 80038d0:	e015      	b.n	80038fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d2:	4b3f      	ldr	r3, [pc, #252]	; (80039d0 <HAL_RCC_OscConfig+0x2b0>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7ff f87a 	bl	80029d0 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e0:	f7ff f876 	bl	80029d0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e184      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f2:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d030      	beq.n	800396c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d016      	beq.n	8003940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003912:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <HAL_RCC_OscConfig+0x2b4>)
 8003914:	2201      	movs	r2, #1
 8003916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7ff f85a 	bl	80029d0 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003920:	f7ff f856 	bl	80029d0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e164      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0f0      	beq.n	8003920 <HAL_RCC_OscConfig+0x200>
 800393e:	e015      	b.n	800396c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003940:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_RCC_OscConfig+0x2b4>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003946:	f7ff f843 	bl	80029d0 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800394e:	f7ff f83f 	bl	80029d0 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e14d      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003960:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80a0 	beq.w	8003aba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397e:	4b13      	ldr	r3, [pc, #76]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10f      	bne.n	80039aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	4a0e      	ldr	r2, [pc, #56]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003998:	6413      	str	r3, [r2, #64]	; 0x40
 800399a:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <HAL_RCC_OscConfig+0x2ac>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_OscConfig+0x2b8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d121      	bne.n	80039fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_RCC_OscConfig+0x2b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <HAL_RCC_OscConfig+0x2b8>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c2:	f7ff f805 	bl	80029d0 <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	e011      	b.n	80039ee <HAL_RCC_OscConfig+0x2ce>
 80039ca:	bf00      	nop
 80039cc:	40023800 	.word	0x40023800
 80039d0:	42470000 	.word	0x42470000
 80039d4:	42470e80 	.word	0x42470e80
 80039d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039dc:	f7fe fff8 	bl	80029d0 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e106      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ee:	4b85      	ldr	r3, [pc, #532]	; (8003c04 <HAL_RCC_OscConfig+0x4e4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d106      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2f0>
 8003a02:	4b81      	ldr	r3, [pc, #516]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	4a80      	ldr	r2, [pc, #512]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0e:	e01c      	b.n	8003a4a <HAL_RCC_OscConfig+0x32a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b05      	cmp	r3, #5
 8003a16:	d10c      	bne.n	8003a32 <HAL_RCC_OscConfig+0x312>
 8003a18:	4b7b      	ldr	r3, [pc, #492]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a7a      	ldr	r2, [pc, #488]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a1e:	f043 0304 	orr.w	r3, r3, #4
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
 8003a24:	4b78      	ldr	r3, [pc, #480]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a77      	ldr	r2, [pc, #476]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a30:	e00b      	b.n	8003a4a <HAL_RCC_OscConfig+0x32a>
 8003a32:	4b75      	ldr	r3, [pc, #468]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4a74      	ldr	r2, [pc, #464]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3e:	4b72      	ldr	r3, [pc, #456]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a71      	ldr	r2, [pc, #452]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a44:	f023 0304 	bic.w	r3, r3, #4
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d015      	beq.n	8003a7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a52:	f7fe ffbd 	bl	80029d0 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fe ffb9 	bl	80029d0 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e0c5      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a70:	4b65      	ldr	r3, [pc, #404]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ee      	beq.n	8003a5a <HAL_RCC_OscConfig+0x33a>
 8003a7c:	e014      	b.n	8003aa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7fe ffa7 	bl	80029d0 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fe ffa3 	bl	80029d0 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0af      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9c:	4b5a      	ldr	r3, [pc, #360]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ee      	bne.n	8003a86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d105      	bne.n	8003aba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aae:	4b56      	ldr	r3, [pc, #344]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	4a55      	ldr	r2, [pc, #340]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 809b 	beq.w	8003bfa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ac4:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d05c      	beq.n	8003b8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d141      	bne.n	8003b5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad8:	4b4c      	ldr	r3, [pc, #304]	; (8003c0c <HAL_RCC_OscConfig+0x4ec>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ade:	f7fe ff77 	bl	80029d0 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fe ff73 	bl	80029d0 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e081      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	019b      	lsls	r3, r3, #6
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	041b      	lsls	r3, r3, #16
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	061b      	lsls	r3, r3, #24
 8003b28:	4937      	ldr	r1, [pc, #220]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b2e:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <HAL_RCC_OscConfig+0x4ec>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fe ff4c 	bl	80029d0 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b3c:	f7fe ff48 	bl	80029d0 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e056      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x41c>
 8003b5a:	e04e      	b.n	8003bfa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <HAL_RCC_OscConfig+0x4ec>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b62:	f7fe ff35 	bl	80029d0 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fe ff31 	bl	80029d0 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e03f      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7c:	4b22      	ldr	r3, [pc, #136]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f0      	bne.n	8003b6a <HAL_RCC_OscConfig+0x44a>
 8003b88:	e037      	b.n	8003bfa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e032      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b96:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <HAL_RCC_OscConfig+0x4e8>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d028      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d121      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d11a      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d111      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	3b01      	subs	r3, #1
 8003be0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d001      	beq.n	8003bfa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40007000 	.word	0x40007000
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	42470060 	.word	0x42470060

08003c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0cc      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c24:	4b68      	ldr	r3, [pc, #416]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d90c      	bls.n	8003c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b65      	ldr	r3, [pc, #404]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b63      	ldr	r3, [pc, #396]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0b8      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c64:	4b59      	ldr	r3, [pc, #356]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a58      	ldr	r2, [pc, #352]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a52      	ldr	r2, [pc, #328]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c88:	4b50      	ldr	r3, [pc, #320]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	494d      	ldr	r1, [pc, #308]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d044      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d119      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e07f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d003      	beq.n	8003cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cce:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e06f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cde:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e067      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cee:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f023 0203 	bic.w	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	4934      	ldr	r1, [pc, #208]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d00:	f7fe fe66 	bl	80029d0 <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d08:	f7fe fe62 	bl	80029d0 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e04f      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 020c 	and.w	r2, r3, #12
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d1eb      	bne.n	8003d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d30:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d20c      	bcs.n	8003d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e032      	b.n	8003dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d64:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4916      	ldr	r1, [pc, #88]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d82:	4b12      	ldr	r3, [pc, #72]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	490e      	ldr	r1, [pc, #56]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d96:	f000 f821 	bl	8003ddc <HAL_RCC_GetSysClockFreq>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	490a      	ldr	r1, [pc, #40]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003da8:	5ccb      	ldrb	r3, [r1, r3]
 8003daa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dae:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe fdc6 	bl	8002948 <HAL_InitTick>

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40023c00 	.word	0x40023c00
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	080068f8 	.word	0x080068f8
 8003dd4:	20000020 	.word	0x20000020
 8003dd8:	20000024 	.word	0x20000024

08003ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ddc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	607b      	str	r3, [r7, #4]
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	2300      	movs	r3, #0
 8003dee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df4:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d00d      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x40>
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	f200 80bd 	bhi.w	8003f80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0x34>
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e0e:	e0b7      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b61      	ldr	r3, [pc, #388]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e12:	60bb      	str	r3, [r7, #8]
       break;
 8003e14:	e0b7      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e16:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003e18:	60bb      	str	r3, [r7, #8]
      break;
 8003e1a:	e0b4      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e1c:	4b5d      	ldr	r3, [pc, #372]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e26:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d04d      	beq.n	8003ece <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e32:	4b58      	ldr	r3, [pc, #352]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	099b      	lsrs	r3, r3, #6
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e42:	f04f 0100 	mov.w	r1, #0
 8003e46:	ea02 0800 	and.w	r8, r2, r0
 8003e4a:	ea03 0901 	and.w	r9, r3, r1
 8003e4e:	4640      	mov	r0, r8
 8003e50:	4649      	mov	r1, r9
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	014b      	lsls	r3, r1, #5
 8003e5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e60:	0142      	lsls	r2, r0, #5
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	ebb0 0008 	subs.w	r0, r0, r8
 8003e6a:	eb61 0109 	sbc.w	r1, r1, r9
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	018b      	lsls	r3, r1, #6
 8003e78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e7c:	0182      	lsls	r2, r0, #6
 8003e7e:	1a12      	subs	r2, r2, r0
 8003e80:	eb63 0301 	sbc.w	r3, r3, r1
 8003e84:	f04f 0000 	mov.w	r0, #0
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	00d9      	lsls	r1, r3, #3
 8003e8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e92:	00d0      	lsls	r0, r2, #3
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	eb12 0208 	adds.w	r2, r2, r8
 8003e9c:	eb43 0309 	adc.w	r3, r3, r9
 8003ea0:	f04f 0000 	mov.w	r0, #0
 8003ea4:	f04f 0100 	mov.w	r1, #0
 8003ea8:	0259      	lsls	r1, r3, #9
 8003eaa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003eae:	0250      	lsls	r0, r2, #9
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	f7fc f9f6 	bl	80002b0 <__aeabi_uldivmod>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4613      	mov	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e04a      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ece:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	099b      	lsrs	r3, r3, #6
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	ea02 0400 	and.w	r4, r2, r0
 8003ee6:	ea03 0501 	and.w	r5, r3, r1
 8003eea:	4620      	mov	r0, r4
 8003eec:	4629      	mov	r1, r5
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	014b      	lsls	r3, r1, #5
 8003ef8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003efc:	0142      	lsls	r2, r0, #5
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	1b00      	subs	r0, r0, r4
 8003f04:	eb61 0105 	sbc.w	r1, r1, r5
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	018b      	lsls	r3, r1, #6
 8003f12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f16:	0182      	lsls	r2, r0, #6
 8003f18:	1a12      	subs	r2, r2, r0
 8003f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f1e:	f04f 0000 	mov.w	r0, #0
 8003f22:	f04f 0100 	mov.w	r1, #0
 8003f26:	00d9      	lsls	r1, r3, #3
 8003f28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f2c:	00d0      	lsls	r0, r2, #3
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	1912      	adds	r2, r2, r4
 8003f34:	eb45 0303 	adc.w	r3, r5, r3
 8003f38:	f04f 0000 	mov.w	r0, #0
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	0299      	lsls	r1, r3, #10
 8003f42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f46:	0290      	lsls	r0, r2, #10
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	f7fc f9aa 	bl	80002b0 <__aeabi_uldivmod>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4613      	mov	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	60bb      	str	r3, [r7, #8]
      break;
 8003f7e:	e002      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f82:	60bb      	str	r3, [r7, #8]
      break;
 8003f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f86:	68bb      	ldr	r3, [r7, #8]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800
 8003f98:	00f42400 	.word	0x00f42400
 8003f9c:	007a1200 	.word	0x007a1200

08003fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa4:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000020 	.word	0x20000020

08003fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fbc:	f7ff fff0 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	0a9b      	lsrs	r3, r3, #10
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4903      	ldr	r1, [pc, #12]	; (8003fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	08006908 	.word	0x08006908

08003fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fe4:	f7ff ffdc 	bl	8003fa0 <HAL_RCC_GetHCLKFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	0b5b      	lsrs	r3, r3, #13
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	4903      	ldr	r1, [pc, #12]	; (8004004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40023800 	.word	0x40023800
 8004004:	08006908 	.word	0x08006908

08004008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e07b      	b.n	8004112 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	d108      	bne.n	8004034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402a:	d009      	beq.n	8004040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	61da      	str	r2, [r3, #28]
 8004032:	e005      	b.n	8004040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fe f9c2 	bl	80023e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004076:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c4:	ea42 0103 	orr.w	r1, r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	0c1b      	lsrs	r3, r3, #16
 80040de:	f003 0104 	and.w	r1, r3, #4
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f003 0210 	and.w	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004100:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b088      	sub	sp, #32
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	603b      	str	r3, [r7, #0]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_SPI_Transmit+0x22>
 8004138:	2302      	movs	r3, #2
 800413a:	e126      	b.n	800438a <HAL_SPI_Transmit+0x270>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004144:	f7fe fc44 	bl	80029d0 <HAL_GetTick>
 8004148:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b01      	cmp	r3, #1
 8004158:	d002      	beq.n	8004160 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800415a:	2302      	movs	r3, #2
 800415c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800415e:	e10b      	b.n	8004378 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_SPI_Transmit+0x52>
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d102      	bne.n	8004172 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004170:	e102      	b.n	8004378 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2203      	movs	r2, #3
 8004176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	88fa      	ldrh	r2, [r7, #6]
 800418a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	88fa      	ldrh	r2, [r7, #6]
 8004190:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b8:	d10f      	bne.n	80041da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d007      	beq.n	80041f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004200:	d14b      	bne.n	800429a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_SPI_Transmit+0xf6>
 800420a:	8afb      	ldrh	r3, [r7, #22]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d13e      	bne.n	800428e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	881a      	ldrh	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	1c9a      	adds	r2, r3, #2
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004234:	e02b      	b.n	800428e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b02      	cmp	r3, #2
 8004242:	d112      	bne.n	800426a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	881a      	ldrh	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	1c9a      	adds	r2, r3, #2
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	86da      	strh	r2, [r3, #54]	; 0x36
 8004268:	e011      	b.n	800428e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800426a:	f7fe fbb1 	bl	80029d0 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d803      	bhi.n	8004282 <HAL_SPI_Transmit+0x168>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d102      	bne.n	8004288 <HAL_SPI_Transmit+0x16e>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800428c:	e074      	b.n	8004378 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1ce      	bne.n	8004236 <HAL_SPI_Transmit+0x11c>
 8004298:	e04c      	b.n	8004334 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <HAL_SPI_Transmit+0x18e>
 80042a2:	8afb      	ldrh	r3, [r7, #22]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d140      	bne.n	800432a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	7812      	ldrb	r2, [r2, #0]
 80042b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042ce:	e02c      	b.n	800432a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d113      	bne.n	8004306 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	7812      	ldrb	r2, [r2, #0]
 80042ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	86da      	strh	r2, [r3, #54]	; 0x36
 8004304:	e011      	b.n	800432a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004306:	f7fe fb63 	bl	80029d0 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d803      	bhi.n	800431e <HAL_SPI_Transmit+0x204>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d102      	bne.n	8004324 <HAL_SPI_Transmit+0x20a>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004328:	e026      	b.n	8004378 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1cd      	bne.n	80042d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	6839      	ldr	r1, [r7, #0]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fa63 	bl	8004804 <SPI_EndRxTxTransaction>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004352:	2300      	movs	r3, #0
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e000      	b.n	8004378 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004376:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004388:	7ffb      	ldrb	r3, [r7, #31]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b08c      	sub	sp, #48	; 0x30
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043a0:	2301      	movs	r3, #1
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_SPI_TransmitReceive+0x26>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e18a      	b.n	80046ce <HAL_SPI_TransmitReceive+0x33c>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043c0:	f7fe fb06 	bl	80029d0 <HAL_GetTick>
 80043c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80043d6:	887b      	ldrh	r3, [r7, #2]
 80043d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d00f      	beq.n	8004402 <HAL_SPI_TransmitReceive+0x70>
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043e8:	d107      	bne.n	80043fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <HAL_SPI_TransmitReceive+0x68>
 80043f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d003      	beq.n	8004402 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80043fa:	2302      	movs	r3, #2
 80043fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004400:	e15b      	b.n	80046ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_SPI_TransmitReceive+0x82>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <HAL_SPI_TransmitReceive+0x82>
 800440e:	887b      	ldrh	r3, [r7, #2]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800441a:	e14e      	b.n	80046ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b04      	cmp	r3, #4
 8004426:	d003      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2205      	movs	r2, #5
 800442c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	887a      	ldrh	r2, [r7, #2]
 8004440:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	887a      	ldrh	r2, [r7, #2]
 8004446:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	887a      	ldrh	r2, [r7, #2]
 8004452:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	887a      	ldrh	r2, [r7, #2]
 8004458:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d007      	beq.n	8004484 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004482:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448c:	d178      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_SPI_TransmitReceive+0x10a>
 8004496:	8b7b      	ldrh	r3, [r7, #26]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d166      	bne.n	800456a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	881a      	ldrh	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	1c9a      	adds	r2, r3, #2
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c0:	e053      	b.n	800456a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d11b      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x176>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d016      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x176>
 80044da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d113      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	881a      	ldrh	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	1c9a      	adds	r2, r3, #2
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b01      	cmp	r3, #1
 8004514:	d119      	bne.n	800454a <HAL_SPI_TransmitReceive+0x1b8>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d014      	beq.n	800454a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	b292      	uxth	r2, r2
 800452c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	1c9a      	adds	r2, r3, #2
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004546:	2301      	movs	r3, #1
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800454a:	f7fe fa41 	bl	80029d0 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004556:	429a      	cmp	r2, r3
 8004558:	d807      	bhi.n	800456a <HAL_SPI_TransmitReceive+0x1d8>
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004560:	d003      	beq.n	800456a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004568:	e0a7      	b.n	80046ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1a6      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x130>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1a1      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x130>
 800457e:	e07c      	b.n	800467a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_SPI_TransmitReceive+0x1fc>
 8004588:	8b7b      	ldrh	r3, [r7, #26]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d16b      	bne.n	8004666 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045b4:	e057      	b.n	8004666 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d11c      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x26c>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d017      	beq.n	80045fe <HAL_SPI_TransmitReceive+0x26c>
 80045ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d114      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d119      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x2ae>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d014      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800463c:	2301      	movs	r3, #1
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004640:	f7fe f9c6 	bl	80029d0 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800464c:	429a      	cmp	r2, r3
 800464e:	d803      	bhi.n	8004658 <HAL_SPI_TransmitReceive+0x2c6>
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d102      	bne.n	800465e <HAL_SPI_TransmitReceive+0x2cc>
 8004658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465a:	2b00      	cmp	r3, #0
 800465c:	d103      	bne.n	8004666 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004664:	e029      	b.n	80046ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1a2      	bne.n	80045b6 <HAL_SPI_TransmitReceive+0x224>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d19d      	bne.n	80045b6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800467a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f8c0 	bl	8004804 <SPI_EndRxTxTransaction>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d006      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004696:	e010      	b.n	80046ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10b      	bne.n	80046b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	e000      	b.n	80046ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80046b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3730      	adds	r7, #48	; 0x30
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046e4:	b2db      	uxtb	r3, r3
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004704:	f7fe f964 	bl	80029d0 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4413      	add	r3, r2
 8004712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004714:	f7fe f95c 	bl	80029d0 <HAL_GetTick>
 8004718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800471a:	4b39      	ldr	r3, [pc, #228]	; (8004800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	015b      	lsls	r3, r3, #5
 8004720:	0d1b      	lsrs	r3, r3, #20
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800472a:	e054      	b.n	80047d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d050      	beq.n	80047d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004734:	f7fe f94c 	bl	80029d0 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	429a      	cmp	r2, r3
 8004742:	d902      	bls.n	800474a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d13d      	bne.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004762:	d111      	bne.n	8004788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476c:	d004      	beq.n	8004778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	d107      	bne.n	8004788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004790:	d10f      	bne.n	80047b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e017      	b.n	80047f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4013      	ands	r3, r2
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	bf0c      	ite	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	2300      	movne	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d19b      	bne.n	800472c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000020 	.word	0x20000020

08004804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004810:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <SPI_EndRxTxTransaction+0x7c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <SPI_EndRxTxTransaction+0x80>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	0d5b      	lsrs	r3, r3, #21
 800481c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800482e:	d112      	bne.n	8004856 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2200      	movs	r2, #0
 8004838:	2180      	movs	r1, #128	; 0x80
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff ff5a 	bl	80046f4 <SPI_WaitFlagStateUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d016      	beq.n	8004874 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	f043 0220 	orr.w	r2, r3, #32
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e00f      	b.n	8004876 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	3b01      	subs	r3, #1
 8004860:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486c:	2b80      	cmp	r3, #128	; 0x80
 800486e:	d0f2      	beq.n	8004856 <SPI_EndRxTxTransaction+0x52>
 8004870:	e000      	b.n	8004874 <SPI_EndRxTxTransaction+0x70>
        break;
 8004872:	bf00      	nop
  }

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000020 	.word	0x20000020
 8004884:	165e9f81 	.word	0x165e9f81

08004888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e041      	b.n	800491e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fd fde0 	bl	8002474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f000 fab6 	bl	8004e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d001      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e044      	b.n	80049ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1e      	ldr	r2, [pc, #120]	; (80049d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d018      	beq.n	8004994 <HAL_TIM_Base_Start_IT+0x6c>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496a:	d013      	beq.n	8004994 <HAL_TIM_Base_Start_IT+0x6c>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <HAL_TIM_Base_Start_IT+0xb4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00e      	beq.n	8004994 <HAL_TIM_Base_Start_IT+0x6c>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a19      	ldr	r2, [pc, #100]	; (80049e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d009      	beq.n	8004994 <HAL_TIM_Base_Start_IT+0x6c>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a17      	ldr	r2, [pc, #92]	; (80049e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d004      	beq.n	8004994 <HAL_TIM_Base_Start_IT+0x6c>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a16      	ldr	r2, [pc, #88]	; (80049e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d111      	bne.n	80049b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b06      	cmp	r3, #6
 80049a4:	d010      	beq.n	80049c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0201 	orr.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b6:	e007      	b.n	80049c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40010000 	.word	0x40010000
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40014000 	.word	0x40014000

080049ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6a1a      	ldr	r2, [r3, #32]
 8004a0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10f      	bne.n	8004a34 <HAL_TIM_Base_Stop_IT+0x48>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6a1a      	ldr	r2, [r3, #32]
 8004a1a:	f240 4344 	movw	r3, #1092	; 0x444
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d107      	bne.n	8004a34 <HAL_TIM_Base_Stop_IT+0x48>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d122      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d11b      	bne.n	8004aa6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f06f 0202 	mvn.w	r2, #2
 8004a76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f9b5 	bl	8004dfc <HAL_TIM_IC_CaptureCallback>
 8004a92:	e005      	b.n	8004aa0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f9a7 	bl	8004de8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f9b8 	bl	8004e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d122      	bne.n	8004afa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d11b      	bne.n	8004afa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f06f 0204 	mvn.w	r2, #4
 8004aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f98b 	bl	8004dfc <HAL_TIM_IC_CaptureCallback>
 8004ae6:	e005      	b.n	8004af4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f97d 	bl	8004de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f98e 	bl	8004e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d122      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d11b      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f06f 0208 	mvn.w	r2, #8
 8004b1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2204      	movs	r2, #4
 8004b24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f961 	bl	8004dfc <HAL_TIM_IC_CaptureCallback>
 8004b3a:	e005      	b.n	8004b48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f953 	bl	8004de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f964 	bl	8004e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f003 0310 	and.w	r3, r3, #16
 8004b58:	2b10      	cmp	r3, #16
 8004b5a:	d122      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	2b10      	cmp	r3, #16
 8004b68:	d11b      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f06f 0210 	mvn.w	r2, #16
 8004b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2208      	movs	r2, #8
 8004b78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f937 	bl	8004dfc <HAL_TIM_IC_CaptureCallback>
 8004b8e:	e005      	b.n	8004b9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f929 	bl	8004de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f93a 	bl	8004e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10e      	bne.n	8004bce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f06f 0201 	mvn.w	r2, #1
 8004bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fd fa67 	bl	800209c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d10e      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be6:	2b80      	cmp	r3, #128	; 0x80
 8004be8:	d107      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fab1 	bl	800515c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d10e      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d107      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f8ff 	bl	8004e24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	d10e      	bne.n	8004c52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d107      	bne.n	8004c52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f06f 0220 	mvn.w	r2, #32
 8004c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fa7b 	bl	8005148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_TIM_ConfigClockSource+0x1c>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e0b4      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x186>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cae:	d03e      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0xd4>
 8004cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb4:	f200 8087 	bhi.w	8004dc6 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbc:	f000 8086 	beq.w	8004dcc <HAL_TIM_ConfigClockSource+0x172>
 8004cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc4:	d87f      	bhi.n	8004dc6 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc6:	2b70      	cmp	r3, #112	; 0x70
 8004cc8:	d01a      	beq.n	8004d00 <HAL_TIM_ConfigClockSource+0xa6>
 8004cca:	2b70      	cmp	r3, #112	; 0x70
 8004ccc:	d87b      	bhi.n	8004dc6 <HAL_TIM_ConfigClockSource+0x16c>
 8004cce:	2b60      	cmp	r3, #96	; 0x60
 8004cd0:	d050      	beq.n	8004d74 <HAL_TIM_ConfigClockSource+0x11a>
 8004cd2:	2b60      	cmp	r3, #96	; 0x60
 8004cd4:	d877      	bhi.n	8004dc6 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd6:	2b50      	cmp	r3, #80	; 0x50
 8004cd8:	d03c      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0xfa>
 8004cda:	2b50      	cmp	r3, #80	; 0x50
 8004cdc:	d873      	bhi.n	8004dc6 <HAL_TIM_ConfigClockSource+0x16c>
 8004cde:	2b40      	cmp	r3, #64	; 0x40
 8004ce0:	d058      	beq.n	8004d94 <HAL_TIM_ConfigClockSource+0x13a>
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	d86f      	bhi.n	8004dc6 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce6:	2b30      	cmp	r3, #48	; 0x30
 8004ce8:	d064      	beq.n	8004db4 <HAL_TIM_ConfigClockSource+0x15a>
 8004cea:	2b30      	cmp	r3, #48	; 0x30
 8004cec:	d86b      	bhi.n	8004dc6 <HAL_TIM_ConfigClockSource+0x16c>
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d060      	beq.n	8004db4 <HAL_TIM_ConfigClockSource+0x15a>
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d867      	bhi.n	8004dc6 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d05c      	beq.n	8004db4 <HAL_TIM_ConfigClockSource+0x15a>
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d05a      	beq.n	8004db4 <HAL_TIM_ConfigClockSource+0x15a>
 8004cfe:	e062      	b.n	8004dc6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6899      	ldr	r1, [r3, #8]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f000 f98c 	bl	800502c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	609a      	str	r2, [r3, #8]
      break;
 8004d2c:	e04f      	b.n	8004dce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6899      	ldr	r1, [r3, #8]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f000 f975 	bl	800502c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d50:	609a      	str	r2, [r3, #8]
      break;
 8004d52:	e03c      	b.n	8004dce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6859      	ldr	r1, [r3, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	461a      	mov	r2, r3
 8004d62:	f000 f8e9 	bl	8004f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2150      	movs	r1, #80	; 0x50
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 f942 	bl	8004ff6 <TIM_ITRx_SetConfig>
      break;
 8004d72:	e02c      	b.n	8004dce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	6859      	ldr	r1, [r3, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	461a      	mov	r2, r3
 8004d82:	f000 f908 	bl	8004f96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2160      	movs	r1, #96	; 0x60
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 f932 	bl	8004ff6 <TIM_ITRx_SetConfig>
      break;
 8004d92:	e01c      	b.n	8004dce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	461a      	mov	r2, r3
 8004da2:	f000 f8c9 	bl	8004f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2140      	movs	r1, #64	; 0x40
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 f922 	bl	8004ff6 <TIM_ITRx_SetConfig>
      break;
 8004db2:	e00c      	b.n	8004dce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f000 f919 	bl	8004ff6 <TIM_ITRx_SetConfig>
      break;
 8004dc4:	e003      	b.n	8004dce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8004dca:	e000      	b.n	8004dce <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a34      	ldr	r2, [pc, #208]	; (8004f1c <TIM_Base_SetConfig+0xe4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00f      	beq.n	8004e70 <TIM_Base_SetConfig+0x38>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e56:	d00b      	beq.n	8004e70 <TIM_Base_SetConfig+0x38>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a31      	ldr	r2, [pc, #196]	; (8004f20 <TIM_Base_SetConfig+0xe8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <TIM_Base_SetConfig+0x38>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a30      	ldr	r2, [pc, #192]	; (8004f24 <TIM_Base_SetConfig+0xec>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_Base_SetConfig+0x38>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a2f      	ldr	r2, [pc, #188]	; (8004f28 <TIM_Base_SetConfig+0xf0>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d108      	bne.n	8004e82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a25      	ldr	r2, [pc, #148]	; (8004f1c <TIM_Base_SetConfig+0xe4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01b      	beq.n	8004ec2 <TIM_Base_SetConfig+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e90:	d017      	beq.n	8004ec2 <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a22      	ldr	r2, [pc, #136]	; (8004f20 <TIM_Base_SetConfig+0xe8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a21      	ldr	r2, [pc, #132]	; (8004f24 <TIM_Base_SetConfig+0xec>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00f      	beq.n	8004ec2 <TIM_Base_SetConfig+0x8a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a20      	ldr	r2, [pc, #128]	; (8004f28 <TIM_Base_SetConfig+0xf0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00b      	beq.n	8004ec2 <TIM_Base_SetConfig+0x8a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1f      	ldr	r2, [pc, #124]	; (8004f2c <TIM_Base_SetConfig+0xf4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d007      	beq.n	8004ec2 <TIM_Base_SetConfig+0x8a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1e      	ldr	r2, [pc, #120]	; (8004f30 <TIM_Base_SetConfig+0xf8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d003      	beq.n	8004ec2 <TIM_Base_SetConfig+0x8a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <TIM_Base_SetConfig+0xfc>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d108      	bne.n	8004ed4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <TIM_Base_SetConfig+0xe4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d103      	bne.n	8004f08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	615a      	str	r2, [r3, #20]
}
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	40000400 	.word	0x40000400
 8004f24:	40000800 	.word	0x40000800
 8004f28:	40000c00 	.word	0x40000c00
 8004f2c:	40014000 	.word	0x40014000
 8004f30:	40014400 	.word	0x40014400
 8004f34:	40014800 	.word	0x40014800

08004f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f023 0201 	bic.w	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 030a 	bic.w	r3, r3, #10
 8004f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b087      	sub	sp, #28
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f023 0210 	bic.w	r2, r3, #16
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	031b      	lsls	r3, r3, #12
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	621a      	str	r2, [r3, #32]
}
 8004fea:	bf00      	nop
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	f043 0307 	orr.w	r3, r3, #7
 8005018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	021a      	lsls	r2, r3, #8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	431a      	orrs	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4313      	orrs	r3, r2
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	609a      	str	r2, [r3, #8]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005080:	2302      	movs	r3, #2
 8005082:	e050      	b.n	8005126 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1c      	ldr	r2, [pc, #112]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d018      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d0:	d013      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a18      	ldr	r2, [pc, #96]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00e      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a16      	ldr	r2, [pc, #88]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a15      	ldr	r2, [pc, #84]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a13      	ldr	r2, [pc, #76]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d10c      	bne.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	4313      	orrs	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000
 8005138:	40000400 	.word	0x40000400
 800513c:	40000800 	.word	0x40000800
 8005140:	40000c00 	.word	0x40000c00
 8005144:	40014000 	.word	0x40014000

08005148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e03f      	b.n	8005202 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d106      	bne.n	800519c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fd f9ce 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2224      	movs	r2, #36	; 0x24
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fd15 	bl	8005be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695a      	ldr	r2, [r3, #20]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	4613      	mov	r3, r2
 8005216:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b20      	cmp	r3, #32
 8005222:	d130      	bne.n	8005286 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <HAL_UART_Transmit_IT+0x26>
 800522a:	88fb      	ldrh	r3, [r7, #6]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e029      	b.n	8005288 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_UART_Transmit_IT+0x38>
 800523e:	2302      	movs	r3, #2
 8005240:	e022      	b.n	8005288 <HAL_UART_Transmit_IT+0x7e>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2221      	movs	r2, #33	; 0x21
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005280:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e000      	b.n	8005288 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	4613      	mov	r3, r2
 80052a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d11d      	bne.n	80052ea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <HAL_UART_Receive_IT+0x26>
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e016      	b.n	80052ec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_UART_Receive_IT+0x38>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e00f      	b.n	80052ec <HAL_UART_Receive_IT+0x58>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	461a      	mov	r2, r3
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 faab 	bl	800583c <UART_Start_Receive_IT>
 80052e6:	4603      	mov	r3, r0
 80052e8:	e000      	b.n	80052ec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
  }
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b0ba      	sub	sp, #232	; 0xe8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800531a:	2300      	movs	r3, #0
 800531c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005320:	2300      	movs	r3, #0
 8005322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10f      	bne.n	800535a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800533a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <HAL_UART_IRQHandler+0x66>
 8005346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fb8b 	bl	8005a6e <UART_Receive_IT>
      return;
 8005358:	e256      	b.n	8005808 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800535a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80de 	beq.w	8005520 <HAL_UART_IRQHandler+0x22c>
 8005364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005374:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80d1 	beq.w	8005520 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800537e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00b      	beq.n	80053a2 <HAL_UART_IRQHandler+0xae>
 800538a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f043 0201 	orr.w	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <HAL_UART_IRQHandler+0xd2>
 80053ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f043 0202 	orr.w	r2, r3, #2
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <HAL_UART_IRQHandler+0xf6>
 80053d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f043 0204 	orr.w	r2, r3, #4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d011      	beq.n	800541a <HAL_UART_IRQHandler+0x126>
 80053f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fa:	f003 0320 	and.w	r3, r3, #32
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d105      	bne.n	800540e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f043 0208 	orr.w	r2, r3, #8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 81ed 	beq.w	80057fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_UART_IRQHandler+0x14e>
 8005430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fb16 	bl	8005a6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d103      	bne.n	800546e <HAL_UART_IRQHandler+0x17a>
 8005466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d04f      	beq.n	800550e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fa1e 	bl	80058b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	d141      	bne.n	8005506 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3314      	adds	r3, #20
 8005488:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800549c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3314      	adds	r3, #20
 80054aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1d9      	bne.n	8005482 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d013      	beq.n	80054fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	4a7d      	ldr	r2, [pc, #500]	; (80056d0 <HAL_UART_IRQHandler+0x3dc>)
 80054dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fd fcf0 	bl	8002ec8 <HAL_DMA_Abort_IT>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d016      	beq.n	800551c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054f8:	4610      	mov	r0, r2
 80054fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	e00e      	b.n	800551c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fc fd84 	bl	800200c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005504:	e00a      	b.n	800551c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fc fd80 	bl	800200c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550c:	e006      	b.n	800551c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc fd7c 	bl	800200c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800551a:	e170      	b.n	80057fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551c:	bf00      	nop
    return;
 800551e:	e16e      	b.n	80057fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	2b01      	cmp	r3, #1
 8005526:	f040 814a 	bne.w	80057be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800552a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 8143 	beq.w	80057be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 813c 	beq.w	80057be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b40      	cmp	r3, #64	; 0x40
 8005568:	f040 80b4 	bne.w	80056d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005578:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8140 	beq.w	8005802 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800558a:	429a      	cmp	r2, r3
 800558c:	f080 8139 	bcs.w	8005802 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005596:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a2:	f000 8088 	beq.w	80056b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	330c      	adds	r3, #12
 80055ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055b4:	e853 3f00 	ldrex	r3, [r3]
 80055b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	330c      	adds	r3, #12
 80055ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80055d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1d9      	bne.n	80055a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3314      	adds	r3, #20
 80055f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3314      	adds	r3, #20
 8005612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005616:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800561a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800561e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e1      	bne.n	80055f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3314      	adds	r3, #20
 8005634:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800563e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005644:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3314      	adds	r3, #20
 800564e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005652:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005654:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005658:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e3      	bne.n	800562e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005686:	f023 0310 	bic.w	r3, r3, #16
 800568a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	330c      	adds	r3, #12
 8005694:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005698:	65ba      	str	r2, [r7, #88]	; 0x58
 800569a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800569e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e3      	bne.n	8005674 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fd fb99 	bl	8002de8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056be:	b29b      	uxth	r3, r3
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f8ac 	bl	8005824 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056cc:	e099      	b.n	8005802 <HAL_UART_IRQHandler+0x50e>
 80056ce:	bf00      	nop
 80056d0:	08005977 	.word	0x08005977
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056dc:	b29b      	uxth	r3, r3
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 808b 	beq.w	8005806 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8086 	beq.w	8005806 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800570a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005710:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800571e:	647a      	str	r2, [r7, #68]	; 0x44
 8005720:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800572c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e3      	bne.n	80056fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3314      	adds	r3, #20
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	623b      	str	r3, [r7, #32]
   return(result);
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3314      	adds	r3, #20
 8005752:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005756:	633a      	str	r2, [r7, #48]	; 0x30
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800575c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e3      	bne.n	8005732 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	e853 3f00 	ldrex	r3, [r3]
 8005786:	60fb      	str	r3, [r7, #12]
   return(result);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0310 	bic.w	r3, r3, #16
 800578e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800579c:	61fa      	str	r2, [r7, #28]
 800579e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	69b9      	ldr	r1, [r7, #24]
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	617b      	str	r3, [r7, #20]
   return(result);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e3      	bne.n	8005778 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f834 	bl	8005824 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057bc:	e023      	b.n	8005806 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d009      	beq.n	80057de <HAL_UART_IRQHandler+0x4ea>
 80057ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f8e1 	bl	800599e <UART_Transmit_IT>
    return;
 80057dc:	e014      	b.n	8005808 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00e      	beq.n	8005808 <HAL_UART_IRQHandler+0x514>
 80057ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d008      	beq.n	8005808 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f921 	bl	8005a3e <UART_EndTransmit_IT>
    return;
 80057fc:	e004      	b.n	8005808 <HAL_UART_IRQHandler+0x514>
    return;
 80057fe:	bf00      	nop
 8005800:	e002      	b.n	8005808 <HAL_UART_IRQHandler+0x514>
      return;
 8005802:	bf00      	nop
 8005804:	e000      	b.n	8005808 <HAL_UART_IRQHandler+0x514>
      return;
 8005806:	bf00      	nop
  }
}
 8005808:	37e8      	adds	r7, #232	; 0xe8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop

08005810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	4613      	mov	r3, r2
 8005848:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	88fa      	ldrh	r2, [r7, #6]
 8005854:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	88fa      	ldrh	r2, [r7, #6]
 800585a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2222      	movs	r2, #34	; 0x22
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005880:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695a      	ldr	r2, [r3, #20]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0201 	orr.w	r2, r2, #1
 8005890:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0220 	orr.w	r2, r2, #32
 80058a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b095      	sub	sp, #84	; 0x54
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058d8:	643a      	str	r2, [r7, #64]	; 0x40
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e5      	bne.n	80058b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3314      	adds	r3, #20
 80058f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f023 0301 	bic.w	r3, r3, #1
 8005902:	64bb      	str	r3, [r7, #72]	; 0x48
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3314      	adds	r3, #20
 800590a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800590c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800590e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e5      	bne.n	80058ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	2b01      	cmp	r3, #1
 8005926:	d119      	bne.n	800595c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	60bb      	str	r3, [r7, #8]
   return(result);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f023 0310 	bic.w	r3, r3, #16
 800593e:	647b      	str	r3, [r7, #68]	; 0x44
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005948:	61ba      	str	r2, [r7, #24]
 800594a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6979      	ldr	r1, [r7, #20]
 800594e:	69ba      	ldr	r2, [r7, #24]
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	613b      	str	r3, [r7, #16]
   return(result);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e5      	bne.n	8005928 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2220      	movs	r2, #32
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	631a      	str	r2, [r3, #48]	; 0x30
}
 800596a:	bf00      	nop
 800596c:	3754      	adds	r7, #84	; 0x54
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7fc fb3b 	bl	800200c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b21      	cmp	r3, #33	; 0x21
 80059b0:	d13e      	bne.n	8005a30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ba:	d114      	bne.n	80059e6 <UART_Transmit_IT+0x48>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d110      	bne.n	80059e6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	1c9a      	adds	r2, r3, #2
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	621a      	str	r2, [r3, #32]
 80059e4:	e008      	b.n	80059f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	1c59      	adds	r1, r3, #1
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6211      	str	r1, [r2, #32]
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	4619      	mov	r1, r3
 8005a06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10f      	bne.n	8005a2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e000      	b.n	8005a32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a30:	2302      	movs	r3, #2
  }
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff fed6 	bl	8005810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b08c      	sub	sp, #48	; 0x30
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b22      	cmp	r3, #34	; 0x22
 8005a80:	f040 80ab 	bne.w	8005bda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8c:	d117      	bne.n	8005abe <UART_Receive_IT+0x50>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d113      	bne.n	8005abe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	1c9a      	adds	r2, r3, #2
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28
 8005abc:	e026      	b.n	8005b0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad0:	d007      	beq.n	8005ae2 <UART_Receive_IT+0x74>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <UART_Receive_IT+0x82>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	e008      	b.n	8005b02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d15a      	bne.n	8005bd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0220 	bic.w	r2, r2, #32
 8005b2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695a      	ldr	r2, [r3, #20]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0201 	bic.w	r2, r2, #1
 8005b4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d135      	bne.n	8005bcc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	613b      	str	r3, [r7, #16]
   return(result);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f023 0310 	bic.w	r3, r3, #16
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	330c      	adds	r3, #12
 8005b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b86:	623a      	str	r2, [r7, #32]
 8005b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8a:	69f9      	ldr	r1, [r7, #28]
 8005b8c:	6a3a      	ldr	r2, [r7, #32]
 8005b8e:	e841 2300 	strex	r3, r2, [r1]
 8005b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e5      	bne.n	8005b66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b10      	cmp	r3, #16
 8005ba6:	d10a      	bne.n	8005bbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff fe2d 	bl	8005824 <HAL_UARTEx_RxEventCallback>
 8005bca:	e002      	b.n	8005bd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7fc f98d 	bl	8001eec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e002      	b.n	8005bdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e000      	b.n	8005bdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005bda:	2302      	movs	r3, #2
  }
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3730      	adds	r7, #48	; 0x30
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be8:	b09f      	sub	sp, #124	; 0x7c
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bfa:	68d9      	ldr	r1, [r3, #12]
 8005bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	ea40 0301 	orr.w	r3, r0, r1
 8005c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	431a      	orrs	r2, r3
 8005c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c28:	f021 010c 	bic.w	r1, r1, #12
 8005c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c32:	430b      	orrs	r3, r1
 8005c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c42:	6999      	ldr	r1, [r3, #24]
 8005c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	ea40 0301 	orr.w	r3, r0, r1
 8005c4c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4bc5      	ldr	r3, [pc, #788]	; (8005f68 <UART_SetConfig+0x384>)
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d004      	beq.n	8005c62 <UART_SetConfig+0x7e>
 8005c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	4bc3      	ldr	r3, [pc, #780]	; (8005f6c <UART_SetConfig+0x388>)
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d103      	bne.n	8005c6a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c62:	f7fe f9bd 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 8005c66:	6778      	str	r0, [r7, #116]	; 0x74
 8005c68:	e002      	b.n	8005c70 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c6a:	f7fe f9a5 	bl	8003fb8 <HAL_RCC_GetPCLK1Freq>
 8005c6e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c78:	f040 80b6 	bne.w	8005de8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c7e:	461c      	mov	r4, r3
 8005c80:	f04f 0500 	mov.w	r5, #0
 8005c84:	4622      	mov	r2, r4
 8005c86:	462b      	mov	r3, r5
 8005c88:	1891      	adds	r1, r2, r2
 8005c8a:	6439      	str	r1, [r7, #64]	; 0x40
 8005c8c:	415b      	adcs	r3, r3
 8005c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c94:	1912      	adds	r2, r2, r4
 8005c96:	eb45 0303 	adc.w	r3, r5, r3
 8005c9a:	f04f 0000 	mov.w	r0, #0
 8005c9e:	f04f 0100 	mov.w	r1, #0
 8005ca2:	00d9      	lsls	r1, r3, #3
 8005ca4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ca8:	00d0      	lsls	r0, r2, #3
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	1911      	adds	r1, r2, r4
 8005cb0:	6639      	str	r1, [r7, #96]	; 0x60
 8005cb2:	416b      	adcs	r3, r5
 8005cb4:	667b      	str	r3, [r7, #100]	; 0x64
 8005cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	1891      	adds	r1, r2, r2
 8005cc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cc4:	415b      	adcs	r3, r3
 8005cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ccc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005cd0:	f7fa faee 	bl	80002b0 <__aeabi_uldivmod>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4ba5      	ldr	r3, [pc, #660]	; (8005f70 <UART_SetConfig+0x38c>)
 8005cda:	fba3 2302 	umull	r2, r3, r3, r2
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	011e      	lsls	r6, r3, #4
 8005ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce4:	461c      	mov	r4, r3
 8005ce6:	f04f 0500 	mov.w	r5, #0
 8005cea:	4622      	mov	r2, r4
 8005cec:	462b      	mov	r3, r5
 8005cee:	1891      	adds	r1, r2, r2
 8005cf0:	6339      	str	r1, [r7, #48]	; 0x30
 8005cf2:	415b      	adcs	r3, r3
 8005cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005cfa:	1912      	adds	r2, r2, r4
 8005cfc:	eb45 0303 	adc.w	r3, r5, r3
 8005d00:	f04f 0000 	mov.w	r0, #0
 8005d04:	f04f 0100 	mov.w	r1, #0
 8005d08:	00d9      	lsls	r1, r3, #3
 8005d0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d0e:	00d0      	lsls	r0, r2, #3
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	1911      	adds	r1, r2, r4
 8005d16:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d18:	416b      	adcs	r3, r5
 8005d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	461a      	mov	r2, r3
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	1891      	adds	r1, r2, r2
 8005d28:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d2a:	415b      	adcs	r3, r3
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d32:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005d36:	f7fa fabb 	bl	80002b0 <__aeabi_uldivmod>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4b8c      	ldr	r3, [pc, #560]	; (8005f70 <UART_SetConfig+0x38c>)
 8005d40:	fba3 1302 	umull	r1, r3, r3, r2
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	2164      	movs	r1, #100	; 0x64
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	3332      	adds	r3, #50	; 0x32
 8005d52:	4a87      	ldr	r2, [pc, #540]	; (8005f70 <UART_SetConfig+0x38c>)
 8005d54:	fba2 2303 	umull	r2, r3, r2, r3
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d60:	441e      	add	r6, r3
 8005d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d64:	4618      	mov	r0, r3
 8005d66:	f04f 0100 	mov.w	r1, #0
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	1894      	adds	r4, r2, r2
 8005d70:	623c      	str	r4, [r7, #32]
 8005d72:	415b      	adcs	r3, r3
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
 8005d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d7a:	1812      	adds	r2, r2, r0
 8005d7c:	eb41 0303 	adc.w	r3, r1, r3
 8005d80:	f04f 0400 	mov.w	r4, #0
 8005d84:	f04f 0500 	mov.w	r5, #0
 8005d88:	00dd      	lsls	r5, r3, #3
 8005d8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d8e:	00d4      	lsls	r4, r2, #3
 8005d90:	4622      	mov	r2, r4
 8005d92:	462b      	mov	r3, r5
 8005d94:	1814      	adds	r4, r2, r0
 8005d96:	653c      	str	r4, [r7, #80]	; 0x50
 8005d98:	414b      	adcs	r3, r1
 8005d9a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	461a      	mov	r2, r3
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	1891      	adds	r1, r2, r2
 8005da8:	61b9      	str	r1, [r7, #24]
 8005daa:	415b      	adcs	r3, r3
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005db2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005db6:	f7fa fa7b 	bl	80002b0 <__aeabi_uldivmod>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4b6c      	ldr	r3, [pc, #432]	; (8005f70 <UART_SetConfig+0x38c>)
 8005dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	2164      	movs	r1, #100	; 0x64
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	3332      	adds	r3, #50	; 0x32
 8005dd2:	4a67      	ldr	r2, [pc, #412]	; (8005f70 <UART_SetConfig+0x38c>)
 8005dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	f003 0207 	and.w	r2, r3, #7
 8005dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4432      	add	r2, r6
 8005de4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005de6:	e0b9      	b.n	8005f5c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dea:	461c      	mov	r4, r3
 8005dec:	f04f 0500 	mov.w	r5, #0
 8005df0:	4622      	mov	r2, r4
 8005df2:	462b      	mov	r3, r5
 8005df4:	1891      	adds	r1, r2, r2
 8005df6:	6139      	str	r1, [r7, #16]
 8005df8:	415b      	adcs	r3, r3
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e00:	1912      	adds	r2, r2, r4
 8005e02:	eb45 0303 	adc.w	r3, r5, r3
 8005e06:	f04f 0000 	mov.w	r0, #0
 8005e0a:	f04f 0100 	mov.w	r1, #0
 8005e0e:	00d9      	lsls	r1, r3, #3
 8005e10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e14:	00d0      	lsls	r0, r2, #3
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	eb12 0804 	adds.w	r8, r2, r4
 8005e1e:	eb43 0905 	adc.w	r9, r3, r5
 8005e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f04f 0100 	mov.w	r1, #0
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	008b      	lsls	r3, r1, #2
 8005e36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e3a:	0082      	lsls	r2, r0, #2
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	4649      	mov	r1, r9
 8005e40:	f7fa fa36 	bl	80002b0 <__aeabi_uldivmod>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4b49      	ldr	r3, [pc, #292]	; (8005f70 <UART_SetConfig+0x38c>)
 8005e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	011e      	lsls	r6, r3, #4
 8005e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e54:	4618      	mov	r0, r3
 8005e56:	f04f 0100 	mov.w	r1, #0
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	1894      	adds	r4, r2, r2
 8005e60:	60bc      	str	r4, [r7, #8]
 8005e62:	415b      	adcs	r3, r3
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e6a:	1812      	adds	r2, r2, r0
 8005e6c:	eb41 0303 	adc.w	r3, r1, r3
 8005e70:	f04f 0400 	mov.w	r4, #0
 8005e74:	f04f 0500 	mov.w	r5, #0
 8005e78:	00dd      	lsls	r5, r3, #3
 8005e7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e7e:	00d4      	lsls	r4, r2, #3
 8005e80:	4622      	mov	r2, r4
 8005e82:	462b      	mov	r3, r5
 8005e84:	1814      	adds	r4, r2, r0
 8005e86:	64bc      	str	r4, [r7, #72]	; 0x48
 8005e88:	414b      	adcs	r3, r1
 8005e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f04f 0100 	mov.w	r1, #0
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	008b      	lsls	r3, r1, #2
 8005ea0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ea4:	0082      	lsls	r2, r0, #2
 8005ea6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005eaa:	f7fa fa01 	bl	80002b0 <__aeabi_uldivmod>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <UART_SetConfig+0x38c>)
 8005eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	2164      	movs	r1, #100	; 0x64
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	3332      	adds	r3, #50	; 0x32
 8005ec6:	4a2a      	ldr	r2, [pc, #168]	; (8005f70 <UART_SetConfig+0x38c>)
 8005ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ecc:	095b      	lsrs	r3, r3, #5
 8005ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ed2:	441e      	add	r6, r3
 8005ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f04f 0100 	mov.w	r1, #0
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	1894      	adds	r4, r2, r2
 8005ee2:	603c      	str	r4, [r7, #0]
 8005ee4:	415b      	adcs	r3, r3
 8005ee6:	607b      	str	r3, [r7, #4]
 8005ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eec:	1812      	adds	r2, r2, r0
 8005eee:	eb41 0303 	adc.w	r3, r1, r3
 8005ef2:	f04f 0400 	mov.w	r4, #0
 8005ef6:	f04f 0500 	mov.w	r5, #0
 8005efa:	00dd      	lsls	r5, r3, #3
 8005efc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f00:	00d4      	lsls	r4, r2, #3
 8005f02:	4622      	mov	r2, r4
 8005f04:	462b      	mov	r3, r5
 8005f06:	eb12 0a00 	adds.w	sl, r2, r0
 8005f0a:	eb43 0b01 	adc.w	fp, r3, r1
 8005f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f04f 0100 	mov.w	r1, #0
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	008b      	lsls	r3, r1, #2
 8005f22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f26:	0082      	lsls	r2, r0, #2
 8005f28:	4650      	mov	r0, sl
 8005f2a:	4659      	mov	r1, fp
 8005f2c:	f7fa f9c0 	bl	80002b0 <__aeabi_uldivmod>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <UART_SetConfig+0x38c>)
 8005f36:	fba3 1302 	umull	r1, r3, r3, r2
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	2164      	movs	r1, #100	; 0x64
 8005f3e:	fb01 f303 	mul.w	r3, r1, r3
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	3332      	adds	r3, #50	; 0x32
 8005f48:	4a09      	ldr	r2, [pc, #36]	; (8005f70 <UART_SetConfig+0x38c>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f003 020f 	and.w	r2, r3, #15
 8005f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4432      	add	r2, r6
 8005f5a:	609a      	str	r2, [r3, #8]
}
 8005f5c:	bf00      	nop
 8005f5e:	377c      	adds	r7, #124	; 0x7c
 8005f60:	46bd      	mov	sp, r7
 8005f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	bf00      	nop
 8005f68:	40011000 	.word	0x40011000
 8005f6c:	40011400 	.word	0x40011400
 8005f70:	51eb851f 	.word	0x51eb851f

08005f74 <__errno>:
 8005f74:	4b01      	ldr	r3, [pc, #4]	; (8005f7c <__errno+0x8>)
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	2000002c 	.word	0x2000002c

08005f80 <__libc_init_array>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	4d0d      	ldr	r5, [pc, #52]	; (8005fb8 <__libc_init_array+0x38>)
 8005f84:	4c0d      	ldr	r4, [pc, #52]	; (8005fbc <__libc_init_array+0x3c>)
 8005f86:	1b64      	subs	r4, r4, r5
 8005f88:	10a4      	asrs	r4, r4, #2
 8005f8a:	2600      	movs	r6, #0
 8005f8c:	42a6      	cmp	r6, r4
 8005f8e:	d109      	bne.n	8005fa4 <__libc_init_array+0x24>
 8005f90:	4d0b      	ldr	r5, [pc, #44]	; (8005fc0 <__libc_init_array+0x40>)
 8005f92:	4c0c      	ldr	r4, [pc, #48]	; (8005fc4 <__libc_init_array+0x44>)
 8005f94:	f000 fc74 	bl	8006880 <_init>
 8005f98:	1b64      	subs	r4, r4, r5
 8005f9a:	10a4      	asrs	r4, r4, #2
 8005f9c:	2600      	movs	r6, #0
 8005f9e:	42a6      	cmp	r6, r4
 8005fa0:	d105      	bne.n	8005fae <__libc_init_array+0x2e>
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa8:	4798      	blx	r3
 8005faa:	3601      	adds	r6, #1
 8005fac:	e7ee      	b.n	8005f8c <__libc_init_array+0xc>
 8005fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb2:	4798      	blx	r3
 8005fb4:	3601      	adds	r6, #1
 8005fb6:	e7f2      	b.n	8005f9e <__libc_init_array+0x1e>
 8005fb8:	08006954 	.word	0x08006954
 8005fbc:	08006954 	.word	0x08006954
 8005fc0:	08006954 	.word	0x08006954
 8005fc4:	08006958 	.word	0x08006958

08005fc8 <memcpy>:
 8005fc8:	440a      	add	r2, r1
 8005fca:	4291      	cmp	r1, r2
 8005fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fd0:	d100      	bne.n	8005fd4 <memcpy+0xc>
 8005fd2:	4770      	bx	lr
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fde:	4291      	cmp	r1, r2
 8005fe0:	d1f9      	bne.n	8005fd6 <memcpy+0xe>
 8005fe2:	bd10      	pop	{r4, pc}

08005fe4 <memset>:
 8005fe4:	4402      	add	r2, r0
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d100      	bne.n	8005fee <memset+0xa>
 8005fec:	4770      	bx	lr
 8005fee:	f803 1b01 	strb.w	r1, [r3], #1
 8005ff2:	e7f9      	b.n	8005fe8 <memset+0x4>

08005ff4 <sniprintf>:
 8005ff4:	b40c      	push	{r2, r3}
 8005ff6:	b530      	push	{r4, r5, lr}
 8005ff8:	4b17      	ldr	r3, [pc, #92]	; (8006058 <sniprintf+0x64>)
 8005ffa:	1e0c      	subs	r4, r1, #0
 8005ffc:	681d      	ldr	r5, [r3, #0]
 8005ffe:	b09d      	sub	sp, #116	; 0x74
 8006000:	da08      	bge.n	8006014 <sniprintf+0x20>
 8006002:	238b      	movs	r3, #139	; 0x8b
 8006004:	602b      	str	r3, [r5, #0]
 8006006:	f04f 30ff 	mov.w	r0, #4294967295
 800600a:	b01d      	add	sp, #116	; 0x74
 800600c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006010:	b002      	add	sp, #8
 8006012:	4770      	bx	lr
 8006014:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006018:	f8ad 3014 	strh.w	r3, [sp, #20]
 800601c:	bf14      	ite	ne
 800601e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006022:	4623      	moveq	r3, r4
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	9307      	str	r3, [sp, #28]
 8006028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800602c:	9002      	str	r0, [sp, #8]
 800602e:	9006      	str	r0, [sp, #24]
 8006030:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006034:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006036:	ab21      	add	r3, sp, #132	; 0x84
 8006038:	a902      	add	r1, sp, #8
 800603a:	4628      	mov	r0, r5
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	f000 f87b 	bl	8006138 <_svfiprintf_r>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	bfbc      	itt	lt
 8006046:	238b      	movlt	r3, #139	; 0x8b
 8006048:	602b      	strlt	r3, [r5, #0]
 800604a:	2c00      	cmp	r4, #0
 800604c:	d0dd      	beq.n	800600a <sniprintf+0x16>
 800604e:	9b02      	ldr	r3, [sp, #8]
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	e7d9      	b.n	800600a <sniprintf+0x16>
 8006056:	bf00      	nop
 8006058:	2000002c 	.word	0x2000002c

0800605c <strncmp>:
 800605c:	b510      	push	{r4, lr}
 800605e:	b16a      	cbz	r2, 800607c <strncmp+0x20>
 8006060:	3901      	subs	r1, #1
 8006062:	1884      	adds	r4, r0, r2
 8006064:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006068:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800606c:	4293      	cmp	r3, r2
 800606e:	d103      	bne.n	8006078 <strncmp+0x1c>
 8006070:	42a0      	cmp	r0, r4
 8006072:	d001      	beq.n	8006078 <strncmp+0x1c>
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f5      	bne.n	8006064 <strncmp+0x8>
 8006078:	1a98      	subs	r0, r3, r2
 800607a:	bd10      	pop	{r4, pc}
 800607c:	4610      	mov	r0, r2
 800607e:	e7fc      	b.n	800607a <strncmp+0x1e>

08006080 <__ssputs_r>:
 8006080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006084:	688e      	ldr	r6, [r1, #8]
 8006086:	429e      	cmp	r6, r3
 8006088:	4682      	mov	sl, r0
 800608a:	460c      	mov	r4, r1
 800608c:	4690      	mov	r8, r2
 800608e:	461f      	mov	r7, r3
 8006090:	d838      	bhi.n	8006104 <__ssputs_r+0x84>
 8006092:	898a      	ldrh	r2, [r1, #12]
 8006094:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006098:	d032      	beq.n	8006100 <__ssputs_r+0x80>
 800609a:	6825      	ldr	r5, [r4, #0]
 800609c:	6909      	ldr	r1, [r1, #16]
 800609e:	eba5 0901 	sub.w	r9, r5, r1
 80060a2:	6965      	ldr	r5, [r4, #20]
 80060a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060ac:	3301      	adds	r3, #1
 80060ae:	444b      	add	r3, r9
 80060b0:	106d      	asrs	r5, r5, #1
 80060b2:	429d      	cmp	r5, r3
 80060b4:	bf38      	it	cc
 80060b6:	461d      	movcc	r5, r3
 80060b8:	0553      	lsls	r3, r2, #21
 80060ba:	d531      	bpl.n	8006120 <__ssputs_r+0xa0>
 80060bc:	4629      	mov	r1, r5
 80060be:	f000 fb39 	bl	8006734 <_malloc_r>
 80060c2:	4606      	mov	r6, r0
 80060c4:	b950      	cbnz	r0, 80060dc <__ssputs_r+0x5c>
 80060c6:	230c      	movs	r3, #12
 80060c8:	f8ca 3000 	str.w	r3, [sl]
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	f04f 30ff 	mov.w	r0, #4294967295
 80060d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060dc:	6921      	ldr	r1, [r4, #16]
 80060de:	464a      	mov	r2, r9
 80060e0:	f7ff ff72 	bl	8005fc8 <memcpy>
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ee:	81a3      	strh	r3, [r4, #12]
 80060f0:	6126      	str	r6, [r4, #16]
 80060f2:	6165      	str	r5, [r4, #20]
 80060f4:	444e      	add	r6, r9
 80060f6:	eba5 0509 	sub.w	r5, r5, r9
 80060fa:	6026      	str	r6, [r4, #0]
 80060fc:	60a5      	str	r5, [r4, #8]
 80060fe:	463e      	mov	r6, r7
 8006100:	42be      	cmp	r6, r7
 8006102:	d900      	bls.n	8006106 <__ssputs_r+0x86>
 8006104:	463e      	mov	r6, r7
 8006106:	4632      	mov	r2, r6
 8006108:	6820      	ldr	r0, [r4, #0]
 800610a:	4641      	mov	r1, r8
 800610c:	f000 faa8 	bl	8006660 <memmove>
 8006110:	68a3      	ldr	r3, [r4, #8]
 8006112:	6822      	ldr	r2, [r4, #0]
 8006114:	1b9b      	subs	r3, r3, r6
 8006116:	4432      	add	r2, r6
 8006118:	60a3      	str	r3, [r4, #8]
 800611a:	6022      	str	r2, [r4, #0]
 800611c:	2000      	movs	r0, #0
 800611e:	e7db      	b.n	80060d8 <__ssputs_r+0x58>
 8006120:	462a      	mov	r2, r5
 8006122:	f000 fb61 	bl	80067e8 <_realloc_r>
 8006126:	4606      	mov	r6, r0
 8006128:	2800      	cmp	r0, #0
 800612a:	d1e1      	bne.n	80060f0 <__ssputs_r+0x70>
 800612c:	6921      	ldr	r1, [r4, #16]
 800612e:	4650      	mov	r0, sl
 8006130:	f000 fab0 	bl	8006694 <_free_r>
 8006134:	e7c7      	b.n	80060c6 <__ssputs_r+0x46>
	...

08006138 <_svfiprintf_r>:
 8006138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	4698      	mov	r8, r3
 800613e:	898b      	ldrh	r3, [r1, #12]
 8006140:	061b      	lsls	r3, r3, #24
 8006142:	b09d      	sub	sp, #116	; 0x74
 8006144:	4607      	mov	r7, r0
 8006146:	460d      	mov	r5, r1
 8006148:	4614      	mov	r4, r2
 800614a:	d50e      	bpl.n	800616a <_svfiprintf_r+0x32>
 800614c:	690b      	ldr	r3, [r1, #16]
 800614e:	b963      	cbnz	r3, 800616a <_svfiprintf_r+0x32>
 8006150:	2140      	movs	r1, #64	; 0x40
 8006152:	f000 faef 	bl	8006734 <_malloc_r>
 8006156:	6028      	str	r0, [r5, #0]
 8006158:	6128      	str	r0, [r5, #16]
 800615a:	b920      	cbnz	r0, 8006166 <_svfiprintf_r+0x2e>
 800615c:	230c      	movs	r3, #12
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	f04f 30ff 	mov.w	r0, #4294967295
 8006164:	e0d1      	b.n	800630a <_svfiprintf_r+0x1d2>
 8006166:	2340      	movs	r3, #64	; 0x40
 8006168:	616b      	str	r3, [r5, #20]
 800616a:	2300      	movs	r3, #0
 800616c:	9309      	str	r3, [sp, #36]	; 0x24
 800616e:	2320      	movs	r3, #32
 8006170:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006174:	f8cd 800c 	str.w	r8, [sp, #12]
 8006178:	2330      	movs	r3, #48	; 0x30
 800617a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006324 <_svfiprintf_r+0x1ec>
 800617e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006182:	f04f 0901 	mov.w	r9, #1
 8006186:	4623      	mov	r3, r4
 8006188:	469a      	mov	sl, r3
 800618a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800618e:	b10a      	cbz	r2, 8006194 <_svfiprintf_r+0x5c>
 8006190:	2a25      	cmp	r2, #37	; 0x25
 8006192:	d1f9      	bne.n	8006188 <_svfiprintf_r+0x50>
 8006194:	ebba 0b04 	subs.w	fp, sl, r4
 8006198:	d00b      	beq.n	80061b2 <_svfiprintf_r+0x7a>
 800619a:	465b      	mov	r3, fp
 800619c:	4622      	mov	r2, r4
 800619e:	4629      	mov	r1, r5
 80061a0:	4638      	mov	r0, r7
 80061a2:	f7ff ff6d 	bl	8006080 <__ssputs_r>
 80061a6:	3001      	adds	r0, #1
 80061a8:	f000 80aa 	beq.w	8006300 <_svfiprintf_r+0x1c8>
 80061ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061ae:	445a      	add	r2, fp
 80061b0:	9209      	str	r2, [sp, #36]	; 0x24
 80061b2:	f89a 3000 	ldrb.w	r3, [sl]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 80a2 	beq.w	8006300 <_svfiprintf_r+0x1c8>
 80061bc:	2300      	movs	r3, #0
 80061be:	f04f 32ff 	mov.w	r2, #4294967295
 80061c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061c6:	f10a 0a01 	add.w	sl, sl, #1
 80061ca:	9304      	str	r3, [sp, #16]
 80061cc:	9307      	str	r3, [sp, #28]
 80061ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061d2:	931a      	str	r3, [sp, #104]	; 0x68
 80061d4:	4654      	mov	r4, sl
 80061d6:	2205      	movs	r2, #5
 80061d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061dc:	4851      	ldr	r0, [pc, #324]	; (8006324 <_svfiprintf_r+0x1ec>)
 80061de:	f7fa f817 	bl	8000210 <memchr>
 80061e2:	9a04      	ldr	r2, [sp, #16]
 80061e4:	b9d8      	cbnz	r0, 800621e <_svfiprintf_r+0xe6>
 80061e6:	06d0      	lsls	r0, r2, #27
 80061e8:	bf44      	itt	mi
 80061ea:	2320      	movmi	r3, #32
 80061ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061f0:	0711      	lsls	r1, r2, #28
 80061f2:	bf44      	itt	mi
 80061f4:	232b      	movmi	r3, #43	; 0x2b
 80061f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061fa:	f89a 3000 	ldrb.w	r3, [sl]
 80061fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006200:	d015      	beq.n	800622e <_svfiprintf_r+0xf6>
 8006202:	9a07      	ldr	r2, [sp, #28]
 8006204:	4654      	mov	r4, sl
 8006206:	2000      	movs	r0, #0
 8006208:	f04f 0c0a 	mov.w	ip, #10
 800620c:	4621      	mov	r1, r4
 800620e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006212:	3b30      	subs	r3, #48	; 0x30
 8006214:	2b09      	cmp	r3, #9
 8006216:	d94e      	bls.n	80062b6 <_svfiprintf_r+0x17e>
 8006218:	b1b0      	cbz	r0, 8006248 <_svfiprintf_r+0x110>
 800621a:	9207      	str	r2, [sp, #28]
 800621c:	e014      	b.n	8006248 <_svfiprintf_r+0x110>
 800621e:	eba0 0308 	sub.w	r3, r0, r8
 8006222:	fa09 f303 	lsl.w	r3, r9, r3
 8006226:	4313      	orrs	r3, r2
 8006228:	9304      	str	r3, [sp, #16]
 800622a:	46a2      	mov	sl, r4
 800622c:	e7d2      	b.n	80061d4 <_svfiprintf_r+0x9c>
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	1d19      	adds	r1, r3, #4
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	9103      	str	r1, [sp, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	bfbb      	ittet	lt
 800623a:	425b      	neglt	r3, r3
 800623c:	f042 0202 	orrlt.w	r2, r2, #2
 8006240:	9307      	strge	r3, [sp, #28]
 8006242:	9307      	strlt	r3, [sp, #28]
 8006244:	bfb8      	it	lt
 8006246:	9204      	strlt	r2, [sp, #16]
 8006248:	7823      	ldrb	r3, [r4, #0]
 800624a:	2b2e      	cmp	r3, #46	; 0x2e
 800624c:	d10c      	bne.n	8006268 <_svfiprintf_r+0x130>
 800624e:	7863      	ldrb	r3, [r4, #1]
 8006250:	2b2a      	cmp	r3, #42	; 0x2a
 8006252:	d135      	bne.n	80062c0 <_svfiprintf_r+0x188>
 8006254:	9b03      	ldr	r3, [sp, #12]
 8006256:	1d1a      	adds	r2, r3, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	9203      	str	r2, [sp, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	bfb8      	it	lt
 8006260:	f04f 33ff 	movlt.w	r3, #4294967295
 8006264:	3402      	adds	r4, #2
 8006266:	9305      	str	r3, [sp, #20]
 8006268:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006334 <_svfiprintf_r+0x1fc>
 800626c:	7821      	ldrb	r1, [r4, #0]
 800626e:	2203      	movs	r2, #3
 8006270:	4650      	mov	r0, sl
 8006272:	f7f9 ffcd 	bl	8000210 <memchr>
 8006276:	b140      	cbz	r0, 800628a <_svfiprintf_r+0x152>
 8006278:	2340      	movs	r3, #64	; 0x40
 800627a:	eba0 000a 	sub.w	r0, r0, sl
 800627e:	fa03 f000 	lsl.w	r0, r3, r0
 8006282:	9b04      	ldr	r3, [sp, #16]
 8006284:	4303      	orrs	r3, r0
 8006286:	3401      	adds	r4, #1
 8006288:	9304      	str	r3, [sp, #16]
 800628a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628e:	4826      	ldr	r0, [pc, #152]	; (8006328 <_svfiprintf_r+0x1f0>)
 8006290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006294:	2206      	movs	r2, #6
 8006296:	f7f9 ffbb 	bl	8000210 <memchr>
 800629a:	2800      	cmp	r0, #0
 800629c:	d038      	beq.n	8006310 <_svfiprintf_r+0x1d8>
 800629e:	4b23      	ldr	r3, [pc, #140]	; (800632c <_svfiprintf_r+0x1f4>)
 80062a0:	bb1b      	cbnz	r3, 80062ea <_svfiprintf_r+0x1b2>
 80062a2:	9b03      	ldr	r3, [sp, #12]
 80062a4:	3307      	adds	r3, #7
 80062a6:	f023 0307 	bic.w	r3, r3, #7
 80062aa:	3308      	adds	r3, #8
 80062ac:	9303      	str	r3, [sp, #12]
 80062ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b0:	4433      	add	r3, r6
 80062b2:	9309      	str	r3, [sp, #36]	; 0x24
 80062b4:	e767      	b.n	8006186 <_svfiprintf_r+0x4e>
 80062b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80062ba:	460c      	mov	r4, r1
 80062bc:	2001      	movs	r0, #1
 80062be:	e7a5      	b.n	800620c <_svfiprintf_r+0xd4>
 80062c0:	2300      	movs	r3, #0
 80062c2:	3401      	adds	r4, #1
 80062c4:	9305      	str	r3, [sp, #20]
 80062c6:	4619      	mov	r1, r3
 80062c8:	f04f 0c0a 	mov.w	ip, #10
 80062cc:	4620      	mov	r0, r4
 80062ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062d2:	3a30      	subs	r2, #48	; 0x30
 80062d4:	2a09      	cmp	r2, #9
 80062d6:	d903      	bls.n	80062e0 <_svfiprintf_r+0x1a8>
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0c5      	beq.n	8006268 <_svfiprintf_r+0x130>
 80062dc:	9105      	str	r1, [sp, #20]
 80062de:	e7c3      	b.n	8006268 <_svfiprintf_r+0x130>
 80062e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80062e4:	4604      	mov	r4, r0
 80062e6:	2301      	movs	r3, #1
 80062e8:	e7f0      	b.n	80062cc <_svfiprintf_r+0x194>
 80062ea:	ab03      	add	r3, sp, #12
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	462a      	mov	r2, r5
 80062f0:	4b0f      	ldr	r3, [pc, #60]	; (8006330 <_svfiprintf_r+0x1f8>)
 80062f2:	a904      	add	r1, sp, #16
 80062f4:	4638      	mov	r0, r7
 80062f6:	f3af 8000 	nop.w
 80062fa:	1c42      	adds	r2, r0, #1
 80062fc:	4606      	mov	r6, r0
 80062fe:	d1d6      	bne.n	80062ae <_svfiprintf_r+0x176>
 8006300:	89ab      	ldrh	r3, [r5, #12]
 8006302:	065b      	lsls	r3, r3, #25
 8006304:	f53f af2c 	bmi.w	8006160 <_svfiprintf_r+0x28>
 8006308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800630a:	b01d      	add	sp, #116	; 0x74
 800630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006310:	ab03      	add	r3, sp, #12
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	462a      	mov	r2, r5
 8006316:	4b06      	ldr	r3, [pc, #24]	; (8006330 <_svfiprintf_r+0x1f8>)
 8006318:	a904      	add	r1, sp, #16
 800631a:	4638      	mov	r0, r7
 800631c:	f000 f87a 	bl	8006414 <_printf_i>
 8006320:	e7eb      	b.n	80062fa <_svfiprintf_r+0x1c2>
 8006322:	bf00      	nop
 8006324:	08006918 	.word	0x08006918
 8006328:	08006922 	.word	0x08006922
 800632c:	00000000 	.word	0x00000000
 8006330:	08006081 	.word	0x08006081
 8006334:	0800691e 	.word	0x0800691e

08006338 <_printf_common>:
 8006338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800633c:	4616      	mov	r6, r2
 800633e:	4699      	mov	r9, r3
 8006340:	688a      	ldr	r2, [r1, #8]
 8006342:	690b      	ldr	r3, [r1, #16]
 8006344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006348:	4293      	cmp	r3, r2
 800634a:	bfb8      	it	lt
 800634c:	4613      	movlt	r3, r2
 800634e:	6033      	str	r3, [r6, #0]
 8006350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006354:	4607      	mov	r7, r0
 8006356:	460c      	mov	r4, r1
 8006358:	b10a      	cbz	r2, 800635e <_printf_common+0x26>
 800635a:	3301      	adds	r3, #1
 800635c:	6033      	str	r3, [r6, #0]
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	0699      	lsls	r1, r3, #26
 8006362:	bf42      	ittt	mi
 8006364:	6833      	ldrmi	r3, [r6, #0]
 8006366:	3302      	addmi	r3, #2
 8006368:	6033      	strmi	r3, [r6, #0]
 800636a:	6825      	ldr	r5, [r4, #0]
 800636c:	f015 0506 	ands.w	r5, r5, #6
 8006370:	d106      	bne.n	8006380 <_printf_common+0x48>
 8006372:	f104 0a19 	add.w	sl, r4, #25
 8006376:	68e3      	ldr	r3, [r4, #12]
 8006378:	6832      	ldr	r2, [r6, #0]
 800637a:	1a9b      	subs	r3, r3, r2
 800637c:	42ab      	cmp	r3, r5
 800637e:	dc26      	bgt.n	80063ce <_printf_common+0x96>
 8006380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006384:	1e13      	subs	r3, r2, #0
 8006386:	6822      	ldr	r2, [r4, #0]
 8006388:	bf18      	it	ne
 800638a:	2301      	movne	r3, #1
 800638c:	0692      	lsls	r2, r2, #26
 800638e:	d42b      	bmi.n	80063e8 <_printf_common+0xb0>
 8006390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006394:	4649      	mov	r1, r9
 8006396:	4638      	mov	r0, r7
 8006398:	47c0      	blx	r8
 800639a:	3001      	adds	r0, #1
 800639c:	d01e      	beq.n	80063dc <_printf_common+0xa4>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	68e5      	ldr	r5, [r4, #12]
 80063a2:	6832      	ldr	r2, [r6, #0]
 80063a4:	f003 0306 	and.w	r3, r3, #6
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	bf08      	it	eq
 80063ac:	1aad      	subeq	r5, r5, r2
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	6922      	ldr	r2, [r4, #16]
 80063b2:	bf0c      	ite	eq
 80063b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063b8:	2500      	movne	r5, #0
 80063ba:	4293      	cmp	r3, r2
 80063bc:	bfc4      	itt	gt
 80063be:	1a9b      	subgt	r3, r3, r2
 80063c0:	18ed      	addgt	r5, r5, r3
 80063c2:	2600      	movs	r6, #0
 80063c4:	341a      	adds	r4, #26
 80063c6:	42b5      	cmp	r5, r6
 80063c8:	d11a      	bne.n	8006400 <_printf_common+0xc8>
 80063ca:	2000      	movs	r0, #0
 80063cc:	e008      	b.n	80063e0 <_printf_common+0xa8>
 80063ce:	2301      	movs	r3, #1
 80063d0:	4652      	mov	r2, sl
 80063d2:	4649      	mov	r1, r9
 80063d4:	4638      	mov	r0, r7
 80063d6:	47c0      	blx	r8
 80063d8:	3001      	adds	r0, #1
 80063da:	d103      	bne.n	80063e4 <_printf_common+0xac>
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e4:	3501      	adds	r5, #1
 80063e6:	e7c6      	b.n	8006376 <_printf_common+0x3e>
 80063e8:	18e1      	adds	r1, r4, r3
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	2030      	movs	r0, #48	; 0x30
 80063ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063f2:	4422      	add	r2, r4
 80063f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063fc:	3302      	adds	r3, #2
 80063fe:	e7c7      	b.n	8006390 <_printf_common+0x58>
 8006400:	2301      	movs	r3, #1
 8006402:	4622      	mov	r2, r4
 8006404:	4649      	mov	r1, r9
 8006406:	4638      	mov	r0, r7
 8006408:	47c0      	blx	r8
 800640a:	3001      	adds	r0, #1
 800640c:	d0e6      	beq.n	80063dc <_printf_common+0xa4>
 800640e:	3601      	adds	r6, #1
 8006410:	e7d9      	b.n	80063c6 <_printf_common+0x8e>
	...

08006414 <_printf_i>:
 8006414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006418:	460c      	mov	r4, r1
 800641a:	4691      	mov	r9, r2
 800641c:	7e27      	ldrb	r7, [r4, #24]
 800641e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006420:	2f78      	cmp	r7, #120	; 0x78
 8006422:	4680      	mov	r8, r0
 8006424:	469a      	mov	sl, r3
 8006426:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800642a:	d807      	bhi.n	800643c <_printf_i+0x28>
 800642c:	2f62      	cmp	r7, #98	; 0x62
 800642e:	d80a      	bhi.n	8006446 <_printf_i+0x32>
 8006430:	2f00      	cmp	r7, #0
 8006432:	f000 80d8 	beq.w	80065e6 <_printf_i+0x1d2>
 8006436:	2f58      	cmp	r7, #88	; 0x58
 8006438:	f000 80a3 	beq.w	8006582 <_printf_i+0x16e>
 800643c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006444:	e03a      	b.n	80064bc <_printf_i+0xa8>
 8006446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800644a:	2b15      	cmp	r3, #21
 800644c:	d8f6      	bhi.n	800643c <_printf_i+0x28>
 800644e:	a001      	add	r0, pc, #4	; (adr r0, 8006454 <_printf_i+0x40>)
 8006450:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006454:	080064ad 	.word	0x080064ad
 8006458:	080064c1 	.word	0x080064c1
 800645c:	0800643d 	.word	0x0800643d
 8006460:	0800643d 	.word	0x0800643d
 8006464:	0800643d 	.word	0x0800643d
 8006468:	0800643d 	.word	0x0800643d
 800646c:	080064c1 	.word	0x080064c1
 8006470:	0800643d 	.word	0x0800643d
 8006474:	0800643d 	.word	0x0800643d
 8006478:	0800643d 	.word	0x0800643d
 800647c:	0800643d 	.word	0x0800643d
 8006480:	080065cd 	.word	0x080065cd
 8006484:	080064f1 	.word	0x080064f1
 8006488:	080065af 	.word	0x080065af
 800648c:	0800643d 	.word	0x0800643d
 8006490:	0800643d 	.word	0x0800643d
 8006494:	080065ef 	.word	0x080065ef
 8006498:	0800643d 	.word	0x0800643d
 800649c:	080064f1 	.word	0x080064f1
 80064a0:	0800643d 	.word	0x0800643d
 80064a4:	0800643d 	.word	0x0800643d
 80064a8:	080065b7 	.word	0x080065b7
 80064ac:	680b      	ldr	r3, [r1, #0]
 80064ae:	1d1a      	adds	r2, r3, #4
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	600a      	str	r2, [r1, #0]
 80064b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064bc:	2301      	movs	r3, #1
 80064be:	e0a3      	b.n	8006608 <_printf_i+0x1f4>
 80064c0:	6825      	ldr	r5, [r4, #0]
 80064c2:	6808      	ldr	r0, [r1, #0]
 80064c4:	062e      	lsls	r6, r5, #24
 80064c6:	f100 0304 	add.w	r3, r0, #4
 80064ca:	d50a      	bpl.n	80064e2 <_printf_i+0xce>
 80064cc:	6805      	ldr	r5, [r0, #0]
 80064ce:	600b      	str	r3, [r1, #0]
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	da03      	bge.n	80064dc <_printf_i+0xc8>
 80064d4:	232d      	movs	r3, #45	; 0x2d
 80064d6:	426d      	negs	r5, r5
 80064d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064dc:	485e      	ldr	r0, [pc, #376]	; (8006658 <_printf_i+0x244>)
 80064de:	230a      	movs	r3, #10
 80064e0:	e019      	b.n	8006516 <_printf_i+0x102>
 80064e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80064e6:	6805      	ldr	r5, [r0, #0]
 80064e8:	600b      	str	r3, [r1, #0]
 80064ea:	bf18      	it	ne
 80064ec:	b22d      	sxthne	r5, r5
 80064ee:	e7ef      	b.n	80064d0 <_printf_i+0xbc>
 80064f0:	680b      	ldr	r3, [r1, #0]
 80064f2:	6825      	ldr	r5, [r4, #0]
 80064f4:	1d18      	adds	r0, r3, #4
 80064f6:	6008      	str	r0, [r1, #0]
 80064f8:	0628      	lsls	r0, r5, #24
 80064fa:	d501      	bpl.n	8006500 <_printf_i+0xec>
 80064fc:	681d      	ldr	r5, [r3, #0]
 80064fe:	e002      	b.n	8006506 <_printf_i+0xf2>
 8006500:	0669      	lsls	r1, r5, #25
 8006502:	d5fb      	bpl.n	80064fc <_printf_i+0xe8>
 8006504:	881d      	ldrh	r5, [r3, #0]
 8006506:	4854      	ldr	r0, [pc, #336]	; (8006658 <_printf_i+0x244>)
 8006508:	2f6f      	cmp	r7, #111	; 0x6f
 800650a:	bf0c      	ite	eq
 800650c:	2308      	moveq	r3, #8
 800650e:	230a      	movne	r3, #10
 8006510:	2100      	movs	r1, #0
 8006512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006516:	6866      	ldr	r6, [r4, #4]
 8006518:	60a6      	str	r6, [r4, #8]
 800651a:	2e00      	cmp	r6, #0
 800651c:	bfa2      	ittt	ge
 800651e:	6821      	ldrge	r1, [r4, #0]
 8006520:	f021 0104 	bicge.w	r1, r1, #4
 8006524:	6021      	strge	r1, [r4, #0]
 8006526:	b90d      	cbnz	r5, 800652c <_printf_i+0x118>
 8006528:	2e00      	cmp	r6, #0
 800652a:	d04d      	beq.n	80065c8 <_printf_i+0x1b4>
 800652c:	4616      	mov	r6, r2
 800652e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006532:	fb03 5711 	mls	r7, r3, r1, r5
 8006536:	5dc7      	ldrb	r7, [r0, r7]
 8006538:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800653c:	462f      	mov	r7, r5
 800653e:	42bb      	cmp	r3, r7
 8006540:	460d      	mov	r5, r1
 8006542:	d9f4      	bls.n	800652e <_printf_i+0x11a>
 8006544:	2b08      	cmp	r3, #8
 8006546:	d10b      	bne.n	8006560 <_printf_i+0x14c>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	07df      	lsls	r7, r3, #31
 800654c:	d508      	bpl.n	8006560 <_printf_i+0x14c>
 800654e:	6923      	ldr	r3, [r4, #16]
 8006550:	6861      	ldr	r1, [r4, #4]
 8006552:	4299      	cmp	r1, r3
 8006554:	bfde      	ittt	le
 8006556:	2330      	movle	r3, #48	; 0x30
 8006558:	f806 3c01 	strble.w	r3, [r6, #-1]
 800655c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006560:	1b92      	subs	r2, r2, r6
 8006562:	6122      	str	r2, [r4, #16]
 8006564:	f8cd a000 	str.w	sl, [sp]
 8006568:	464b      	mov	r3, r9
 800656a:	aa03      	add	r2, sp, #12
 800656c:	4621      	mov	r1, r4
 800656e:	4640      	mov	r0, r8
 8006570:	f7ff fee2 	bl	8006338 <_printf_common>
 8006574:	3001      	adds	r0, #1
 8006576:	d14c      	bne.n	8006612 <_printf_i+0x1fe>
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	b004      	add	sp, #16
 800657e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006582:	4835      	ldr	r0, [pc, #212]	; (8006658 <_printf_i+0x244>)
 8006584:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	680e      	ldr	r6, [r1, #0]
 800658c:	061f      	lsls	r7, r3, #24
 800658e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006592:	600e      	str	r6, [r1, #0]
 8006594:	d514      	bpl.n	80065c0 <_printf_i+0x1ac>
 8006596:	07d9      	lsls	r1, r3, #31
 8006598:	bf44      	itt	mi
 800659a:	f043 0320 	orrmi.w	r3, r3, #32
 800659e:	6023      	strmi	r3, [r4, #0]
 80065a0:	b91d      	cbnz	r5, 80065aa <_printf_i+0x196>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	f023 0320 	bic.w	r3, r3, #32
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	2310      	movs	r3, #16
 80065ac:	e7b0      	b.n	8006510 <_printf_i+0xfc>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	f043 0320 	orr.w	r3, r3, #32
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	2378      	movs	r3, #120	; 0x78
 80065b8:	4828      	ldr	r0, [pc, #160]	; (800665c <_printf_i+0x248>)
 80065ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065be:	e7e3      	b.n	8006588 <_printf_i+0x174>
 80065c0:	065e      	lsls	r6, r3, #25
 80065c2:	bf48      	it	mi
 80065c4:	b2ad      	uxthmi	r5, r5
 80065c6:	e7e6      	b.n	8006596 <_printf_i+0x182>
 80065c8:	4616      	mov	r6, r2
 80065ca:	e7bb      	b.n	8006544 <_printf_i+0x130>
 80065cc:	680b      	ldr	r3, [r1, #0]
 80065ce:	6826      	ldr	r6, [r4, #0]
 80065d0:	6960      	ldr	r0, [r4, #20]
 80065d2:	1d1d      	adds	r5, r3, #4
 80065d4:	600d      	str	r5, [r1, #0]
 80065d6:	0635      	lsls	r5, r6, #24
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	d501      	bpl.n	80065e0 <_printf_i+0x1cc>
 80065dc:	6018      	str	r0, [r3, #0]
 80065de:	e002      	b.n	80065e6 <_printf_i+0x1d2>
 80065e0:	0671      	lsls	r1, r6, #25
 80065e2:	d5fb      	bpl.n	80065dc <_printf_i+0x1c8>
 80065e4:	8018      	strh	r0, [r3, #0]
 80065e6:	2300      	movs	r3, #0
 80065e8:	6123      	str	r3, [r4, #16]
 80065ea:	4616      	mov	r6, r2
 80065ec:	e7ba      	b.n	8006564 <_printf_i+0x150>
 80065ee:	680b      	ldr	r3, [r1, #0]
 80065f0:	1d1a      	adds	r2, r3, #4
 80065f2:	600a      	str	r2, [r1, #0]
 80065f4:	681e      	ldr	r6, [r3, #0]
 80065f6:	6862      	ldr	r2, [r4, #4]
 80065f8:	2100      	movs	r1, #0
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7f9 fe08 	bl	8000210 <memchr>
 8006600:	b108      	cbz	r0, 8006606 <_printf_i+0x1f2>
 8006602:	1b80      	subs	r0, r0, r6
 8006604:	6060      	str	r0, [r4, #4]
 8006606:	6863      	ldr	r3, [r4, #4]
 8006608:	6123      	str	r3, [r4, #16]
 800660a:	2300      	movs	r3, #0
 800660c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006610:	e7a8      	b.n	8006564 <_printf_i+0x150>
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	4632      	mov	r2, r6
 8006616:	4649      	mov	r1, r9
 8006618:	4640      	mov	r0, r8
 800661a:	47d0      	blx	sl
 800661c:	3001      	adds	r0, #1
 800661e:	d0ab      	beq.n	8006578 <_printf_i+0x164>
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	079b      	lsls	r3, r3, #30
 8006624:	d413      	bmi.n	800664e <_printf_i+0x23a>
 8006626:	68e0      	ldr	r0, [r4, #12]
 8006628:	9b03      	ldr	r3, [sp, #12]
 800662a:	4298      	cmp	r0, r3
 800662c:	bfb8      	it	lt
 800662e:	4618      	movlt	r0, r3
 8006630:	e7a4      	b.n	800657c <_printf_i+0x168>
 8006632:	2301      	movs	r3, #1
 8006634:	4632      	mov	r2, r6
 8006636:	4649      	mov	r1, r9
 8006638:	4640      	mov	r0, r8
 800663a:	47d0      	blx	sl
 800663c:	3001      	adds	r0, #1
 800663e:	d09b      	beq.n	8006578 <_printf_i+0x164>
 8006640:	3501      	adds	r5, #1
 8006642:	68e3      	ldr	r3, [r4, #12]
 8006644:	9903      	ldr	r1, [sp, #12]
 8006646:	1a5b      	subs	r3, r3, r1
 8006648:	42ab      	cmp	r3, r5
 800664a:	dcf2      	bgt.n	8006632 <_printf_i+0x21e>
 800664c:	e7eb      	b.n	8006626 <_printf_i+0x212>
 800664e:	2500      	movs	r5, #0
 8006650:	f104 0619 	add.w	r6, r4, #25
 8006654:	e7f5      	b.n	8006642 <_printf_i+0x22e>
 8006656:	bf00      	nop
 8006658:	08006929 	.word	0x08006929
 800665c:	0800693a 	.word	0x0800693a

08006660 <memmove>:
 8006660:	4288      	cmp	r0, r1
 8006662:	b510      	push	{r4, lr}
 8006664:	eb01 0402 	add.w	r4, r1, r2
 8006668:	d902      	bls.n	8006670 <memmove+0x10>
 800666a:	4284      	cmp	r4, r0
 800666c:	4623      	mov	r3, r4
 800666e:	d807      	bhi.n	8006680 <memmove+0x20>
 8006670:	1e43      	subs	r3, r0, #1
 8006672:	42a1      	cmp	r1, r4
 8006674:	d008      	beq.n	8006688 <memmove+0x28>
 8006676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800667a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800667e:	e7f8      	b.n	8006672 <memmove+0x12>
 8006680:	4402      	add	r2, r0
 8006682:	4601      	mov	r1, r0
 8006684:	428a      	cmp	r2, r1
 8006686:	d100      	bne.n	800668a <memmove+0x2a>
 8006688:	bd10      	pop	{r4, pc}
 800668a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800668e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006692:	e7f7      	b.n	8006684 <memmove+0x24>

08006694 <_free_r>:
 8006694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006696:	2900      	cmp	r1, #0
 8006698:	d048      	beq.n	800672c <_free_r+0x98>
 800669a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800669e:	9001      	str	r0, [sp, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f1a1 0404 	sub.w	r4, r1, #4
 80066a6:	bfb8      	it	lt
 80066a8:	18e4      	addlt	r4, r4, r3
 80066aa:	f000 f8d3 	bl	8006854 <__malloc_lock>
 80066ae:	4a20      	ldr	r2, [pc, #128]	; (8006730 <_free_r+0x9c>)
 80066b0:	9801      	ldr	r0, [sp, #4]
 80066b2:	6813      	ldr	r3, [r2, #0]
 80066b4:	4615      	mov	r5, r2
 80066b6:	b933      	cbnz	r3, 80066c6 <_free_r+0x32>
 80066b8:	6063      	str	r3, [r4, #4]
 80066ba:	6014      	str	r4, [r2, #0]
 80066bc:	b003      	add	sp, #12
 80066be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066c2:	f000 b8cd 	b.w	8006860 <__malloc_unlock>
 80066c6:	42a3      	cmp	r3, r4
 80066c8:	d90b      	bls.n	80066e2 <_free_r+0x4e>
 80066ca:	6821      	ldr	r1, [r4, #0]
 80066cc:	1862      	adds	r2, r4, r1
 80066ce:	4293      	cmp	r3, r2
 80066d0:	bf04      	itt	eq
 80066d2:	681a      	ldreq	r2, [r3, #0]
 80066d4:	685b      	ldreq	r3, [r3, #4]
 80066d6:	6063      	str	r3, [r4, #4]
 80066d8:	bf04      	itt	eq
 80066da:	1852      	addeq	r2, r2, r1
 80066dc:	6022      	streq	r2, [r4, #0]
 80066de:	602c      	str	r4, [r5, #0]
 80066e0:	e7ec      	b.n	80066bc <_free_r+0x28>
 80066e2:	461a      	mov	r2, r3
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	b10b      	cbz	r3, 80066ec <_free_r+0x58>
 80066e8:	42a3      	cmp	r3, r4
 80066ea:	d9fa      	bls.n	80066e2 <_free_r+0x4e>
 80066ec:	6811      	ldr	r1, [r2, #0]
 80066ee:	1855      	adds	r5, r2, r1
 80066f0:	42a5      	cmp	r5, r4
 80066f2:	d10b      	bne.n	800670c <_free_r+0x78>
 80066f4:	6824      	ldr	r4, [r4, #0]
 80066f6:	4421      	add	r1, r4
 80066f8:	1854      	adds	r4, r2, r1
 80066fa:	42a3      	cmp	r3, r4
 80066fc:	6011      	str	r1, [r2, #0]
 80066fe:	d1dd      	bne.n	80066bc <_free_r+0x28>
 8006700:	681c      	ldr	r4, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	6053      	str	r3, [r2, #4]
 8006706:	4421      	add	r1, r4
 8006708:	6011      	str	r1, [r2, #0]
 800670a:	e7d7      	b.n	80066bc <_free_r+0x28>
 800670c:	d902      	bls.n	8006714 <_free_r+0x80>
 800670e:	230c      	movs	r3, #12
 8006710:	6003      	str	r3, [r0, #0]
 8006712:	e7d3      	b.n	80066bc <_free_r+0x28>
 8006714:	6825      	ldr	r5, [r4, #0]
 8006716:	1961      	adds	r1, r4, r5
 8006718:	428b      	cmp	r3, r1
 800671a:	bf04      	itt	eq
 800671c:	6819      	ldreq	r1, [r3, #0]
 800671e:	685b      	ldreq	r3, [r3, #4]
 8006720:	6063      	str	r3, [r4, #4]
 8006722:	bf04      	itt	eq
 8006724:	1949      	addeq	r1, r1, r5
 8006726:	6021      	streq	r1, [r4, #0]
 8006728:	6054      	str	r4, [r2, #4]
 800672a:	e7c7      	b.n	80066bc <_free_r+0x28>
 800672c:	b003      	add	sp, #12
 800672e:	bd30      	pop	{r4, r5, pc}
 8006730:	2000016c 	.word	0x2000016c

08006734 <_malloc_r>:
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	1ccd      	adds	r5, r1, #3
 8006738:	f025 0503 	bic.w	r5, r5, #3
 800673c:	3508      	adds	r5, #8
 800673e:	2d0c      	cmp	r5, #12
 8006740:	bf38      	it	cc
 8006742:	250c      	movcc	r5, #12
 8006744:	2d00      	cmp	r5, #0
 8006746:	4606      	mov	r6, r0
 8006748:	db01      	blt.n	800674e <_malloc_r+0x1a>
 800674a:	42a9      	cmp	r1, r5
 800674c:	d903      	bls.n	8006756 <_malloc_r+0x22>
 800674e:	230c      	movs	r3, #12
 8006750:	6033      	str	r3, [r6, #0]
 8006752:	2000      	movs	r0, #0
 8006754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006756:	f000 f87d 	bl	8006854 <__malloc_lock>
 800675a:	4921      	ldr	r1, [pc, #132]	; (80067e0 <_malloc_r+0xac>)
 800675c:	680a      	ldr	r2, [r1, #0]
 800675e:	4614      	mov	r4, r2
 8006760:	b99c      	cbnz	r4, 800678a <_malloc_r+0x56>
 8006762:	4f20      	ldr	r7, [pc, #128]	; (80067e4 <_malloc_r+0xb0>)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	b923      	cbnz	r3, 8006772 <_malloc_r+0x3e>
 8006768:	4621      	mov	r1, r4
 800676a:	4630      	mov	r0, r6
 800676c:	f000 f862 	bl	8006834 <_sbrk_r>
 8006770:	6038      	str	r0, [r7, #0]
 8006772:	4629      	mov	r1, r5
 8006774:	4630      	mov	r0, r6
 8006776:	f000 f85d 	bl	8006834 <_sbrk_r>
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	d123      	bne.n	80067c6 <_malloc_r+0x92>
 800677e:	230c      	movs	r3, #12
 8006780:	6033      	str	r3, [r6, #0]
 8006782:	4630      	mov	r0, r6
 8006784:	f000 f86c 	bl	8006860 <__malloc_unlock>
 8006788:	e7e3      	b.n	8006752 <_malloc_r+0x1e>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	1b5b      	subs	r3, r3, r5
 800678e:	d417      	bmi.n	80067c0 <_malloc_r+0x8c>
 8006790:	2b0b      	cmp	r3, #11
 8006792:	d903      	bls.n	800679c <_malloc_r+0x68>
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	441c      	add	r4, r3
 8006798:	6025      	str	r5, [r4, #0]
 800679a:	e004      	b.n	80067a6 <_malloc_r+0x72>
 800679c:	6863      	ldr	r3, [r4, #4]
 800679e:	42a2      	cmp	r2, r4
 80067a0:	bf0c      	ite	eq
 80067a2:	600b      	streq	r3, [r1, #0]
 80067a4:	6053      	strne	r3, [r2, #4]
 80067a6:	4630      	mov	r0, r6
 80067a8:	f000 f85a 	bl	8006860 <__malloc_unlock>
 80067ac:	f104 000b 	add.w	r0, r4, #11
 80067b0:	1d23      	adds	r3, r4, #4
 80067b2:	f020 0007 	bic.w	r0, r0, #7
 80067b6:	1ac2      	subs	r2, r0, r3
 80067b8:	d0cc      	beq.n	8006754 <_malloc_r+0x20>
 80067ba:	1a1b      	subs	r3, r3, r0
 80067bc:	50a3      	str	r3, [r4, r2]
 80067be:	e7c9      	b.n	8006754 <_malloc_r+0x20>
 80067c0:	4622      	mov	r2, r4
 80067c2:	6864      	ldr	r4, [r4, #4]
 80067c4:	e7cc      	b.n	8006760 <_malloc_r+0x2c>
 80067c6:	1cc4      	adds	r4, r0, #3
 80067c8:	f024 0403 	bic.w	r4, r4, #3
 80067cc:	42a0      	cmp	r0, r4
 80067ce:	d0e3      	beq.n	8006798 <_malloc_r+0x64>
 80067d0:	1a21      	subs	r1, r4, r0
 80067d2:	4630      	mov	r0, r6
 80067d4:	f000 f82e 	bl	8006834 <_sbrk_r>
 80067d8:	3001      	adds	r0, #1
 80067da:	d1dd      	bne.n	8006798 <_malloc_r+0x64>
 80067dc:	e7cf      	b.n	800677e <_malloc_r+0x4a>
 80067de:	bf00      	nop
 80067e0:	2000016c 	.word	0x2000016c
 80067e4:	20000170 	.word	0x20000170

080067e8 <_realloc_r>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	4607      	mov	r7, r0
 80067ec:	4614      	mov	r4, r2
 80067ee:	460e      	mov	r6, r1
 80067f0:	b921      	cbnz	r1, 80067fc <_realloc_r+0x14>
 80067f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067f6:	4611      	mov	r1, r2
 80067f8:	f7ff bf9c 	b.w	8006734 <_malloc_r>
 80067fc:	b922      	cbnz	r2, 8006808 <_realloc_r+0x20>
 80067fe:	f7ff ff49 	bl	8006694 <_free_r>
 8006802:	4625      	mov	r5, r4
 8006804:	4628      	mov	r0, r5
 8006806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006808:	f000 f830 	bl	800686c <_malloc_usable_size_r>
 800680c:	42a0      	cmp	r0, r4
 800680e:	d20f      	bcs.n	8006830 <_realloc_r+0x48>
 8006810:	4621      	mov	r1, r4
 8006812:	4638      	mov	r0, r7
 8006814:	f7ff ff8e 	bl	8006734 <_malloc_r>
 8006818:	4605      	mov	r5, r0
 800681a:	2800      	cmp	r0, #0
 800681c:	d0f2      	beq.n	8006804 <_realloc_r+0x1c>
 800681e:	4631      	mov	r1, r6
 8006820:	4622      	mov	r2, r4
 8006822:	f7ff fbd1 	bl	8005fc8 <memcpy>
 8006826:	4631      	mov	r1, r6
 8006828:	4638      	mov	r0, r7
 800682a:	f7ff ff33 	bl	8006694 <_free_r>
 800682e:	e7e9      	b.n	8006804 <_realloc_r+0x1c>
 8006830:	4635      	mov	r5, r6
 8006832:	e7e7      	b.n	8006804 <_realloc_r+0x1c>

08006834 <_sbrk_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d06      	ldr	r5, [pc, #24]	; (8006850 <_sbrk_r+0x1c>)
 8006838:	2300      	movs	r3, #0
 800683a:	4604      	mov	r4, r0
 800683c:	4608      	mov	r0, r1
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	f7fb ffee 	bl	8002820 <_sbrk>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_sbrk_r+0x1a>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_sbrk_r+0x1a>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	20000620 	.word	0x20000620

08006854 <__malloc_lock>:
 8006854:	4801      	ldr	r0, [pc, #4]	; (800685c <__malloc_lock+0x8>)
 8006856:	f000 b811 	b.w	800687c <__retarget_lock_acquire_recursive>
 800685a:	bf00      	nop
 800685c:	20000628 	.word	0x20000628

08006860 <__malloc_unlock>:
 8006860:	4801      	ldr	r0, [pc, #4]	; (8006868 <__malloc_unlock+0x8>)
 8006862:	f000 b80c 	b.w	800687e <__retarget_lock_release_recursive>
 8006866:	bf00      	nop
 8006868:	20000628 	.word	0x20000628

0800686c <_malloc_usable_size_r>:
 800686c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006870:	1f18      	subs	r0, r3, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	bfbc      	itt	lt
 8006876:	580b      	ldrlt	r3, [r1, r0]
 8006878:	18c0      	addlt	r0, r0, r3
 800687a:	4770      	bx	lr

0800687c <__retarget_lock_acquire_recursive>:
 800687c:	4770      	bx	lr

0800687e <__retarget_lock_release_recursive>:
 800687e:	4770      	bx	lr

08006880 <_init>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	bf00      	nop
 8006884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006886:	bc08      	pop	{r3}
 8006888:	469e      	mov	lr, r3
 800688a:	4770      	bx	lr

0800688c <_fini>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	bf00      	nop
 8006890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006892:	bc08      	pop	{r3}
 8006894:	469e      	mov	lr, r3
 8006896:	4770      	bx	lr
