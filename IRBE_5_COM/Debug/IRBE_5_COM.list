
IRBE_5_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08007170  08007170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800726c  0800726c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007274  08007274  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800727c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000090  0800730c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  0800730c  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cf3  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b02  00000000  00000000  00036db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  000398b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  0003aa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181bb  00000000  00000000  0003ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131d8  00000000  00000000  00053c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000912a8  00000000  00000000  00066dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f80a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d60  00000000  00000000  000f80f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007158 	.word	0x08007158

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08007158 	.word	0x08007158

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <SX1278_hw_init>:

//////////////////////////////////
// logic
//////////////////////////////////

void SX1278_hw_init(SX1278_hw_t * hw) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 80005b0:	2101      	movs	r1, #1
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 f80d 	bl	80005d2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6858      	ldr	r0, [r3, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	2201      	movs	r2, #1
 80005c4:	4619      	mov	r1, r3
 80005c6:	f003 fb23 	bl	8003c10 <HAL_GPIO_WritePin>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <SX1278_hw_SetNSS>:

void SX1278_hw_SetNSS(SX1278_hw_t * hw, int value) {
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6958      	ldr	r0, [r3, #20]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	b299      	uxth	r1, r3
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	bf0c      	ite	eq
 80005ec:	2301      	moveq	r3, #1
 80005ee:	2300      	movne	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	461a      	mov	r2, r3
 80005f4:	f003 fb0c 	bl	8003c10 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <SX1278_hw_Reset>:

void SX1278_hw_Reset(SX1278_hw_t * hw) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000608:	2101      	movs	r1, #1
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ffe1 	bl	80005d2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6858      	ldr	r0, [r3, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	b29b      	uxth	r3, r3
 800061a:	2200      	movs	r2, #0
 800061c:	4619      	mov	r1, r3
 800061e:	f003 faf7 	bl	8003c10 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f000 f856 	bl	80006d4 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6858      	ldr	r0, [r3, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	b29b      	uxth	r3, r3
 8000632:	2201      	movs	r2, #1
 8000634:	4619      	mov	r1, r3
 8000636:	f003 faeb 	bl	8003c10 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f000 f84a 	bl	80006d4 <SX1278_hw_DelayMs>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <SX1278_hw_SPICommand>:

void SX1278_hw_SPICommand(SX1278_hw_t * hw, uint8_t cmd) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000654:	2100      	movs	r1, #0
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f7ff ffbb 	bl	80005d2 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6998      	ldr	r0, [r3, #24]
 8000660:	1cf9      	adds	r1, r7, #3
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	2201      	movs	r2, #1
 8000668:	f004 f801 	bl	800466e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 800066c:	bf00      	nop
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4618      	mov	r0, r3
 8000674:	f004 fad9 	bl	8004c2a <HAL_SPI_GetState>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d1f7      	bne.n	800066e <SX1278_hw_SPICommand+0x26>
		;
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <SX1278_hw_SPIReadByte>:

uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t * hw) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000694:	2300      	movs	r3, #0
 8000696:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000698:	2100      	movs	r1, #0
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ff99 	bl	80005d2 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6998      	ldr	r0, [r3, #24]
 80006a4:	f107 020e 	add.w	r2, r7, #14
 80006a8:	f107 010f 	add.w	r1, r7, #15
 80006ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2301      	movs	r3, #1
 80006b4:	f004 f917 	bl	80048e6 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80006b8:	bf00      	nop
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fab3 	bl	8004c2a <HAL_SPI_GetState>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d1f7      	bne.n	80006ba <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 80006ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <SX1278_hw_DelayMs>:

void SX1278_hw_DelayMs(uint32_t msec) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f002 fc2d 	bl	8002f3c <HAL_Delay>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <SX1278_SPIRead>:

//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX1278_SPIRead(SX1278_t * module, uint8_t addr) {
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b084      	sub	sp, #16
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	460b      	mov	r3, r1
 80006f4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	78fa      	ldrb	r2, [r7, #3]
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffa2 	bl	8000648 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffbd 	bl	8000688 <SX1278_hw_SPIReadByte>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2101      	movs	r1, #1
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff5a 	bl	80005d2 <SX1278_hw_SetNSS>
	return tmp;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t * module, uint8_t addr, uint8_t cmd) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
 8000734:	4613      	mov	r3, r2
 8000736:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff47 	bl	80005d2 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074e:	b2db      	uxtb	r3, r3
 8000750:	4619      	mov	r1, r3
 8000752:	4610      	mov	r0, r2
 8000754:	f7ff ff78 	bl	8000648 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	78ba      	ldrb	r2, [r7, #2]
 800075e:	4611      	mov	r1, r2
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff71 	bl	8000648 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2101      	movs	r1, #1
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff30 	bl	80005d2 <SX1278_hw_SetNSS>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t * module, uint8_t addr, uint8_t* txBuf,
		uint8_t length) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	461a      	mov	r2, r3
 8000786:	460b      	mov	r3, r1
 8000788:	72fb      	strb	r3, [r7, #11]
 800078a:	4613      	mov	r3, r2
 800078c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 800078e:	7abb      	ldrb	r3, [r7, #10]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d929      	bls.n	80007e8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff19 	bl	80005d2 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	7afb      	ldrb	r3, [r7, #11]
 80007a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	4610      	mov	r0, r2
 80007b0:	f7ff ff4a 	bl	8000648 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	75fb      	strb	r3, [r7, #23]
 80007b8:	e00b      	b.n	80007d2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	7dfb      	ldrb	r3, [r7, #23]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4619      	mov	r1, r3
 80007c8:	f7ff ff3e 	bl	8000648 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	3301      	adds	r3, #1
 80007d0:	75fb      	strb	r3, [r7, #23]
 80007d2:	7dfa      	ldrb	r2, [r7, #23]
 80007d4:	7abb      	ldrb	r3, [r7, #10]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d3ef      	bcc.n	80007ba <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fef6 	bl	80005d2 <SX1278_hw_SetNSS>
 80007e6:	e000      	b.n	80007ea <SX1278_SPIBurstWrite+0x70>
		return;
 80007e8:	bf00      	nop
	}
}
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SX1278_defaultConfig>:

void SX1278_defaultConfig(SX1278_t * module) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	6078      	str	r0, [r7, #4]
	SX1278_config(module, module->frequency, module->power, module->LoRa_Rate,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7919      	ldrb	r1, [r3, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	795a      	ldrb	r2, [r3, #5]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7998      	ldrb	r0, [r3, #6]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	79db      	ldrb	r3, [r3, #7]
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	4603      	mov	r3, r0
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 f805 	bl	800081c <SX1278_config>
			module->LoRa_BW);
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <SX1278_config>:

void SX1278_config(SX1278_t * module, uint8_t frequency, uint8_t power,
	uint8_t LoRa_Rate, uint8_t LoRa_BW) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	4608      	mov	r0, r1
 8000826:	4611      	mov	r1, r2
 8000828:	461a      	mov	r2, r3
 800082a:	4603      	mov	r3, r0
 800082c:	70fb      	strb	r3, [r7, #3]
 800082e:	460b      	mov	r3, r1
 8000830:	70bb      	strb	r3, [r7, #2]
 8000832:	4613      	mov	r3, r2
 8000834:	707b      	strb	r3, [r7, #1]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f000 f976 	bl	8000b28 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800083c:	200f      	movs	r0, #15
 800083e:	f7ff ff49 	bl	80006d4 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 f980 	bl	8000b48 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
	(uint8_t*) SX1278_Frequency[frequency], 3); //setting  frequency parameter
 8000848:	78fa      	ldrb	r2, [r7, #3]
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	4a41      	ldr	r2, [pc, #260]	; (8000958 <SX1278_config+0x13c>)
 8000852:	441a      	add	r2, r3
	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8000854:	2303      	movs	r3, #3
 8000856:	2106      	movs	r1, #6
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff8e 	bl	800077a <SX1278_SPIBurstWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, 0b10000000); //Setting output power parameter
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	2109      	movs	r1, #9
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff60 	bl	8000728 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000868:	220b      	movs	r2, #11
 800086a:	210b      	movs	r1, #11
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff5b 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000872:	2223      	movs	r2, #35	; 0x23
 8000874:	210c      	movs	r1, #12
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ff56 	bl	8000728 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[LoRa_Rate] == 6) {	//SFactor=6
 800087c:	787b      	ldrb	r3, [r7, #1]
 800087e:	4a37      	ldr	r2, [pc, #220]	; (800095c <SX1278_config+0x140>)
 8000880:	5cd3      	ldrb	r3, [r2, r3]
 8000882:	2b06      	cmp	r3, #6
 8000884:	d131      	bne.n	80008ea <SX1278_config+0xce>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000886:	7e3b      	ldrb	r3, [r7, #24]
 8000888:	4a35      	ldr	r2, [pc, #212]	; (8000960 <SX1278_config+0x144>)
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000890:	3303      	adds	r3, #3
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	211d      	movs	r1, #29
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff45 	bl	8000728 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 800089e:	787b      	ldrb	r3, [r7, #1]
 80008a0:	4a2e      	ldr	r2, [pc, #184]	; (800095c <SX1278_config+0x140>)
 80008a2:	5cd3      	ldrb	r3, [r2, r3]
 80008a4:	011b      	lsls	r3, r3, #4
 80008a6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80008a8:	3307      	adds	r3, #7
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	211e      	movs	r1, #30
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff39 	bl	8000728 <SX1278_SPIWrite>
						+ 0x03));

		tmp = SX1278_SPIRead(module, 0x31);
 80008b6:	2131      	movs	r1, #49	; 0x31
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ff16 	bl	80006ea <SX1278_SPIRead>
 80008be:	4603      	mov	r3, r0
 80008c0:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	f023 0307 	bic.w	r3, r3, #7
 80008c8:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	f043 0305 	orr.w	r3, r3, #5
 80008d0:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	461a      	mov	r2, r3
 80008d6:	2131      	movs	r1, #49	; 0x31
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ff25 	bl	8000728 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80008de:	220c      	movs	r2, #12
 80008e0:	2137      	movs	r1, #55	; 0x37
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ff20 	bl	8000728 <SX1278_SPIWrite>
 80008e8:	e017      	b.n	800091a <SX1278_config+0xfe>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[LoRa_BW] << 4) + (SX1278_CR << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80008ea:	7e3b      	ldrb	r3, [r7, #24]
 80008ec:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <SX1278_config+0x144>)
 80008ee:	5cd3      	ldrb	r3, [r2, r3]
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80008f4:	3302      	adds	r3, #2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	461a      	mov	r2, r3
 80008fa:	211d      	movs	r1, #29
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff13 	bl	8000728 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[LoRa_Rate] << 4) + (SX1278_CRC << 2)
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <SX1278_config+0x140>)
 8000906:	5cd3      	ldrb	r3, [r2, r3]
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800090c:	3307      	adds	r3, #7
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	211e      	movs	r1, #30
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff07 	bl	8000728 <SX1278_SPIWrite>
						+ 0x03)); //SFactor &  LNA gain set by the internal AGC loop
	}

	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800091a:	22ff      	movs	r2, #255	; 0xff
 800091c:	211f      	movs	r1, #31
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ff02 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000924:	2200      	movs	r2, #0
 8000926:	2120      	movs	r1, #32
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fefd 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 12); //RegPreambleLsb 8+4=12byte Preamble
 800092e:	220c      	movs	r2, #12
 8000930:	2121      	movs	r1, #33	; 0x21
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fef8 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000938:	2201      	movs	r2, #1
 800093a:	2141      	movs	r1, #65	; 0x41
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff fef3 	bl	8000728 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 f8dc 	bl	8000b08 <SX1278_standby>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	08007200 	.word	0x08007200
 800095c:	08007204 	.word	0x08007204
 8000960:	0800720c 	.word	0x0800720c

08000964 <SX1278_RTTY_Config>:

void SX1278_RTTY_Config(SX1278_t * module){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	SX1278_FSK_Config(module); // set base parameters
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 f895 	bl	8000a9c <SX1278_FSK_Config>
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f000 f8d8 	bl	8000b28 <SX1278_sleep>

	SX1278_SPIWrite(module, LR_RegPaConfig, 0b11110000);//0x87);	//Normal and RX
 8000978:	22f0      	movs	r2, #240	; 0xf0
 800097a:	2109      	movs	r1, #9
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fed3 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);
 8000982:	2284      	movs	r2, #132	; 0x84
 8000984:	214d      	movs	r1, #77	; 0x4d
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff fece 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41);
 800098c:	2241      	movs	r2, #65	; 0x41
 800098e:	2140      	movs	r1, #64	; 0x40
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff fec9 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegPayloadLength, 8); //Payload Length 8 bytes
 8000996:	2208      	movs	r2, #8
 8000998:	2132      	movs	r1, #50	; 0x32
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff fec4 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegFifoThresh, 8 - 1);     //Fixed length, packetformat = 0
 80009a0:	2207      	movs	r2, #7
 80009a2:	2135      	movs	r1, #53	; 0x35
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff febf 	bl	8000728 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, RegFdevLsb, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2105      	movs	r1, #5
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff feba 	bl	8000728 <SX1278_SPIWrite>
	SX1278_standby(module); //Entry standby mode
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f000 f8a7 	bl	8000b08 <SX1278_standby>
	SX1278_hw_DelayMs(1);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff fe8a 	bl	80006d4 <SX1278_hw_DelayMs>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <SX1278_RTTY_Stop>:

void SX1278_RTTY_Stop(SX1278_t * module){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	//SX1278_SPIWrite(module, LR_RegOpMode, 0b1);
	SX1278_standby(module);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 f899 	bl	8000b08 <SX1278_standby>
	uint8_t ret = 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 80009da:	213e      	movs	r1, #62	; 0x3e
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff fe84 	bl	80006ea <SX1278_SPIRead>
 80009e2:	4603      	mov	r3, r0
 80009e4:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 80009e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db00      	blt.n	80009f0 <SX1278_RTTY_Stop+0x28>
		ret = SX1278_SPIRead(module, 0x3e);
 80009ee:	e7f4      	b.n	80009da <SX1278_RTTY_Stop+0x12>
			break;
 80009f0:	bf00      	nop
		}
	}
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <SX1278_RTTY_WriteLow>:

void SX1278_RTTY_WriteLow(SX1278_t * module){
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b084      	sub	sp, #16
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
	SX1278_RTTY_Stop(module);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffe0 	bl	80009c8 <SX1278_RTTY_Stop>
	SX1278_SPIWrite(module, RegFreqLsb, 0); //  LSB
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff fe8b 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1010);
 8000a12:	220a      	movs	r2, #10
 8000a14:	2101      	movs	r1, #1
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff fe86 	bl	8000728 <SX1278_SPIWrite>

	uint8_t ret = 1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 8000a20:	213e      	movs	r1, #62	; 0x3e
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff fe61 	bl	80006ea <SX1278_SPIRead>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 8000a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db00      	blt.n	8000a36 <SX1278_RTTY_WriteLow+0x3c>
		ret = SX1278_SPIRead(module, 0x3e);
 8000a34:	e7f4      	b.n	8000a20 <SX1278_RTTY_WriteLow+0x26>
			break;
 8000a36:	bf00      	nop
		}
	}


	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);
 8000a38:	220b      	movs	r2, #11
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fe73 	bl	8000728 <SX1278_SPIWrite>

}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <SX1278_RTTY_WriteHigh>:

void SX1278_RTTY_WriteHigh(SX1278_t * module){
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	SX1278_RTTY_Stop(module);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffb8 	bl	80009c8 <SX1278_RTTY_Stop>
	SX1278_SPIWrite(module, RegFreqLsb, 10); //  HSB
 8000a58:	220a      	movs	r2, #10
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff fe63 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1010);
 8000a62:	220a      	movs	r2, #10
 8000a64:	2101      	movs	r1, #1
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fe5e 	bl	8000728 <SX1278_SPIWrite>

	uint8_t ret = 1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
	while(1){
		ret = SX1278_SPIRead(module, 0x3e);
 8000a70:	213e      	movs	r1, #62	; 0x3e
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fe39 	bl	80006ea <SX1278_SPIRead>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	73fb      	strb	r3, [r7, #15]
		if(ret & 0b10000000){
 8000a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db00      	blt.n	8000a86 <SX1278_RTTY_WriteHigh+0x3c>
		ret = SX1278_SPIRead(module, 0x3e);
 8000a84:	e7f4      	b.n	8000a70 <SX1278_RTTY_WriteHigh+0x26>
			break;
 8000a86:	bf00      	nop
		}
	}
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);
 8000a88:	220b      	movs	r2, #11
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff fe4b 	bl	8000728 <SX1278_SPIWrite>
}
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <SX1278_FSK_Config>:

void SX1278_FSK_Config(SX1278_t * module) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 f83f 	bl	8000b28 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f7ff fe12 	bl	80006d4 <SX1278_hw_DelayMs>

	SX1278_SPIBurstWrite(module, LR_RegFrMsb,
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <SX1278_FSK_Config+0x68>)
 8000ab4:	2106      	movs	r1, #6
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff fe5f 	bl	800077a <SX1278_SPIBurstWrite>
	(uint8_t*) SX1278_Frequency[SX1278_433MHZ], 3); //setting  frequency parameter 434 MHz

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, 0b10000000); //Setting output power parameter
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	2109      	movs	r1, #9
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fe31 	bl	8000728 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000ac6:	220b      	movs	r2, #11
 8000ac8:	210b      	movs	r1, #11
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fe2c 	bl	8000728 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000ad0:	2223      	movs	r2, #35	; 0x23
 8000ad2:	210c      	movs	r1, #12
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fe27 	bl	8000728 <SX1278_SPIWrite>

	//SX1278_SPIWrite(module, 0x1f, 0x00);		//disable preamble detect
	//SX1278_SPIWrite(module, 0x27, 0b10000000);		//disable sync word

	SX1278_SPIWrite(module, 0x30, 0b1000);     //Fixed length, packetformat = 0
 8000ada:	2208      	movs	r2, #8
 8000adc:	2130      	movs	r1, #48	; 0x30
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff fe22 	bl	8000728 <SX1278_SPIWrite>
	// set datarate
	//datarate 9c40 = 800bps

	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2141      	movs	r1, #65	; 0x41
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fe1d 	bl	8000728 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	SX1278_standby(module); //Entry standby mode
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f806 	bl	8000b08 <SX1278_standby>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	08007200 	.word	0x08007200

08000b08 <SX1278_standby>:

void SX1278_standby(SX1278_t * module) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000b10:	2209      	movs	r2, #9
 8000b12:	2101      	movs	r1, #1
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fe07 	bl	8000728 <SX1278_SPIWrite>
	module->status = STANDBY;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	725a      	strb	r2, [r3, #9]
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <SX1278_sleep>:

void SX1278_sleep(SX1278_t * module) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000b30:	2208      	movs	r2, #8
 8000b32:	2101      	movs	r1, #1
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff fdf7 	bl	8000728 <SX1278_SPIWrite>
	module->status = SLEEP;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	725a      	strb	r2, [r3, #9]
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t * module) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000b50:	2288      	movs	r2, #136	; 0x88
 8000b52:	2101      	movs	r1, #1
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fde7 	bl	8000728 <SX1278_SPIWrite>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t * module) {
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000b6a:	22ff      	movs	r2, #255	; 0xff
 8000b6c:	2112      	movs	r1, #18
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fdda 	bl	8000728 <SX1278_SPIWrite>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <SX1278_FSK_EntryRx>:

int SX1278_FSK_EntryRx(SX1278_t * module, uint8_t length) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	70fb      	strb	r3, [r7, #3]
	module->packetLength = length;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	78fa      	ldrb	r2, [r7, #3]
 8000b8c:	721a      	strb	r2, [r3, #8]

	SX1278_FSK_Config(module); // set base parameters
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ff84 	bl	8000a9c <SX1278_FSK_Config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000b94:	2284      	movs	r2, #132	; 0x84
 8000b96:	214d      	movs	r1, #77	; 0x4d
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff fdc5 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2140      	movs	r1, #64	; 0x40
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fdc0 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x05, 0x52); // 5kHz freq deviation
 8000ba8:	2252      	movs	r2, #82	; 0x52
 8000baa:	2105      	movs	r1, #5
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fdbb 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, 0x32, length); //Payload Length 8 bytes
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	2132      	movs	r1, #50	; 0x32
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fdb5 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0b1101);	//Mode//Low Frequency Mode
 8000bbe:	220d      	movs	r2, #13
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fdb0 	bl	8000728 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	return 1;
 8000bd0:	2301      	movs	r3, #1
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <SX1278_FSK_EntryTx>:

int SX1278_FSK_EntryTx(SX1278_t * module, uint8_t length) {
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	460b      	mov	r3, r1
 8000be4:	70fb      	strb	r3, [r7, #3]
	module->packetLength = length;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	78fa      	ldrb	r2, [r7, #3]
 8000bea:	721a      	strb	r2, [r3, #8]

	SX1278_FSK_Config(module); // set base parameters
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff55 	bl	8000a9c <SX1278_FSK_Config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);//0x87);	//Normal and RX
 8000bf2:	2284      	movs	r2, #132	; 0x84
 8000bf4:	214d      	movs	r1, #77	; 0x4d
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fd96 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41);
 8000bfc:	2241      	movs	r2, #65	; 0x41
 8000bfe:	2140      	movs	r1, #64	; 0x40
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff fd91 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegFdevLsb, 0x52); // 5kHz freq deviation
 8000c06:	2252      	movs	r2, #82	; 0x52
 8000c08:	2105      	movs	r1, #5
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff fd8c 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, RegPayloadLength, length); //Payload Length 8 bytes
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	461a      	mov	r2, r3
 8000c14:	2132      	movs	r1, #50	; 0x32
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fd86 	bl	8000728 <SX1278_SPIWrite>
	//	SX1278_SPIWrite(module, RegBitRateLsb, 0x2B);	// 1200 bps
	//	SX1278_SPIWrite(module, RegBitRateMsb, 0x68);
	SX1278_SPIWrite(module, RegFifoThresh, length - 1);     //Fixed length, packetformat = 0
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	2135      	movs	r1, #53	; 0x35
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fd7e 	bl	8000728 <SX1278_SPIWrite>


	module->readBytes = 0;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	SX1278_hw_DelayMs(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff fd4d 	bl	80006d4 <SX1278_hw_DelayMs>
	return 1;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t * module, uint8_t length, uint32_t timeout) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	7afa      	ldrb	r2, [r7, #11]
 8000c56:	721a      	strb	r2, [r3, #8]

	SX1278_defaultConfig(module);		//Setting base parameter
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff fdc9 	bl	80007f0 <SX1278_defaultConfig>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000c5e:	2284      	movs	r2, #132	; 0x84
 8000c60:	214d      	movs	r1, #77	; 0x4d
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f7ff fd60 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000c68:	22ff      	movs	r2, #255	; 0xff
 8000c6a:	2124      	movs	r1, #36	; 0x24
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f7ff fd5b 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000c72:	2201      	movs	r2, #1
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f7ff fd56 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000c7c:	223f      	movs	r2, #63	; 0x3f
 8000c7e:	2111      	movs	r1, #17
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f7ff fd51 	bl	8000728 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f7ff ff6b 	bl	8000b62 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000c8c:	7afb      	ldrb	r3, [r7, #11]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2122      	movs	r1, #34	; 0x22
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff fd48 	bl	8000728 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000c98:	210f      	movs	r1, #15
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff fd25 	bl	80006ea <SX1278_SPIRead>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	210d      	movs	r1, #13
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff fd3c 	bl	8000728 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000cb0:	228d      	movs	r2, #141	; 0x8d
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f7ff fd37 	bl	8000728 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000cc2:	2118      	movs	r1, #24
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f7ff fd10 	bl	80006ea <SX1278_SPIRead>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d104      	bne.n	8000cde <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	725a      	strb	r2, [r3, #9]
			return 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e013      	b.n	8000d06 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d109      	bne.n	8000cfe <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fc86 	bl	8000600 <SX1278_hw_Reset>
			SX1278_defaultConfig(module);
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f7ff fd7b 	bl	80007f0 <SX1278_defaultConfig>
			return 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e003      	b.n	8000d06 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff fce8 	bl	80006d4 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000d04:	e7dd      	b.n	8000cc2 <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <SX1278_FSK_TxPacket>:
			return 0;
		}
	}
}

int SX1278_FSK_TxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length, uint32_t timeout) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71fb      	strb	r3, [r7, #7]
    uint8_t gotResponse = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	77fb      	strb	r3, [r7, #31]
	uint32_t tickstart = HAL_GetTick();
 8000d24:	f002 f8fe 	bl	8002f24 <HAL_GetTick>
 8000d28:	6178      	str	r0, [r7, #20]
	uint32_t wait = timeout;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	61bb      	str	r3, [r7, #24]
	uint8_t temp = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	74fb      	strb	r3, [r7, #19]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY){
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d38:	d005      	beq.n	8000d46 <SX1278_FSK_TxPacket+0x36>
		wait += (uint32_t)(uwTickFreq);
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <SX1278_FSK_TxPacket+0x9c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	4413      	add	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
	}

	SX1278_FSK_EntryTx(module, length);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f7ff ff45 	bl	8000bda <SX1278_FSK_EntryTx>

	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	2100      	movs	r1, #0
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f7ff fd0f 	bl	800077a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, LR_RegOpMode, 0b1011);	//Mode//Low Frequency Mode
 8000d5c:	220b      	movs	r2, #11
 8000d5e:	2101      	movs	r1, #1
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f7ff fce1 	bl	8000728 <SX1278_SPIWrite>

	while(!gotResponse){
 8000d66:	e014      	b.n	8000d92 <SX1278_FSK_TxPacket+0x82>
	    temp = SX1278_SPIRead(module, RegIrqFlags2); // check if fifo sent is set
 8000d68:	213f      	movs	r1, #63	; 0x3f
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff fcbd 	bl	80006ea <SX1278_SPIRead>
 8000d70:	4603      	mov	r3, r0
 8000d72:	74fb      	strb	r3, [r7, #19]
	    if(temp & 0b1000){
 8000d74:	7cfb      	ldrb	r3, [r7, #19]
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SX1278_FSK_TxPacket+0x72>
	    	gotResponse =  1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	77fb      	strb	r3, [r7, #31]
	    }
		if((HAL_GetTick() - tickstart) >= wait){
 8000d82:	f002 f8cf 	bl	8002f24 <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d903      	bls.n	8000d9a <SX1278_FSK_TxPacket+0x8a>
	while(!gotResponse){
 8000d92:	7ffb      	ldrb	r3, [r7, #31]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0e7      	beq.n	8000d68 <SX1278_FSK_TxPacket+0x58>
 8000d98:	e000      	b.n	8000d9c <SX1278_FSK_TxPacket+0x8c>
			break;								// timeout happened
 8000d9a:	bf00      	nop
		}
	}
	SX1278_standby(module);
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff feb3 	bl	8000b08 <SX1278_standby>
	return gotResponse;
 8000da2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000028 	.word	0x20000028

08000db0 <SX1278_FSK_RxPacket>:

int SX1278_FSK_RxPacket(SX1278_t * module, uint8_t* txBuffer, uint8_t length, uint32_t timeout) {
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b08b      	sub	sp, #44	; 0x2c
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	71fb      	strb	r3, [r7, #7]
    uint8_t gotResponse = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t tickstart = HAL_GetTick();
 8000dc6:	f002 f8ad 	bl	8002f24 <HAL_GetTick>
 8000dca:	61b8      	str	r0, [r7, #24]
	uint32_t wait = timeout;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	623b      	str	r3, [r7, #32]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY){
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd6:	d005      	beq.n	8000de4 <SX1278_FSK_RxPacket+0x34>
		wait += (uint32_t)(uwTickFreq);
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <SX1278_FSK_RxPacket+0xb8>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	6a3b      	ldr	r3, [r7, #32]
 8000de0:	4413      	add	r3, r2
 8000de2:	623b      	str	r3, [r7, #32]
	}

	uint8_t temp = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	75fb      	strb	r3, [r7, #23]

	while(!gotResponse){
 8000de8:	e031      	b.n	8000e4e <SX1278_FSK_RxPacket+0x9e>
		temp = SX1278_SPIRead(module, 0x3f);
 8000dea:	213f      	movs	r1, #63	; 0x3f
 8000dec:	68f8      	ldr	r0, [r7, #12]
 8000dee:	f7ff fc7c 	bl	80006ea <SX1278_SPIRead>
 8000df2:	4603      	mov	r3, r0
 8000df4:	75fb      	strb	r3, [r7, #23]

	    if((temp & 0b100) && temp != 255){
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d01e      	beq.n	8000e3e <SX1278_FSK_RxPacket+0x8e>
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	2bff      	cmp	r3, #255	; 0xff
 8000e04:	d01b      	beq.n	8000e3e <SX1278_FSK_RxPacket+0x8e>
	    	gotResponse = 1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    	for(uint8_t i = 0; i < length; i++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	77fb      	strb	r3, [r7, #31]
 8000e10:	e00b      	b.n	8000e2a <SX1278_FSK_RxPacket+0x7a>
	    		txBuffer[i] = SX1278_SPIRead(module, RegFIFO);
 8000e12:	7ffb      	ldrb	r3, [r7, #31]
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	18d4      	adds	r4, r2, r3
 8000e18:	2100      	movs	r1, #0
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f7ff fc65 	bl	80006ea <SX1278_SPIRead>
 8000e20:	4603      	mov	r3, r0
 8000e22:	7023      	strb	r3, [r4, #0]
	    	for(uint8_t i = 0; i < length; i++){
 8000e24:	7ffb      	ldrb	r3, [r7, #31]
 8000e26:	3301      	adds	r3, #1
 8000e28:	77fb      	strb	r3, [r7, #31]
 8000e2a:	7ffa      	ldrb	r2, [r7, #31]
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3ef      	bcc.n	8000e12 <SX1278_FSK_RxPacket+0x62>
	    	}
	    	temp = SX1278_SPIRead(module, RegIrqFlags2);
 8000e32:	213f      	movs	r1, #63	; 0x3f
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f7ff fc58 	bl	80006ea <SX1278_SPIRead>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	75fb      	strb	r3, [r7, #23]

	    }

		if((HAL_GetTick() - tickstart) >= wait){
 8000e3e:	f002 f871 	bl	8002f24 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	6a3a      	ldr	r2, [r7, #32]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d904      	bls.n	8000e58 <SX1278_FSK_RxPacket+0xa8>
	while(!gotResponse){
 8000e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0c9      	beq.n	8000dea <SX1278_FSK_RxPacket+0x3a>
 8000e56:	e000      	b.n	8000e5a <SX1278_FSK_RxPacket+0xaa>
			break;								// timeout happened
 8000e58:	bf00      	nop
		}
	}

	return gotResponse;
 8000e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	372c      	adds	r7, #44	; 0x2c
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000028 	.word	0x20000028

08000e6c <SX1278_begin>:
		SX1278_hw_DelayMs(1);
	}
}

void SX1278_begin(SX1278_t * module, uint8_t frequency, uint8_t power,
		uint8_t LoRa_Rate, uint8_t LoRa_BW, uint8_t packetLength) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	4608      	mov	r0, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	70fb      	strb	r3, [r7, #3]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	70bb      	strb	r3, [r7, #2]
 8000e82:	4613      	mov	r3, r2
 8000e84:	707b      	strb	r3, [r7, #1]
	SX1278_hw_init(module->hw);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb8c 	bl	80005a8 <SX1278_hw_init>
	module->frequency = frequency;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	78fa      	ldrb	r2, [r7, #3]
 8000e94:	711a      	strb	r2, [r3, #4]
	module->power = power;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	78ba      	ldrb	r2, [r7, #2]
 8000e9a:	715a      	strb	r2, [r3, #5]
	module->LoRa_Rate = LoRa_Rate;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	787a      	ldrb	r2, [r7, #1]
 8000ea0:	719a      	strb	r2, [r3, #6]
	module->LoRa_BW = LoRa_BW;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7c3a      	ldrb	r2, [r7, #16]
 8000ea6:	71da      	strb	r2, [r3, #7]
	module->packetLength = packetLength;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7d3a      	ldrb	r2, [r7, #20]
 8000eac:	721a      	strb	r2, [r3, #8]
	SX1278_defaultConfig(module);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fc9e 	bl	80007f0 <SX1278_defaultConfig>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <GPS_Receive>:
// "00.358"



/* Pass uint8_t of received data */
void GPS_Receive(uint8_t data){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	if(data == '$'){
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b24      	cmp	r3, #36	; 0x24
 8000eca:	d103      	bne.n	8000ed4 <GPS_Receive+0x18>
		gpsTempLen = 0;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <GPS_Receive+0x68>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
		gpsTempLen = 255;
	}else if(gpsTempLen != 255){
		gpsTemp[gpsTempLen] = data;
		gpsTempLen++;
	}
}
 8000ed2:	e023      	b.n	8000f1c <GPS_Receive+0x60>
	}else if((data == 13 || data == 10) && gpsTempLen != 255){
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b0d      	cmp	r3, #13
 8000ed8:	d002      	beq.n	8000ee0 <GPS_Receive+0x24>
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b0a      	cmp	r3, #10
 8000ede:	d10d      	bne.n	8000efc <GPS_Receive+0x40>
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <GPS_Receive+0x68>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2bff      	cmp	r3, #255	; 0xff
 8000ee6:	d009      	beq.n	8000efc <GPS_Receive+0x40>
		GPS_Parse(gpsTemp, gpsTempLen);
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <GPS_Receive+0x68>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	480e      	ldr	r0, [pc, #56]	; (8000f28 <GPS_Receive+0x6c>)
 8000ef0:	f000 f81c 	bl	8000f2c <GPS_Parse>
		gpsTempLen = 255;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <GPS_Receive+0x68>)
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	701a      	strb	r2, [r3, #0]
}
 8000efa:	e00f      	b.n	8000f1c <GPS_Receive+0x60>
	}else if(gpsTempLen != 255){
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <GPS_Receive+0x68>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2bff      	cmp	r3, #255	; 0xff
 8000f02:	d00b      	beq.n	8000f1c <GPS_Receive+0x60>
		gpsTemp[gpsTempLen] = data;
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <GPS_Receive+0x68>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <GPS_Receive+0x6c>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	5453      	strb	r3, [r2, r1]
		gpsTempLen++;
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <GPS_Receive+0x68>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <GPS_Receive+0x68>)
 8000f1a:	701a      	strb	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000170 	.word	0x20000170

08000f2c <GPS_Parse>:

/* parses received frame */
uint8_t GPS_Parse(uint8_t *buf, uint8_t len){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b090      	sub	sp, #64	; 0x40
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
	if(strncmp("GPGGA", (char *)buf, 5) == 0){ // get coordinates and height
 8000f38:	2205      	movs	r2, #5
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	48cb      	ldr	r0, [pc, #812]	; (800126c <GPS_Parse+0x340>)
 8000f3e:	f005 fcf9 	bl	8006934 <strncmp>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f040 8151 	bne.w	80011ec <GPS_Parse+0x2c0>
		if(GPS_CheckSum(buf, len) == GPS_OK){
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f9e6 	bl	8001320 <GPS_CheckSum>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	f040 8146 	bne.w	80011e8 <GPS_Parse+0x2bc>
			uint8_t step = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			uint8_t i = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			while(step < 8){
 8000f68:	e131      	b.n	80011ce <GPS_Parse+0x2a2>
				if(buf[i] == ','){
 8000f6a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b2c      	cmp	r3, #44	; 0x2c
 8000f76:	f040 8125 	bne.w	80011c4 <GPS_Parse+0x298>
					i++;
 8000f7a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					step++;
 8000f84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					if(step == 1){
 8000f8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d13e      	bne.n	8001014 <GPS_Parse+0xe8>
						uint8_t tempData[6] = {0};
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	; 0x30
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	86bb      	strh	r3, [r7, #52]	; 0x34
						uint8_t leng = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
						while(buf[i] != '.'){
 8000fa4:	e015      	b.n	8000fd2 <GPS_Parse+0xa6>
							tempData[leng] = buf[i];
 8000fa6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	441a      	add	r2, r3
 8000fae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000fb2:	7812      	ldrb	r2, [r2, #0]
 8000fb4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000fb8:	440b      	add	r3, r1
 8000fba:	f803 2c10 	strb.w	r2, [r3, #-16]
							leng++;
 8000fbe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
							i++;
 8000fc8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						while(buf[i] != '.'){
 8000fd2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8000fde:	d1e2      	bne.n	8000fa6 <GPS_Parse+0x7a>
						}
						if(leng == 0){
 8000fe0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <GPS_Parse+0xc0>
							return GPS_NOK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e193      	b.n	8001314 <GPS_Parse+0x3e8>
						}
						memset(gpsTime, '0', 6);
 8000fec:	2206      	movs	r2, #6
 8000fee:	2130      	movs	r1, #48	; 0x30
 8000ff0:	489f      	ldr	r0, [pc, #636]	; (8001270 <GPS_Parse+0x344>)
 8000ff2:	f005 fc43 	bl	800687c <memset>
						memcpy(gpsTime + (6-leng), tempData, leng);
 8000ff6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000ffa:	f1c3 0306 	rsb	r3, r3, #6
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b9b      	ldr	r3, [pc, #620]	; (8001270 <GPS_Parse+0x344>)
 8001002:	4413      	add	r3, r2
 8001004:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001008:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800100c:	4618      	mov	r0, r3
 800100e:	f005 fc27 	bl	8006860 <memcpy>
 8001012:	e0d7      	b.n	80011c4 <GPS_Parse+0x298>
					}else if(step == 2 || step == 3){
 8001014:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001018:	2b02      	cmp	r3, #2
 800101a:	d004      	beq.n	8001026 <GPS_Parse+0xfa>
 800101c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001020:	2b03      	cmp	r3, #3
 8001022:	f040 8085 	bne.w	8001130 <GPS_Parse+0x204>
						uint8_t tempData[12] = {0};
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
 800102a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
						uint8_t leng = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
						while(buf[i] != ','){
 800103a:	e015      	b.n	8001068 <GPS_Parse+0x13c>
							tempData[leng] = buf[i];
 800103c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	441a      	add	r2, r3
 8001044:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800104e:	440b      	add	r3, r1
 8001050:	f803 2c1c 	strb.w	r2, [r3, #-28]
							leng++;
 8001054:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001058:	3301      	adds	r3, #1
 800105a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							i++;
 800105e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001062:	3301      	adds	r3, #1
 8001064:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						while(buf[i] != ','){
 8001068:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b2c      	cmp	r3, #44	; 0x2c
 8001074:	d1e2      	bne.n	800103c <GPS_Parse+0x110>
						}
						if(leng == 0){
 8001076:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <GPS_Parse+0x156>
							return GPS_NOK;
 800107e:	2300      	movs	r3, #0
 8001080:	e148      	b.n	8001314 <GPS_Parse+0x3e8>
						}
						i++;
 8001082:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001086:	3301      	adds	r3, #1
 8001088:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						if(buf[i] == 'N' || buf[i] == 'S' || buf[i] == 'E' || buf[i] == 'W'){
 800108c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b4e      	cmp	r3, #78	; 0x4e
 8001098:	d014      	beq.n	80010c4 <GPS_Parse+0x198>
 800109a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b53      	cmp	r3, #83	; 0x53
 80010a6:	d00d      	beq.n	80010c4 <GPS_Parse+0x198>
 80010a8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b45      	cmp	r3, #69	; 0x45
 80010b4:	d006      	beq.n	80010c4 <GPS_Parse+0x198>
 80010b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b57      	cmp	r3, #87	; 0x57
 80010c2:	d133      	bne.n	800112c <GPS_Parse+0x200>
							memset((gpsData + (step - 2) * 12), '0', 12);
 80010c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010c8:	1e9a      	subs	r2, r3, #2
 80010ca:	4613      	mov	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b67      	ldr	r3, [pc, #412]	; (8001274 <GPS_Parse+0x348>)
 80010d6:	4413      	add	r3, r2
 80010d8:	220c      	movs	r2, #12
 80010da:	2130      	movs	r1, #48	; 0x30
 80010dc:	4618      	mov	r0, r3
 80010de:	f005 fbcd 	bl	800687c <memset>
							gpsData[(step - 2) * 12 + 11] = buf[i];
 80010e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	18d1      	adds	r1, r2, r3
 80010ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010ee:	1e9a      	subs	r2, r3, #2
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	330b      	adds	r3, #11
 80010fa:	7809      	ldrb	r1, [r1, #0]
 80010fc:	4a5d      	ldr	r2, [pc, #372]	; (8001274 <GPS_Parse+0x348>)
 80010fe:	54d1      	strb	r1, [r2, r3]
						}else{
							return GPS_NOK;
						}
						memcpy(gpsData + (step - 2) * 12 + (11 - leng), tempData, leng);
 8001100:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001104:	1e9a      	subs	r2, r3, #2
 8001106:	4613      	mov	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	330b      	adds	r3, #11
 8001118:	4a56      	ldr	r2, [pc, #344]	; (8001274 <GPS_Parse+0x348>)
 800111a:	4413      	add	r3, r2
 800111c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001120:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001124:	4618      	mov	r0, r3
 8001126:	f005 fb9b 	bl	8006860 <memcpy>
					}else if(step == 2 || step == 3){
 800112a:	e04b      	b.n	80011c4 <GPS_Parse+0x298>
							return GPS_NOK;
 800112c:	2300      	movs	r3, #0
 800112e:	e0f1      	b.n	8001314 <GPS_Parse+0x3e8>
					}else if(step == 7){
 8001130:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001134:	2b07      	cmp	r3, #7
 8001136:	d145      	bne.n	80011c4 <GPS_Parse+0x298>
						i++;
 8001138:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800113c:	3301      	adds	r3, #1
 800113e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						uint8_t tempData[12] = {0};
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
						uint8_t leng = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						while(buf[i] != ','){
 8001156:	e015      	b.n	8001184 <GPS_Parse+0x258>
							tempData[leng] = buf[i];
 8001158:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	441a      	add	r2, r3
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800116a:	440b      	add	r3, r1
 800116c:	f803 2c28 	strb.w	r2, [r3, #-40]
							leng++;
 8001170:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001174:	3301      	adds	r3, #1
 8001176:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							i++;
 800117a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800117e:	3301      	adds	r3, #1
 8001180:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
						while(buf[i] != ','){
 8001184:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b2c      	cmp	r3, #44	; 0x2c
 8001190:	d1e2      	bne.n	8001158 <GPS_Parse+0x22c>
						}
						if(leng == 0){
 8001192:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <GPS_Parse+0x272>
							return GPS_NOK;
 800119a:	2300      	movs	r3, #0
 800119c:	e0ba      	b.n	8001314 <GPS_Parse+0x3e8>
						}
						memset(gpsHeight, '0', 8);
 800119e:	2208      	movs	r2, #8
 80011a0:	2130      	movs	r1, #48	; 0x30
 80011a2:	4835      	ldr	r0, [pc, #212]	; (8001278 <GPS_Parse+0x34c>)
 80011a4:	f005 fb6a 	bl	800687c <memset>
						memcpy(gpsHeight + (8-leng), tempData, leng);
 80011a8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80011ac:	f1c3 0308 	rsb	r3, r3, #8
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b31      	ldr	r3, [pc, #196]	; (8001278 <GPS_Parse+0x34c>)
 80011b4:	4413      	add	r3, r2
 80011b6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80011ba:	f107 0118 	add.w	r1, r7, #24
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 fb4e 	bl	8006860 <memcpy>
					}
				}
				i++;
 80011c4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80011c8:	3301      	adds	r3, #1
 80011ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			while(step < 8){
 80011ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011d2:	2b07      	cmp	r3, #7
 80011d4:	f67f aec9 	bls.w	8000f6a <GPS_Parse+0x3e>
			}
			isNewData = 1;
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <GPS_Parse+0x350>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
			isData = 1;
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <GPS_Parse+0x354>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
			return GPS_OK;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e095      	b.n	8001314 <GPS_Parse+0x3e8>
		}else{
			return GPS_NOK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	e093      	b.n	8001314 <GPS_Parse+0x3e8>
		}


	}else if(strncmp("GPVTG", (char *)buf, 5) == 0){ // get speed in km/h
 80011ec:	2205      	movs	r2, #5
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	4824      	ldr	r0, [pc, #144]	; (8001284 <GPS_Parse+0x358>)
 80011f2:	f005 fb9f 	bl	8006934 <strncmp>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f040 8088 	bne.w	800130e <GPS_Parse+0x3e2>
		if(GPS_CheckSum(buf, len) == GPS_OK){
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f88c 	bl	8001320 <GPS_CheckSum>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d17d      	bne.n	800130a <GPS_Parse+0x3de>
			if(GPS_CheckSum(buf, len) == GPS_OK){
 800120e:	78fb      	ldrb	r3, [r7, #3]
 8001210:	4619      	mov	r1, r3
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f884 	bl	8001320 <GPS_CheckSum>
 8001218:	4603      	mov	r3, r0
 800121a:	2b01      	cmp	r3, #1
 800121c:	d179      	bne.n	8001312 <GPS_Parse+0x3e6>
				uint8_t step = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				uint8_t i = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				while(step < 8){
 800122a:	e068      	b.n	80012fe <GPS_Parse+0x3d2>
					if(buf[i] == ','){
 800122c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4413      	add	r3, r2
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b2c      	cmp	r3, #44	; 0x2c
 8001238:	d15c      	bne.n	80012f4 <GPS_Parse+0x3c8>
						step++;
 800123a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800123e:	3301      	adds	r3, #1
 8001240:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						if(step == 7){
 8001244:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001248:	2b07      	cmp	r3, #7
 800124a:	d153      	bne.n	80012f4 <GPS_Parse+0x3c8>
							i++;
 800124c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001250:	3301      	adds	r3, #1
 8001252:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
							uint8_t tempData[12] = {0};
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
							uint8_t leng = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
							while(buf[i] != ','){
 800126a:	e023      	b.n	80012b4 <GPS_Parse+0x388>
 800126c:	08007170 	.word	0x08007170
 8001270:	200000d4 	.word	0x200000d4
 8001274:	200000ac 	.word	0x200000ac
 8001278:	200000c4 	.word	0x200000c4
 800127c:	200000db 	.word	0x200000db
 8001280:	200000da 	.word	0x200000da
 8001284:	08007178 	.word	0x08007178
								tempData[leng] = buf[i];
 8001288:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	441a      	add	r2, r3
 8001290:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800129a:	440b      	add	r3, r1
 800129c:	f803 2c34 	strb.w	r2, [r3, #-52]
								leng++;
 80012a0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012a4:	3301      	adds	r3, #1
 80012a6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
								i++;
 80012aa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80012ae:	3301      	adds	r3, #1
 80012b0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
							while(buf[i] != ','){
 80012b4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b2c      	cmp	r3, #44	; 0x2c
 80012c0:	d1e2      	bne.n	8001288 <GPS_Parse+0x35c>
							}
							if(leng == 0){
 80012c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <GPS_Parse+0x3a2>
								return GPS_NOK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e022      	b.n	8001314 <GPS_Parse+0x3e8>
							}
							memset(gpsSpeed, '0', 6);
 80012ce:	2206      	movs	r2, #6
 80012d0:	2130      	movs	r1, #48	; 0x30
 80012d2:	4812      	ldr	r0, [pc, #72]	; (800131c <GPS_Parse+0x3f0>)
 80012d4:	f005 fad2 	bl	800687c <memset>
							memcpy(gpsSpeed + (6-leng), tempData, leng);
 80012d8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80012dc:	f1c3 0306 	rsb	r3, r3, #6
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <GPS_Parse+0x3f0>)
 80012e4:	4413      	add	r3, r2
 80012e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80012ea:	f107 010c 	add.w	r1, r7, #12
 80012ee:	4618      	mov	r0, r3
 80012f0:	f005 fab6 	bl	8006860 <memcpy>
						}
					}
					i++;
 80012f4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80012f8:	3301      	adds	r3, #1
 80012fa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				while(step < 8){
 80012fe:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001302:	2b07      	cmp	r3, #7
 8001304:	d992      	bls.n	800122c <GPS_Parse+0x300>
				}
			return GPS_OK;
 8001306:	2301      	movs	r3, #1
 8001308:	e004      	b.n	8001314 <GPS_Parse+0x3e8>
			}
		}else{
			return GPS_NOK;
 800130a:	2300      	movs	r3, #0
 800130c:	e002      	b.n	8001314 <GPS_Parse+0x3e8>
		}
	}else{
		return GPS_NOK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <GPS_Parse+0x3e8>
	}
	return GPS_NOK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3740      	adds	r7, #64	; 0x40
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200000cc 	.word	0x200000cc

08001320 <GPS_CheckSum>:

/* checks checksum returns GPS_ok if data is valid*/
uint8_t GPS_CheckSum(uint8_t *buf, uint8_t len){
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
	uint8_t sum;
	uint8_t check = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]

	if(GPS_HexToByte((buf + len - 2), &sum) != GPS_OK){
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	3b02      	subs	r3, #2
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	f107 020d 	add.w	r2, r7, #13
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f822 	bl	8001388 <GPS_HexToByte>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d001      	beq.n	800134e <GPS_CheckSum+0x2e>
		return GPS_NOK;
 800134a:	2300      	movs	r3, #0
 800134c:	e018      	b.n	8001380 <GPS_CheckSum+0x60>
	}

	for(uint8_t i = 0; i < (len - 3); i++){
 800134e:	2300      	movs	r3, #0
 8001350:	73bb      	strb	r3, [r7, #14]
 8001352:	e009      	b.n	8001368 <GPS_CheckSum+0x48>
		check ^= buf[i];
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	4053      	eors	r3, r2
 8001360:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < (len - 3); i++){
 8001362:	7bbb      	ldrb	r3, [r7, #14]
 8001364:	3301      	adds	r3, #1
 8001366:	73bb      	strb	r3, [r7, #14]
 8001368:	7bba      	ldrb	r2, [r7, #14]
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	3b03      	subs	r3, #3
 800136e:	429a      	cmp	r2, r3
 8001370:	dbf0      	blt.n	8001354 <GPS_CheckSum+0x34>
	}

	if(check == sum){
 8001372:	7b7b      	ldrb	r3, [r7, #13]
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	429a      	cmp	r2, r3
 8001378:	d101      	bne.n	800137e <GPS_CheckSum+0x5e>
		return GPS_OK;
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <GPS_CheckSum+0x60>
	}

	return GPS_NOK;
 800137e:	2300      	movs	r3, #0

}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <GPS_HexToByte>:

/* converts hex string e.g. AB (0xAB) to byte value writes to value, returns GPS_OK if valid hex */
uint8_t GPS_HexToByte(uint8_t *hex, uint8_t *value){
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	uint8_t temp[2];

	for(uint8_t i = 0; i < 2; i++){
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e04c      	b.n	8001432 <GPS_HexToByte+0xaa>
		temp[i] = hex[i];
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	441a      	add	r2, r3
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	7812      	ldrb	r2, [r2, #0]
 80013a2:	f107 0110 	add.w	r1, r7, #16
 80013a6:	440b      	add	r3, r1
 80013a8:	f803 2c04 	strb.w	r2, [r3, #-4]
		if(temp[i] > 47 && temp[i] < 58){
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	f107 0210 	add.w	r2, r7, #16
 80013b2:	4413      	add	r3, r2
 80013b4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80013b8:	2b2f      	cmp	r3, #47	; 0x2f
 80013ba:	d916      	bls.n	80013ea <GPS_HexToByte+0x62>
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	f107 0210 	add.w	r2, r7, #16
 80013c2:	4413      	add	r3, r2
 80013c4:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80013c8:	2b39      	cmp	r3, #57	; 0x39
 80013ca:	d80e      	bhi.n	80013ea <GPS_HexToByte+0x62>
			temp[i] -= 48;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	f107 0210 	add.w	r2, r7, #16
 80013d2:	4413      	add	r3, r2
 80013d4:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	3a30      	subs	r2, #48	; 0x30
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	f107 0110 	add.w	r1, r7, #16
 80013e2:	440b      	add	r3, r1
 80013e4:	f803 2c04 	strb.w	r2, [r3, #-4]
 80013e8:	e020      	b.n	800142c <GPS_HexToByte+0xa4>
		}else if(temp[i] > 64 && temp[i] < 71){
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	f107 0210 	add.w	r2, r7, #16
 80013f0:	4413      	add	r3, r2
 80013f2:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80013f6:	2b40      	cmp	r3, #64	; 0x40
 80013f8:	d916      	bls.n	8001428 <GPS_HexToByte+0xa0>
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	f107 0210 	add.w	r2, r7, #16
 8001400:	4413      	add	r3, r2
 8001402:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8001406:	2b46      	cmp	r3, #70	; 0x46
 8001408:	d80e      	bhi.n	8001428 <GPS_HexToByte+0xa0>
			temp[i] -= 55;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	f107 0210 	add.w	r2, r7, #16
 8001410:	4413      	add	r3, r2
 8001412:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	3a37      	subs	r2, #55	; 0x37
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	f107 0110 	add.w	r1, r7, #16
 8001420:	440b      	add	r3, r1
 8001422:	f803 2c04 	strb.w	r2, [r3, #-4]
 8001426:	e001      	b.n	800142c <GPS_HexToByte+0xa4>
		}else{
			return GPS_NOK;
 8001428:	2300      	movs	r3, #0
 800142a:	e00e      	b.n	800144a <GPS_HexToByte+0xc2>
	for(uint8_t i = 0; i < 2; i++){
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	3301      	adds	r3, #1
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d9af      	bls.n	8001398 <GPS_HexToByte+0x10>
		}
	}

	*value = (temp[0] << 4) + temp[1];
 8001438:	7b3b      	ldrb	r3, [r7, #12]
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	b2da      	uxtb	r2, r3
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	4413      	add	r3, r2
 8001442:	b2da      	uxtb	r2, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	701a      	strb	r2, [r3, #0]

	return GPS_OK;
 8001448:	2301      	movs	r3, #1
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <GPS_GetLat>:

/* Returns latitude of length 12...9*/
void GPS_GetLat(uint8_t *buf){
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <GPS_GetLat+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
 800146a:	e00a      	b.n	8001482 <GPS_GetLat+0x2a>
		buf[i - 1] = gpsData[i];
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	3b01      	subs	r3, #1
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	440b      	add	r3, r1
 8001476:	4909      	ldr	r1, [pc, #36]	; (800149c <GPS_GetLat+0x44>)
 8001478:	5c8a      	ldrb	r2, [r1, r2]
 800147a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	3301      	adds	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b09      	cmp	r3, #9
 8001486:	d9f1      	bls.n	800146c <GPS_GetLat+0x14>
	}
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200000db 	.word	0x200000db
 800149c:	200000ac 	.word	0x200000ac

080014a0 <GPS_GetLon>:

/* Returns longitude of length 12...9*/
void GPS_GetLon(uint8_t *buf){
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <GPS_GetLon+0x44>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e00c      	b.n	80014ce <GPS_GetLon+0x2e>
		buf[i - 1] = gpsData[i + 12];
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	f103 020c 	add.w	r2, r3, #12
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	3b01      	subs	r3, #1
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	440b      	add	r3, r1
 80014c2:	4909      	ldr	r1, [pc, #36]	; (80014e8 <GPS_GetLon+0x48>)
 80014c4:	5c8a      	ldrb	r2, [r1, r2]
 80014c6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 1; i < 10; i++){
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	3301      	adds	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	2b09      	cmp	r3, #9
 80014d2:	d9ef      	bls.n	80014b4 <GPS_GetLon+0x14>
	}
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200000db 	.word	0x200000db
 80014e8:	200000ac 	.word	0x200000ac

080014ec <GPS_GetSpe>:

/* Returns speed of length 6*/
void GPS_GetSpe(uint8_t *buf){
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <GPS_GetSpe+0x3c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++){
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e009      	b.n	8001514 <GPS_GetSpe+0x28>
		buf[i] = gpsSpeed[i];
 8001500:	7bfa      	ldrb	r2, [r7, #15]
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	440b      	add	r3, r1
 8001508:	4908      	ldr	r1, [pc, #32]	; (800152c <GPS_GetSpe+0x40>)
 800150a:	5c8a      	ldrb	r2, [r1, r2]
 800150c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 6; i++){
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	3301      	adds	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	2b05      	cmp	r3, #5
 8001518:	d9f2      	bls.n	8001500 <GPS_GetSpe+0x14>
	}
}
 800151a:	bf00      	nop
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	200000db 	.word	0x200000db
 800152c:	200000cc 	.word	0x200000cc

08001530 <GPS_GetHei>:

/* Returns height of length 8*/
void GPS_GetHei(uint8_t *buf){
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <GPS_GetHei+0x3c>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
	for(; i < 8; i++){
 8001542:	e009      	b.n	8001558 <GPS_GetHei+0x28>
		buf[i] = gpsHeight[i];
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	440b      	add	r3, r1
 800154c:	4908      	ldr	r1, [pc, #32]	; (8001570 <GPS_GetHei+0x40>)
 800154e:	5c8a      	ldrb	r2, [r1, r2]
 8001550:	701a      	strb	r2, [r3, #0]
	for(; i < 8; i++){
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	3301      	adds	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b07      	cmp	r3, #7
 800155c:	d9f2      	bls.n	8001544 <GPS_GetHei+0x14>
	}
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	200000db 	.word	0x200000db
 8001570:	200000c4 	.word	0x200000c4

08001574 <GPS_GetTime>:

/* Returns time of length 8 in format "hh:mm:ss" */
void GPS_GetTime(uint8_t *buf){
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	isNewData = 0;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <GPS_GetTime+0x70>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
//	}else if(strcmp((char *)temp_hour, "23") > 1){
//		uint8_t a = strcmp((char *)temp_hour, "23") > 0;
//		temp_hour[0] = (uint8_t) '0';
//		temp_hour[1] = (uint8_t) '1';
//	}
	buf[2] = ':';
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3302      	adds	r3, #2
 8001586:	223a      	movs	r2, #58	; 0x3a
 8001588:	701a      	strb	r2, [r3, #0]
	buf[5] = ':';
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3305      	adds	r3, #5
 800158e:	223a      	movs	r2, #58	; 0x3a
 8001590:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++){
 8001592:	2300      	movs	r3, #0
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	e01b      	b.n	80015d0 <GPS_GetTime+0x5c>
		//buf[i] = temp_hour[i];
		buf[i] = gpsTime[i];
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	440b      	add	r3, r1
 80015a0:	4911      	ldr	r1, [pc, #68]	; (80015e8 <GPS_GetTime+0x74>)
 80015a2:	5c8a      	ldrb	r2, [r1, r2]
 80015a4:	701a      	strb	r2, [r3, #0]
		buf[i + 3] = gpsTime[i + 2];
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	1c9a      	adds	r2, r3, #2
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	3303      	adds	r3, #3
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	440b      	add	r3, r1
 80015b2:	490d      	ldr	r1, [pc, #52]	; (80015e8 <GPS_GetTime+0x74>)
 80015b4:	5c8a      	ldrb	r2, [r1, r2]
 80015b6:	701a      	strb	r2, [r3, #0]
		buf[i + 6] = gpsTime[i + 4];
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	1d1a      	adds	r2, r3, #4
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	3306      	adds	r3, #6
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	440b      	add	r3, r1
 80015c4:	4908      	ldr	r1, [pc, #32]	; (80015e8 <GPS_GetTime+0x74>)
 80015c6:	5c8a      	ldrb	r2, [r1, r2]
 80015c8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 2; i++){
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	3301      	adds	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d9e0      	bls.n	8001598 <GPS_GetTime+0x24>
	}
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	200000db 	.word	0x200000db
 80015e8:	200000d4 	.word	0x200000d4

080015ec <GPS_IsData>:

/* Returns GPS_OK if got any data */
uint8_t GPS_IsData(){
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
	if(isData){
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <GPS_IsData+0x24>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d004      	beq.n	8001602 <GPS_IsData+0x16>
		isData = 0;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <GPS_IsData+0x24>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
		return GPS_OK;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <GPS_IsData+0x18>
	}else{
		return GPS_NOK;
 8001602:	2300      	movs	r3, #0
	}
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	200000da 	.word	0x200000da

08001614 <GSM_InitUart>:
#define GSM_MSG_SEND										26				//CTRL + Z
//#define GSM_MSG_SPACE										32				//SPACE


/* pass UART handle that will communicate with GSM module*/
uint8_t GSM_InitUart(UART_HandleTypeDef *huart){
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	uart = huart;
 800161c:	4a08      	ldr	r2, [pc, #32]	; (8001640 <GSM_InitUart+0x2c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
	if(huart != uart){
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <GSM_InitUart+0x2c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <GSM_InitUart+0x1c>
		return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <GSM_InitUart+0x1e>
	}else{
		return HAL_OK;
 8001630:	2300      	movs	r3, #0
	}
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	200001c4 	.word	0x200001c4

08001644 <GSM_Check_Signal>:

uint8_t GSM_Check_Signal(){
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
	uint8_t buf[32] = {0};
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]
 800165e:	619a      	str	r2, [r3, #24]
	buf[0] = 'A';
 8001660:	2341      	movs	r3, #65	; 0x41
 8001662:	703b      	strb	r3, [r7, #0]
	buf[1] = 'T';
 8001664:	2354      	movs	r3, #84	; 0x54
 8001666:	707b      	strb	r3, [r7, #1]

	GSM_Send(buf, 2);
 8001668:	463b      	mov	r3, r7
 800166a:	2102      	movs	r1, #2
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f969 	bl	8001944 <GSM_Send>
	GSM_Receive(buf, 9);
 8001672:	463b      	mov	r3, r7
 8001674:	2109      	movs	r1, #9
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f982 	bl	8001980 <GSM_Receive>

	if(GSM_IsOk(buf, 9)){
 800167c:	463b      	mov	r3, r7
 800167e:	2109      	movs	r1, #9
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f80a 	bl	800169a <GSM_IsOk>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <GSM_Check_Signal+0x4c>
		return 1;
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <GSM_Check_Signal+0x4e>
	}

	return 0;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3720      	adds	r7, #32
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <GSM_IsOk>:

uint8_t GSM_IsOk(uint8_t *dataBuf, uint8_t size){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70fb      	strb	r3, [r7, #3]

	uint8_t i = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]

	for(; i < size; i++){
 80016aa:	e012      	b.n	80016d2 <GSM_IsOk+0x38>
		if(*dataBuf == 'O'){
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b4f      	cmp	r3, #79	; 0x4f
 80016b2:	d108      	bne.n	80016c6 <GSM_IsOk+0x2c>
			dataBuf++;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3301      	adds	r3, #1
 80016b8:	607b      	str	r3, [r7, #4]
			if(*dataBuf == 'K'){
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b4b      	cmp	r3, #75	; 0x4b
 80016c0:	d101      	bne.n	80016c6 <GSM_IsOk+0x2c>
				return 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00a      	b.n	80016dc <GSM_IsOk+0x42>
			}
		}
		dataBuf++;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3301      	adds	r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
	for(; i < size; i++){
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	3301      	adds	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3e8      	bcc.n	80016ac <GSM_IsOk+0x12>
	}
	return 0;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <GSM_Find>:

uint8_t GSM_Find(uint8_t *dataBuf, uint8_t size, uint8_t *toFind, uint8_t tSize){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	461a      	mov	r2, r3
 80016f4:	460b      	mov	r3, r1
 80016f6:	72fb      	strb	r3, [r7, #11]
 80016f8:	4613      	mov	r3, r2
 80016fa:	72bb      	strb	r3, [r7, #10]
	uint8_t i = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t f = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t temp[16];

	memcpy(temp, toFind, tSize);
 8001708:	7aba      	ldrb	r2, [r7, #10]
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4618      	mov	r0, r3
 8001712:	f005 f8a5 	bl	8006860 <memcpy>

	for(; i < size; i++){
 8001716:	e022      	b.n	800175e <GSM_Find+0x76>

		if(*dataBuf == temp[f]){
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001720:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001724:	440b      	add	r3, r1
 8001726:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800172a:	429a      	cmp	r2, r3
 800172c:	d105      	bne.n	800173a <GSM_Find+0x52>
			f++;
 800172e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001732:	3301      	adds	r3, #1
 8001734:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001738:	e002      	b.n	8001740 <GSM_Find+0x58>
		}else{
			f = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		}

		if(f == tSize){
 8001740:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001744:	7abb      	ldrb	r3, [r7, #10]
 8001746:	429a      	cmp	r2, r3
 8001748:	d101      	bne.n	800174e <GSM_Find+0x66>
			return 1;
 800174a:	2301      	movs	r3, #1
 800174c:	e00d      	b.n	800176a <GSM_Find+0x82>
		}
		dataBuf++;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3301      	adds	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
	for(; i < size; i++){
 8001754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001758:	3301      	adds	r3, #1
 800175a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800175e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001762:	7afb      	ldrb	r3, [r7, #11]
 8001764:	429a      	cmp	r2, r3
 8001766:	d3d7      	bcc.n	8001718 <GSM_Find+0x30>
	}

	return 0;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <GSM_On>:

void GSM_On(){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800177e:	480b      	ldr	r0, [pc, #44]	; (80017ac <GSM_On+0x38>)
 8001780:	f002 fa46 	bl	8003c10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RST_GPIO_Port, GSM_RST_Pin ,GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178a:	4809      	ldr	r0, [pc, #36]	; (80017b0 <GSM_On+0x3c>)
 800178c:	f002 fa40 	bl	8003c10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <GSM_On+0x3c>)
 8001798:	f002 fa3a 	bl	8003c10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a2:	4802      	ldr	r0, [pc, #8]	; (80017ac <GSM_On+0x38>)
 80017a4:	f002 fa34 	bl	8003c10 <HAL_GPIO_WritePin>
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020400 	.word	0x40020400

080017b4 <GSM_Off>:

void GSM_Off(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017be:	480b      	ldr	r0, [pc, #44]	; (80017ec <GSM_Off+0x38>)
 80017c0:	f002 fa26 	bl	8003c10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RST_GPIO_Port, GSM_RST_Pin ,GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ca:	4809      	ldr	r0, [pc, #36]	; (80017f0 <GSM_Off+0x3c>)
 80017cc:	f002 fa20 	bl	8003c10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_RTS_GPIO_Port, GSM_RTS_Pin, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <GSM_Off+0x3c>)
 80017d8:	f002 fa1a 	bl	8003c10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e2:	4802      	ldr	r0, [pc, #8]	; (80017ec <GSM_Off+0x38>)
 80017e4:	f002 fa14 	bl	8003c10 <HAL_GPIO_WritePin>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020400 	.word	0x40020400

080017f4 <GSM_Message_Send>:

uint8_t GSM_Message_Send(uint8_t *dataBuf, uint8_t size, uint32_t number){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0c4      	sub	sp, #272	; 0x110
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	6018      	str	r0, [r3, #0]
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	f107 030b 	add.w	r3, r7, #11
 8001808:	460a      	mov	r2, r1
 800180a:	701a      	strb	r2, [r3, #0]
	uint8_t temp[256];

	if(GSM_Check_Signal() == 0){
 800180c:	f7ff ff1a 	bl	8001644 <GSM_Check_Signal>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <GSM_Message_Send+0x26>
		return 0;
 8001816:	2300      	movs	r3, #0
 8001818:	e082      	b.n	8001920 <GSM_Message_Send+0x12c>
	}

	memcpy(temp, GSM_MODE_TEXT, 9);
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	2209      	movs	r2, #9
 8001820:	4942      	ldr	r1, [pc, #264]	; (800192c <GSM_Message_Send+0x138>)
 8001822:	4618      	mov	r0, r3
 8001824:	f005 f81c 	bl	8006860 <memcpy>
	GSM_Send(temp, 9);
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	2109      	movs	r1, #9
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f888 	bl	8001944 <GSM_Send>
	GSM_Receive(temp, 20);
 8001834:	f107 0310 	add.w	r3, r7, #16
 8001838:	2114      	movs	r1, #20
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f8a0 	bl	8001980 <GSM_Receive>
	if(GSM_IsOk(temp, 20) == 0){
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	2114      	movs	r1, #20
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff27 	bl	800169a <GSM_IsOk>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <GSM_Message_Send+0x62>
		return 0;
 8001852:	2300      	movs	r3, #0
 8001854:	e064      	b.n	8001920 <GSM_Message_Send+0x12c>
	}

	memcpy(temp, GSM_SET_NUMBER, 9);
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	2209      	movs	r2, #9
 800185c:	4934      	ldr	r1, [pc, #208]	; (8001930 <GSM_Message_Send+0x13c>)
 800185e:	4618      	mov	r0, r3
 8001860:	f004 fffe 	bl	8006860 <memcpy>
	sprintf((char *)(temp + 9), "%lu", number);
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	3309      	adds	r3, #9
 800186a:	1d3a      	adds	r2, r7, #4
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	4931      	ldr	r1, [pc, #196]	; (8001934 <GSM_Message_Send+0x140>)
 8001870:	4618      	mov	r0, r3
 8001872:	f005 f83f 	bl	80068f4 <siprintf>
	memcpy(temp + 17, "\"", 1);
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	3311      	adds	r3, #17
 800187c:	2201      	movs	r2, #1
 800187e:	492e      	ldr	r1, [pc, #184]	; (8001938 <GSM_Message_Send+0x144>)
 8001880:	4618      	mov	r0, r3
 8001882:	f004 ffed 	bl	8006860 <memcpy>
	GSM_Send(temp, 17);
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	2111      	movs	r1, #17
 800188c:	4618      	mov	r0, r3
 800188e:	f000 f859 	bl	8001944 <GSM_Send>
	GSM_Receive(temp, 40);
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	2128      	movs	r1, #40	; 0x28
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f871 	bl	8001980 <GSM_Receive>
	if(GSM_Find(temp, 40, (uint8_t *)">", 1) == 0){
 800189e:	f107 0010 	add.w	r0, r7, #16
 80018a2:	2301      	movs	r3, #1
 80018a4:	4a25      	ldr	r2, [pc, #148]	; (800193c <GSM_Message_Send+0x148>)
 80018a6:	2128      	movs	r1, #40	; 0x28
 80018a8:	f7ff ff1e 	bl	80016e8 <GSM_Find>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <GSM_Message_Send+0xc2>
		return 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e034      	b.n	8001920 <GSM_Message_Send+0x12c>
	}

	temp[0] = GSM_MSG_SEND;
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	221a      	movs	r2, #26
 80018bc:	701a      	strb	r2, [r3, #0]
	GSM_Send(dataBuf, size);
 80018be:	f107 030b 	add.w	r3, r7, #11
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	4611      	mov	r1, r2
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	f000 f83a 	bl	8001944 <GSM_Send>
	GSM_Send(temp, 1);
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	2101      	movs	r1, #1
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f834 	bl	8001944 <GSM_Send>


	HAL_UART_Receive(uart, temp, 255, 100);
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <GSM_Message_Send+0x14c>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	f107 0110 	add.w	r1, r7, #16
 80018e4:	2364      	movs	r3, #100	; 0x64
 80018e6:	22ff      	movs	r2, #255	; 0xff
 80018e8:	f003 ffcb 	bl	8005882 <HAL_UART_Receive>
	HAL_UART_Receive(uart, temp, 17, 5000);
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <GSM_Message_Send+0x14c>)
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	f107 0110 	add.w	r1, r7, #16
 80018f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80018f8:	2211      	movs	r2, #17
 80018fa:	f003 ffc2 	bl	8005882 <HAL_UART_Receive>
	if(GSM_IsOk(temp, size + 40) == 0){
 80018fe:	f107 030b 	add.w	r3, r7, #11
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	3328      	adds	r3, #40	; 0x28
 8001906:	b2da      	uxtb	r2, r3
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fec3 	bl	800169a <GSM_IsOk>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <GSM_Message_Send+0x12a>
		return 0;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <GSM_Message_Send+0x12c>
	}

	return 1;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	08007180 	.word	0x08007180
 8001930:	0800718c 	.word	0x0800718c
 8001934:	08007198 	.word	0x08007198
 8001938:	0800719c 	.word	0x0800719c
 800193c:	080071a0 	.word	0x080071a0
 8001940:	200001c4 	.word	0x200001c4

08001944 <GSM_Send>:

void GSM_Send(uint8_t *dataBuf, uint8_t size){
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	70fb      	strb	r3, [r7, #3]
	uint8_t temp = GSM_MSG_END;
 8001950:	230d      	movs	r3, #13
 8001952:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(uart, dataBuf, size, 50);
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <GSM_Send+0x38>)
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	b29a      	uxth	r2, r3
 800195c:	2332      	movs	r3, #50	; 0x32
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	f003 fefd 	bl	800575e <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, &temp, 1, 50);
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <GSM_Send+0x38>)
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	f107 010f 	add.w	r1, r7, #15
 800196c:	2332      	movs	r3, #50	; 0x32
 800196e:	2201      	movs	r2, #1
 8001970:	f003 fef5 	bl	800575e <HAL_UART_Transmit>
}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200001c4 	.word	0x200001c4

08001980 <GSM_Receive>:

void GSM_Receive(uint8_t *dataBuf, uint8_t size){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Receive(uart, dataBuf, size, 100);
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <GSM_Receive+0x24>)
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	b29a      	uxth	r2, r3
 8001994:	2364      	movs	r3, #100	; 0x64
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f003 ff73 	bl	8005882 <HAL_UART_Receive>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200001c4 	.word	0x200001c4

080019a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b0ec      	sub	sp, #432	; 0x1b0
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ae:	f001 fa53 	bl	8002e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b2:	f000 f991 	bl	8001cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b6:	f000 fc17 	bl	80021e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019ba:	f000 fb77 	bl	80020ac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80019be:	f000 fb9f 	bl	8002100 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80019c2:	f000 fbc7 	bl	8002154 <MX_USART6_UART_Init>
  MX_DMA_Init();
 80019c6:	f000 fbef 	bl	80021a8 <MX_DMA_Init>
  MX_SPI1_Init();
 80019ca:	f000 fa03 	bl	8001dd4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80019ce:	f000 fa37 	bl	8001e40 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019d2:	f000 fa83 	bl	8001edc <MX_TIM3_Init>
  MX_CRC_Init();
 80019d6:	f000 f9e9 	bl	8001dac <MX_CRC_Init>
  MX_TIM4_Init();
 80019da:	f000 facb 	bl	8001f74 <MX_TIM4_Init>
  MX_TIM5_Init();
 80019de:	f000 fb17 	bl	8002010 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim4);
 80019e2:	48a5      	ldr	r0, [pc, #660]	; (8001c78 <main+0x2d0>)
 80019e4:	f003 fa4a 	bl	8004e7c <HAL_TIM_Base_Start_IT>

  SX1278_hw_t SX1278_hw;
  SX1278_t SX1278;

 //initialize LoRa module
 SX1278_hw.dio0.port = RF_DIO0_GPIO_Port;
 80019e8:	4ba4      	ldr	r3, [pc, #656]	; (8001c7c <main+0x2d4>)
 80019ea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 SX1278_hw.dio0.pin = RF_DIO0_Pin;
 80019ee:	2320      	movs	r3, #32
 80019f0:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 SX1278_hw.nss.port = RF_NSS_GPIO_Port;
 80019f4:	4ba2      	ldr	r3, [pc, #648]	; (8001c80 <main+0x2d8>)
 80019f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 SX1278_hw.nss.pin = RF_NSS_Pin;
 80019fa:	2310      	movs	r3, #16
 80019fc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 SX1278_hw.reset.port = RF_RST_GPIO_Port;
 8001a00:	4b9e      	ldr	r3, [pc, #632]	; (8001c7c <main+0x2d4>)
 8001a02:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 SX1278_hw.reset.pin = RF_RST_Pin;
 8001a06:	2340      	movs	r3, #64	; 0x40
 8001a08:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 SX1278_hw.spi = &hspi1;
 8001a0c:	4b9d      	ldr	r3, [pc, #628]	; (8001c84 <main+0x2dc>)
 8001a0e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 SX1278.hw = &SX1278_hw;
 8001a12:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a16:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8001a1a:	601a      	str	r2, [r3, #0]

 //HAL_UART_Receive_DMA(&huart1, &rxBuf, 1); DOESN"T work for some reason
 HAL_UART_Receive_IT(&huart1, &rxBuf, 1); // Works like a charm, but not as good as DMA
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	499a      	ldr	r1, [pc, #616]	; (8001c88 <main+0x2e0>)
 8001a20:	489a      	ldr	r0, [pc, #616]	; (8001c8c <main+0x2e4>)
 8001a22:	f004 f815 	bl	8005a50 <HAL_UART_Receive_IT>
 while(HAL_GPIO_ReadPin(RX_GPIO_Port, RX_Pin) == 0);
 8001a26:	bf00      	nop
 8001a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a2c:	4894      	ldr	r0, [pc, #592]	; (8001c80 <main+0x2d8>)
 8001a2e:	f002 f8d7 	bl	8003be0 <HAL_GPIO_ReadPin>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f7      	beq.n	8001a28 <main+0x80>
 HAL_UART_Receive_IT(&huart6, UART6_RxBuf, 2);
 8001a38:	2202      	movs	r2, #2
 8001a3a:	4995      	ldr	r1, [pc, #596]	; (8001c90 <main+0x2e8>)
 8001a3c:	4895      	ldr	r0, [pc, #596]	; (8001c94 <main+0x2ec>)
 8001a3e:	f004 f807 	bl	8005a50 <HAL_UART_Receive_IT>

 //HAL_UART_Receive_IT(&huart2, UART6_RxBuf, 2);

 HAL_GPIO_WritePin(RF_RST_GPIO_Port, RF_RST_Pin, GPIO_PIN_SET); // very important.
 8001a42:	2201      	movs	r2, #1
 8001a44:	2140      	movs	r1, #64	; 0x40
 8001a46:	488d      	ldr	r0, [pc, #564]	; (8001c7c <main+0x2d4>)
 8001a48:	f002 f8e2 	bl	8003c10 <HAL_GPIO_WritePin>

 SX1278_hw_Reset(&SX1278_hw);
 8001a4c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fdd5 	bl	8000600 <SX1278_hw_Reset>
//      SX1278_begin(&SX1278, SX1278_433MHZ, MIN_POWER, SX1278_LORA_SF_8, // air time ~ 495ms
//      SX1278_LORA_BW_20_8KHZ, 10);

  	//uint8_t GSM_STATE = 0;

  	GSM_Off();
 8001a56:	f7ff fead 	bl	80017b4 <GSM_Off>

  	if(GSM_InitUart(&huart2)){ // if failed, then gg
 8001a5a:	488f      	ldr	r0, [pc, #572]	; (8001c98 <main+0x2f0>)
 8001a5c:	f7ff fdda 	bl	8001614 <GSM_InitUart>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <main+0xc2>
  		return 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e101      	b.n	8001c6e <main+0x2c6>
  	}

	MODE_Set(&SX1278, mode);
 8001a6a:	4b8c      	ldr	r3, [pc, #560]	; (8001c9c <main+0x2f4>)
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 fd3f 	bl	80024f8 <MODE_Set>
	if(mode == 0){
 8001a7a:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <main+0x2f4>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10c      	bne.n	8001a9c <main+0xf4>
		ret = SX1278_LoRaEntryRx(&SX1278, MIN_PACKETLENGTH, 2000);
 8001a82:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a86:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a8a:	2108      	movs	r1, #8
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff f8d9 	bl	8000c44 <SX1278_LoRaEntryRx>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b82      	ldr	r3, [pc, #520]	; (8001ca0 <main+0x2f8>)
 8001a98:	701a      	strb	r2, [r3, #0]
 8001a9a:	e009      	b.n	8001ab0 <main+0x108>
	}else{
		ret = SX1278_FSK_EntryRx(&SX1278, 8);
 8001a9c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001aa0:	2108      	movs	r1, #8
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f86a 	bl	8000b7c <SX1278_FSK_EntryRx>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b7c      	ldr	r3, [pc, #496]	; (8001ca0 <main+0x2f8>)
 8001aae:	701a      	strb	r2, [r3, #0]
//	uint8_t check_sum;
//	uint8_t check_sum_arr[4] = {0, 0, 0, 0};

	uint8_t tel_dataBuf[80];
	uint8_t gsm_dataBuf[50];
	memset(tel_dataBuf, 0, sizeof(tel_dataBuf));
 8001ab0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab4:	2250      	movs	r2, #80	; 0x50
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f004 fedf 	bl	800687c <memset>

	//HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);

	while(GPS_IsData() == GPS_NOK);
 8001abe:	bf00      	nop
 8001ac0:	f7ff fd94 	bl	80015ec <GPS_IsData>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0fa      	beq.n	8001ac0 <main+0x118>

	memset(UART6_RxBuf, 48, sizeof(UART6_RxBuf));
 8001aca:	2232      	movs	r2, #50	; 0x32
 8001acc:	2130      	movs	r1, #48	; 0x30
 8001ace:	4870      	ldr	r0, [pc, #448]	; (8001c90 <main+0x2e8>)
 8001ad0:	f004 fed4 	bl	800687c <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(do_send_tm){ // its time to send gps coordinates
 8001ad4:	4b73      	ldr	r3, [pc, #460]	; (8001ca4 <main+0x2fc>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d045      	beq.n	8001b68 <main+0x1c0>
		 for(uint8_t tries = 0; tries < 5; tries++){
 8001adc:	2300      	movs	r3, #0
 8001ade:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 8001ae2:	e02d      	b.n	8001b40 <main+0x198>
			 UART6_TxBuf[0] = 0x03;
 8001ae4:	4b70      	ldr	r3, [pc, #448]	; (8001ca8 <main+0x300>)
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	701a      	strb	r2, [r3, #0]
			 UART6_TxBuf[1] = 0x99;
 8001aea:	4b6f      	ldr	r3, [pc, #444]	; (8001ca8 <main+0x300>)
 8001aec:	2299      	movs	r2, #153	; 0x99
 8001aee:	705a      	strb	r2, [r3, #1]
			 HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	2101      	movs	r1, #1
 8001af4:	4861      	ldr	r0, [pc, #388]	; (8001c7c <main+0x2d4>)
 8001af6:	f002 f88b 	bl	8003c10 <HAL_GPIO_WritePin>
			 HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);
 8001afa:	2202      	movs	r2, #2
 8001afc:	496a      	ldr	r1, [pc, #424]	; (8001ca8 <main+0x300>)
 8001afe:	4865      	ldr	r0, [pc, #404]	; (8001c94 <main+0x2ec>)
 8001b00:	f003 ff61 	bl	80059c6 <HAL_UART_Transmit_IT>
			 make_string((char *)tel_dataBuf, sizeof((char *)tel_dataBuf));
 8001b04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b08:	2104      	movs	r1, #4
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 fde8 	bl	80026e0 <make_string>
			 RTTY_Send(&SX1278, tel_dataBuf, strlen((char *)tel_dataBuf));
 8001b10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fb6d 	bl	80001f4 <strlen>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001b22:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fd5a 	bl	80025e0 <RTTY_Send>
			 HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2101      	movs	r1, #1
 8001b30:	4852      	ldr	r0, [pc, #328]	; (8001c7c <main+0x2d4>)
 8001b32:	f002 f86d 	bl	8003c10 <HAL_GPIO_WritePin>
		 for(uint8_t tries = 0; tries < 5; tries++){
 8001b36:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 8001b40:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d9cd      	bls.n	8001ae4 <main+0x13c>
		 }
		 SX1278_FSK_TxPacket(&SX1278, info_message, 8, 100);
 8001b48:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001b4c:	2364      	movs	r3, #100	; 0x64
 8001b4e:	2208      	movs	r2, #8
 8001b50:	4956      	ldr	r1, [pc, #344]	; (8001cac <main+0x304>)
 8001b52:	f7ff f8dd 	bl	8000d10 <SX1278_FSK_TxPacket>
		 do_send_tm = 0;
 8001b56:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <main+0x2fc>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
		 receive_data = 1;
 8001b5c:	4b54      	ldr	r3, [pc, #336]	; (8001cb0 <main+0x308>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Start_IT(&htim2);
 8001b62:	4854      	ldr	r0, [pc, #336]	; (8001cb4 <main+0x30c>)
 8001b64:	f003 f98a 	bl	8004e7c <HAL_TIM_Base_Start_IT>
	}
	 if(receive_data){
 8001b68:	4b51      	ldr	r3, [pc, #324]	; (8001cb0 <main+0x308>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d05b      	beq.n	8001c28 <main+0x280>
		if(sec_gps == 0){
 8001b70:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <main+0x310>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10c      	bne.n	8001b92 <main+0x1ea>
			SX1278_FSK_EntryRx(&SX1278, 8);
 8001b78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b7c:	2108      	movs	r1, #8
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fffc 	bl	8000b7c <SX1278_FSK_EntryRx>
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b8a:	483c      	ldr	r0, [pc, #240]	; (8001c7c <main+0x2d4>)
 8001b8c:	f002 f840 	bl	8003c10 <HAL_GPIO_WritePin>
 8001b90:	e015      	b.n	8001bbe <main+0x216>
		}else if(sec_gps >= 5){
 8001b92:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <main+0x310>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d911      	bls.n	8001bbe <main+0x216>
			do_send_tm = 1;		// should send TM data
 8001b9a:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <main+0x2fc>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
			receive_data = 0;
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <main+0x308>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
			sec_gps = 0;
 8001ba6:	4b44      	ldr	r3, [pc, #272]	; (8001cb8 <main+0x310>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bb2:	4832      	ldr	r0, [pc, #200]	; (8001c7c <main+0x2d4>)
 8001bb4:	f002 f82c 	bl	8003c10 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001bb8:	483e      	ldr	r0, [pc, #248]	; (8001cb4 <main+0x30c>)
 8001bba:	f003 f9c1 	bl	8004f40 <HAL_TIM_Base_Stop_IT>
		}
		if(loraModuleIrq){
 8001bbe:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <main+0x314>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d030      	beq.n	8001c28 <main+0x280>
			SX1278_FSK_RxPacket(&SX1278, loraBuf, 8, 1000);
 8001bc6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	2208      	movs	r2, #8
 8001bd0:	493b      	ldr	r1, [pc, #236]	; (8001cc0 <main+0x318>)
 8001bd2:	f7ff f8ed 	bl	8000db0 <SX1278_FSK_RxPacket>
			if(strcmp((char *)loraBuf, "cutropeN") == 0){
 8001bd6:	493b      	ldr	r1, [pc, #236]	; (8001cc4 <main+0x31c>)
 8001bd8:	4839      	ldr	r0, [pc, #228]	; (8001cc0 <main+0x318>)
 8001bda:	f7fe fb01 	bl	80001e0 <strcmp>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d117      	bne.n	8001c14 <main+0x26c>
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	2104      	movs	r1, #4
 8001be8:	4824      	ldr	r0, [pc, #144]	; (8001c7c <main+0x2d4>)
 8001bea:	f002 f811 	bl	8003c10 <HAL_GPIO_WritePin>

				// SENDING COMMAND TO MCU TO CUT THE ROPE
				UART6_TxBuf[0] = 0x4f;
 8001bee:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <main+0x300>)
 8001bf0:	224f      	movs	r2, #79	; 0x4f
 8001bf2:	701a      	strb	r2, [r3, #0]
				UART6_TxBuf[1] = 0xcc;
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <main+0x300>)
 8001bf6:	22cc      	movs	r2, #204	; 0xcc
 8001bf8:	705a      	strb	r2, [r3, #1]
				HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, 2);
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	492a      	ldr	r1, [pc, #168]	; (8001ca8 <main+0x300>)
 8001bfe:	4825      	ldr	r0, [pc, #148]	; (8001c94 <main+0x2ec>)
 8001c00:	f003 fee1 	bl	80059c6 <HAL_UART_Transmit_IT>
				// SENDING COMMAND TO MCU TO CUT THE ROPE

				SX1278_FSK_TxPacket(&SX1278, ok_cut_rope_message, 8, 100);
 8001c04:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001c08:	2364      	movs	r3, #100	; 0x64
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	492e      	ldr	r1, [pc, #184]	; (8001cc8 <main+0x320>)
 8001c0e:	f7ff f87f 	bl	8000d10 <SX1278_FSK_TxPacket>
 8001c12:	e006      	b.n	8001c22 <main+0x27a>
			}else{
				SX1278_FSK_TxPacket(&SX1278, nok_ack_message, 8, 100);
 8001c14:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001c18:	2364      	movs	r3, #100	; 0x64
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	492b      	ldr	r1, [pc, #172]	; (8001ccc <main+0x324>)
 8001c1e:	f7ff f877 	bl	8000d10 <SX1278_FSK_TxPacket>
			}
			loraModuleIrq = 0;
 8001c22:	4b26      	ldr	r3, [pc, #152]	; (8001cbc <main+0x314>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
		}
	 }
		if(gsmRec){
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <main+0x328>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f43f af51 	beq.w	8001ad4 <main+0x12c>

			//HAL_GPIO_ReadPin(GSM_GPIO1INT_GPIO_Port, GSM_GPIO1INT_Pin) < parbauda vai GSM ir gatavs rukat
			make_string_gsm((char *)gsm_dataBuf, sizeof((char *)gsm_dataBuf));
 8001c32:	463b      	mov	r3, r7
 8001c34:	2104      	movs	r1, #4
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 fdda 	bl	80027f0 <make_string_gsm>
			if(GSM_Check_Signal()){
 8001c3c:	f7ff fd02 	bl	8001644 <GSM_Check_Signal>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00a      	beq.n	8001c5c <main+0x2b4>
				GSM_Message_Send(gsm_dataBuf, strlen((char *)gsm_dataBuf), 28654641);
 8001c46:	463b      	mov	r3, r7
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fad3 	bl	80001f4 <strlen>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	b2d9      	uxtb	r1, r3
 8001c52:	463b      	mov	r3, r7
 8001c54:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <main+0x32c>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fdcc 	bl	80017f4 <GSM_Message_Send>
			}

			GSM_Off();
 8001c5c:	f7ff fdaa 	bl	80017b4 <GSM_Off>

			gsmRec = 0;
 8001c60:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <main+0x328>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim4);
 8001c66:	4804      	ldr	r0, [pc, #16]	; (8001c78 <main+0x2d0>)
 8001c68:	f003 f908 	bl	8004e7c <HAL_TIM_Base_Start_IT>
	 if(do_send_tm){ // its time to send gps coordinates
 8001c6c:	e732      	b.n	8001ad4 <main+0x12c>
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	200001c8 	.word	0x200001c8
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020000 	.word	0x40020000
 8001c84:	20000458 	.word	0x20000458
 8001c88:	200001c0 	.word	0x200001c0
 8001c8c:	20000308 	.word	0x20000308
 8001c90:	20000130 	.word	0x20000130
 8001c94:	200003b0 	.word	0x200003b0
 8001c98:	200004f8 	.word	0x200004f8
 8001c9c:	2000001c 	.word	0x2000001c
 8001ca0:	200000e0 	.word	0x200000e0
 8001ca4:	2000001d 	.word	0x2000001d
 8001ca8:	200000f8 	.word	0x200000f8
 8001cac:	20000004 	.word	0x20000004
 8001cb0:	200000f5 	.word	0x200000f5
 8001cb4:	200004b0 	.word	0x200004b0
 8001cb8:	200000f6 	.word	0x200000f6
 8001cbc:	200000ee 	.word	0x200000ee
 8001cc0:	200000e4 	.word	0x200000e4
 8001cc4:	080071a4 	.word	0x080071a4
 8001cc8:	2000000c 	.word	0x2000000c
 8001ccc:	20000014 	.word	0x20000014
 8001cd0:	200000f4 	.word	0x200000f4
 8001cd4:	01b53c31 	.word	0x01b53c31

08001cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b094      	sub	sp, #80	; 0x50
 8001cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cde:	f107 0320 	add.w	r3, r7, #32
 8001ce2:	2230      	movs	r2, #48	; 0x30
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 fdc8 	bl	800687c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <SystemClock_Config+0xcc>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <SystemClock_Config+0xcc>)
 8001d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <SystemClock_Config+0xcc>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d18:	2300      	movs	r3, #0
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <SystemClock_Config+0xd0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d24:	4a20      	ldr	r2, [pc, #128]	; (8001da8 <SystemClock_Config+0xd0>)
 8001d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <SystemClock_Config+0xd0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d42:	2302      	movs	r3, #2
 8001d44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001d50:	2354      	movs	r3, #84	; 0x54
 8001d52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d54:	2302      	movs	r3, #2
 8001d56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d5c:	f107 0320 	add.w	r3, r7, #32
 8001d60:	4618      	mov	r0, r3
 8001d62:	f001 ff87 	bl	8003c74 <HAL_RCC_OscConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d6c:	f000 fd7e 	bl	800286c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d70:	230f      	movs	r3, #15
 8001d72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d74:	2302      	movs	r3, #2
 8001d76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f002 f9e9 	bl	8004164 <HAL_RCC_ClockConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d98:	f000 fd68 	bl	800286c <Error_Handler>
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3750      	adds	r7, #80	; 0x50
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40007000 	.word	0x40007000

08001dac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_CRC_Init+0x20>)
 8001db2:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <MX_CRC_Init+0x24>)
 8001db4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_CRC_Init+0x20>)
 8001db8:	f001 f9f5 	bl	80031a6 <HAL_CRC_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001dc2:	f000 fd53 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000210 	.word	0x20000210
 8001dd0:	40023000 	.word	0x40023000

08001dd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dd8:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001dda:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <MX_SPI1_Init+0x68>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dde:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001de0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001de4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001e08:	2220      	movs	r2, #32
 8001e0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001e20:	220a      	movs	r2, #10
 8001e22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <MX_SPI1_Init+0x64>)
 8001e26:	f002 fb99 	bl	800455c <HAL_SPI_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e30:	f000 fd1c 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000458 	.word	0x20000458
 8001e3c:	40013000 	.word	0x40013000

08001e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e54:	463b      	mov	r3, r7
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e66:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001e6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2625;
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e74:	f640 2241 	movw	r2, #2625	; 0xa41
 8001e78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e86:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001e88:	f002 ffa8 	bl	8004ddc <HAL_TIM_Base_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e92:	f000 fceb 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001ea4:	f003 f983 	bl	80051ae <HAL_TIM_ConfigClockSource>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001eae:	f000 fcdd 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <MX_TIM2_Init+0x98>)
 8001ec0:	f003 fb7e 	bl	80055c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001eca:	f000 fccf 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200004b0 	.word	0x200004b0

08001edc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <MX_TIM3_Init+0x90>)
 8001efa:	4a1d      	ldr	r2, [pc, #116]	; (8001f70 <MX_TIM3_Init+0x94>)
 8001efc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <MX_TIM3_Init+0x90>)
 8001f00:	2254      	movs	r2, #84	; 0x54
 8001f02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <MX_TIM3_Init+0x90>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <MX_TIM3_Init+0x90>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <MX_TIM3_Init+0x90>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <MX_TIM3_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f1c:	4813      	ldr	r0, [pc, #76]	; (8001f6c <MX_TIM3_Init+0x90>)
 8001f1e:	f002 ff5d 	bl	8004ddc <HAL_TIM_Base_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001f28:	f000 fca0 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	4619      	mov	r1, r3
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <MX_TIM3_Init+0x90>)
 8001f3a:	f003 f938 	bl	80051ae <HAL_TIM_ConfigClockSource>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001f44:	f000 fc92 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f50:	463b      	mov	r3, r7
 8001f52:	4619      	mov	r1, r3
 8001f54:	4805      	ldr	r0, [pc, #20]	; (8001f6c <MX_TIM3_Init+0x90>)
 8001f56:	f003 fb33 	bl	80055c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001f60:	f000 fc84 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000260 	.word	0x20000260
 8001f70:	40000400 	.word	0x40000400

08001f74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <MX_TIM4_Init+0x94>)
 8001f92:	4a1e      	ldr	r2, [pc, #120]	; (800200c <MX_TIM4_Init+0x98>)
 8001f94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000;
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <MX_TIM4_Init+0x94>)
 8001f98:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001f9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <MX_TIM4_Init+0x94>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 13125;
 8001fa4:	4b18      	ldr	r3, [pc, #96]	; (8002008 <MX_TIM4_Init+0x94>)
 8001fa6:	f243 3245 	movw	r2, #13125	; 0x3345
 8001faa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <MX_TIM4_Init+0x94>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb2:	4b15      	ldr	r3, [pc, #84]	; (8002008 <MX_TIM4_Init+0x94>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fb8:	4813      	ldr	r0, [pc, #76]	; (8002008 <MX_TIM4_Init+0x94>)
 8001fba:	f002 ff0f 	bl	8004ddc <HAL_TIM_Base_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001fc4:	f000 fc52 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <MX_TIM4_Init+0x94>)
 8001fd6:	f003 f8ea 	bl	80051ae <HAL_TIM_ConfigClockSource>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001fe0:	f000 fc44 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fec:	463b      	mov	r3, r7
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_TIM4_Init+0x94>)
 8001ff2:	f003 fae5 	bl	80055c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001ffc:	f000 fc36 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200001c8 	.word	0x200001c8
 800200c:	40000800 	.word	0x40000800

08002010 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002016:	f107 0308 	add.w	r3, r7, #8
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	463b      	mov	r3, r7
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <MX_TIM5_Init+0x94>)
 800202e:	4a1e      	ldr	r2, [pc, #120]	; (80020a8 <MX_TIM5_Init+0x98>)
 8002030:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 32000;
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <MX_TIM5_Init+0x94>)
 8002034:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002038:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_TIM5_Init+0x94>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7875;
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <MX_TIM5_Init+0x94>)
 8002042:	f641 62c3 	movw	r2, #7875	; 0x1ec3
 8002046:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <MX_TIM5_Init+0x94>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <MX_TIM5_Init+0x94>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002054:	4813      	ldr	r0, [pc, #76]	; (80020a4 <MX_TIM5_Init+0x94>)
 8002056:	f002 fec1 	bl	8004ddc <HAL_TIM_Base_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002060:	f000 fc04 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002068:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	4619      	mov	r1, r3
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <MX_TIM5_Init+0x94>)
 8002072:	f003 f89c 	bl	80051ae <HAL_TIM_ConfigClockSource>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800207c:	f000 fbf6 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002080:	2300      	movs	r3, #0
 8002082:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002088:	463b      	mov	r3, r7
 800208a:	4619      	mov	r1, r3
 800208c:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_TIM5_Init+0x94>)
 800208e:	f003 fa97 	bl	80055c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002098:	f000 fbe8 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800209c:	bf00      	nop
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000218 	.word	0x20000218
 80020a8:	40000c00 	.word	0x40000c00

080020ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <MX_USART1_UART_Init+0x50>)
 80020b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_USART1_UART_Init+0x4c>)
 80020e4:	f003 faee 	bl	80056c4 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020ee:	f000 fbbd 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000308 	.word	0x20000308
 80020fc:	40011000 	.word	0x40011000

08002100 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <MX_USART2_UART_Init+0x50>)
 8002108:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <MX_USART2_UART_Init+0x4c>)
 800210c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002110:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_USART2_UART_Init+0x4c>)
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002126:	220c      	movs	r2, #12
 8002128:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <MX_USART2_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_USART2_UART_Init+0x4c>)
 8002138:	f003 fac4 	bl	80056c4 <HAL_UART_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002142:	f000 fb93 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200004f8 	.word	0x200004f8
 8002150:	40004400 	.word	0x40004400

08002154 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <MX_USART6_UART_Init+0x4c>)
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <MX_USART6_UART_Init+0x50>)
 800215c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <MX_USART6_UART_Init+0x4c>)
 8002160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002164:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <MX_USART6_UART_Init+0x4c>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MX_USART6_UART_Init+0x4c>)
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <MX_USART6_UART_Init+0x4c>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <MX_USART6_UART_Init+0x4c>)
 800217a:	220c      	movs	r2, #12
 800217c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <MX_USART6_UART_Init+0x4c>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_USART6_UART_Init+0x4c>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_USART6_UART_Init+0x4c>)
 800218c:	f003 fa9a 	bl	80056c4 <HAL_UART_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002196:	f000 fb69 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200003b0 	.word	0x200003b0
 80021a4:	40011400 	.word	0x40011400

080021a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_DMA_Init+0x3c>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <MX_DMA_Init+0x3c>)
 80021b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_DMA_Init+0x3c>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	203a      	movs	r0, #58	; 0x3a
 80021d0:	f000 ffb3 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80021d4:	203a      	movs	r0, #58	; 0x3a
 80021d6:	f000 ffcc 	bl	8003172 <HAL_NVIC_EnableIRQ>

}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800

080021e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b5d      	ldr	r3, [pc, #372]	; (8002378 <MX_GPIO_Init+0x190>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a5c      	ldr	r2, [pc, #368]	; (8002378 <MX_GPIO_Init+0x190>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b5a      	ldr	r3, [pc, #360]	; (8002378 <MX_GPIO_Init+0x190>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b56      	ldr	r3, [pc, #344]	; (8002378 <MX_GPIO_Init+0x190>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a55      	ldr	r2, [pc, #340]	; (8002378 <MX_GPIO_Init+0x190>)
 8002224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b53      	ldr	r3, [pc, #332]	; (8002378 <MX_GPIO_Init+0x190>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <MX_GPIO_Init+0x190>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <MX_GPIO_Init+0x190>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b4c      	ldr	r3, [pc, #304]	; (8002378 <MX_GPIO_Init+0x190>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	4b48      	ldr	r3, [pc, #288]	; (8002378 <MX_GPIO_Init+0x190>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a47      	ldr	r2, [pc, #284]	; (8002378 <MX_GPIO_Init+0x190>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b45      	ldr	r3, [pc, #276]	; (8002378 <MX_GPIO_Init+0x190>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_CTS_GPIO_Port, GSM_CTS_Pin, GPIO_PIN_SET);
 800226e:	2201      	movs	r2, #1
 8002270:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002274:	4841      	ldr	r0, [pc, #260]	; (800237c <MX_GPIO_Init+0x194>)
 8002276:	f001 fccb 	bl	8003c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_PWR_GPIO_Port, GSM_PWR_Pin, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002280:	483e      	ldr	r0, [pc, #248]	; (800237c <MX_GPIO_Init+0x194>)
 8002282:	f001 fcc5 	bl	8003c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_NSS_GPIO_Port, RF_NSS_Pin, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	2110      	movs	r1, #16
 800228a:	483d      	ldr	r0, [pc, #244]	; (8002380 <MX_GPIO_Init+0x198>)
 800228c:	f001 fcc0 	bl	8003c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 8002290:	2200      	movs	r2, #0
 8002292:	f240 7117 	movw	r1, #1815	; 0x717
 8002296:	483b      	ldr	r0, [pc, #236]	; (8002384 <MX_GPIO_Init+0x19c>)
 8002298:	f001 fcba 	bl	8003c10 <HAL_GPIO_WritePin>
                          |RF_DIO1_Pin|GSM_RST_Pin|GSM_RTS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : GSM_CTS_Pin GSM_PWR_Pin */
  GPIO_InitStruct.Pin = GSM_CTS_Pin|GSM_PWR_Pin;
 800229c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80022a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a2:	2301      	movs	r3, #1
 80022a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4831      	ldr	r0, [pc, #196]	; (800237c <MX_GPIO_Init+0x194>)
 80022b6:	f001 fb0f 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_GPIO1INT_Pin */
  GPIO_InitStruct.Pin = GSM_GPIO1INT_Pin;
 80022ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GSM_GPIO1INT_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4619      	mov	r1, r3
 80022ce:	482b      	ldr	r0, [pc, #172]	; (800237c <MX_GPIO_Init+0x194>)
 80022d0:	f001 fb02 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_NSS_Pin */
  GPIO_InitStruct.Pin = RF_NSS_Pin;
 80022d4:	2310      	movs	r3, #16
 80022d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d8:	2301      	movs	r3, #1
 80022da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_NSS_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	4825      	ldr	r0, [pc, #148]	; (8002380 <MX_GPIO_Init+0x198>)
 80022ec:	f001 faf4 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin LED_3_Pin
                           RF_DIO1_Pin GSM_RTS_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin|LED_3_Pin
 80022f0:	f240 6317 	movw	r3, #1559	; 0x617
 80022f4:	617b      	str	r3, [r7, #20]
                          |RF_DIO1_Pin|GSM_RTS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f6:	2301      	movs	r3, #1
 80022f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	481e      	ldr	r0, [pc, #120]	; (8002384 <MX_GPIO_Init+0x19c>)
 800230a:	f001 fae5 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_DIO0_Pin */
  GPIO_InitStruct.Pin = RF_DIO0_Pin;
 800230e:	2320      	movs	r3, #32
 8002310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002312:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_DIO0_GPIO_Port, &GPIO_InitStruct);
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4619      	mov	r1, r3
 8002322:	4818      	ldr	r0, [pc, #96]	; (8002384 <MX_GPIO_Init+0x19c>)
 8002324:	f001 fad8 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_RST_Pin */
  GPIO_InitStruct.Pin = RF_RST_Pin;
 8002328:	2340      	movs	r3, #64	; 0x40
 800232a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_RST_GPIO_Port, &GPIO_InitStruct);
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	4619      	mov	r1, r3
 800233a:	4812      	ldr	r0, [pc, #72]	; (8002384 <MX_GPIO_Init+0x19c>)
 800233c:	f001 facc 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_RST_Pin */
  GPIO_InitStruct.Pin = GSM_RST_Pin;
 8002340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002346:	2301      	movs	r3, #1
 8002348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800234a:	2302      	movs	r3, #2
 800234c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GSM_RST_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	480a      	ldr	r0, [pc, #40]	; (8002384 <MX_GPIO_Init+0x19c>)
 800235a:	f001 fabd 	bl	80038d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800235e:	2200      	movs	r2, #0
 8002360:	2100      	movs	r1, #0
 8002362:	2017      	movs	r0, #23
 8002364:	f000 fee9 	bl	800313a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002368:	2017      	movs	r0, #23
 800236a:	f000 ff02 	bl	8003172 <HAL_NVIC_EnableIRQ>

}
 800236e:	bf00      	nop
 8002370:	3728      	adds	r7, #40	; 0x28
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40020800 	.word	0x40020800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400

08002388 <HAL_UART_RxCpltCallback>:
	}else{
		return CMD_ERROR;
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3c      	ldr	r2, [pc, #240]	; (8002484 <HAL_UART_RxCpltCallback+0xfc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d109      	bne.n	80023ac <HAL_UART_RxCpltCallback+0x24>
		HAL_UART_Receive_IT(&huart1, &rxBuf, 1);
 8002398:	2201      	movs	r2, #1
 800239a:	493b      	ldr	r1, [pc, #236]	; (8002488 <HAL_UART_RxCpltCallback+0x100>)
 800239c:	4839      	ldr	r0, [pc, #228]	; (8002484 <HAL_UART_RxCpltCallback+0xfc>)
 800239e:	f003 fb57 	bl	8005a50 <HAL_UART_Receive_IT>
		GPS_Receive(rxBuf);
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_UART_RxCpltCallback+0x100>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fd88 	bl	8000ebc <GPS_Receive>
		//HAL_UART_Receive_DMA(&huart1, &rxBuf, 1);
	}

	if(huart == &huart6)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_UART_RxCpltCallback+0x104>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d162      	bne.n	800247a <HAL_UART_RxCpltCallback+0xf2>
	{
		if(UART6_RxIsData == 1){
 80023b4:	4b36      	ldr	r3, [pc, #216]	; (8002490 <HAL_UART_RxCpltCallback+0x108>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d117      	bne.n	80023ec <HAL_UART_RxCpltCallback+0x64>
			for (uint8_t i = 0; i < UART6_RxBytes; i++)
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e008      	b.n	80023d4 <HAL_UART_RxCpltCallback+0x4c>
				UART6_DataBuf[i] = UART6_RxBuf[i];
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	4933      	ldr	r1, [pc, #204]	; (8002494 <HAL_UART_RxCpltCallback+0x10c>)
 80023c8:	5c89      	ldrb	r1, [r1, r2]
 80023ca:	4a33      	ldr	r2, [pc, #204]	; (8002498 <HAL_UART_RxCpltCallback+0x110>)
 80023cc:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < UART6_RxBytes; i++)
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	3301      	adds	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_UART_RxCpltCallback+0x114>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d3f1      	bcc.n	80023c2 <HAL_UART_RxCpltCallback+0x3a>
			UART6_RxIsData = 0;
 80023de:	4b2c      	ldr	r3, [pc, #176]	; (8002490 <HAL_UART_RxCpltCallback+0x108>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
			UART6_RxBytes = 2;
 80023e4:	4b2d      	ldr	r3, [pc, #180]	; (800249c <HAL_UART_RxCpltCallback+0x114>)
 80023e6:	2202      	movs	r2, #2
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	e041      	b.n	8002470 <HAL_UART_RxCpltCallback+0xe8>
		}else{
			uint8_t Command = UART6_RxBuf[0];
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <HAL_UART_RxCpltCallback+0x10c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	73bb      	strb	r3, [r7, #14]
			uint8_t Parameter = UART6_RxBuf[1];
 80023f2:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_UART_RxCpltCallback+0x10c>)
 80023f4:	785b      	ldrb	r3, [r3, #1]
 80023f6:	737b      	strb	r3, [r7, #13]

			if(Command != 0x02){
 80023f8:	7bbb      	ldrb	r3, [r7, #14]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d007      	beq.n	800240e <HAL_UART_RxCpltCallback+0x86>
				UART6_RxBytes = 2;
 80023fe:	4b27      	ldr	r3, [pc, #156]	; (800249c <HAL_UART_RxCpltCallback+0x114>)
 8002400:	2202      	movs	r2, #2
 8002402:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6, UART6_RxBuf, 2);
 8002404:	2202      	movs	r2, #2
 8002406:	4923      	ldr	r1, [pc, #140]	; (8002494 <HAL_UART_RxCpltCallback+0x10c>)
 8002408:	4820      	ldr	r0, [pc, #128]	; (800248c <HAL_UART_RxCpltCallback+0x104>)
 800240a:	f003 fb21 	bl	8005a50 <HAL_UART_Receive_IT>
			}
			switch(Command){
 800240e:	7bbb      	ldrb	r3, [r7, #14]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d002      	beq.n	800241a <HAL_UART_RxCpltCallback+0x92>
 8002414:	2b03      	cmp	r3, #3
 8002416:	d00e      	beq.n	8002436 <HAL_UART_RxCpltCallback+0xae>
					HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, strlen((char *)UART6_TxBuf) + 1);
				break;
				default:
					//nothing happens
					//HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
				break;
 8002418:	e02a      	b.n	8002470 <HAL_UART_RxCpltCallback+0xe8>
					UART6_RxIsData = 1;
 800241a:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_UART_RxCpltCallback+0x108>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
					UART6_RxBytes = Parameter;
 8002420:	4a1e      	ldr	r2, [pc, #120]	; (800249c <HAL_UART_RxCpltCallback+0x114>)
 8002422:	7b7b      	ldrb	r3, [r7, #13]
 8002424:	7013      	strb	r3, [r2, #0]
					HAL_UART_Receive_IT(&huart6, UART6_RxBuf, Parameter);
 8002426:	7b7b      	ldrb	r3, [r7, #13]
 8002428:	b29b      	uxth	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	4919      	ldr	r1, [pc, #100]	; (8002494 <HAL_UART_RxCpltCallback+0x10c>)
 800242e:	4817      	ldr	r0, [pc, #92]	; (800248c <HAL_UART_RxCpltCallback+0x104>)
 8002430:	f003 fb0e 	bl	8005a50 <HAL_UART_Receive_IT>
				break;
 8002434:	e01c      	b.n	8002470 <HAL_UART_RxCpltCallback+0xe8>
					UART6_TxBuf[0] = 0x02;
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <HAL_UART_RxCpltCallback+0x118>)
 8002438:	2202      	movs	r2, #2
 800243a:	701a      	strb	r2, [r3, #0]
					UART6_TxBuf[1] = Parameter;
 800243c:	4a18      	ldr	r2, [pc, #96]	; (80024a0 <HAL_UART_RxCpltCallback+0x118>)
 800243e:	7b7b      	ldrb	r3, [r7, #13]
 8002440:	7053      	strb	r3, [r2, #1]
					memcpy(&(UART6_TxBuf[2]), UART6_DataBuf, strlen((char *)UART6_DataBuf) + 1);
 8002442:	4815      	ldr	r0, [pc, #84]	; (8002498 <HAL_UART_RxCpltCallback+0x110>)
 8002444:	f7fd fed6 	bl	80001f4 <strlen>
 8002448:	4603      	mov	r3, r0
 800244a:	3301      	adds	r3, #1
 800244c:	461a      	mov	r2, r3
 800244e:	4912      	ldr	r1, [pc, #72]	; (8002498 <HAL_UART_RxCpltCallback+0x110>)
 8002450:	4814      	ldr	r0, [pc, #80]	; (80024a4 <HAL_UART_RxCpltCallback+0x11c>)
 8002452:	f004 fa05 	bl	8006860 <memcpy>
					HAL_UART_Transmit_IT(&huart6, UART6_TxBuf, strlen((char *)UART6_TxBuf) + 1);
 8002456:	4812      	ldr	r0, [pc, #72]	; (80024a0 <HAL_UART_RxCpltCallback+0x118>)
 8002458:	f7fd fecc 	bl	80001f4 <strlen>
 800245c:	4603      	mov	r3, r0
 800245e:	b29b      	uxth	r3, r3
 8002460:	3301      	adds	r3, #1
 8002462:	b29b      	uxth	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	490e      	ldr	r1, [pc, #56]	; (80024a0 <HAL_UART_RxCpltCallback+0x118>)
 8002468:	4808      	ldr	r0, [pc, #32]	; (800248c <HAL_UART_RxCpltCallback+0x104>)
 800246a:	f003 faac 	bl	80059c6 <HAL_UART_Transmit_IT>
				break;
 800246e:	bf00      	nop
			}
		}
		memset(UART6_RxBuf, 48, sizeof(UART6_RxBuf));
 8002470:	2232      	movs	r2, #50	; 0x32
 8002472:	2130      	movs	r1, #48	; 0x30
 8002474:	4807      	ldr	r0, [pc, #28]	; (8002494 <HAL_UART_RxCpltCallback+0x10c>)
 8002476:	f004 fa01 	bl	800687c <memset>
	}
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000308 	.word	0x20000308
 8002488:	200001c0 	.word	0x200001c0
 800248c:	200003b0 	.word	0x200003b0
 8002490:	200000f7 	.word	0x200000f7
 8002494:	20000130 	.word	0x20000130
 8002498:	200000fc 	.word	0x200000fc
 800249c:	2000001e 	.word	0x2000001e
 80024a0:	200000f8 	.word	0x200000f8
 80024a4:	200000fa 	.word	0x200000fa

080024a8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart1, &rxBuf, 1); doesn't work for some reason...
	if(huart == &huart1){
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <HAL_UART_ErrorCallback+0x3c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d104      	bne.n	80024c2 <HAL_UART_ErrorCallback+0x1a>
		HAL_UART_Receive_IT(&huart1, &rxBuf, 1);
 80024b8:	2201      	movs	r2, #1
 80024ba:	490b      	ldr	r1, [pc, #44]	; (80024e8 <HAL_UART_ErrorCallback+0x40>)
 80024bc:	4809      	ldr	r0, [pc, #36]	; (80024e4 <HAL_UART_ErrorCallback+0x3c>)
 80024be:	f003 fac7 	bl	8005a50 <HAL_UART_Receive_IT>
	}
	if(huart == &huart6){
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a09      	ldr	r2, [pc, #36]	; (80024ec <HAL_UART_ErrorCallback+0x44>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d107      	bne.n	80024da <HAL_UART_ErrorCallback+0x32>
		HAL_UART_Receive_IT(&huart6, UART6_RxBuf, UART6_RxBytes);
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_UART_ErrorCallback+0x48>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4908      	ldr	r1, [pc, #32]	; (80024f4 <HAL_UART_ErrorCallback+0x4c>)
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <HAL_UART_ErrorCallback+0x44>)
 80024d6:	f003 fabb 	bl	8005a50 <HAL_UART_Receive_IT>
	}
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000308 	.word	0x20000308
 80024e8:	200001c0 	.word	0x200001c0
 80024ec:	200003b0 	.word	0x200003b0
 80024f0:	2000001e 	.word	0x2000001e
 80024f4:	20000130 	.word	0x20000130

080024f8 <MODE_Set>:

void MODE_Set(SX1278_t * module, uint8_t mode){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
	  switch(mode){
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <MODE_Set+0x18>
 800250a:	2b01      	cmp	r3, #1
 800250c:	d00b      	beq.n	8002526 <MODE_Set+0x2e>
		  case 1:	// switch to FSK
			  SX1278_FSK_Config(module);
		  break;

		  default: // lets ignore that one
		  break;
 800250e:	e00e      	b.n	800252e <MODE_Set+0x36>
			  SX1278_begin(module, SX1278_433MHZ, MIN_POWER, SX1278_LORA_SF_8, // air time ~ 495ms
 8002510:	2308      	movs	r3, #8
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	2303      	movs	r3, #3
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2302      	movs	r3, #2
 800251a:	2203      	movs	r2, #3
 800251c:	2100      	movs	r1, #0
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fca4 	bl	8000e6c <SX1278_begin>
		  break;
 8002524:	e003      	b.n	800252e <MODE_Set+0x36>
			  SX1278_FSK_Config(module);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fab8 	bl	8000a9c <SX1278_FSK_Config>
		  break;
 800252c:	bf00      	nop
	  }
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002548:	d105      	bne.n	8002556 <HAL_TIM_PeriodElapsedCallback+0x1e>
		sec_gps++;
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	3301      	adds	r3, #1
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002554:	701a      	strb	r2, [r3, #0]
	}

	if(htim->Instance == TIM3){
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d102      	bne.n	8002566 <HAL_TIM_PeriodElapsedCallback+0x2e>
		u_sec_delay = 1;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM4){
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d107      	bne.n	8002580 <HAL_TIM_PeriodElapsedCallback+0x48>
		HAL_TIM_Base_Stop_IT(&htim4);
 8002570:	480f      	ldr	r0, [pc, #60]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002572:	f002 fce5 	bl	8004f40 <HAL_TIM_Base_Stop_IT>
		GSM_On();
 8002576:	f7ff f8fd 	bl	8001774 <GSM_On>
		HAL_TIM_Base_Start_IT(&htim5);
 800257a:	480e      	ldr	r0, [pc, #56]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800257c:	f002 fc7e 	bl	8004e7c <HAL_TIM_Base_Start_IT>
	}
	if(htim->Instance == TIM5){
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0c      	ldr	r2, [pc, #48]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d105      	bne.n	8002596 <HAL_TIM_PeriodElapsedCallback+0x5e>
		HAL_TIM_Base_Stop_IT(&htim5);
 800258a:	480a      	ldr	r0, [pc, #40]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800258c:	f002 fcd8 	bl	8004f40 <HAL_TIM_Base_Stop_IT>
		gsmRec = 1;
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
	}
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200000f6 	.word	0x200000f6
 80025a4:	40000400 	.word	0x40000400
 80025a8:	200000f0 	.word	0x200000f0
 80025ac:	40000800 	.word	0x40000800
 80025b0:	200001c8 	.word	0x200001c8
 80025b4:	20000218 	.word	0x20000218
 80025b8:	40000c00 	.word	0x40000c00
 80025bc:	200000f4 	.word	0x200000f4

080025c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t pin){
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	80fb      	strh	r3, [r7, #6]
	loraModuleIrq = 1;
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <HAL_GPIO_EXTI_Callback+0x1c>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	200000ee 	.word	0x200000ee

080025e0 <RTTY_Send>:

void RTTY_Send(SX1278_t * module, uint8_t *buf, uint8_t len){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	4613      	mov	r3, r2
 80025ec:	71fb      	strb	r3, [r7, #7]
	uint16_t baudTimeout = 20;
 80025ee:	2314      	movs	r3, #20
 80025f0:	82bb      	strh	r3, [r7, #20]
	uint8_t i;
	uint8_t curChar = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	74fb      	strb	r3, [r7, #19]

	SX1278_RTTY_Config(module);
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f7fe f9b4 	bl	8000964 <SX1278_RTTY_Config>

	for(i = 0; i < len; i++){
 80025fc:	2300      	movs	r3, #0
 80025fe:	75fb      	strb	r3, [r7, #23]
 8002600:	e00e      	b.n	8002620 <RTTY_Send+0x40>
		curChar = buf[i];
 8002602:	7dfb      	ldrb	r3, [r7, #23]
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	4413      	add	r3, r2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	74fb      	strb	r3, [r7, #19]
		RTTY_SendSingle(module, curChar, baudTimeout);
 800260c:	8abb      	ldrh	r3, [r7, #20]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	4619      	mov	r1, r3
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f80c 	bl	8002632 <RTTY_SendSingle>
	for(i = 0; i < len; i++){
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	3301      	adds	r3, #1
 800261e:	75fb      	strb	r3, [r7, #23]
 8002620:	7dfa      	ldrb	r2, [r7, #23]
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	429a      	cmp	r2, r3
 8002626:	d3ec      	bcc.n	8002602 <RTTY_Send+0x22>
	}
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <RTTY_SendSingle>:

void RTTY_SendSingle(SX1278_t * module, uint8_t buf, uint8_t timeout){
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	70fb      	strb	r3, [r7, #3]
 800263e:	4613      	mov	r3, r2
 8002640:	70bb      	strb	r3, [r7, #2]
	SX1278_RTTY_WriteLow(module); //start bit
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe f9d9 	bl	80009fa <SX1278_RTTY_WriteLow>
	HAL_Delay(timeout);
 8002648:	78bb      	ldrb	r3, [r7, #2]
 800264a:	4618      	mov	r0, r3
 800264c:	f000 fc76 	bl	8002f3c <HAL_Delay>
	for(uint8_t j = 0; j < 8; j++){
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e015      	b.n	8002682 <RTTY_SendSingle+0x50>
		if(bit_set(buf, j)){
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	fa42 f303 	asr.w	r3, r2, r3
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <RTTY_SendSingle+0x3c>
			SX1278_RTTY_WriteHigh(module);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe f9ef 	bl	8000a4a <SX1278_RTTY_WriteHigh>
 800266c:	e002      	b.n	8002674 <RTTY_SendSingle+0x42>
		}else{
			SX1278_RTTY_WriteLow(module);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe f9c3 	bl	80009fa <SX1278_RTTY_WriteLow>
		}
		HAL_Delay(timeout);
 8002674:	78bb      	ldrb	r3, [r7, #2]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fc60 	bl	8002f3c <HAL_Delay>
	for(uint8_t j = 0; j < 8; j++){
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	3301      	adds	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	2b07      	cmp	r3, #7
 8002686:	d9e6      	bls.n	8002656 <RTTY_SendSingle+0x24>
	}
	SX1278_RTTY_WriteHigh(module); // stop bit
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7fe f9de 	bl	8000a4a <SX1278_RTTY_WriteHigh>
	HAL_Delay(30);
 800268e:	201e      	movs	r0, #30
 8002690:	f000 fc54 	bl	8002f3c <HAL_Delay>
	SX1278_RTTY_Stop(module);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7fe f997 	bl	80009c8 <SX1278_RTTY_Stop>
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <get_check_sum>:

uint8_t get_check_sum(char *string){
 80026a2:	b590      	push	{r4, r7, lr}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
	uint8_t XOR = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i < strlen(string) ; i++) {
 80026ae:	2302      	movs	r3, #2
 80026b0:	73bb      	strb	r3, [r7, #14]
 80026b2:	e009      	b.n	80026c8 <get_check_sum+0x26>
		XOR = XOR ^ string[i];
 80026b4:	7bbb      	ldrb	r3, [r7, #14]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	4053      	eors	r3, r2
 80026c0:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 2; i < strlen(string) ; i++) {
 80026c2:	7bbb      	ldrb	r3, [r7, #14]
 80026c4:	3301      	adds	r3, #1
 80026c6:	73bb      	strb	r3, [r7, #14]
 80026c8:	7bbc      	ldrb	r4, [r7, #14]
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7fd fd92 	bl	80001f4 <strlen>
 80026d0:	4603      	mov	r3, r0
 80026d2:	429c      	cmp	r4, r3
 80026d4:	d3ee      	bcc.n	80026b4 <get_check_sum+0x12>
	}
	return XOR;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd90      	pop	{r4, r7, pc}

080026e0 <make_string>:

void make_string(char *s, uint8_t size){
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	b097      	sub	sp, #92	; 0x5c
 80026e4:	af06      	add	r7, sp, #24
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
	uint8_t lat[10];
	uint8_t lon[10];
	uint8_t hei[9];
	uint8_t spe[7];
	//CLEAR TEMP BUFFERS (SOMETIMES IT HAS INFORMATION IN IT, BECAUSE IT USES MEMORY LOCATION THAT WERE TEMP USED FOR OTHER STUFF) ONLY WHEN THERE IS +1 elemt in array
	memset(time, 0, sizeof(time));
 80026ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026f0:	2209      	movs	r2, #9
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f004 f8c1 	bl	800687c <memset>
	memset(lat, 0, sizeof(lat));
 80026fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026fe:	220a      	movs	r2, #10
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f004 f8ba 	bl	800687c <memset>
	memset(lon, 0, sizeof(lon));
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	220a      	movs	r2, #10
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f004 f8b3 	bl	800687c <memset>
	memset(hei, 0, sizeof(hei));
 8002716:	f107 0310 	add.w	r3, r7, #16
 800271a:	2209      	movs	r2, #9
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f004 f8ac 	bl	800687c <memset>
	memset(spe, 0, sizeof(spe));
 8002724:	f107 0308 	add.w	r3, r7, #8
 8002728:	2207      	movs	r2, #7
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f004 f8a5 	bl	800687c <memset>

	//Get all params from satalites data
	GPS_GetTime(time);
 8002732:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe ff1c 	bl	8001574 <GPS_GetTime>
	GPS_GetLat(lat);
 800273c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002740:	4618      	mov	r0, r3
 8002742:	f7fe fe89 	bl	8001458 <GPS_GetLat>
	GPS_GetLon(lon);
 8002746:	f107 031c 	add.w	r3, r7, #28
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fea8 	bl	80014a0 <GPS_GetLon>
	GPS_GetHei(hei);
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe feeb 	bl	8001530 <GPS_GetHei>
	GPS_GetSpe(spe);
 800275a:	f107 0308 	add.w	r3, r7, #8
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fec4 	bl	80014ec <GPS_GetSpe>

	snprintf(s, size, "\r\n$$IRBE5,%li,%s,%s,%s,%s,%s%s", ++num, time, lat, lon, hei, spe, &(UART6_DataBuf[1]));
 8002764:	78f9      	ldrb	r1, [r7, #3]
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <make_string+0x100>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <make_string+0x100>)
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <make_string+0x100>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <make_string+0x104>)
 8002776:	9305      	str	r3, [sp, #20]
 8002778:	f107 0308 	add.w	r3, r7, #8
 800277c:	9304      	str	r3, [sp, #16]
 800277e:	f107 0310 	add.w	r3, r7, #16
 8002782:	9303      	str	r3, [sp, #12]
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	9302      	str	r3, [sp, #8]
 800278a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4613      	mov	r3, r2
 8002798:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <make_string+0x108>)
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f004 f876 	bl	800688c <sniprintf>
	uint8_t l = strlen((char *)s);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7fd fd27 	bl	80001f4 <strlen>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(snprintf(s + l, size - l, "*%02x\r\n", get_check_sum((char *)s))  > size - 4 - 1){
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	1f1c      	subs	r4, r3, #4
 80027b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	18d5      	adds	r5, r2, r3
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	461e      	mov	r6, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ff6d 	bl	80026a2 <get_check_sum>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4a08      	ldr	r2, [pc, #32]	; (80027ec <make_string+0x10c>)
 80027cc:	4631      	mov	r1, r6
 80027ce:	4628      	mov	r0, r5
 80027d0:	f004 f85c 	bl	800688c <sniprintf>
 80027d4:	4603      	mov	r3, r0
 80027d6:	429c      	cmp	r4, r3
		//buffer overflow
		return;
	}
}
 80027d8:	3744      	adds	r7, #68	; 0x44
 80027da:	46bd      	mov	sp, r7
 80027dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027de:	bf00      	nop
 80027e0:	200000dc 	.word	0x200000dc
 80027e4:	200000fd 	.word	0x200000fd
 80027e8:	080071b0 	.word	0x080071b0
 80027ec:	080071d0 	.word	0x080071d0

080027f0 <make_string_gsm>:

void make_string_gsm(char *s, uint8_t size){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08e      	sub	sp, #56	; 0x38
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]

	uint8_t lat[10];
	uint8_t lon[10];
	uint8_t hei[9];
	//CLEAR TEMP BUFFERS (SOMETIMES IT HAS INFORMATION IN IT, BECAUSE IT USES MEMORY LOCATION THAT WERE TEMP USED FOR OTHER STUFF) ONLY WHEN THERE IS +1 elemt in array
	memset(lat, 0, sizeof(lat));
 80027fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002800:	220a      	movs	r2, #10
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f004 f839 	bl	800687c <memset>
	memset(lon, 0, sizeof(lon));
 800280a:	f107 0318 	add.w	r3, r7, #24
 800280e:	220a      	movs	r2, #10
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f004 f832 	bl	800687c <memset>
	memset(hei, 0, sizeof(hei));
 8002818:	f107 030c 	add.w	r3, r7, #12
 800281c:	2209      	movs	r2, #9
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f004 f82b 	bl	800687c <memset>

	//Get all params from satalites data
	GPS_GetLat(lat);
 8002826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fe14 	bl	8001458 <GPS_GetLat>
	GPS_GetLon(lon);
 8002830:	f107 0318 	add.w	r3, r7, #24
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fe33 	bl	80014a0 <GPS_GetLon>
	GPS_GetHei(hei);
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fe76 	bl	8001530 <GPS_GetHei>

	snprintf(s, size, "Latitude:%s\nLongitude:%s\nHeight ASL:%s",lat, lon, hei);
 8002844:	78f9      	ldrb	r1, [r7, #3]
 8002846:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800284a:	f107 030c 	add.w	r3, r7, #12
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	f107 0318 	add.w	r3, r7, #24
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	4613      	mov	r3, r2
 8002858:	4a03      	ldr	r2, [pc, #12]	; (8002868 <make_string_gsm+0x78>)
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f004 f816 	bl	800688c <sniprintf>
}
 8002860:	bf00      	nop
 8002862:	3730      	adds	r7, #48	; 0x30
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	080071d8 	.word	0x080071d8

0800286c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002874:	e7fe      	b.n	8002874 <Error_Handler+0x8>
	...

08002878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_MspInit+0x4c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <HAL_MspInit+0x4c>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_MspInit+0x4c>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_MspInit+0x4c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a08      	ldr	r2, [pc, #32]	; (80028c4 <HAL_MspInit+0x4c>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_MspInit+0x4c>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <HAL_CRC_MspInit+0x3c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10d      	bne.n	80028f6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <HAL_CRC_MspInit+0x40>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_CRC_MspInit+0x40>)
 80028e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <HAL_CRC_MspInit+0x40>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023000 	.word	0x40023000
 8002908:	40023800 	.word	0x40023800

0800290c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_SPI_MspInit+0x84>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d12b      	bne.n	8002986 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_SPI_MspInit+0x88>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	4a17      	ldr	r2, [pc, #92]	; (8002994 <HAL_SPI_MspInit+0x88>)
 8002938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800293c:	6453      	str	r3, [r2, #68]	; 0x44
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_SPI_MspInit+0x88>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_SPI_MspInit+0x88>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a10      	ldr	r2, [pc, #64]	; (8002994 <HAL_SPI_MspInit+0x88>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_SPI_MspInit+0x88>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 8002966:	23e0      	movs	r3, #224	; 0xe0
 8002968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002976:	2305      	movs	r3, #5
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	4805      	ldr	r0, [pc, #20]	; (8002998 <HAL_SPI_MspInit+0x8c>)
 8002982:	f000 ffa9 	bl	80038d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002986:	bf00      	nop
 8002988:	3728      	adds	r7, #40	; 0x28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40013000 	.word	0x40013000
 8002994:	40023800 	.word	0x40023800
 8002998:	40020000 	.word	0x40020000

0800299c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ac:	d116      	bne.n	80029dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <HAL_TIM_Base_MspInit+0xe0>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a31      	ldr	r2, [pc, #196]	; (8002a7c <HAL_TIM_Base_MspInit+0xe0>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <HAL_TIM_Base_MspInit+0xe0>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	201c      	movs	r0, #28
 80029d0:	f000 fbb3 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029d4:	201c      	movs	r0, #28
 80029d6:	f000 fbcc 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80029da:	e04a      	b.n	8002a72 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a27      	ldr	r2, [pc, #156]	; (8002a80 <HAL_TIM_Base_MspInit+0xe4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d116      	bne.n	8002a14 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_TIM_Base_MspInit+0xe0>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a23      	ldr	r2, [pc, #140]	; (8002a7c <HAL_TIM_Base_MspInit+0xe0>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_TIM_Base_MspInit+0xe0>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	201d      	movs	r0, #29
 8002a08:	f000 fb97 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a0c:	201d      	movs	r0, #29
 8002a0e:	f000 fbb0 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 8002a12:	e02e      	b.n	8002a72 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1a      	ldr	r2, [pc, #104]	; (8002a84 <HAL_TIM_Base_MspInit+0xe8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d116      	bne.n	8002a4c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_TIM_Base_MspInit+0xe0>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <HAL_TIM_Base_MspInit+0xe0>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_TIM_Base_MspInit+0xe0>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	201e      	movs	r0, #30
 8002a40:	f000 fb7b 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a44:	201e      	movs	r0, #30
 8002a46:	f000 fb94 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 8002a4a:	e012      	b.n	8002a72 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <HAL_TIM_Base_MspInit+0xec>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10d      	bne.n	8002a72 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_TIM_Base_MspInit+0xe0>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <HAL_TIM_Base_MspInit+0xe0>)
 8002a60:	f043 0308 	orr.w	r3, r3, #8
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_TIM_Base_MspInit+0xe0>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40000800 	.word	0x40000800
 8002a88:	40000c00 	.word	0x40000c00

08002a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08e      	sub	sp, #56	; 0x38
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a6f      	ldr	r2, [pc, #444]	; (8002c68 <HAL_UART_MspInit+0x1dc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d164      	bne.n	8002b78 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
 8002ab2:	4b6e      	ldr	r3, [pc, #440]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a6d      	ldr	r2, [pc, #436]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b6b      	ldr	r3, [pc, #428]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	623b      	str	r3, [r7, #32]
 8002ac8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	4b67      	ldr	r3, [pc, #412]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a66      	ldr	r2, [pc, #408]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b64      	ldr	r3, [pc, #400]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002ae6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af8:	2307      	movs	r3, #7
 8002afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b00:	4619      	mov	r1, r3
 8002b02:	485b      	ldr	r0, [pc, #364]	; (8002c70 <HAL_UART_MspInit+0x1e4>)
 8002b04:	f000 fee8 	bl	80038d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002b08:	4b5a      	ldr	r3, [pc, #360]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b0a:	4a5b      	ldr	r2, [pc, #364]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002b0c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002b0e:	4b59      	ldr	r3, [pc, #356]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b14:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b16:	4b57      	ldr	r3, [pc, #348]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1c:	4b55      	ldr	r3, [pc, #340]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b22:	4b54      	ldr	r3, [pc, #336]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b28:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b2a:	4b52      	ldr	r3, [pc, #328]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002b36:	4b4f      	ldr	r3, [pc, #316]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b3c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b3e:	4b4d      	ldr	r3, [pc, #308]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b44:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b4a:	484a      	ldr	r0, [pc, #296]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b4c:	f000 fb48 	bl	80031e0 <HAL_DMA_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002b56:	f7ff fe89 	bl	800286c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a45      	ldr	r2, [pc, #276]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
 8002b60:	4a44      	ldr	r2, [pc, #272]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	2025      	movs	r0, #37	; 0x25
 8002b6c:	f000 fae5 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b70:	2025      	movs	r0, #37	; 0x25
 8002b72:	f000 fafe 	bl	8003172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b76:	e073      	b.n	8002c60 <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3f      	ldr	r2, [pc, #252]	; (8002c7c <HAL_UART_MspInit+0x1f0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d134      	bne.n	8002bec <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
 8002b92:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	4b32      	ldr	r3, [pc, #200]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a31      	ldr	r2, [pc, #196]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GSM_TX_Pin|GSM_RX_Pin;
 8002bba:	230c      	movs	r3, #12
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bca:	2307      	movs	r3, #7
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4826      	ldr	r0, [pc, #152]	; (8002c70 <HAL_UART_MspInit+0x1e4>)
 8002bd6:	f000 fe7f 	bl	80038d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2026      	movs	r0, #38	; 0x26
 8002be0:	f000 faab 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002be4:	2026      	movs	r0, #38	; 0x26
 8002be6:	f000 fac4 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 8002bea:	e039      	b.n	8002c60 <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART6)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_UART_MspInit+0x1f4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d134      	bne.n	8002c60 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002c00:	f043 0320 	orr.w	r3, r3, #32
 8002c04:	6453      	str	r3, [r2, #68]	; 0x44
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_UART_MspInit+0x1e0>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8002c2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002c40:	2308      	movs	r3, #8
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4809      	ldr	r0, [pc, #36]	; (8002c70 <HAL_UART_MspInit+0x1e4>)
 8002c4c:	f000 fe44 	bl	80038d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	2100      	movs	r1, #0
 8002c54:	2047      	movs	r0, #71	; 0x47
 8002c56:	f000 fa70 	bl	800313a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002c5a:	2047      	movs	r0, #71	; 0x47
 8002c5c:	f000 fa89 	bl	8003172 <HAL_NVIC_EnableIRQ>
}
 8002c60:	bf00      	nop
 8002c62:	3738      	adds	r7, #56	; 0x38
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40011000 	.word	0x40011000
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	200002a8 	.word	0x200002a8
 8002c78:	40026440 	.word	0x40026440
 8002c7c:	40004400 	.word	0x40004400
 8002c80:	40011400 	.word	0x40011400

08002c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <NMI_Handler+0x4>

08002c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8e:	e7fe      	b.n	8002c8e <HardFault_Handler+0x4>

08002c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <MemManage_Handler+0x4>

08002c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <BusFault_Handler+0x4>

08002c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <UsageFault_Handler+0x4>

08002ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd0:	f000 f914 	bl	8002efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RF_SCK_Pin);
 8002cdc:	2020      	movs	r0, #32
 8002cde:	f000 ffb1 	bl	8003c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <TIM2_IRQHandler+0x10>)
 8002cee:	f002 f956 	bl	8004f9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200004b0 	.word	0x200004b0

08002cfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <TIM3_IRQHandler+0x10>)
 8002d02:	f002 f94c 	bl	8004f9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000260 	.word	0x20000260

08002d10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <TIM4_IRQHandler+0x10>)
 8002d16:	f002 f942 	bl	8004f9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200001c8 	.word	0x200001c8

08002d24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d28:	4802      	ldr	r0, [pc, #8]	; (8002d34 <USART1_IRQHandler+0x10>)
 8002d2a:	f002 fec1 	bl	8005ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000308 	.word	0x20000308

08002d38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d3c:	4802      	ldr	r0, [pc, #8]	; (8002d48 <USART2_IRQHandler+0x10>)
 8002d3e:	f002 feb7 	bl	8005ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200004f8 	.word	0x200004f8

08002d4c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d50:	4802      	ldr	r0, [pc, #8]	; (8002d5c <DMA2_Stream2_IRQHandler+0x10>)
 8002d52:	f000 fb85 	bl	8003460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200002a8 	.word	0x200002a8

08002d60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002d64:	4802      	ldr	r0, [pc, #8]	; (8002d70 <USART6_IRQHandler+0x10>)
 8002d66:	f002 fea3 	bl	8005ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200003b0 	.word	0x200003b0

08002d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d7c:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <_sbrk+0x5c>)
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <_sbrk+0x60>)
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <_sbrk+0x64>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <_sbrk+0x64>)
 8002d92:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <_sbrk+0x68>)
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <_sbrk+0x64>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d207      	bcs.n	8002db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da4:	f003 fd32 	bl	800680c <__errno>
 8002da8:	4603      	mov	r3, r0
 8002daa:	220c      	movs	r2, #12
 8002dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	e009      	b.n	8002dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <_sbrk+0x64>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <_sbrk+0x64>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <_sbrk+0x64>)
 8002dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20018000 	.word	0x20018000
 8002dd4:	00000400 	.word	0x00000400
 8002dd8:	20000164 	.word	0x20000164
 8002ddc:	20000678 	.word	0x20000678

08002de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <SystemInit+0x20>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dea:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <SystemInit+0x20>)
 8002dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e08:	480d      	ldr	r0, [pc, #52]	; (8002e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e0a:	490e      	ldr	r1, [pc, #56]	; (8002e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e10:	e002      	b.n	8002e18 <LoopCopyDataInit>

08002e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e16:	3304      	adds	r3, #4

08002e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e1c:	d3f9      	bcc.n	8002e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e1e:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e20:	4c0b      	ldr	r4, [pc, #44]	; (8002e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e24:	e001      	b.n	8002e2a <LoopFillZerobss>

08002e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e28:	3204      	adds	r2, #4

08002e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e2c:	d3fb      	bcc.n	8002e26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e2e:	f7ff ffd7 	bl	8002de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e32:	f003 fcf1 	bl	8006818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e36:	f7fe fdb7 	bl	80019a8 <main>
  bx  lr    
 8002e3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e44:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002e48:	0800727c 	.word	0x0800727c
  ldr r2, =_sbss
 8002e4c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002e50:	20000678 	.word	0x20000678

08002e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e54:	e7fe      	b.n	8002e54 <ADC_IRQHandler>
	...

08002e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <HAL_Init+0x40>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0d      	ldr	r2, [pc, #52]	; (8002e98 <HAL_Init+0x40>)
 8002e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_Init+0x40>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <HAL_Init+0x40>)
 8002e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <HAL_Init+0x40>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <HAL_Init+0x40>)
 8002e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e80:	2003      	movs	r0, #3
 8002e82:	f000 f94f 	bl	8003124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e86:	200f      	movs	r0, #15
 8002e88:	f000 f808 	bl	8002e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e8c:	f7ff fcf4 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023c00 	.word	0x40023c00

08002e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_InitTick+0x54>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_InitTick+0x58>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4619      	mov	r1, r3
 8002eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f967 	bl	800318e <HAL_SYSTICK_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00e      	b.n	8002ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b0f      	cmp	r3, #15
 8002ece:	d80a      	bhi.n	8002ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	f000 f92f 	bl	800313a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002edc:	4a06      	ldr	r2, [pc, #24]	; (8002ef8 <HAL_InitTick+0x5c>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000020 	.word	0x20000020
 8002ef4:	20000028 	.word	0x20000028
 8002ef8:	20000024 	.word	0x20000024

08002efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_IncTick+0x20>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_IncTick+0x24>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <HAL_IncTick+0x24>)
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000028 	.word	0x20000028
 8002f20:	20000664 	.word	0x20000664

08002f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return uwTick;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_GetTick+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000664 	.word	0x20000664

08002f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f44:	f7ff ffee 	bl	8002f24 <HAL_GetTick>
 8002f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d005      	beq.n	8002f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_Delay+0x44>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f62:	bf00      	nop
 8002f64:	f7ff ffde 	bl	8002f24 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d8f7      	bhi.n	8002f64 <HAL_Delay+0x28>
  {
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000028 	.word	0x20000028

08002f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f94:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fb6:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	60d3      	str	r3, [r2, #12]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	f003 0307 	and.w	r3, r3, #7
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	db0b      	blt.n	8003012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	f003 021f 	and.w	r2, r3, #31
 8003000:	4907      	ldr	r1, [pc, #28]	; (8003020 <__NVIC_EnableIRQ+0x38>)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2001      	movs	r0, #1
 800300a:	fa00 f202 	lsl.w	r2, r0, r2
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000e100 	.word	0xe000e100

08003024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	db0a      	blt.n	800304e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	490c      	ldr	r1, [pc, #48]	; (8003070 <__NVIC_SetPriority+0x4c>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	440b      	add	r3, r1
 8003048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800304c:	e00a      	b.n	8003064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <__NVIC_SetPriority+0x50>)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	3b04      	subs	r3, #4
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	440b      	add	r3, r1
 8003062:	761a      	strb	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000e100 	.word	0xe000e100
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf28      	it	cs
 8003096:	2304      	movcs	r3, #4
 8003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3304      	adds	r3, #4
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d902      	bls.n	80030a8 <NVIC_EncodePriority+0x30>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b03      	subs	r3, #3
 80030a6:	e000      	b.n	80030aa <NVIC_EncodePriority+0x32>
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	401a      	ands	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	4313      	orrs	r3, r2
         );
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f0:	d301      	bcc.n	80030f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00f      	b.n	8003116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <SysTick_Config+0x40>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fe:	210f      	movs	r1, #15
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	f7ff ff8e 	bl	8003024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <SysTick_Config+0x40>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <SysTick_Config+0x40>)
 8003110:	2207      	movs	r2, #7
 8003112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000e010 	.word	0xe000e010

08003124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff29 	bl	8002f84 <__NVIC_SetPriorityGrouping>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800314c:	f7ff ff3e 	bl	8002fcc <__NVIC_GetPriorityGrouping>
 8003150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	6978      	ldr	r0, [r7, #20]
 8003158:	f7ff ff8e 	bl	8003078 <NVIC_EncodePriority>
 800315c:	4602      	mov	r2, r0
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff5d 	bl	8003024 <__NVIC_SetPriority>
}
 800316a:	bf00      	nop
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff31 	bl	8002fe8 <__NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffa2 	bl	80030e0 <SysTick_Config>
 800319c:	4603      	mov	r3, r0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e00e      	b.n	80031d6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	795b      	ldrb	r3, [r3, #5]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff fb7d 	bl	80028c8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031ec:	f7ff fe9a 	bl	8002f24 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e099      	b.n	8003330 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800321c:	e00f      	b.n	800323e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800321e:	f7ff fe81 	bl	8002f24 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b05      	cmp	r3, #5
 800322a:	d908      	bls.n	800323e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2203      	movs	r2, #3
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e078      	b.n	8003330 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e8      	bne.n	800321e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4b38      	ldr	r3, [pc, #224]	; (8003338 <HAL_DMA_Init+0x158>)
 8003258:	4013      	ands	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800326a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2b04      	cmp	r3, #4
 8003296:	d107      	bne.n	80032a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	4313      	orrs	r3, r2
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f023 0307 	bic.w	r3, r3, #7
 80032be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d117      	bne.n	8003302 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00e      	beq.n	8003302 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fa7b 	bl	80037e0 <DMA_CheckFifoParam>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2240      	movs	r2, #64	; 0x40
 80032f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032fe:	2301      	movs	r3, #1
 8003300:	e016      	b.n	8003330 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fa32 	bl	8003774 <DMA_CalcBaseAndBitshift>
 8003310:	4603      	mov	r3, r0
 8003312:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	223f      	movs	r2, #63	; 0x3f
 800331a:	409a      	lsls	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	f010803f 	.word	0xf010803f

0800333c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800334a:	f7ff fdeb 	bl	8002f24 <HAL_GetTick>
 800334e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d008      	beq.n	800336e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e052      	b.n	8003414 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0216 	bic.w	r2, r2, #22
 800337c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800338c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d103      	bne.n	800339e <HAL_DMA_Abort+0x62>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0208 	bic.w	r2, r2, #8
 80033ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033be:	e013      	b.n	80033e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033c0:	f7ff fdb0 	bl	8002f24 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d90c      	bls.n	80033e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2203      	movs	r2, #3
 80033d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e015      	b.n	8003414 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e4      	bne.n	80033c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	223f      	movs	r2, #63	; 0x3f
 80033fc:	409a      	lsls	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d004      	beq.n	800343a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2280      	movs	r2, #128	; 0x80
 8003434:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e00c      	b.n	8003454 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2205      	movs	r2, #5
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800346c:	4b92      	ldr	r3, [pc, #584]	; (80036b8 <HAL_DMA_IRQHandler+0x258>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a92      	ldr	r2, [pc, #584]	; (80036bc <HAL_DMA_IRQHandler+0x25c>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	0a9b      	lsrs	r3, r3, #10
 8003478:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	2208      	movs	r2, #8
 800348c:	409a      	lsls	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01a      	beq.n	80034cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d013      	beq.n	80034cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0204 	bic.w	r2, r2, #4
 80034b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	2208      	movs	r2, #8
 80034ba:	409a      	lsls	r2, r3
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	f043 0201 	orr.w	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d0:	2201      	movs	r2, #1
 80034d2:	409a      	lsls	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d012      	beq.n	8003502 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	2201      	movs	r2, #1
 80034f0:	409a      	lsls	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	f043 0202 	orr.w	r2, r3, #2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	2204      	movs	r2, #4
 8003508:	409a      	lsls	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d012      	beq.n	8003538 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003524:	2204      	movs	r2, #4
 8003526:	409a      	lsls	r2, r3
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003530:	f043 0204 	orr.w	r2, r3, #4
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353c:	2210      	movs	r2, #16
 800353e:	409a      	lsls	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4013      	ands	r3, r2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d043      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d03c      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355a:	2210      	movs	r2, #16
 800355c:	409a      	lsls	r2, r3
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d018      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d108      	bne.n	8003590 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2b00      	cmp	r3, #0
 8003584:	d024      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
 800358e:	e01f      	b.n	80035d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01b      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	4798      	blx	r3
 80035a0:	e016      	b.n	80035d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0208 	bic.w	r2, r2, #8
 80035be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d4:	2220      	movs	r2, #32
 80035d6:	409a      	lsls	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 808e 	beq.w	80036fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8086 	beq.w	80036fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f6:	2220      	movs	r2, #32
 80035f8:	409a      	lsls	r2, r3
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b05      	cmp	r3, #5
 8003608:	d136      	bne.n	8003678 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0216 	bic.w	r2, r2, #22
 8003618:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003628:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d103      	bne.n	800363a <HAL_DMA_IRQHandler+0x1da>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003636:	2b00      	cmp	r3, #0
 8003638:	d007      	beq.n	800364a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0208 	bic.w	r2, r2, #8
 8003648:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	223f      	movs	r2, #63	; 0x3f
 8003650:	409a      	lsls	r2, r3
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366a:	2b00      	cmp	r3, #0
 800366c:	d07d      	beq.n	800376a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
        }
        return;
 8003676:	e078      	b.n	800376a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01c      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d108      	bne.n	80036a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	2b00      	cmp	r3, #0
 800369a:	d030      	beq.n	80036fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	4798      	blx	r3
 80036a4:	e02b      	b.n	80036fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d027      	beq.n	80036fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	4798      	blx	r3
 80036b6:	e022      	b.n	80036fe <HAL_DMA_IRQHandler+0x29e>
 80036b8:	20000020 	.word	0x20000020
 80036bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10f      	bne.n	80036ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0210 	bic.w	r2, r2, #16
 80036dc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	2b00      	cmp	r3, #0
 8003704:	d032      	beq.n	800376c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d022      	beq.n	8003758 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2205      	movs	r2, #5
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	3301      	adds	r3, #1
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	429a      	cmp	r2, r3
 8003734:	d307      	bcc.n	8003746 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1f2      	bne.n	800372a <HAL_DMA_IRQHandler+0x2ca>
 8003744:	e000      	b.n	8003748 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003746:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
 8003768:	e000      	b.n	800376c <HAL_DMA_IRQHandler+0x30c>
        return;
 800376a:	bf00      	nop
    }
  }
}
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop

08003774 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	3b10      	subs	r3, #16
 8003784:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800378e:	4a13      	ldr	r2, [pc, #76]	; (80037dc <DMA_CalcBaseAndBitshift+0x68>)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d909      	bls.n	80037b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	1d1a      	adds	r2, r3, #4
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	659a      	str	r2, [r3, #88]	; 0x58
 80037b4:	e007      	b.n	80037c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	aaaaaaab 	.word	0xaaaaaaab
 80037dc:	08007230 	.word	0x08007230

080037e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d11f      	bne.n	800383a <DMA_CheckFifoParam+0x5a>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d856      	bhi.n	80038ae <DMA_CheckFifoParam+0xce>
 8003800:	a201      	add	r2, pc, #4	; (adr r2, 8003808 <DMA_CheckFifoParam+0x28>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	08003819 	.word	0x08003819
 800380c:	0800382b 	.word	0x0800382b
 8003810:	08003819 	.word	0x08003819
 8003814:	080038af 	.word	0x080038af
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d046      	beq.n	80038b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003828:	e043      	b.n	80038b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003832:	d140      	bne.n	80038b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003838:	e03d      	b.n	80038b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003842:	d121      	bne.n	8003888 <DMA_CheckFifoParam+0xa8>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b03      	cmp	r3, #3
 8003848:	d837      	bhi.n	80038ba <DMA_CheckFifoParam+0xda>
 800384a:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <DMA_CheckFifoParam+0x70>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	08003861 	.word	0x08003861
 8003854:	08003867 	.word	0x08003867
 8003858:	08003861 	.word	0x08003861
 800385c:	08003879 	.word	0x08003879
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
      break;
 8003864:	e030      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d025      	beq.n	80038be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003876:	e022      	b.n	80038be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003880:	d11f      	bne.n	80038c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003886:	e01c      	b.n	80038c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d903      	bls.n	8003896 <DMA_CheckFifoParam+0xb6>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d003      	beq.n	800389c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003894:	e018      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
      break;
 800389a:	e015      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
      break;
 80038ac:	e00b      	b.n	80038c6 <DMA_CheckFifoParam+0xe6>
      break;
 80038ae:	bf00      	nop
 80038b0:	e00a      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038b2:	bf00      	nop
 80038b4:	e008      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038b6:	bf00      	nop
 80038b8:	e006      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038ba:	bf00      	nop
 80038bc:	e004      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <DMA_CheckFifoParam+0xe8>
      break;
 80038c6:	bf00      	nop
    }
  } 
  
  return status; 
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop

080038d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	; 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	e159      	b.n	8003ba8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038f4:	2201      	movs	r2, #1
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	429a      	cmp	r2, r3
 800390e:	f040 8148 	bne.w	8003ba2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d005      	beq.n	800392a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003926:	2b02      	cmp	r3, #2
 8003928:	d130      	bne.n	800398c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	2203      	movs	r2, #3
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003960:	2201      	movs	r2, #1
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 0201 	and.w	r2, r3, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	2b03      	cmp	r3, #3
 8003996:	d017      	beq.n	80039c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	2203      	movs	r2, #3
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d123      	bne.n	8003a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	08da      	lsrs	r2, r3, #3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3208      	adds	r2, #8
 80039dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	220f      	movs	r2, #15
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	08da      	lsrs	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3208      	adds	r2, #8
 8003a16:	69b9      	ldr	r1, [r7, #24]
 8003a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0203 	and.w	r2, r3, #3
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80a2 	beq.w	8003ba2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	4b57      	ldr	r3, [pc, #348]	; (8003bc0 <HAL_GPIO_Init+0x2e8>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	4a56      	ldr	r2, [pc, #344]	; (8003bc0 <HAL_GPIO_Init+0x2e8>)
 8003a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6e:	4b54      	ldr	r3, [pc, #336]	; (8003bc0 <HAL_GPIO_Init+0x2e8>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a7a:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <HAL_GPIO_Init+0x2ec>)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	3302      	adds	r3, #2
 8003a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	220f      	movs	r2, #15
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a49      	ldr	r2, [pc, #292]	; (8003bc8 <HAL_GPIO_Init+0x2f0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d019      	beq.n	8003ada <HAL_GPIO_Init+0x202>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a48      	ldr	r2, [pc, #288]	; (8003bcc <HAL_GPIO_Init+0x2f4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_GPIO_Init+0x1fe>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a47      	ldr	r2, [pc, #284]	; (8003bd0 <HAL_GPIO_Init+0x2f8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00d      	beq.n	8003ad2 <HAL_GPIO_Init+0x1fa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a46      	ldr	r2, [pc, #280]	; (8003bd4 <HAL_GPIO_Init+0x2fc>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <HAL_GPIO_Init+0x1f6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a45      	ldr	r2, [pc, #276]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <HAL_GPIO_Init+0x1f2>
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	e008      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003aca:	2307      	movs	r3, #7
 8003acc:	e006      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e004      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e002      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <HAL_GPIO_Init+0x204>
 8003ada:	2300      	movs	r3, #0
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	f002 0203 	and.w	r2, r2, #3
 8003ae2:	0092      	lsls	r2, r2, #2
 8003ae4:	4093      	lsls	r3, r2
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aec:	4935      	ldr	r1, [pc, #212]	; (8003bc4 <HAL_GPIO_Init+0x2ec>)
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	089b      	lsrs	r3, r3, #2
 8003af2:	3302      	adds	r3, #2
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003afa:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	43db      	mvns	r3, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4013      	ands	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b1e:	4a2f      	ldr	r2, [pc, #188]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b24:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b48:	4a24      	ldr	r2, [pc, #144]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b4e:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b72:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b78:	4b18      	ldr	r3, [pc, #96]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b9c:	4a0f      	ldr	r2, [pc, #60]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b0f      	cmp	r3, #15
 8003bac:	f67f aea2 	bls.w	80038f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	3724      	adds	r7, #36	; 0x24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	40013800 	.word	0x40013800
 8003bc8:	40020000 	.word	0x40020000
 8003bcc:	40020400 	.word	0x40020400
 8003bd0:	40020800 	.word	0x40020800
 8003bd4:	40020c00 	.word	0x40020c00
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40013c00 	.word	0x40013c00

08003be0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	887b      	ldrh	r3, [r7, #2]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
 8003bfc:	e001      	b.n	8003c02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	807b      	strh	r3, [r7, #2]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c20:	787b      	ldrb	r3, [r7, #1]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c26:	887a      	ldrh	r2, [r7, #2]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c2c:	e003      	b.n	8003c36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	041a      	lsls	r2, r3, #16
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	619a      	str	r2, [r3, #24]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d006      	beq.n	8003c68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c5a:	4a05      	ldr	r2, [pc, #20]	; (8003c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe fcac 	bl	80025c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40013c00 	.word	0x40013c00

08003c74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e264      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d075      	beq.n	8003d7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c92:	4ba3      	ldr	r3, [pc, #652]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c9e:	4ba0      	ldr	r3, [pc, #640]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d112      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003caa:	4b9d      	ldr	r3, [pc, #628]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cb6:	d10b      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb8:	4b99      	ldr	r3, [pc, #612]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d05b      	beq.n	8003d7c <HAL_RCC_OscConfig+0x108>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d157      	bne.n	8003d7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e23f      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd8:	d106      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x74>
 8003cda:	4b91      	ldr	r3, [pc, #580]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a90      	ldr	r2, [pc, #576]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e01d      	b.n	8003d24 <HAL_RCC_OscConfig+0xb0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x98>
 8003cf2:	4b8b      	ldr	r3, [pc, #556]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a8a      	ldr	r2, [pc, #552]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	4b88      	ldr	r3, [pc, #544]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a87      	ldr	r2, [pc, #540]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	e00b      	b.n	8003d24 <HAL_RCC_OscConfig+0xb0>
 8003d0c:	4b84      	ldr	r3, [pc, #528]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a83      	ldr	r2, [pc, #524]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	4b81      	ldr	r3, [pc, #516]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a80      	ldr	r2, [pc, #512]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d013      	beq.n	8003d54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7ff f8fa 	bl	8002f24 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d34:	f7ff f8f6 	bl	8002f24 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e204      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	4b76      	ldr	r3, [pc, #472]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0xc0>
 8003d52:	e014      	b.n	8003d7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7ff f8e6 	bl	8002f24 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7ff f8e2 	bl	8002f24 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	; 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e1f0      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	4b6c      	ldr	r3, [pc, #432]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0xe8>
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d063      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d8a:	4b65      	ldr	r3, [pc, #404]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d96:	4b62      	ldr	r3, [pc, #392]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d11c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da2:	4b5f      	ldr	r3, [pc, #380]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d116      	bne.n	8003ddc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dae:	4b5c      	ldr	r3, [pc, #368]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x152>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e1c4      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	4b56      	ldr	r3, [pc, #344]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4952      	ldr	r1, [pc, #328]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dda:	e03a      	b.n	8003e52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003de4:	4b4f      	ldr	r3, [pc, #316]	; (8003f24 <HAL_RCC_OscConfig+0x2b0>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7ff f89b 	bl	8002f24 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df2:	f7ff f897 	bl	8002f24 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e1a5      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e04:	4b46      	ldr	r3, [pc, #280]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e10:	4b43      	ldr	r3, [pc, #268]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4940      	ldr	r1, [pc, #256]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]
 8003e24:	e015      	b.n	8003e52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e26:	4b3f      	ldr	r3, [pc, #252]	; (8003f24 <HAL_RCC_OscConfig+0x2b0>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7ff f87a 	bl	8002f24 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e34:	f7ff f876 	bl	8002f24 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e184      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	4b36      	ldr	r3, [pc, #216]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d030      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d016      	beq.n	8003e94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e66:	4b30      	ldr	r3, [pc, #192]	; (8003f28 <HAL_RCC_OscConfig+0x2b4>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7ff f85a 	bl	8002f24 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e74:	f7ff f856 	bl	8002f24 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e164      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e86:	4b26      	ldr	r3, [pc, #152]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x200>
 8003e92:	e015      	b.n	8003ec0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e94:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <HAL_RCC_OscConfig+0x2b4>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7ff f843 	bl	8002f24 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea2:	f7ff f83f 	bl	8002f24 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e14d      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb4:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f0      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80a0 	beq.w	800400e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed2:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10f      	bne.n	8003efe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	4a0e      	ldr	r2, [pc, #56]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eec:	6413      	str	r3, [r2, #64]	; 0x40
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003efa:	2301      	movs	r3, #1
 8003efc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_RCC_OscConfig+0x2b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d121      	bne.n	8003f4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <HAL_RCC_OscConfig+0x2b8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a07      	ldr	r2, [pc, #28]	; (8003f2c <HAL_RCC_OscConfig+0x2b8>)
 8003f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f16:	f7ff f805 	bl	8002f24 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1c:	e011      	b.n	8003f42 <HAL_RCC_OscConfig+0x2ce>
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	42470000 	.word	0x42470000
 8003f28:	42470e80 	.word	0x42470e80
 8003f2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f30:	f7fe fff8 	bl	8002f24 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e106      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f42:	4b85      	ldr	r3, [pc, #532]	; (8004158 <HAL_RCC_OscConfig+0x4e4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d106      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2f0>
 8003f56:	4b81      	ldr	r3, [pc, #516]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	4a80      	ldr	r2, [pc, #512]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	6713      	str	r3, [r2, #112]	; 0x70
 8003f62:	e01c      	b.n	8003f9e <HAL_RCC_OscConfig+0x32a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d10c      	bne.n	8003f86 <HAL_RCC_OscConfig+0x312>
 8003f6c:	4b7b      	ldr	r3, [pc, #492]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	4a7a      	ldr	r2, [pc, #488]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8003f72:	f043 0304 	orr.w	r3, r3, #4
 8003f76:	6713      	str	r3, [r2, #112]	; 0x70
 8003f78:	4b78      	ldr	r3, [pc, #480]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	4a77      	ldr	r2, [pc, #476]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6713      	str	r3, [r2, #112]	; 0x70
 8003f84:	e00b      	b.n	8003f9e <HAL_RCC_OscConfig+0x32a>
 8003f86:	4b75      	ldr	r3, [pc, #468]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a74      	ldr	r2, [pc, #464]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
 8003f92:	4b72      	ldr	r3, [pc, #456]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	4a71      	ldr	r2, [pc, #452]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d015      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa6:	f7fe ffbd 	bl	8002f24 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe ffb9 	bl	8002f24 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0c5      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	4b65      	ldr	r3, [pc, #404]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ee      	beq.n	8003fae <HAL_RCC_OscConfig+0x33a>
 8003fd0:	e014      	b.n	8003ffc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd2:	f7fe ffa7 	bl	8002f24 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fe ffa3 	bl	8002f24 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e0af      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff0:	4b5a      	ldr	r3, [pc, #360]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ee      	bne.n	8003fda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004002:	4b56      	ldr	r3, [pc, #344]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	4a55      	ldr	r2, [pc, #340]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 8004008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 809b 	beq.w	800414e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004018:	4b50      	ldr	r3, [pc, #320]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b08      	cmp	r3, #8
 8004022:	d05c      	beq.n	80040de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d141      	bne.n	80040b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402c:	4b4c      	ldr	r3, [pc, #304]	; (8004160 <HAL_RCC_OscConfig+0x4ec>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fe ff77 	bl	8002f24 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403a:	f7fe ff73 	bl	8002f24 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e081      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404c:	4b43      	ldr	r3, [pc, #268]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f0      	bne.n	800403a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	019b      	lsls	r3, r3, #6
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	3b01      	subs	r3, #1
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	061b      	lsls	r3, r3, #24
 800407c:	4937      	ldr	r1, [pc, #220]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004082:	4b37      	ldr	r3, [pc, #220]	; (8004160 <HAL_RCC_OscConfig+0x4ec>)
 8004084:	2201      	movs	r2, #1
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fe ff4c 	bl	8002f24 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004090:	f7fe ff48 	bl	8002f24 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e056      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a2:	4b2e      	ldr	r3, [pc, #184]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x41c>
 80040ae:	e04e      	b.n	800414e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b0:	4b2b      	ldr	r3, [pc, #172]	; (8004160 <HAL_RCC_OscConfig+0x4ec>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fe ff35 	bl	8002f24 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040be:	f7fe ff31 	bl	8002f24 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e03f      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d0:	4b22      	ldr	r3, [pc, #136]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f0      	bne.n	80040be <HAL_RCC_OscConfig+0x44a>
 80040dc:	e037      	b.n	800414e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e032      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ea:	4b1c      	ldr	r3, [pc, #112]	; (800415c <HAL_RCC_OscConfig+0x4e8>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d028      	beq.n	800414a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d121      	bne.n	800414a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d11a      	bne.n	800414a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800411a:	4013      	ands	r3, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004120:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004122:	4293      	cmp	r3, r2
 8004124:	d111      	bne.n	800414a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	085b      	lsrs	r3, r3, #1
 8004132:	3b01      	subs	r3, #1
 8004134:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004136:	429a      	cmp	r2, r3
 8004138:	d107      	bne.n	800414a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d001      	beq.n	800414e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40007000 	.word	0x40007000
 800415c:	40023800 	.word	0x40023800
 8004160:	42470060 	.word	0x42470060

08004164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0cc      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b68      	ldr	r3, [pc, #416]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d90c      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b65      	ldr	r3, [pc, #404]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b63      	ldr	r3, [pc, #396]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0b8      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d020      	beq.n	80041ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b8:	4b59      	ldr	r3, [pc, #356]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a58      	ldr	r2, [pc, #352]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d0:	4b53      	ldr	r3, [pc, #332]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4a52      	ldr	r2, [pc, #328]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041dc:	4b50      	ldr	r3, [pc, #320]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	494d      	ldr	r1, [pc, #308]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d044      	beq.n	8004284 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	4b47      	ldr	r3, [pc, #284]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d119      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e07f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d003      	beq.n	8004222 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421e:	2b03      	cmp	r3, #3
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004222:	4b3f      	ldr	r3, [pc, #252]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e06f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004232:	4b3b      	ldr	r3, [pc, #236]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e067      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b37      	ldr	r3, [pc, #220]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4934      	ldr	r1, [pc, #208]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	4313      	orrs	r3, r2
 8004252:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004254:	f7fe fe66 	bl	8002f24 <HAL_GetTick>
 8004258:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fe fe62 	bl	8002f24 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	; 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e04f      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b25      	ldr	r3, [pc, #148]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d20c      	bcs.n	80042ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b22      	ldr	r3, [pc, #136]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	4b20      	ldr	r3, [pc, #128]	; (800431c <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e032      	b.n	8004312 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4916      	ldr	r1, [pc, #88]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d009      	beq.n	80042ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d6:	4b12      	ldr	r3, [pc, #72]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	490e      	ldr	r1, [pc, #56]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042ea:	f000 f821 	bl	8004330 <HAL_RCC_GetSysClockFreq>
 80042ee:	4602      	mov	r2, r0
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	490a      	ldr	r1, [pc, #40]	; (8004324 <HAL_RCC_ClockConfig+0x1c0>)
 80042fc:	5ccb      	ldrb	r3, [r1, r3]
 80042fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004302:	4a09      	ldr	r2, [pc, #36]	; (8004328 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004306:	4b09      	ldr	r3, [pc, #36]	; (800432c <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fe fdc6 	bl	8002e9c <HAL_InitTick>

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023c00 	.word	0x40023c00
 8004320:	40023800 	.word	0x40023800
 8004324:	08007218 	.word	0x08007218
 8004328:	20000020 	.word	0x20000020
 800432c:	20000024 	.word	0x20000024

08004330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004330:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	2300      	movs	r3, #0
 8004342:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004348:	4b67      	ldr	r3, [pc, #412]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d00d      	beq.n	8004370 <HAL_RCC_GetSysClockFreq+0x40>
 8004354:	2b08      	cmp	r3, #8
 8004356:	f200 80bd 	bhi.w	80044d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0x34>
 800435e:	2b04      	cmp	r3, #4
 8004360:	d003      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x3a>
 8004362:	e0b7      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b61      	ldr	r3, [pc, #388]	; (80044ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004366:	60bb      	str	r3, [r7, #8]
       break;
 8004368:	e0b7      	b.n	80044da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800436a:	4b61      	ldr	r3, [pc, #388]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800436c:	60bb      	str	r3, [r7, #8]
      break;
 800436e:	e0b4      	b.n	80044da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004370:	4b5d      	ldr	r3, [pc, #372]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004378:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800437a:	4b5b      	ldr	r3, [pc, #364]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d04d      	beq.n	8004422 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004386:	4b58      	ldr	r3, [pc, #352]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	099b      	lsrs	r3, r3, #6
 800438c:	461a      	mov	r2, r3
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	ea02 0800 	and.w	r8, r2, r0
 800439e:	ea03 0901 	and.w	r9, r3, r1
 80043a2:	4640      	mov	r0, r8
 80043a4:	4649      	mov	r1, r9
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	014b      	lsls	r3, r1, #5
 80043b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043b4:	0142      	lsls	r2, r0, #5
 80043b6:	4610      	mov	r0, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	ebb0 0008 	subs.w	r0, r0, r8
 80043be:	eb61 0109 	sbc.w	r1, r1, r9
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	018b      	lsls	r3, r1, #6
 80043cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043d0:	0182      	lsls	r2, r0, #6
 80043d2:	1a12      	subs	r2, r2, r0
 80043d4:	eb63 0301 	sbc.w	r3, r3, r1
 80043d8:	f04f 0000 	mov.w	r0, #0
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	00d9      	lsls	r1, r3, #3
 80043e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043e6:	00d0      	lsls	r0, r2, #3
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	eb12 0208 	adds.w	r2, r2, r8
 80043f0:	eb43 0309 	adc.w	r3, r3, r9
 80043f4:	f04f 0000 	mov.w	r0, #0
 80043f8:	f04f 0100 	mov.w	r1, #0
 80043fc:	0259      	lsls	r1, r3, #9
 80043fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004402:	0250      	lsls	r0, r2, #9
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	461a      	mov	r2, r3
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	f7fb ff4c 	bl	80002b0 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4613      	mov	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	e04a      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004422:	4b31      	ldr	r3, [pc, #196]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	099b      	lsrs	r3, r3, #6
 8004428:	461a      	mov	r2, r3
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004432:	f04f 0100 	mov.w	r1, #0
 8004436:	ea02 0400 	and.w	r4, r2, r0
 800443a:	ea03 0501 	and.w	r5, r3, r1
 800443e:	4620      	mov	r0, r4
 8004440:	4629      	mov	r1, r5
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	014b      	lsls	r3, r1, #5
 800444c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004450:	0142      	lsls	r2, r0, #5
 8004452:	4610      	mov	r0, r2
 8004454:	4619      	mov	r1, r3
 8004456:	1b00      	subs	r0, r0, r4
 8004458:	eb61 0105 	sbc.w	r1, r1, r5
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	018b      	lsls	r3, r1, #6
 8004466:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800446a:	0182      	lsls	r2, r0, #6
 800446c:	1a12      	subs	r2, r2, r0
 800446e:	eb63 0301 	sbc.w	r3, r3, r1
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f04f 0100 	mov.w	r1, #0
 800447a:	00d9      	lsls	r1, r3, #3
 800447c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004480:	00d0      	lsls	r0, r2, #3
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	1912      	adds	r2, r2, r4
 8004488:	eb45 0303 	adc.w	r3, r5, r3
 800448c:	f04f 0000 	mov.w	r0, #0
 8004490:	f04f 0100 	mov.w	r1, #0
 8004494:	0299      	lsls	r1, r3, #10
 8004496:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800449a:	0290      	lsls	r0, r2, #10
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	461a      	mov	r2, r3
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	f7fb ff00 	bl	80002b0 <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4613      	mov	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	0c1b      	lsrs	r3, r3, #16
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	3301      	adds	r3, #1
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d0:	60bb      	str	r3, [r7, #8]
      break;
 80044d2:	e002      	b.n	80044da <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044d6:	60bb      	str	r3, [r7, #8]
      break;
 80044d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044da:	68bb      	ldr	r3, [r7, #8]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800
 80044ec:	00f42400 	.word	0x00f42400
 80044f0:	007a1200 	.word	0x007a1200

080044f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_RCC_GetHCLKFreq+0x14>)
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000020 	.word	0x20000020

0800450c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004510:	f7ff fff0 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	0a9b      	lsrs	r3, r3, #10
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4903      	ldr	r1, [pc, #12]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40023800 	.word	0x40023800
 8004530:	08007228 	.word	0x08007228

08004534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004538:	f7ff ffdc 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	0b5b      	lsrs	r3, r3, #13
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4903      	ldr	r1, [pc, #12]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40023800 	.word	0x40023800
 8004558:	08007228 	.word	0x08007228

0800455c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e07b      	b.n	8004666 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d108      	bne.n	8004588 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800457e:	d009      	beq.n	8004594 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	61da      	str	r2, [r3, #28]
 8004586:	e005      	b.n	8004594 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fe f9ac 	bl	800290c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004618:	ea42 0103 	orr.w	r1, r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	0c1b      	lsrs	r3, r3, #16
 8004632:	f003 0104 	and.w	r1, r3, #4
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f003 0210 	and.w	r2, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004654:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b088      	sub	sp, #32
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	603b      	str	r3, [r7, #0]
 800467a:	4613      	mov	r3, r2
 800467c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_SPI_Transmit+0x22>
 800468c:	2302      	movs	r3, #2
 800468e:	e126      	b.n	80048de <HAL_SPI_Transmit+0x270>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004698:	f7fe fc44 	bl	8002f24 <HAL_GetTick>
 800469c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d002      	beq.n	80046b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
 80046b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046b2:	e10b      	b.n	80048cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_SPI_Transmit+0x52>
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046c4:	e102      	b.n	80048cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2203      	movs	r2, #3
 80046ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	88fa      	ldrh	r2, [r7, #6]
 80046de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	88fa      	ldrh	r2, [r7, #6]
 80046e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470c:	d10f      	bne.n	800472e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800472c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d007      	beq.n	800474c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800474a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004754:	d14b      	bne.n	80047ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <HAL_SPI_Transmit+0xf6>
 800475e:	8afb      	ldrh	r3, [r7, #22]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d13e      	bne.n	80047e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	881a      	ldrh	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	1c9a      	adds	r2, r3, #2
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004788:	e02b      	b.n	80047e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b02      	cmp	r3, #2
 8004796:	d112      	bne.n	80047be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	881a      	ldrh	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	1c9a      	adds	r2, r3, #2
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80047bc:	e011      	b.n	80047e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047be:	f7fe fbb1 	bl	8002f24 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d803      	bhi.n	80047d6 <HAL_SPI_Transmit+0x168>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d102      	bne.n	80047dc <HAL_SPI_Transmit+0x16e>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d102      	bne.n	80047e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047e0:	e074      	b.n	80048cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1ce      	bne.n	800478a <HAL_SPI_Transmit+0x11c>
 80047ec:	e04c      	b.n	8004888 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_SPI_Transmit+0x18e>
 80047f6:	8afb      	ldrh	r3, [r7, #22]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d140      	bne.n	800487e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	7812      	ldrb	r2, [r2, #0]
 8004808:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004822:	e02c      	b.n	800487e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b02      	cmp	r3, #2
 8004830:	d113      	bne.n	800485a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	330c      	adds	r3, #12
 800483c:	7812      	ldrb	r2, [r2, #0]
 800483e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	86da      	strh	r2, [r3, #54]	; 0x36
 8004858:	e011      	b.n	800487e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800485a:	f7fe fb63 	bl	8002f24 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d803      	bhi.n	8004872 <HAL_SPI_Transmit+0x204>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004870:	d102      	bne.n	8004878 <HAL_SPI_Transmit+0x20a>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d102      	bne.n	800487e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800487c:	e026      	b.n	80048cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1cd      	bne.n	8004824 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	6839      	ldr	r1, [r7, #0]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 fa63 	bl	8004d58 <SPI_EndRxTxTransaction>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048a6:	2300      	movs	r3, #0
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e000      	b.n	80048cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80048ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b08c      	sub	sp, #48	; 0x30
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048f4:	2301      	movs	r3, #1
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_SPI_TransmitReceive+0x26>
 8004908:	2302      	movs	r3, #2
 800490a:	e18a      	b.n	8004c22 <HAL_SPI_TransmitReceive+0x33c>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004914:	f7fe fb06 	bl	8002f24 <HAL_GetTick>
 8004918:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800492a:	887b      	ldrh	r3, [r7, #2]
 800492c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800492e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004932:	2b01      	cmp	r3, #1
 8004934:	d00f      	beq.n	8004956 <HAL_SPI_TransmitReceive+0x70>
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800493c:	d107      	bne.n	800494e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <HAL_SPI_TransmitReceive+0x68>
 8004946:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800494a:	2b04      	cmp	r3, #4
 800494c:	d003      	beq.n	8004956 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800494e:	2302      	movs	r3, #2
 8004950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004954:	e15b      	b.n	8004c0e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_SPI_TransmitReceive+0x82>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_TransmitReceive+0x82>
 8004962:	887b      	ldrh	r3, [r7, #2]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d103      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800496e:	e14e      	b.n	8004c0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b04      	cmp	r3, #4
 800497a:	d003      	beq.n	8004984 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2205      	movs	r2, #5
 8004980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	887a      	ldrh	r2, [r7, #2]
 8004994:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	887a      	ldrh	r2, [r7, #2]
 800499a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	887a      	ldrh	r2, [r7, #2]
 80049a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	887a      	ldrh	r2, [r7, #2]
 80049ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d007      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e0:	d178      	bne.n	8004ad4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_SPI_TransmitReceive+0x10a>
 80049ea:	8b7b      	ldrh	r3, [r7, #26]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d166      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	881a      	ldrh	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	1c9a      	adds	r2, r3, #2
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a14:	e053      	b.n	8004abe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d11b      	bne.n	8004a5c <HAL_SPI_TransmitReceive+0x176>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d016      	beq.n	8004a5c <HAL_SPI_TransmitReceive+0x176>
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d113      	bne.n	8004a5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	881a      	ldrh	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	1c9a      	adds	r2, r3, #2
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d119      	bne.n	8004a9e <HAL_SPI_TransmitReceive+0x1b8>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d014      	beq.n	8004a9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	b292      	uxth	r2, r2
 8004a80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	1c9a      	adds	r2, r3, #2
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a9e:	f7fe fa41 	bl	8002f24 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d807      	bhi.n	8004abe <HAL_SPI_TransmitReceive+0x1d8>
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d003      	beq.n	8004abe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004abc:	e0a7      	b.n	8004c0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1a6      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x130>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1a1      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x130>
 8004ad2:	e07c      	b.n	8004bce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_SPI_TransmitReceive+0x1fc>
 8004adc:	8b7b      	ldrh	r3, [r7, #26]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d16b      	bne.n	8004bba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b08:	e057      	b.n	8004bba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d11c      	bne.n	8004b52 <HAL_SPI_TransmitReceive+0x26c>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d017      	beq.n	8004b52 <HAL_SPI_TransmitReceive+0x26c>
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d114      	bne.n	8004b52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	7812      	ldrb	r2, [r2, #0]
 8004b34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d119      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x2ae>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d014      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b90:	2301      	movs	r3, #1
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b94:	f7fe f9c6 	bl	8002f24 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d803      	bhi.n	8004bac <HAL_SPI_TransmitReceive+0x2c6>
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d102      	bne.n	8004bb2 <HAL_SPI_TransmitReceive+0x2cc>
 8004bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d103      	bne.n	8004bba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bb8:	e029      	b.n	8004c0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1a2      	bne.n	8004b0a <HAL_SPI_TransmitReceive+0x224>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d19d      	bne.n	8004b0a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f8c0 	bl	8004d58 <SPI_EndRxTxTransaction>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d006      	beq.n	8004bec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004bea:	e010      	b.n	8004c0e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	e000      	b.n	8004c0e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3730      	adds	r7, #48	; 0x30
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c38:	b2db      	uxtb	r3, r3
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c58:	f7fe f964 	bl	8002f24 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	4413      	add	r3, r2
 8004c66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c68:	f7fe f95c 	bl	8002f24 <HAL_GetTick>
 8004c6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c6e:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	015b      	lsls	r3, r3, #5
 8004c74:	0d1b      	lsrs	r3, r3, #20
 8004c76:	69fa      	ldr	r2, [r7, #28]
 8004c78:	fb02 f303 	mul.w	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c7e:	e054      	b.n	8004d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c86:	d050      	beq.n	8004d2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c88:	f7fe f94c 	bl	8002f24 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d902      	bls.n	8004c9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d13d      	bne.n	8004d1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb6:	d111      	bne.n	8004cdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc0:	d004      	beq.n	8004ccc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cca:	d107      	bne.n	8004cdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce4:	d10f      	bne.n	8004d06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e017      	b.n	8004d4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	bf0c      	ite	eq
 8004d3a:	2301      	moveq	r3, #1
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d19b      	bne.n	8004c80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000020 	.word	0x20000020

08004d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d64:	4b1b      	ldr	r3, [pc, #108]	; (8004dd4 <SPI_EndRxTxTransaction+0x7c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1b      	ldr	r2, [pc, #108]	; (8004dd8 <SPI_EndRxTxTransaction+0x80>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	0d5b      	lsrs	r3, r3, #21
 8004d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d74:	fb02 f303 	mul.w	r3, r2, r3
 8004d78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d82:	d112      	bne.n	8004daa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2180      	movs	r1, #128	; 0x80
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7ff ff5a 	bl	8004c48 <SPI_WaitFlagStateUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d016      	beq.n	8004dc8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	f043 0220 	orr.w	r2, r3, #32
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e00f      	b.n	8004dca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc0:	2b80      	cmp	r3, #128	; 0x80
 8004dc2:	d0f2      	beq.n	8004daa <SPI_EndRxTxTransaction+0x52>
 8004dc4:	e000      	b.n	8004dc8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004dc6:	bf00      	nop
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000020 	.word	0x20000020
 8004dd8:	165e9f81 	.word	0x165e9f81

08004ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e041      	b.n	8004e72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fd fdca 	bl	800299c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f000 fab6 	bl	800538c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d001      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e044      	b.n	8004f1e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <HAL_TIM_Base_Start_IT+0xb0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d018      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebe:	d013      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1a      	ldr	r2, [pc, #104]	; (8004f30 <HAL_TIM_Base_Start_IT+0xb4>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00e      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a19      	ldr	r2, [pc, #100]	; (8004f34 <HAL_TIM_Base_Start_IT+0xb8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d009      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <HAL_TIM_Base_Start_IT+0xbc>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_TIM_Base_Start_IT+0x6c>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a16      	ldr	r2, [pc, #88]	; (8004f3c <HAL_TIM_Base_Start_IT+0xc0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d111      	bne.n	8004f0c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b06      	cmp	r3, #6
 8004ef8:	d010      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0201 	orr.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0a:	e007      	b.n	8004f1c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40014000 	.word	0x40014000

08004f40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a1a      	ldr	r2, [r3, #32]
 8004f5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10f      	bne.n	8004f88 <HAL_TIM_Base_Stop_IT+0x48>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6a1a      	ldr	r2, [r3, #32]
 8004f6e:	f240 4344 	movw	r3, #1092	; 0x444
 8004f72:	4013      	ands	r3, r2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d107      	bne.n	8004f88 <HAL_TIM_Base_Stop_IT+0x48>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d122      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d11b      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f06f 0202 	mvn.w	r2, #2
 8004fca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f9b5 	bl	8005350 <HAL_TIM_IC_CaptureCallback>
 8004fe6:	e005      	b.n	8004ff4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f9a7 	bl	800533c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f9b8 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b04      	cmp	r3, #4
 8005006:	d122      	bne.n	800504e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b04      	cmp	r3, #4
 8005014:	d11b      	bne.n	800504e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f06f 0204 	mvn.w	r2, #4
 800501e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f98b 	bl	8005350 <HAL_TIM_IC_CaptureCallback>
 800503a:	e005      	b.n	8005048 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f97d 	bl	800533c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f98e 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f003 0308 	and.w	r3, r3, #8
 8005058:	2b08      	cmp	r3, #8
 800505a:	d122      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b08      	cmp	r3, #8
 8005068:	d11b      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f06f 0208 	mvn.w	r2, #8
 8005072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2204      	movs	r2, #4
 8005078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f961 	bl	8005350 <HAL_TIM_IC_CaptureCallback>
 800508e:	e005      	b.n	800509c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f953 	bl	800533c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f964 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d122      	bne.n	80050f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b10      	cmp	r3, #16
 80050bc:	d11b      	bne.n	80050f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f06f 0210 	mvn.w	r2, #16
 80050c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2208      	movs	r2, #8
 80050cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f937 	bl	8005350 <HAL_TIM_IC_CaptureCallback>
 80050e2:	e005      	b.n	80050f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f929 	bl	800533c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f93a 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d10e      	bne.n	8005122 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b01      	cmp	r3, #1
 8005110:	d107      	bne.n	8005122 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f06f 0201 	mvn.w	r2, #1
 800511a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7fd fa0b 	bl	8002538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512c:	2b80      	cmp	r3, #128	; 0x80
 800512e:	d10e      	bne.n	800514e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513a:	2b80      	cmp	r3, #128	; 0x80
 800513c:	d107      	bne.n	800514e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fab1 	bl	80056b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d10e      	bne.n	800517a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005166:	2b40      	cmp	r3, #64	; 0x40
 8005168:	d107      	bne.n	800517a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f8ff 	bl	8005378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b20      	cmp	r3, #32
 8005186:	d10e      	bne.n	80051a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b20      	cmp	r3, #32
 8005194:	d107      	bne.n	80051a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f06f 0220 	mvn.w	r2, #32
 800519e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fa7b 	bl	800569c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_ConfigClockSource+0x1c>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e0b4      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x186>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005202:	d03e      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0xd4>
 8005204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005208:	f200 8087 	bhi.w	800531a <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005210:	f000 8086 	beq.w	8005320 <HAL_TIM_ConfigClockSource+0x172>
 8005214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005218:	d87f      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x16c>
 800521a:	2b70      	cmp	r3, #112	; 0x70
 800521c:	d01a      	beq.n	8005254 <HAL_TIM_ConfigClockSource+0xa6>
 800521e:	2b70      	cmp	r3, #112	; 0x70
 8005220:	d87b      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x16c>
 8005222:	2b60      	cmp	r3, #96	; 0x60
 8005224:	d050      	beq.n	80052c8 <HAL_TIM_ConfigClockSource+0x11a>
 8005226:	2b60      	cmp	r3, #96	; 0x60
 8005228:	d877      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x16c>
 800522a:	2b50      	cmp	r3, #80	; 0x50
 800522c:	d03c      	beq.n	80052a8 <HAL_TIM_ConfigClockSource+0xfa>
 800522e:	2b50      	cmp	r3, #80	; 0x50
 8005230:	d873      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x16c>
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	d058      	beq.n	80052e8 <HAL_TIM_ConfigClockSource+0x13a>
 8005236:	2b40      	cmp	r3, #64	; 0x40
 8005238:	d86f      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x16c>
 800523a:	2b30      	cmp	r3, #48	; 0x30
 800523c:	d064      	beq.n	8005308 <HAL_TIM_ConfigClockSource+0x15a>
 800523e:	2b30      	cmp	r3, #48	; 0x30
 8005240:	d86b      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x16c>
 8005242:	2b20      	cmp	r3, #32
 8005244:	d060      	beq.n	8005308 <HAL_TIM_ConfigClockSource+0x15a>
 8005246:	2b20      	cmp	r3, #32
 8005248:	d867      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x16c>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d05c      	beq.n	8005308 <HAL_TIM_ConfigClockSource+0x15a>
 800524e:	2b10      	cmp	r3, #16
 8005250:	d05a      	beq.n	8005308 <HAL_TIM_ConfigClockSource+0x15a>
 8005252:	e062      	b.n	800531a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	6899      	ldr	r1, [r3, #8]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f000 f98c 	bl	8005580 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005276:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	609a      	str	r2, [r3, #8]
      break;
 8005280:	e04f      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6899      	ldr	r1, [r3, #8]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f000 f975 	bl	8005580 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052a4:	609a      	str	r2, [r3, #8]
      break;
 80052a6:	e03c      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6818      	ldr	r0, [r3, #0]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	6859      	ldr	r1, [r3, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	461a      	mov	r2, r3
 80052b6:	f000 f8e9 	bl	800548c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2150      	movs	r1, #80	; 0x50
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 f942 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 80052c6:	e02c      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	6859      	ldr	r1, [r3, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	461a      	mov	r2, r3
 80052d6:	f000 f908 	bl	80054ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2160      	movs	r1, #96	; 0x60
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 f932 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 80052e6:	e01c      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	461a      	mov	r2, r3
 80052f6:	f000 f8c9 	bl	800548c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2140      	movs	r1, #64	; 0x40
 8005300:	4618      	mov	r0, r3
 8005302:	f000 f922 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8005306:	e00c      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f000 f919 	bl	800554a <TIM_ITRx_SetConfig>
      break;
 8005318:	e003      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	73fb      	strb	r3, [r7, #15]
      break;
 800531e:	e000      	b.n	8005322 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005320:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005332:	7bfb      	ldrb	r3, [r7, #15]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a34      	ldr	r2, [pc, #208]	; (8005470 <TIM_Base_SetConfig+0xe4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00f      	beq.n	80053c4 <TIM_Base_SetConfig+0x38>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053aa:	d00b      	beq.n	80053c4 <TIM_Base_SetConfig+0x38>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a31      	ldr	r2, [pc, #196]	; (8005474 <TIM_Base_SetConfig+0xe8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d007      	beq.n	80053c4 <TIM_Base_SetConfig+0x38>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a30      	ldr	r2, [pc, #192]	; (8005478 <TIM_Base_SetConfig+0xec>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_Base_SetConfig+0x38>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a2f      	ldr	r2, [pc, #188]	; (800547c <TIM_Base_SetConfig+0xf0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d108      	bne.n	80053d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a25      	ldr	r2, [pc, #148]	; (8005470 <TIM_Base_SetConfig+0xe4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01b      	beq.n	8005416 <TIM_Base_SetConfig+0x8a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e4:	d017      	beq.n	8005416 <TIM_Base_SetConfig+0x8a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a22      	ldr	r2, [pc, #136]	; (8005474 <TIM_Base_SetConfig+0xe8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <TIM_Base_SetConfig+0x8a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a21      	ldr	r2, [pc, #132]	; (8005478 <TIM_Base_SetConfig+0xec>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00f      	beq.n	8005416 <TIM_Base_SetConfig+0x8a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a20      	ldr	r2, [pc, #128]	; (800547c <TIM_Base_SetConfig+0xf0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00b      	beq.n	8005416 <TIM_Base_SetConfig+0x8a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a1f      	ldr	r2, [pc, #124]	; (8005480 <TIM_Base_SetConfig+0xf4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d007      	beq.n	8005416 <TIM_Base_SetConfig+0x8a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a1e      	ldr	r2, [pc, #120]	; (8005484 <TIM_Base_SetConfig+0xf8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_Base_SetConfig+0x8a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a1d      	ldr	r2, [pc, #116]	; (8005488 <TIM_Base_SetConfig+0xfc>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d108      	bne.n	8005428 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a08      	ldr	r2, [pc, #32]	; (8005470 <TIM_Base_SetConfig+0xe4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d103      	bne.n	800545c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	615a      	str	r2, [r3, #20]
}
 8005462:	bf00      	nop
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40010000 	.word	0x40010000
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800
 800547c:	40000c00 	.word	0x40000c00
 8005480:	40014000 	.word	0x40014000
 8005484:	40014400 	.word	0x40014400
 8005488:	40014800 	.word	0x40014800

0800548c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f023 0201 	bic.w	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 030a 	bic.w	r3, r3, #10
 80054c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b087      	sub	sp, #28
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f023 0210 	bic.w	r2, r3, #16
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	031b      	lsls	r3, r3, #12
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005526:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800554a:	b480      	push	{r7}
 800554c:	b085      	sub	sp, #20
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	f043 0307 	orr.w	r3, r3, #7
 800556c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	609a      	str	r2, [r3, #8]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800559a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	021a      	lsls	r2, r3, #8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e050      	b.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d018      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005624:	d013      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a18      	ldr	r2, [pc, #96]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00e      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a16      	ldr	r2, [pc, #88]	; (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d009      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a15      	ldr	r2, [pc, #84]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d004      	beq.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a13      	ldr	r2, [pc, #76]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d10c      	bne.n	8005668 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4313      	orrs	r3, r2
 800565e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40010000 	.word	0x40010000
 800568c:	40000400 	.word	0x40000400
 8005690:	40000800 	.word	0x40000800
 8005694:	40000c00 	.word	0x40000c00
 8005698:	40014000 	.word	0x40014000

0800569c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e03f      	b.n	8005756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fd f9ce 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2224      	movs	r2, #36	; 0x24
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 feb7 	bl	800647c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800571c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800572c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800573c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b08a      	sub	sp, #40	; 0x28
 8005762:	af02      	add	r7, sp, #8
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b20      	cmp	r3, #32
 800577c:	d17c      	bne.n	8005878 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_UART_Transmit+0x2c>
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e075      	b.n	800587a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_UART_Transmit+0x3e>
 8005798:	2302      	movs	r3, #2
 800579a:	e06e      	b.n	800587a <HAL_UART_Transmit+0x11c>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2221      	movs	r2, #33	; 0x21
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057b2:	f7fd fbb7 	bl	8002f24 <HAL_GetTick>
 80057b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	88fa      	ldrh	r2, [r7, #6]
 80057c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057cc:	d108      	bne.n	80057e0 <HAL_UART_Transmit+0x82>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d104      	bne.n	80057e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	61bb      	str	r3, [r7, #24]
 80057de:	e003      	b.n	80057e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80057f0:	e02a      	b.n	8005848 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	2180      	movs	r1, #128	; 0x80
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 fbfb 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e036      	b.n	800587a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10b      	bne.n	800582a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	3302      	adds	r3, #2
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	e007      	b.n	800583a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	781a      	ldrb	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	3301      	adds	r3, #1
 8005838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1cf      	bne.n	80057f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2200      	movs	r2, #0
 800585a:	2140      	movs	r1, #64	; 0x40
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fbcb 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e006      	b.n	800587a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	e000      	b.n	800587a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005878:	2302      	movs	r3, #2
  }
}
 800587a:	4618      	mov	r0, r3
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b08a      	sub	sp, #40	; 0x28
 8005886:	af02      	add	r7, sp, #8
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	4613      	mov	r3, r2
 8005890:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b20      	cmp	r3, #32
 80058a0:	f040 808c 	bne.w	80059bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <HAL_UART_Receive+0x2e>
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e084      	b.n	80059be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_UART_Receive+0x40>
 80058be:	2302      	movs	r3, #2
 80058c0:	e07d      	b.n	80059be <HAL_UART_Receive+0x13c>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2222      	movs	r2, #34	; 0x22
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058de:	f7fd fb21 	bl	8002f24 <HAL_GetTick>
 80058e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	88fa      	ldrh	r2, [r7, #6]
 80058ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f8:	d108      	bne.n	800590c <HAL_UART_Receive+0x8a>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d104      	bne.n	800590c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	e003      	b.n	8005914 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005910:	2300      	movs	r3, #0
 8005912:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800591c:	e043      	b.n	80059a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	2120      	movs	r1, #32
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fb65 	bl	8005ff8 <UART_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e042      	b.n	80059be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10c      	bne.n	8005958 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	b29b      	uxth	r3, r3
 8005946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594a:	b29a      	uxth	r2, r3
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	3302      	adds	r3, #2
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	e01f      	b.n	8005998 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005960:	d007      	beq.n	8005972 <HAL_UART_Receive+0xf0>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10a      	bne.n	8005980 <HAL_UART_Receive+0xfe>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	b2da      	uxtb	r2, r3
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	e008      	b.n	8005992 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800598c:	b2da      	uxtb	r2, r3
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	3301      	adds	r3, #1
 8005996:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1b6      	bne.n	800591e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	e000      	b.n	80059be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80059bc:	2302      	movs	r3, #2
  }
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b085      	sub	sp, #20
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	4613      	mov	r3, r2
 80059d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d130      	bne.n	8005a42 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <HAL_UART_Transmit_IT+0x26>
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e029      	b.n	8005a44 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Transmit_IT+0x38>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e022      	b.n	8005a44 <HAL_UART_Transmit_IT+0x7e>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	88fa      	ldrh	r2, [r7, #6]
 8005a10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	88fa      	ldrh	r2, [r7, #6]
 8005a16:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2221      	movs	r2, #33	; 0x21
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a3c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e000      	b.n	8005a44 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005a42:	2302      	movs	r3, #2
  }
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b20      	cmp	r3, #32
 8005a68:	d11d      	bne.n	8005aa6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <HAL_UART_Receive_IT+0x26>
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e016      	b.n	8005aa8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_UART_Receive_IT+0x38>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e00f      	b.n	8005aa8 <HAL_UART_Receive_IT+0x58>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fb19 	bl	80060d4 <UART_Start_Receive_IT>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	e000      	b.n	8005aa8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005aa6:	2302      	movs	r3, #2
  }
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b0ba      	sub	sp, #232	; 0xe8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10f      	bne.n	8005b16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <HAL_UART_IRQHandler+0x66>
 8005b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fbf9 	bl	8006306 <UART_Receive_IT>
      return;
 8005b14:	e256      	b.n	8005fc4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80de 	beq.w	8005cdc <HAL_UART_IRQHandler+0x22c>
 8005b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 80d1 	beq.w	8005cdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00b      	beq.n	8005b5e <HAL_UART_IRQHandler+0xae>
 8005b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d005      	beq.n	8005b5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f043 0201 	orr.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <HAL_UART_IRQHandler+0xd2>
 8005b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d005      	beq.n	8005b82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f043 0202 	orr.w	r2, r3, #2
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <HAL_UART_IRQHandler+0xf6>
 8005b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f043 0204 	orr.w	r2, r3, #4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d011      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x126>
 8005bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d105      	bne.n	8005bca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f043 0208 	orr.w	r2, r3, #8
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 81ed 	beq.w	8005fba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_UART_IRQHandler+0x14e>
 8005bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fb84 	bl	8006306 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2301      	moveq	r3, #1
 8005c0e:	2300      	movne	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f003 0308 	and.w	r3, r3, #8
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <HAL_UART_IRQHandler+0x17a>
 8005c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d04f      	beq.n	8005cca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa8c 	bl	8006148 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d141      	bne.n	8005cc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3314      	adds	r3, #20
 8005c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3314      	adds	r3, #20
 8005c66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1d9      	bne.n	8005c3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d013      	beq.n	8005cba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	4a7d      	ldr	r2, [pc, #500]	; (8005e8c <HAL_UART_IRQHandler+0x3dc>)
 8005c98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fd fbbc 	bl	800341c <HAL_DMA_Abort_IT>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d016      	beq.n	8005cd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb8:	e00e      	b.n	8005cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fc fbf4 	bl	80024a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	e00a      	b.n	8005cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fc fbf0 	bl	80024a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc8:	e006      	b.n	8005cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fc fbec 	bl	80024a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005cd6:	e170      	b.n	8005fba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd8:	bf00      	nop
    return;
 8005cda:	e16e      	b.n	8005fba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	f040 814a 	bne.w	8005f7a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 8143 	beq.w	8005f7a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 813c 	beq.w	8005f7a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d02:	2300      	movs	r3, #0
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60bb      	str	r3, [r7, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	60bb      	str	r3, [r7, #8]
 8005d16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	f040 80b4 	bne.w	8005e90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8140 	beq.w	8005fbe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d46:	429a      	cmp	r2, r3
 8005d48:	f080 8139 	bcs.w	8005fbe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5e:	f000 8088 	beq.w	8005e72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	330c      	adds	r3, #12
 8005d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	330c      	adds	r3, #12
 8005d8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1d9      	bne.n	8005d62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3314      	adds	r3, #20
 8005db4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dc0:	f023 0301 	bic.w	r3, r3, #1
 8005dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3314      	adds	r3, #20
 8005dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005dd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005dd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005dda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e1      	bne.n	8005dae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3314      	adds	r3, #20
 8005df0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3314      	adds	r3, #20
 8005e0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e3      	bne.n	8005dea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	330c      	adds	r3, #12
 8005e36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e42:	f023 0310 	bic.w	r3, r3, #16
 8005e46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e54:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e3      	bne.n	8005e30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fd fa65 	bl	800333c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f8ac 	bl	8005fe0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e88:	e099      	b.n	8005fbe <HAL_UART_IRQHandler+0x50e>
 8005e8a:	bf00      	nop
 8005e8c:	0800620f 	.word	0x0800620f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 808b 	beq.w	8005fc2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005eac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8086 	beq.w	8005fc2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ecc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	330c      	adds	r3, #12
 8005ed6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005eda:	647a      	str	r2, [r7, #68]	; 0x44
 8005edc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ee0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e3      	bne.n	8005eb6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3314      	adds	r3, #20
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	623b      	str	r3, [r7, #32]
   return(result);
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	f023 0301 	bic.w	r3, r3, #1
 8005f04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3314      	adds	r3, #20
 8005f0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f12:	633a      	str	r2, [r7, #48]	; 0x30
 8005f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e3      	bne.n	8005eee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0310 	bic.w	r3, r3, #16
 8005f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	330c      	adds	r3, #12
 8005f54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f58:	61fa      	str	r2, [r7, #28]
 8005f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	69b9      	ldr	r1, [r7, #24]
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	617b      	str	r3, [r7, #20]
   return(result);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e3      	bne.n	8005f34 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f834 	bl	8005fe0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f78:	e023      	b.n	8005fc2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d009      	beq.n	8005f9a <HAL_UART_IRQHandler+0x4ea>
 8005f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f94f 	bl	8006236 <UART_Transmit_IT>
    return;
 8005f98:	e014      	b.n	8005fc4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x514>
 8005fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f98f 	bl	80062d6 <UART_EndTransmit_IT>
    return;
 8005fb8:	e004      	b.n	8005fc4 <HAL_UART_IRQHandler+0x514>
    return;
 8005fba:	bf00      	nop
 8005fbc:	e002      	b.n	8005fc4 <HAL_UART_IRQHandler+0x514>
      return;
 8005fbe:	bf00      	nop
 8005fc0:	e000      	b.n	8005fc4 <HAL_UART_IRQHandler+0x514>
      return;
 8005fc2:	bf00      	nop
  }
}
 8005fc4:	37e8      	adds	r7, #232	; 0xe8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop

08005fcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b090      	sub	sp, #64	; 0x40
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006008:	e050      	b.n	80060ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d04c      	beq.n	80060ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <UART_WaitOnFlagUntilTimeout+0x30>
 8006018:	f7fc ff84 	bl	8002f24 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006024:	429a      	cmp	r2, r3
 8006026:	d241      	bcs.n	80060ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	330c      	adds	r3, #12
 800602e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006048:	637a      	str	r2, [r7, #52]	; 0x34
 800604a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800604e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e5      	bne.n	8006028 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3314      	adds	r3, #20
 8006062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	613b      	str	r3, [r7, #16]
   return(result);
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f023 0301 	bic.w	r3, r3, #1
 8006072:	63bb      	str	r3, [r7, #56]	; 0x38
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3314      	adds	r3, #20
 800607a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800607c:	623a      	str	r2, [r7, #32]
 800607e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	69f9      	ldr	r1, [r7, #28]
 8006082:	6a3a      	ldr	r2, [r7, #32]
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	61bb      	str	r3, [r7, #24]
   return(result);
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e5      	bne.n	800605c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2220      	movs	r2, #32
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e00f      	b.n	80060cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	4013      	ands	r3, r2
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	bf0c      	ite	eq
 80060bc:	2301      	moveq	r3, #1
 80060be:	2300      	movne	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	79fb      	ldrb	r3, [r7, #7]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d09f      	beq.n	800600a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3740      	adds	r7, #64	; 0x40
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	4613      	mov	r3, r2
 80060e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	88fa      	ldrh	r2, [r7, #6]
 80060ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	88fa      	ldrh	r2, [r7, #6]
 80060f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2222      	movs	r2, #34	; 0x22
 80060fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006118:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0201 	orr.w	r2, r2, #1
 8006128:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0220 	orr.w	r2, r2, #32
 8006138:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006148:	b480      	push	{r7}
 800614a:	b095      	sub	sp, #84	; 0x54
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	330c      	adds	r3, #12
 8006156:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	330c      	adds	r3, #12
 800616e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006170:	643a      	str	r2, [r7, #64]	; 0x40
 8006172:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e5      	bne.n	8006150 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3314      	adds	r3, #20
 800618a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	e853 3f00 	ldrex	r3, [r3]
 8006192:	61fb      	str	r3, [r7, #28]
   return(result);
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f023 0301 	bic.w	r3, r3, #1
 800619a:	64bb      	str	r3, [r7, #72]	; 0x48
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3314      	adds	r3, #20
 80061a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061ac:	e841 2300 	strex	r3, r2, [r1]
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1e5      	bne.n	8006184 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d119      	bne.n	80061f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f023 0310 	bic.w	r3, r3, #16
 80061d6:	647b      	str	r3, [r7, #68]	; 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e0:	61ba      	str	r2, [r7, #24]
 80061e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6979      	ldr	r1, [r7, #20]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	613b      	str	r3, [r7, #16]
   return(result);
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e5      	bne.n	80061c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006202:	bf00      	nop
 8006204:	3754      	adds	r7, #84	; 0x54
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f7fc f93d 	bl	80024a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006236:	b480      	push	{r7}
 8006238:	b085      	sub	sp, #20
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b21      	cmp	r3, #33	; 0x21
 8006248:	d13e      	bne.n	80062c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006252:	d114      	bne.n	800627e <UART_Transmit_IT+0x48>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d110      	bne.n	800627e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	461a      	mov	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006270:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	1c9a      	adds	r2, r3, #2
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	621a      	str	r2, [r3, #32]
 800627c:	e008      	b.n	8006290 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	1c59      	adds	r1, r3, #1
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6211      	str	r1, [r2, #32]
 8006288:	781a      	ldrb	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29b      	uxth	r3, r3
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	4619      	mov	r1, r3
 800629e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10f      	bne.n	80062c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e000      	b.n	80062ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062c8:	2302      	movs	r3, #2
  }
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fe68 	bl	8005fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b08c      	sub	sp, #48	; 0x30
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b22      	cmp	r3, #34	; 0x22
 8006318:	f040 80ab 	bne.w	8006472 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006324:	d117      	bne.n	8006356 <UART_Receive_IT+0x50>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d113      	bne.n	8006356 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	b29b      	uxth	r3, r3
 8006340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006344:	b29a      	uxth	r2, r3
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634e:	1c9a      	adds	r2, r3, #2
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	629a      	str	r2, [r3, #40]	; 0x28
 8006354:	e026      	b.n	80063a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800635c:	2300      	movs	r3, #0
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006368:	d007      	beq.n	800637a <UART_Receive_IT+0x74>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <UART_Receive_IT+0x82>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	e008      	b.n	800639a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006394:	b2da      	uxtb	r2, r3
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4619      	mov	r1, r3
 80063b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d15a      	bne.n	800646e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0220 	bic.w	r2, r2, #32
 80063c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0201 	bic.w	r2, r2, #1
 80063e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d135      	bne.n	8006464 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	613b      	str	r3, [r7, #16]
   return(result);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f023 0310 	bic.w	r3, r3, #16
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	330c      	adds	r3, #12
 800641c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641e:	623a      	str	r2, [r7, #32]
 8006420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	69f9      	ldr	r1, [r7, #28]
 8006424:	6a3a      	ldr	r2, [r7, #32]
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	61bb      	str	r3, [r7, #24]
   return(result);
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e5      	bne.n	80063fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0310 	and.w	r3, r3, #16
 800643c:	2b10      	cmp	r3, #16
 800643e:	d10a      	bne.n	8006456 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fdbf 	bl	8005fe0 <HAL_UARTEx_RxEventCallback>
 8006462:	e002      	b.n	800646a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7fb ff8f 	bl	8002388 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e002      	b.n	8006474 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e000      	b.n	8006474 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006472:	2302      	movs	r3, #2
  }
}
 8006474:	4618      	mov	r0, r3
 8006476:	3730      	adds	r7, #48	; 0x30
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800647c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006480:	b09f      	sub	sp, #124	; 0x7c
 8006482:	af00      	add	r7, sp, #0
 8006484:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006492:	68d9      	ldr	r1, [r3, #12]
 8006494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	ea40 0301 	orr.w	r3, r0, r1
 800649c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800649e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	431a      	orrs	r2, r3
 80064a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	431a      	orrs	r2, r3
 80064ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80064b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064c0:	f021 010c 	bic.w	r1, r1, #12
 80064c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ca:	430b      	orrs	r3, r1
 80064cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064da:	6999      	ldr	r1, [r3, #24]
 80064dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	ea40 0301 	orr.w	r3, r0, r1
 80064e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4bc5      	ldr	r3, [pc, #788]	; (8006800 <UART_SetConfig+0x384>)
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d004      	beq.n	80064fa <UART_SetConfig+0x7e>
 80064f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4bc3      	ldr	r3, [pc, #780]	; (8006804 <UART_SetConfig+0x388>)
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d103      	bne.n	8006502 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064fa:	f7fe f81b 	bl	8004534 <HAL_RCC_GetPCLK2Freq>
 80064fe:	6778      	str	r0, [r7, #116]	; 0x74
 8006500:	e002      	b.n	8006508 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006502:	f7fe f803 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8006506:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006510:	f040 80b6 	bne.w	8006680 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006516:	461c      	mov	r4, r3
 8006518:	f04f 0500 	mov.w	r5, #0
 800651c:	4622      	mov	r2, r4
 800651e:	462b      	mov	r3, r5
 8006520:	1891      	adds	r1, r2, r2
 8006522:	6439      	str	r1, [r7, #64]	; 0x40
 8006524:	415b      	adcs	r3, r3
 8006526:	647b      	str	r3, [r7, #68]	; 0x44
 8006528:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800652c:	1912      	adds	r2, r2, r4
 800652e:	eb45 0303 	adc.w	r3, r5, r3
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f04f 0100 	mov.w	r1, #0
 800653a:	00d9      	lsls	r1, r3, #3
 800653c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006540:	00d0      	lsls	r0, r2, #3
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	1911      	adds	r1, r2, r4
 8006548:	6639      	str	r1, [r7, #96]	; 0x60
 800654a:	416b      	adcs	r3, r5
 800654c:	667b      	str	r3, [r7, #100]	; 0x64
 800654e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	461a      	mov	r2, r3
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	1891      	adds	r1, r2, r2
 800655a:	63b9      	str	r1, [r7, #56]	; 0x38
 800655c:	415b      	adcs	r3, r3
 800655e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006564:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006568:	f7f9 fea2 	bl	80002b0 <__aeabi_uldivmod>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4ba5      	ldr	r3, [pc, #660]	; (8006808 <UART_SetConfig+0x38c>)
 8006572:	fba3 2302 	umull	r2, r3, r3, r2
 8006576:	095b      	lsrs	r3, r3, #5
 8006578:	011e      	lsls	r6, r3, #4
 800657a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800657c:	461c      	mov	r4, r3
 800657e:	f04f 0500 	mov.w	r5, #0
 8006582:	4622      	mov	r2, r4
 8006584:	462b      	mov	r3, r5
 8006586:	1891      	adds	r1, r2, r2
 8006588:	6339      	str	r1, [r7, #48]	; 0x30
 800658a:	415b      	adcs	r3, r3
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
 800658e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006592:	1912      	adds	r2, r2, r4
 8006594:	eb45 0303 	adc.w	r3, r5, r3
 8006598:	f04f 0000 	mov.w	r0, #0
 800659c:	f04f 0100 	mov.w	r1, #0
 80065a0:	00d9      	lsls	r1, r3, #3
 80065a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065a6:	00d0      	lsls	r0, r2, #3
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	1911      	adds	r1, r2, r4
 80065ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80065b0:	416b      	adcs	r3, r5
 80065b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	461a      	mov	r2, r3
 80065ba:	f04f 0300 	mov.w	r3, #0
 80065be:	1891      	adds	r1, r2, r2
 80065c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80065c2:	415b      	adcs	r3, r3
 80065c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80065ce:	f7f9 fe6f 	bl	80002b0 <__aeabi_uldivmod>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4b8c      	ldr	r3, [pc, #560]	; (8006808 <UART_SetConfig+0x38c>)
 80065d8:	fba3 1302 	umull	r1, r3, r3, r2
 80065dc:	095b      	lsrs	r3, r3, #5
 80065de:	2164      	movs	r1, #100	; 0x64
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	3332      	adds	r3, #50	; 0x32
 80065ea:	4a87      	ldr	r2, [pc, #540]	; (8006808 <UART_SetConfig+0x38c>)
 80065ec:	fba2 2303 	umull	r2, r3, r2, r3
 80065f0:	095b      	lsrs	r3, r3, #5
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065f8:	441e      	add	r6, r3
 80065fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065fc:	4618      	mov	r0, r3
 80065fe:	f04f 0100 	mov.w	r1, #0
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	1894      	adds	r4, r2, r2
 8006608:	623c      	str	r4, [r7, #32]
 800660a:	415b      	adcs	r3, r3
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
 800660e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006612:	1812      	adds	r2, r2, r0
 8006614:	eb41 0303 	adc.w	r3, r1, r3
 8006618:	f04f 0400 	mov.w	r4, #0
 800661c:	f04f 0500 	mov.w	r5, #0
 8006620:	00dd      	lsls	r5, r3, #3
 8006622:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006626:	00d4      	lsls	r4, r2, #3
 8006628:	4622      	mov	r2, r4
 800662a:	462b      	mov	r3, r5
 800662c:	1814      	adds	r4, r2, r0
 800662e:	653c      	str	r4, [r7, #80]	; 0x50
 8006630:	414b      	adcs	r3, r1
 8006632:	657b      	str	r3, [r7, #84]	; 0x54
 8006634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	461a      	mov	r2, r3
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	1891      	adds	r1, r2, r2
 8006640:	61b9      	str	r1, [r7, #24]
 8006642:	415b      	adcs	r3, r3
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800664a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800664e:	f7f9 fe2f 	bl	80002b0 <__aeabi_uldivmod>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4b6c      	ldr	r3, [pc, #432]	; (8006808 <UART_SetConfig+0x38c>)
 8006658:	fba3 1302 	umull	r1, r3, r3, r2
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	2164      	movs	r1, #100	; 0x64
 8006660:	fb01 f303 	mul.w	r3, r1, r3
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	3332      	adds	r3, #50	; 0x32
 800666a:	4a67      	ldr	r2, [pc, #412]	; (8006808 <UART_SetConfig+0x38c>)
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	095b      	lsrs	r3, r3, #5
 8006672:	f003 0207 	and.w	r2, r3, #7
 8006676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4432      	add	r2, r6
 800667c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800667e:	e0b9      	b.n	80067f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006682:	461c      	mov	r4, r3
 8006684:	f04f 0500 	mov.w	r5, #0
 8006688:	4622      	mov	r2, r4
 800668a:	462b      	mov	r3, r5
 800668c:	1891      	adds	r1, r2, r2
 800668e:	6139      	str	r1, [r7, #16]
 8006690:	415b      	adcs	r3, r3
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006698:	1912      	adds	r2, r2, r4
 800669a:	eb45 0303 	adc.w	r3, r5, r3
 800669e:	f04f 0000 	mov.w	r0, #0
 80066a2:	f04f 0100 	mov.w	r1, #0
 80066a6:	00d9      	lsls	r1, r3, #3
 80066a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066ac:	00d0      	lsls	r0, r2, #3
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	eb12 0804 	adds.w	r8, r2, r4
 80066b6:	eb43 0905 	adc.w	r9, r3, r5
 80066ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4618      	mov	r0, r3
 80066c0:	f04f 0100 	mov.w	r1, #0
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	008b      	lsls	r3, r1, #2
 80066ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066d2:	0082      	lsls	r2, r0, #2
 80066d4:	4640      	mov	r0, r8
 80066d6:	4649      	mov	r1, r9
 80066d8:	f7f9 fdea 	bl	80002b0 <__aeabi_uldivmod>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4b49      	ldr	r3, [pc, #292]	; (8006808 <UART_SetConfig+0x38c>)
 80066e2:	fba3 2302 	umull	r2, r3, r3, r2
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	011e      	lsls	r6, r3, #4
 80066ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ec:	4618      	mov	r0, r3
 80066ee:	f04f 0100 	mov.w	r1, #0
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	1894      	adds	r4, r2, r2
 80066f8:	60bc      	str	r4, [r7, #8]
 80066fa:	415b      	adcs	r3, r3
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006702:	1812      	adds	r2, r2, r0
 8006704:	eb41 0303 	adc.w	r3, r1, r3
 8006708:	f04f 0400 	mov.w	r4, #0
 800670c:	f04f 0500 	mov.w	r5, #0
 8006710:	00dd      	lsls	r5, r3, #3
 8006712:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006716:	00d4      	lsls	r4, r2, #3
 8006718:	4622      	mov	r2, r4
 800671a:	462b      	mov	r3, r5
 800671c:	1814      	adds	r4, r2, r0
 800671e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006720:	414b      	adcs	r3, r1
 8006722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4618      	mov	r0, r3
 800672a:	f04f 0100 	mov.w	r1, #0
 800672e:	f04f 0200 	mov.w	r2, #0
 8006732:	f04f 0300 	mov.w	r3, #0
 8006736:	008b      	lsls	r3, r1, #2
 8006738:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800673c:	0082      	lsls	r2, r0, #2
 800673e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006742:	f7f9 fdb5 	bl	80002b0 <__aeabi_uldivmod>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4b2f      	ldr	r3, [pc, #188]	; (8006808 <UART_SetConfig+0x38c>)
 800674c:	fba3 1302 	umull	r1, r3, r3, r2
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	2164      	movs	r1, #100	; 0x64
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	3332      	adds	r3, #50	; 0x32
 800675e:	4a2a      	ldr	r2, [pc, #168]	; (8006808 <UART_SetConfig+0x38c>)
 8006760:	fba2 2303 	umull	r2, r3, r2, r3
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800676a:	441e      	add	r6, r3
 800676c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800676e:	4618      	mov	r0, r3
 8006770:	f04f 0100 	mov.w	r1, #0
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	1894      	adds	r4, r2, r2
 800677a:	603c      	str	r4, [r7, #0]
 800677c:	415b      	adcs	r3, r3
 800677e:	607b      	str	r3, [r7, #4]
 8006780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006784:	1812      	adds	r2, r2, r0
 8006786:	eb41 0303 	adc.w	r3, r1, r3
 800678a:	f04f 0400 	mov.w	r4, #0
 800678e:	f04f 0500 	mov.w	r5, #0
 8006792:	00dd      	lsls	r5, r3, #3
 8006794:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006798:	00d4      	lsls	r4, r2, #3
 800679a:	4622      	mov	r2, r4
 800679c:	462b      	mov	r3, r5
 800679e:	eb12 0a00 	adds.w	sl, r2, r0
 80067a2:	eb43 0b01 	adc.w	fp, r3, r1
 80067a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f04f 0100 	mov.w	r1, #0
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	008b      	lsls	r3, r1, #2
 80067ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067be:	0082      	lsls	r2, r0, #2
 80067c0:	4650      	mov	r0, sl
 80067c2:	4659      	mov	r1, fp
 80067c4:	f7f9 fd74 	bl	80002b0 <__aeabi_uldivmod>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <UART_SetConfig+0x38c>)
 80067ce:	fba3 1302 	umull	r1, r3, r3, r2
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	2164      	movs	r1, #100	; 0x64
 80067d6:	fb01 f303 	mul.w	r3, r1, r3
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	3332      	adds	r3, #50	; 0x32
 80067e0:	4a09      	ldr	r2, [pc, #36]	; (8006808 <UART_SetConfig+0x38c>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	f003 020f 	and.w	r2, r3, #15
 80067ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4432      	add	r2, r6
 80067f2:	609a      	str	r2, [r3, #8]
}
 80067f4:	bf00      	nop
 80067f6:	377c      	adds	r7, #124	; 0x7c
 80067f8:	46bd      	mov	sp, r7
 80067fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fe:	bf00      	nop
 8006800:	40011000 	.word	0x40011000
 8006804:	40011400 	.word	0x40011400
 8006808:	51eb851f 	.word	0x51eb851f

0800680c <__errno>:
 800680c:	4b01      	ldr	r3, [pc, #4]	; (8006814 <__errno+0x8>)
 800680e:	6818      	ldr	r0, [r3, #0]
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	2000002c 	.word	0x2000002c

08006818 <__libc_init_array>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	4d0d      	ldr	r5, [pc, #52]	; (8006850 <__libc_init_array+0x38>)
 800681c:	4c0d      	ldr	r4, [pc, #52]	; (8006854 <__libc_init_array+0x3c>)
 800681e:	1b64      	subs	r4, r4, r5
 8006820:	10a4      	asrs	r4, r4, #2
 8006822:	2600      	movs	r6, #0
 8006824:	42a6      	cmp	r6, r4
 8006826:	d109      	bne.n	800683c <__libc_init_array+0x24>
 8006828:	4d0b      	ldr	r5, [pc, #44]	; (8006858 <__libc_init_array+0x40>)
 800682a:	4c0c      	ldr	r4, [pc, #48]	; (800685c <__libc_init_array+0x44>)
 800682c:	f000 fc94 	bl	8007158 <_init>
 8006830:	1b64      	subs	r4, r4, r5
 8006832:	10a4      	asrs	r4, r4, #2
 8006834:	2600      	movs	r6, #0
 8006836:	42a6      	cmp	r6, r4
 8006838:	d105      	bne.n	8006846 <__libc_init_array+0x2e>
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006840:	4798      	blx	r3
 8006842:	3601      	adds	r6, #1
 8006844:	e7ee      	b.n	8006824 <__libc_init_array+0xc>
 8006846:	f855 3b04 	ldr.w	r3, [r5], #4
 800684a:	4798      	blx	r3
 800684c:	3601      	adds	r6, #1
 800684e:	e7f2      	b.n	8006836 <__libc_init_array+0x1e>
 8006850:	08007274 	.word	0x08007274
 8006854:	08007274 	.word	0x08007274
 8006858:	08007274 	.word	0x08007274
 800685c:	08007278 	.word	0x08007278

08006860 <memcpy>:
 8006860:	440a      	add	r2, r1
 8006862:	4291      	cmp	r1, r2
 8006864:	f100 33ff 	add.w	r3, r0, #4294967295
 8006868:	d100      	bne.n	800686c <memcpy+0xc>
 800686a:	4770      	bx	lr
 800686c:	b510      	push	{r4, lr}
 800686e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006872:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006876:	4291      	cmp	r1, r2
 8006878:	d1f9      	bne.n	800686e <memcpy+0xe>
 800687a:	bd10      	pop	{r4, pc}

0800687c <memset>:
 800687c:	4402      	add	r2, r0
 800687e:	4603      	mov	r3, r0
 8006880:	4293      	cmp	r3, r2
 8006882:	d100      	bne.n	8006886 <memset+0xa>
 8006884:	4770      	bx	lr
 8006886:	f803 1b01 	strb.w	r1, [r3], #1
 800688a:	e7f9      	b.n	8006880 <memset+0x4>

0800688c <sniprintf>:
 800688c:	b40c      	push	{r2, r3}
 800688e:	b530      	push	{r4, r5, lr}
 8006890:	4b17      	ldr	r3, [pc, #92]	; (80068f0 <sniprintf+0x64>)
 8006892:	1e0c      	subs	r4, r1, #0
 8006894:	681d      	ldr	r5, [r3, #0]
 8006896:	b09d      	sub	sp, #116	; 0x74
 8006898:	da08      	bge.n	80068ac <sniprintf+0x20>
 800689a:	238b      	movs	r3, #139	; 0x8b
 800689c:	602b      	str	r3, [r5, #0]
 800689e:	f04f 30ff 	mov.w	r0, #4294967295
 80068a2:	b01d      	add	sp, #116	; 0x74
 80068a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068a8:	b002      	add	sp, #8
 80068aa:	4770      	bx	lr
 80068ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80068b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80068b4:	bf14      	ite	ne
 80068b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80068ba:	4623      	moveq	r3, r4
 80068bc:	9304      	str	r3, [sp, #16]
 80068be:	9307      	str	r3, [sp, #28]
 80068c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068c4:	9002      	str	r0, [sp, #8]
 80068c6:	9006      	str	r0, [sp, #24]
 80068c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80068cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80068ce:	ab21      	add	r3, sp, #132	; 0x84
 80068d0:	a902      	add	r1, sp, #8
 80068d2:	4628      	mov	r0, r5
 80068d4:	9301      	str	r3, [sp, #4]
 80068d6:	f000 f89b 	bl	8006a10 <_svfiprintf_r>
 80068da:	1c43      	adds	r3, r0, #1
 80068dc:	bfbc      	itt	lt
 80068de:	238b      	movlt	r3, #139	; 0x8b
 80068e0:	602b      	strlt	r3, [r5, #0]
 80068e2:	2c00      	cmp	r4, #0
 80068e4:	d0dd      	beq.n	80068a2 <sniprintf+0x16>
 80068e6:	9b02      	ldr	r3, [sp, #8]
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	e7d9      	b.n	80068a2 <sniprintf+0x16>
 80068ee:	bf00      	nop
 80068f0:	2000002c 	.word	0x2000002c

080068f4 <siprintf>:
 80068f4:	b40e      	push	{r1, r2, r3}
 80068f6:	b500      	push	{lr}
 80068f8:	b09c      	sub	sp, #112	; 0x70
 80068fa:	ab1d      	add	r3, sp, #116	; 0x74
 80068fc:	9002      	str	r0, [sp, #8]
 80068fe:	9006      	str	r0, [sp, #24]
 8006900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006904:	4809      	ldr	r0, [pc, #36]	; (800692c <siprintf+0x38>)
 8006906:	9107      	str	r1, [sp, #28]
 8006908:	9104      	str	r1, [sp, #16]
 800690a:	4909      	ldr	r1, [pc, #36]	; (8006930 <siprintf+0x3c>)
 800690c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006910:	9105      	str	r1, [sp, #20]
 8006912:	6800      	ldr	r0, [r0, #0]
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	a902      	add	r1, sp, #8
 8006918:	f000 f87a 	bl	8006a10 <_svfiprintf_r>
 800691c:	9b02      	ldr	r3, [sp, #8]
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	b01c      	add	sp, #112	; 0x70
 8006924:	f85d eb04 	ldr.w	lr, [sp], #4
 8006928:	b003      	add	sp, #12
 800692a:	4770      	bx	lr
 800692c:	2000002c 	.word	0x2000002c
 8006930:	ffff0208 	.word	0xffff0208

08006934 <strncmp>:
 8006934:	b510      	push	{r4, lr}
 8006936:	b16a      	cbz	r2, 8006954 <strncmp+0x20>
 8006938:	3901      	subs	r1, #1
 800693a:	1884      	adds	r4, r0, r2
 800693c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006940:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006944:	4293      	cmp	r3, r2
 8006946:	d103      	bne.n	8006950 <strncmp+0x1c>
 8006948:	42a0      	cmp	r0, r4
 800694a:	d001      	beq.n	8006950 <strncmp+0x1c>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f5      	bne.n	800693c <strncmp+0x8>
 8006950:	1a98      	subs	r0, r3, r2
 8006952:	bd10      	pop	{r4, pc}
 8006954:	4610      	mov	r0, r2
 8006956:	e7fc      	b.n	8006952 <strncmp+0x1e>

08006958 <__ssputs_r>:
 8006958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800695c:	688e      	ldr	r6, [r1, #8]
 800695e:	429e      	cmp	r6, r3
 8006960:	4682      	mov	sl, r0
 8006962:	460c      	mov	r4, r1
 8006964:	4690      	mov	r8, r2
 8006966:	461f      	mov	r7, r3
 8006968:	d838      	bhi.n	80069dc <__ssputs_r+0x84>
 800696a:	898a      	ldrh	r2, [r1, #12]
 800696c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006970:	d032      	beq.n	80069d8 <__ssputs_r+0x80>
 8006972:	6825      	ldr	r5, [r4, #0]
 8006974:	6909      	ldr	r1, [r1, #16]
 8006976:	eba5 0901 	sub.w	r9, r5, r1
 800697a:	6965      	ldr	r5, [r4, #20]
 800697c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006980:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006984:	3301      	adds	r3, #1
 8006986:	444b      	add	r3, r9
 8006988:	106d      	asrs	r5, r5, #1
 800698a:	429d      	cmp	r5, r3
 800698c:	bf38      	it	cc
 800698e:	461d      	movcc	r5, r3
 8006990:	0553      	lsls	r3, r2, #21
 8006992:	d531      	bpl.n	80069f8 <__ssputs_r+0xa0>
 8006994:	4629      	mov	r1, r5
 8006996:	f000 fb39 	bl	800700c <_malloc_r>
 800699a:	4606      	mov	r6, r0
 800699c:	b950      	cbnz	r0, 80069b4 <__ssputs_r+0x5c>
 800699e:	230c      	movs	r3, #12
 80069a0:	f8ca 3000 	str.w	r3, [sl]
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069aa:	81a3      	strh	r3, [r4, #12]
 80069ac:	f04f 30ff 	mov.w	r0, #4294967295
 80069b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b4:	6921      	ldr	r1, [r4, #16]
 80069b6:	464a      	mov	r2, r9
 80069b8:	f7ff ff52 	bl	8006860 <memcpy>
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	6126      	str	r6, [r4, #16]
 80069ca:	6165      	str	r5, [r4, #20]
 80069cc:	444e      	add	r6, r9
 80069ce:	eba5 0509 	sub.w	r5, r5, r9
 80069d2:	6026      	str	r6, [r4, #0]
 80069d4:	60a5      	str	r5, [r4, #8]
 80069d6:	463e      	mov	r6, r7
 80069d8:	42be      	cmp	r6, r7
 80069da:	d900      	bls.n	80069de <__ssputs_r+0x86>
 80069dc:	463e      	mov	r6, r7
 80069de:	4632      	mov	r2, r6
 80069e0:	6820      	ldr	r0, [r4, #0]
 80069e2:	4641      	mov	r1, r8
 80069e4:	f000 faa8 	bl	8006f38 <memmove>
 80069e8:	68a3      	ldr	r3, [r4, #8]
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	1b9b      	subs	r3, r3, r6
 80069ee:	4432      	add	r2, r6
 80069f0:	60a3      	str	r3, [r4, #8]
 80069f2:	6022      	str	r2, [r4, #0]
 80069f4:	2000      	movs	r0, #0
 80069f6:	e7db      	b.n	80069b0 <__ssputs_r+0x58>
 80069f8:	462a      	mov	r2, r5
 80069fa:	f000 fb61 	bl	80070c0 <_realloc_r>
 80069fe:	4606      	mov	r6, r0
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d1e1      	bne.n	80069c8 <__ssputs_r+0x70>
 8006a04:	6921      	ldr	r1, [r4, #16]
 8006a06:	4650      	mov	r0, sl
 8006a08:	f000 fab0 	bl	8006f6c <_free_r>
 8006a0c:	e7c7      	b.n	800699e <__ssputs_r+0x46>
	...

08006a10 <_svfiprintf_r>:
 8006a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	4698      	mov	r8, r3
 8006a16:	898b      	ldrh	r3, [r1, #12]
 8006a18:	061b      	lsls	r3, r3, #24
 8006a1a:	b09d      	sub	sp, #116	; 0x74
 8006a1c:	4607      	mov	r7, r0
 8006a1e:	460d      	mov	r5, r1
 8006a20:	4614      	mov	r4, r2
 8006a22:	d50e      	bpl.n	8006a42 <_svfiprintf_r+0x32>
 8006a24:	690b      	ldr	r3, [r1, #16]
 8006a26:	b963      	cbnz	r3, 8006a42 <_svfiprintf_r+0x32>
 8006a28:	2140      	movs	r1, #64	; 0x40
 8006a2a:	f000 faef 	bl	800700c <_malloc_r>
 8006a2e:	6028      	str	r0, [r5, #0]
 8006a30:	6128      	str	r0, [r5, #16]
 8006a32:	b920      	cbnz	r0, 8006a3e <_svfiprintf_r+0x2e>
 8006a34:	230c      	movs	r3, #12
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3c:	e0d1      	b.n	8006be2 <_svfiprintf_r+0x1d2>
 8006a3e:	2340      	movs	r3, #64	; 0x40
 8006a40:	616b      	str	r3, [r5, #20]
 8006a42:	2300      	movs	r3, #0
 8006a44:	9309      	str	r3, [sp, #36]	; 0x24
 8006a46:	2320      	movs	r3, #32
 8006a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a50:	2330      	movs	r3, #48	; 0x30
 8006a52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006bfc <_svfiprintf_r+0x1ec>
 8006a56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a5a:	f04f 0901 	mov.w	r9, #1
 8006a5e:	4623      	mov	r3, r4
 8006a60:	469a      	mov	sl, r3
 8006a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a66:	b10a      	cbz	r2, 8006a6c <_svfiprintf_r+0x5c>
 8006a68:	2a25      	cmp	r2, #37	; 0x25
 8006a6a:	d1f9      	bne.n	8006a60 <_svfiprintf_r+0x50>
 8006a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006a70:	d00b      	beq.n	8006a8a <_svfiprintf_r+0x7a>
 8006a72:	465b      	mov	r3, fp
 8006a74:	4622      	mov	r2, r4
 8006a76:	4629      	mov	r1, r5
 8006a78:	4638      	mov	r0, r7
 8006a7a:	f7ff ff6d 	bl	8006958 <__ssputs_r>
 8006a7e:	3001      	adds	r0, #1
 8006a80:	f000 80aa 	beq.w	8006bd8 <_svfiprintf_r+0x1c8>
 8006a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a86:	445a      	add	r2, fp
 8006a88:	9209      	str	r2, [sp, #36]	; 0x24
 8006a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 80a2 	beq.w	8006bd8 <_svfiprintf_r+0x1c8>
 8006a94:	2300      	movs	r3, #0
 8006a96:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a9e:	f10a 0a01 	add.w	sl, sl, #1
 8006aa2:	9304      	str	r3, [sp, #16]
 8006aa4:	9307      	str	r3, [sp, #28]
 8006aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8006aac:	4654      	mov	r4, sl
 8006aae:	2205      	movs	r2, #5
 8006ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab4:	4851      	ldr	r0, [pc, #324]	; (8006bfc <_svfiprintf_r+0x1ec>)
 8006ab6:	f7f9 fbab 	bl	8000210 <memchr>
 8006aba:	9a04      	ldr	r2, [sp, #16]
 8006abc:	b9d8      	cbnz	r0, 8006af6 <_svfiprintf_r+0xe6>
 8006abe:	06d0      	lsls	r0, r2, #27
 8006ac0:	bf44      	itt	mi
 8006ac2:	2320      	movmi	r3, #32
 8006ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ac8:	0711      	lsls	r1, r2, #28
 8006aca:	bf44      	itt	mi
 8006acc:	232b      	movmi	r3, #43	; 0x2b
 8006ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad8:	d015      	beq.n	8006b06 <_svfiprintf_r+0xf6>
 8006ada:	9a07      	ldr	r2, [sp, #28]
 8006adc:	4654      	mov	r4, sl
 8006ade:	2000      	movs	r0, #0
 8006ae0:	f04f 0c0a 	mov.w	ip, #10
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aea:	3b30      	subs	r3, #48	; 0x30
 8006aec:	2b09      	cmp	r3, #9
 8006aee:	d94e      	bls.n	8006b8e <_svfiprintf_r+0x17e>
 8006af0:	b1b0      	cbz	r0, 8006b20 <_svfiprintf_r+0x110>
 8006af2:	9207      	str	r2, [sp, #28]
 8006af4:	e014      	b.n	8006b20 <_svfiprintf_r+0x110>
 8006af6:	eba0 0308 	sub.w	r3, r0, r8
 8006afa:	fa09 f303 	lsl.w	r3, r9, r3
 8006afe:	4313      	orrs	r3, r2
 8006b00:	9304      	str	r3, [sp, #16]
 8006b02:	46a2      	mov	sl, r4
 8006b04:	e7d2      	b.n	8006aac <_svfiprintf_r+0x9c>
 8006b06:	9b03      	ldr	r3, [sp, #12]
 8006b08:	1d19      	adds	r1, r3, #4
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	9103      	str	r1, [sp, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bfbb      	ittet	lt
 8006b12:	425b      	neglt	r3, r3
 8006b14:	f042 0202 	orrlt.w	r2, r2, #2
 8006b18:	9307      	strge	r3, [sp, #28]
 8006b1a:	9307      	strlt	r3, [sp, #28]
 8006b1c:	bfb8      	it	lt
 8006b1e:	9204      	strlt	r2, [sp, #16]
 8006b20:	7823      	ldrb	r3, [r4, #0]
 8006b22:	2b2e      	cmp	r3, #46	; 0x2e
 8006b24:	d10c      	bne.n	8006b40 <_svfiprintf_r+0x130>
 8006b26:	7863      	ldrb	r3, [r4, #1]
 8006b28:	2b2a      	cmp	r3, #42	; 0x2a
 8006b2a:	d135      	bne.n	8006b98 <_svfiprintf_r+0x188>
 8006b2c:	9b03      	ldr	r3, [sp, #12]
 8006b2e:	1d1a      	adds	r2, r3, #4
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	9203      	str	r2, [sp, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	bfb8      	it	lt
 8006b38:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b3c:	3402      	adds	r4, #2
 8006b3e:	9305      	str	r3, [sp, #20]
 8006b40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c0c <_svfiprintf_r+0x1fc>
 8006b44:	7821      	ldrb	r1, [r4, #0]
 8006b46:	2203      	movs	r2, #3
 8006b48:	4650      	mov	r0, sl
 8006b4a:	f7f9 fb61 	bl	8000210 <memchr>
 8006b4e:	b140      	cbz	r0, 8006b62 <_svfiprintf_r+0x152>
 8006b50:	2340      	movs	r3, #64	; 0x40
 8006b52:	eba0 000a 	sub.w	r0, r0, sl
 8006b56:	fa03 f000 	lsl.w	r0, r3, r0
 8006b5a:	9b04      	ldr	r3, [sp, #16]
 8006b5c:	4303      	orrs	r3, r0
 8006b5e:	3401      	adds	r4, #1
 8006b60:	9304      	str	r3, [sp, #16]
 8006b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b66:	4826      	ldr	r0, [pc, #152]	; (8006c00 <_svfiprintf_r+0x1f0>)
 8006b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b6c:	2206      	movs	r2, #6
 8006b6e:	f7f9 fb4f 	bl	8000210 <memchr>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d038      	beq.n	8006be8 <_svfiprintf_r+0x1d8>
 8006b76:	4b23      	ldr	r3, [pc, #140]	; (8006c04 <_svfiprintf_r+0x1f4>)
 8006b78:	bb1b      	cbnz	r3, 8006bc2 <_svfiprintf_r+0x1b2>
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	3307      	adds	r3, #7
 8006b7e:	f023 0307 	bic.w	r3, r3, #7
 8006b82:	3308      	adds	r3, #8
 8006b84:	9303      	str	r3, [sp, #12]
 8006b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b88:	4433      	add	r3, r6
 8006b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8c:	e767      	b.n	8006a5e <_svfiprintf_r+0x4e>
 8006b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b92:	460c      	mov	r4, r1
 8006b94:	2001      	movs	r0, #1
 8006b96:	e7a5      	b.n	8006ae4 <_svfiprintf_r+0xd4>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	3401      	adds	r4, #1
 8006b9c:	9305      	str	r3, [sp, #20]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	f04f 0c0a 	mov.w	ip, #10
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006baa:	3a30      	subs	r2, #48	; 0x30
 8006bac:	2a09      	cmp	r2, #9
 8006bae:	d903      	bls.n	8006bb8 <_svfiprintf_r+0x1a8>
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0c5      	beq.n	8006b40 <_svfiprintf_r+0x130>
 8006bb4:	9105      	str	r1, [sp, #20]
 8006bb6:	e7c3      	b.n	8006b40 <_svfiprintf_r+0x130>
 8006bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e7f0      	b.n	8006ba4 <_svfiprintf_r+0x194>
 8006bc2:	ab03      	add	r3, sp, #12
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	462a      	mov	r2, r5
 8006bc8:	4b0f      	ldr	r3, [pc, #60]	; (8006c08 <_svfiprintf_r+0x1f8>)
 8006bca:	a904      	add	r1, sp, #16
 8006bcc:	4638      	mov	r0, r7
 8006bce:	f3af 8000 	nop.w
 8006bd2:	1c42      	adds	r2, r0, #1
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	d1d6      	bne.n	8006b86 <_svfiprintf_r+0x176>
 8006bd8:	89ab      	ldrh	r3, [r5, #12]
 8006bda:	065b      	lsls	r3, r3, #25
 8006bdc:	f53f af2c 	bmi.w	8006a38 <_svfiprintf_r+0x28>
 8006be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006be2:	b01d      	add	sp, #116	; 0x74
 8006be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be8:	ab03      	add	r3, sp, #12
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	462a      	mov	r2, r5
 8006bee:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <_svfiprintf_r+0x1f8>)
 8006bf0:	a904      	add	r1, sp, #16
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f000 f87a 	bl	8006cec <_printf_i>
 8006bf8:	e7eb      	b.n	8006bd2 <_svfiprintf_r+0x1c2>
 8006bfa:	bf00      	nop
 8006bfc:	08007238 	.word	0x08007238
 8006c00:	08007242 	.word	0x08007242
 8006c04:	00000000 	.word	0x00000000
 8006c08:	08006959 	.word	0x08006959
 8006c0c:	0800723e 	.word	0x0800723e

08006c10 <_printf_common>:
 8006c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c14:	4616      	mov	r6, r2
 8006c16:	4699      	mov	r9, r3
 8006c18:	688a      	ldr	r2, [r1, #8]
 8006c1a:	690b      	ldr	r3, [r1, #16]
 8006c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c20:	4293      	cmp	r3, r2
 8006c22:	bfb8      	it	lt
 8006c24:	4613      	movlt	r3, r2
 8006c26:	6033      	str	r3, [r6, #0]
 8006c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	b10a      	cbz	r2, 8006c36 <_printf_common+0x26>
 8006c32:	3301      	adds	r3, #1
 8006c34:	6033      	str	r3, [r6, #0]
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	0699      	lsls	r1, r3, #26
 8006c3a:	bf42      	ittt	mi
 8006c3c:	6833      	ldrmi	r3, [r6, #0]
 8006c3e:	3302      	addmi	r3, #2
 8006c40:	6033      	strmi	r3, [r6, #0]
 8006c42:	6825      	ldr	r5, [r4, #0]
 8006c44:	f015 0506 	ands.w	r5, r5, #6
 8006c48:	d106      	bne.n	8006c58 <_printf_common+0x48>
 8006c4a:	f104 0a19 	add.w	sl, r4, #25
 8006c4e:	68e3      	ldr	r3, [r4, #12]
 8006c50:	6832      	ldr	r2, [r6, #0]
 8006c52:	1a9b      	subs	r3, r3, r2
 8006c54:	42ab      	cmp	r3, r5
 8006c56:	dc26      	bgt.n	8006ca6 <_printf_common+0x96>
 8006c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c5c:	1e13      	subs	r3, r2, #0
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	bf18      	it	ne
 8006c62:	2301      	movne	r3, #1
 8006c64:	0692      	lsls	r2, r2, #26
 8006c66:	d42b      	bmi.n	8006cc0 <_printf_common+0xb0>
 8006c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	4638      	mov	r0, r7
 8006c70:	47c0      	blx	r8
 8006c72:	3001      	adds	r0, #1
 8006c74:	d01e      	beq.n	8006cb4 <_printf_common+0xa4>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	68e5      	ldr	r5, [r4, #12]
 8006c7a:	6832      	ldr	r2, [r6, #0]
 8006c7c:	f003 0306 	and.w	r3, r3, #6
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	bf08      	it	eq
 8006c84:	1aad      	subeq	r5, r5, r2
 8006c86:	68a3      	ldr	r3, [r4, #8]
 8006c88:	6922      	ldr	r2, [r4, #16]
 8006c8a:	bf0c      	ite	eq
 8006c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c90:	2500      	movne	r5, #0
 8006c92:	4293      	cmp	r3, r2
 8006c94:	bfc4      	itt	gt
 8006c96:	1a9b      	subgt	r3, r3, r2
 8006c98:	18ed      	addgt	r5, r5, r3
 8006c9a:	2600      	movs	r6, #0
 8006c9c:	341a      	adds	r4, #26
 8006c9e:	42b5      	cmp	r5, r6
 8006ca0:	d11a      	bne.n	8006cd8 <_printf_common+0xc8>
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e008      	b.n	8006cb8 <_printf_common+0xa8>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4652      	mov	r2, sl
 8006caa:	4649      	mov	r1, r9
 8006cac:	4638      	mov	r0, r7
 8006cae:	47c0      	blx	r8
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d103      	bne.n	8006cbc <_printf_common+0xac>
 8006cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cbc:	3501      	adds	r5, #1
 8006cbe:	e7c6      	b.n	8006c4e <_printf_common+0x3e>
 8006cc0:	18e1      	adds	r1, r4, r3
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	2030      	movs	r0, #48	; 0x30
 8006cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cca:	4422      	add	r2, r4
 8006ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cd4:	3302      	adds	r3, #2
 8006cd6:	e7c7      	b.n	8006c68 <_printf_common+0x58>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4622      	mov	r2, r4
 8006cdc:	4649      	mov	r1, r9
 8006cde:	4638      	mov	r0, r7
 8006ce0:	47c0      	blx	r8
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d0e6      	beq.n	8006cb4 <_printf_common+0xa4>
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7d9      	b.n	8006c9e <_printf_common+0x8e>
	...

08006cec <_printf_i>:
 8006cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	4691      	mov	r9, r2
 8006cf4:	7e27      	ldrb	r7, [r4, #24]
 8006cf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006cf8:	2f78      	cmp	r7, #120	; 0x78
 8006cfa:	4680      	mov	r8, r0
 8006cfc:	469a      	mov	sl, r3
 8006cfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d02:	d807      	bhi.n	8006d14 <_printf_i+0x28>
 8006d04:	2f62      	cmp	r7, #98	; 0x62
 8006d06:	d80a      	bhi.n	8006d1e <_printf_i+0x32>
 8006d08:	2f00      	cmp	r7, #0
 8006d0a:	f000 80d8 	beq.w	8006ebe <_printf_i+0x1d2>
 8006d0e:	2f58      	cmp	r7, #88	; 0x58
 8006d10:	f000 80a3 	beq.w	8006e5a <_printf_i+0x16e>
 8006d14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d1c:	e03a      	b.n	8006d94 <_printf_i+0xa8>
 8006d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d22:	2b15      	cmp	r3, #21
 8006d24:	d8f6      	bhi.n	8006d14 <_printf_i+0x28>
 8006d26:	a001      	add	r0, pc, #4	; (adr r0, 8006d2c <_printf_i+0x40>)
 8006d28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d99 	.word	0x08006d99
 8006d34:	08006d15 	.word	0x08006d15
 8006d38:	08006d15 	.word	0x08006d15
 8006d3c:	08006d15 	.word	0x08006d15
 8006d40:	08006d15 	.word	0x08006d15
 8006d44:	08006d99 	.word	0x08006d99
 8006d48:	08006d15 	.word	0x08006d15
 8006d4c:	08006d15 	.word	0x08006d15
 8006d50:	08006d15 	.word	0x08006d15
 8006d54:	08006d15 	.word	0x08006d15
 8006d58:	08006ea5 	.word	0x08006ea5
 8006d5c:	08006dc9 	.word	0x08006dc9
 8006d60:	08006e87 	.word	0x08006e87
 8006d64:	08006d15 	.word	0x08006d15
 8006d68:	08006d15 	.word	0x08006d15
 8006d6c:	08006ec7 	.word	0x08006ec7
 8006d70:	08006d15 	.word	0x08006d15
 8006d74:	08006dc9 	.word	0x08006dc9
 8006d78:	08006d15 	.word	0x08006d15
 8006d7c:	08006d15 	.word	0x08006d15
 8006d80:	08006e8f 	.word	0x08006e8f
 8006d84:	680b      	ldr	r3, [r1, #0]
 8006d86:	1d1a      	adds	r2, r3, #4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	600a      	str	r2, [r1, #0]
 8006d8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d94:	2301      	movs	r3, #1
 8006d96:	e0a3      	b.n	8006ee0 <_printf_i+0x1f4>
 8006d98:	6825      	ldr	r5, [r4, #0]
 8006d9a:	6808      	ldr	r0, [r1, #0]
 8006d9c:	062e      	lsls	r6, r5, #24
 8006d9e:	f100 0304 	add.w	r3, r0, #4
 8006da2:	d50a      	bpl.n	8006dba <_printf_i+0xce>
 8006da4:	6805      	ldr	r5, [r0, #0]
 8006da6:	600b      	str	r3, [r1, #0]
 8006da8:	2d00      	cmp	r5, #0
 8006daa:	da03      	bge.n	8006db4 <_printf_i+0xc8>
 8006dac:	232d      	movs	r3, #45	; 0x2d
 8006dae:	426d      	negs	r5, r5
 8006db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db4:	485e      	ldr	r0, [pc, #376]	; (8006f30 <_printf_i+0x244>)
 8006db6:	230a      	movs	r3, #10
 8006db8:	e019      	b.n	8006dee <_printf_i+0x102>
 8006dba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006dbe:	6805      	ldr	r5, [r0, #0]
 8006dc0:	600b      	str	r3, [r1, #0]
 8006dc2:	bf18      	it	ne
 8006dc4:	b22d      	sxthne	r5, r5
 8006dc6:	e7ef      	b.n	8006da8 <_printf_i+0xbc>
 8006dc8:	680b      	ldr	r3, [r1, #0]
 8006dca:	6825      	ldr	r5, [r4, #0]
 8006dcc:	1d18      	adds	r0, r3, #4
 8006dce:	6008      	str	r0, [r1, #0]
 8006dd0:	0628      	lsls	r0, r5, #24
 8006dd2:	d501      	bpl.n	8006dd8 <_printf_i+0xec>
 8006dd4:	681d      	ldr	r5, [r3, #0]
 8006dd6:	e002      	b.n	8006dde <_printf_i+0xf2>
 8006dd8:	0669      	lsls	r1, r5, #25
 8006dda:	d5fb      	bpl.n	8006dd4 <_printf_i+0xe8>
 8006ddc:	881d      	ldrh	r5, [r3, #0]
 8006dde:	4854      	ldr	r0, [pc, #336]	; (8006f30 <_printf_i+0x244>)
 8006de0:	2f6f      	cmp	r7, #111	; 0x6f
 8006de2:	bf0c      	ite	eq
 8006de4:	2308      	moveq	r3, #8
 8006de6:	230a      	movne	r3, #10
 8006de8:	2100      	movs	r1, #0
 8006dea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dee:	6866      	ldr	r6, [r4, #4]
 8006df0:	60a6      	str	r6, [r4, #8]
 8006df2:	2e00      	cmp	r6, #0
 8006df4:	bfa2      	ittt	ge
 8006df6:	6821      	ldrge	r1, [r4, #0]
 8006df8:	f021 0104 	bicge.w	r1, r1, #4
 8006dfc:	6021      	strge	r1, [r4, #0]
 8006dfe:	b90d      	cbnz	r5, 8006e04 <_printf_i+0x118>
 8006e00:	2e00      	cmp	r6, #0
 8006e02:	d04d      	beq.n	8006ea0 <_printf_i+0x1b4>
 8006e04:	4616      	mov	r6, r2
 8006e06:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e0a:	fb03 5711 	mls	r7, r3, r1, r5
 8006e0e:	5dc7      	ldrb	r7, [r0, r7]
 8006e10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e14:	462f      	mov	r7, r5
 8006e16:	42bb      	cmp	r3, r7
 8006e18:	460d      	mov	r5, r1
 8006e1a:	d9f4      	bls.n	8006e06 <_printf_i+0x11a>
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d10b      	bne.n	8006e38 <_printf_i+0x14c>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	07df      	lsls	r7, r3, #31
 8006e24:	d508      	bpl.n	8006e38 <_printf_i+0x14c>
 8006e26:	6923      	ldr	r3, [r4, #16]
 8006e28:	6861      	ldr	r1, [r4, #4]
 8006e2a:	4299      	cmp	r1, r3
 8006e2c:	bfde      	ittt	le
 8006e2e:	2330      	movle	r3, #48	; 0x30
 8006e30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e38:	1b92      	subs	r2, r2, r6
 8006e3a:	6122      	str	r2, [r4, #16]
 8006e3c:	f8cd a000 	str.w	sl, [sp]
 8006e40:	464b      	mov	r3, r9
 8006e42:	aa03      	add	r2, sp, #12
 8006e44:	4621      	mov	r1, r4
 8006e46:	4640      	mov	r0, r8
 8006e48:	f7ff fee2 	bl	8006c10 <_printf_common>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d14c      	bne.n	8006eea <_printf_i+0x1fe>
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	b004      	add	sp, #16
 8006e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5a:	4835      	ldr	r0, [pc, #212]	; (8006f30 <_printf_i+0x244>)
 8006e5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	680e      	ldr	r6, [r1, #0]
 8006e64:	061f      	lsls	r7, r3, #24
 8006e66:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e6a:	600e      	str	r6, [r1, #0]
 8006e6c:	d514      	bpl.n	8006e98 <_printf_i+0x1ac>
 8006e6e:	07d9      	lsls	r1, r3, #31
 8006e70:	bf44      	itt	mi
 8006e72:	f043 0320 	orrmi.w	r3, r3, #32
 8006e76:	6023      	strmi	r3, [r4, #0]
 8006e78:	b91d      	cbnz	r5, 8006e82 <_printf_i+0x196>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	f023 0320 	bic.w	r3, r3, #32
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	2310      	movs	r3, #16
 8006e84:	e7b0      	b.n	8006de8 <_printf_i+0xfc>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	f043 0320 	orr.w	r3, r3, #32
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	2378      	movs	r3, #120	; 0x78
 8006e90:	4828      	ldr	r0, [pc, #160]	; (8006f34 <_printf_i+0x248>)
 8006e92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e96:	e7e3      	b.n	8006e60 <_printf_i+0x174>
 8006e98:	065e      	lsls	r6, r3, #25
 8006e9a:	bf48      	it	mi
 8006e9c:	b2ad      	uxthmi	r5, r5
 8006e9e:	e7e6      	b.n	8006e6e <_printf_i+0x182>
 8006ea0:	4616      	mov	r6, r2
 8006ea2:	e7bb      	b.n	8006e1c <_printf_i+0x130>
 8006ea4:	680b      	ldr	r3, [r1, #0]
 8006ea6:	6826      	ldr	r6, [r4, #0]
 8006ea8:	6960      	ldr	r0, [r4, #20]
 8006eaa:	1d1d      	adds	r5, r3, #4
 8006eac:	600d      	str	r5, [r1, #0]
 8006eae:	0635      	lsls	r5, r6, #24
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	d501      	bpl.n	8006eb8 <_printf_i+0x1cc>
 8006eb4:	6018      	str	r0, [r3, #0]
 8006eb6:	e002      	b.n	8006ebe <_printf_i+0x1d2>
 8006eb8:	0671      	lsls	r1, r6, #25
 8006eba:	d5fb      	bpl.n	8006eb4 <_printf_i+0x1c8>
 8006ebc:	8018      	strh	r0, [r3, #0]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	6123      	str	r3, [r4, #16]
 8006ec2:	4616      	mov	r6, r2
 8006ec4:	e7ba      	b.n	8006e3c <_printf_i+0x150>
 8006ec6:	680b      	ldr	r3, [r1, #0]
 8006ec8:	1d1a      	adds	r2, r3, #4
 8006eca:	600a      	str	r2, [r1, #0]
 8006ecc:	681e      	ldr	r6, [r3, #0]
 8006ece:	6862      	ldr	r2, [r4, #4]
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f7f9 f99c 	bl	8000210 <memchr>
 8006ed8:	b108      	cbz	r0, 8006ede <_printf_i+0x1f2>
 8006eda:	1b80      	subs	r0, r0, r6
 8006edc:	6060      	str	r0, [r4, #4]
 8006ede:	6863      	ldr	r3, [r4, #4]
 8006ee0:	6123      	str	r3, [r4, #16]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ee8:	e7a8      	b.n	8006e3c <_printf_i+0x150>
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	4632      	mov	r2, r6
 8006eee:	4649      	mov	r1, r9
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	47d0      	blx	sl
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d0ab      	beq.n	8006e50 <_printf_i+0x164>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	079b      	lsls	r3, r3, #30
 8006efc:	d413      	bmi.n	8006f26 <_printf_i+0x23a>
 8006efe:	68e0      	ldr	r0, [r4, #12]
 8006f00:	9b03      	ldr	r3, [sp, #12]
 8006f02:	4298      	cmp	r0, r3
 8006f04:	bfb8      	it	lt
 8006f06:	4618      	movlt	r0, r3
 8006f08:	e7a4      	b.n	8006e54 <_printf_i+0x168>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	4649      	mov	r1, r9
 8006f10:	4640      	mov	r0, r8
 8006f12:	47d0      	blx	sl
 8006f14:	3001      	adds	r0, #1
 8006f16:	d09b      	beq.n	8006e50 <_printf_i+0x164>
 8006f18:	3501      	adds	r5, #1
 8006f1a:	68e3      	ldr	r3, [r4, #12]
 8006f1c:	9903      	ldr	r1, [sp, #12]
 8006f1e:	1a5b      	subs	r3, r3, r1
 8006f20:	42ab      	cmp	r3, r5
 8006f22:	dcf2      	bgt.n	8006f0a <_printf_i+0x21e>
 8006f24:	e7eb      	b.n	8006efe <_printf_i+0x212>
 8006f26:	2500      	movs	r5, #0
 8006f28:	f104 0619 	add.w	r6, r4, #25
 8006f2c:	e7f5      	b.n	8006f1a <_printf_i+0x22e>
 8006f2e:	bf00      	nop
 8006f30:	08007249 	.word	0x08007249
 8006f34:	0800725a 	.word	0x0800725a

08006f38 <memmove>:
 8006f38:	4288      	cmp	r0, r1
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	eb01 0402 	add.w	r4, r1, r2
 8006f40:	d902      	bls.n	8006f48 <memmove+0x10>
 8006f42:	4284      	cmp	r4, r0
 8006f44:	4623      	mov	r3, r4
 8006f46:	d807      	bhi.n	8006f58 <memmove+0x20>
 8006f48:	1e43      	subs	r3, r0, #1
 8006f4a:	42a1      	cmp	r1, r4
 8006f4c:	d008      	beq.n	8006f60 <memmove+0x28>
 8006f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f56:	e7f8      	b.n	8006f4a <memmove+0x12>
 8006f58:	4402      	add	r2, r0
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	428a      	cmp	r2, r1
 8006f5e:	d100      	bne.n	8006f62 <memmove+0x2a>
 8006f60:	bd10      	pop	{r4, pc}
 8006f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f6a:	e7f7      	b.n	8006f5c <memmove+0x24>

08006f6c <_free_r>:
 8006f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f6e:	2900      	cmp	r1, #0
 8006f70:	d048      	beq.n	8007004 <_free_r+0x98>
 8006f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f76:	9001      	str	r0, [sp, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8006f7e:	bfb8      	it	lt
 8006f80:	18e4      	addlt	r4, r4, r3
 8006f82:	f000 f8d3 	bl	800712c <__malloc_lock>
 8006f86:	4a20      	ldr	r2, [pc, #128]	; (8007008 <_free_r+0x9c>)
 8006f88:	9801      	ldr	r0, [sp, #4]
 8006f8a:	6813      	ldr	r3, [r2, #0]
 8006f8c:	4615      	mov	r5, r2
 8006f8e:	b933      	cbnz	r3, 8006f9e <_free_r+0x32>
 8006f90:	6063      	str	r3, [r4, #4]
 8006f92:	6014      	str	r4, [r2, #0]
 8006f94:	b003      	add	sp, #12
 8006f96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f9a:	f000 b8cd 	b.w	8007138 <__malloc_unlock>
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	d90b      	bls.n	8006fba <_free_r+0x4e>
 8006fa2:	6821      	ldr	r1, [r4, #0]
 8006fa4:	1862      	adds	r2, r4, r1
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	bf04      	itt	eq
 8006faa:	681a      	ldreq	r2, [r3, #0]
 8006fac:	685b      	ldreq	r3, [r3, #4]
 8006fae:	6063      	str	r3, [r4, #4]
 8006fb0:	bf04      	itt	eq
 8006fb2:	1852      	addeq	r2, r2, r1
 8006fb4:	6022      	streq	r2, [r4, #0]
 8006fb6:	602c      	str	r4, [r5, #0]
 8006fb8:	e7ec      	b.n	8006f94 <_free_r+0x28>
 8006fba:	461a      	mov	r2, r3
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	b10b      	cbz	r3, 8006fc4 <_free_r+0x58>
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	d9fa      	bls.n	8006fba <_free_r+0x4e>
 8006fc4:	6811      	ldr	r1, [r2, #0]
 8006fc6:	1855      	adds	r5, r2, r1
 8006fc8:	42a5      	cmp	r5, r4
 8006fca:	d10b      	bne.n	8006fe4 <_free_r+0x78>
 8006fcc:	6824      	ldr	r4, [r4, #0]
 8006fce:	4421      	add	r1, r4
 8006fd0:	1854      	adds	r4, r2, r1
 8006fd2:	42a3      	cmp	r3, r4
 8006fd4:	6011      	str	r1, [r2, #0]
 8006fd6:	d1dd      	bne.n	8006f94 <_free_r+0x28>
 8006fd8:	681c      	ldr	r4, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	6053      	str	r3, [r2, #4]
 8006fde:	4421      	add	r1, r4
 8006fe0:	6011      	str	r1, [r2, #0]
 8006fe2:	e7d7      	b.n	8006f94 <_free_r+0x28>
 8006fe4:	d902      	bls.n	8006fec <_free_r+0x80>
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	6003      	str	r3, [r0, #0]
 8006fea:	e7d3      	b.n	8006f94 <_free_r+0x28>
 8006fec:	6825      	ldr	r5, [r4, #0]
 8006fee:	1961      	adds	r1, r4, r5
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	bf04      	itt	eq
 8006ff4:	6819      	ldreq	r1, [r3, #0]
 8006ff6:	685b      	ldreq	r3, [r3, #4]
 8006ff8:	6063      	str	r3, [r4, #4]
 8006ffa:	bf04      	itt	eq
 8006ffc:	1949      	addeq	r1, r1, r5
 8006ffe:	6021      	streq	r1, [r4, #0]
 8007000:	6054      	str	r4, [r2, #4]
 8007002:	e7c7      	b.n	8006f94 <_free_r+0x28>
 8007004:	b003      	add	sp, #12
 8007006:	bd30      	pop	{r4, r5, pc}
 8007008:	20000168 	.word	0x20000168

0800700c <_malloc_r>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	1ccd      	adds	r5, r1, #3
 8007010:	f025 0503 	bic.w	r5, r5, #3
 8007014:	3508      	adds	r5, #8
 8007016:	2d0c      	cmp	r5, #12
 8007018:	bf38      	it	cc
 800701a:	250c      	movcc	r5, #12
 800701c:	2d00      	cmp	r5, #0
 800701e:	4606      	mov	r6, r0
 8007020:	db01      	blt.n	8007026 <_malloc_r+0x1a>
 8007022:	42a9      	cmp	r1, r5
 8007024:	d903      	bls.n	800702e <_malloc_r+0x22>
 8007026:	230c      	movs	r3, #12
 8007028:	6033      	str	r3, [r6, #0]
 800702a:	2000      	movs	r0, #0
 800702c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800702e:	f000 f87d 	bl	800712c <__malloc_lock>
 8007032:	4921      	ldr	r1, [pc, #132]	; (80070b8 <_malloc_r+0xac>)
 8007034:	680a      	ldr	r2, [r1, #0]
 8007036:	4614      	mov	r4, r2
 8007038:	b99c      	cbnz	r4, 8007062 <_malloc_r+0x56>
 800703a:	4f20      	ldr	r7, [pc, #128]	; (80070bc <_malloc_r+0xb0>)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	b923      	cbnz	r3, 800704a <_malloc_r+0x3e>
 8007040:	4621      	mov	r1, r4
 8007042:	4630      	mov	r0, r6
 8007044:	f000 f862 	bl	800710c <_sbrk_r>
 8007048:	6038      	str	r0, [r7, #0]
 800704a:	4629      	mov	r1, r5
 800704c:	4630      	mov	r0, r6
 800704e:	f000 f85d 	bl	800710c <_sbrk_r>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	d123      	bne.n	800709e <_malloc_r+0x92>
 8007056:	230c      	movs	r3, #12
 8007058:	6033      	str	r3, [r6, #0]
 800705a:	4630      	mov	r0, r6
 800705c:	f000 f86c 	bl	8007138 <__malloc_unlock>
 8007060:	e7e3      	b.n	800702a <_malloc_r+0x1e>
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	1b5b      	subs	r3, r3, r5
 8007066:	d417      	bmi.n	8007098 <_malloc_r+0x8c>
 8007068:	2b0b      	cmp	r3, #11
 800706a:	d903      	bls.n	8007074 <_malloc_r+0x68>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	441c      	add	r4, r3
 8007070:	6025      	str	r5, [r4, #0]
 8007072:	e004      	b.n	800707e <_malloc_r+0x72>
 8007074:	6863      	ldr	r3, [r4, #4]
 8007076:	42a2      	cmp	r2, r4
 8007078:	bf0c      	ite	eq
 800707a:	600b      	streq	r3, [r1, #0]
 800707c:	6053      	strne	r3, [r2, #4]
 800707e:	4630      	mov	r0, r6
 8007080:	f000 f85a 	bl	8007138 <__malloc_unlock>
 8007084:	f104 000b 	add.w	r0, r4, #11
 8007088:	1d23      	adds	r3, r4, #4
 800708a:	f020 0007 	bic.w	r0, r0, #7
 800708e:	1ac2      	subs	r2, r0, r3
 8007090:	d0cc      	beq.n	800702c <_malloc_r+0x20>
 8007092:	1a1b      	subs	r3, r3, r0
 8007094:	50a3      	str	r3, [r4, r2]
 8007096:	e7c9      	b.n	800702c <_malloc_r+0x20>
 8007098:	4622      	mov	r2, r4
 800709a:	6864      	ldr	r4, [r4, #4]
 800709c:	e7cc      	b.n	8007038 <_malloc_r+0x2c>
 800709e:	1cc4      	adds	r4, r0, #3
 80070a0:	f024 0403 	bic.w	r4, r4, #3
 80070a4:	42a0      	cmp	r0, r4
 80070a6:	d0e3      	beq.n	8007070 <_malloc_r+0x64>
 80070a8:	1a21      	subs	r1, r4, r0
 80070aa:	4630      	mov	r0, r6
 80070ac:	f000 f82e 	bl	800710c <_sbrk_r>
 80070b0:	3001      	adds	r0, #1
 80070b2:	d1dd      	bne.n	8007070 <_malloc_r+0x64>
 80070b4:	e7cf      	b.n	8007056 <_malloc_r+0x4a>
 80070b6:	bf00      	nop
 80070b8:	20000168 	.word	0x20000168
 80070bc:	2000016c 	.word	0x2000016c

080070c0 <_realloc_r>:
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c2:	4607      	mov	r7, r0
 80070c4:	4614      	mov	r4, r2
 80070c6:	460e      	mov	r6, r1
 80070c8:	b921      	cbnz	r1, 80070d4 <_realloc_r+0x14>
 80070ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070ce:	4611      	mov	r1, r2
 80070d0:	f7ff bf9c 	b.w	800700c <_malloc_r>
 80070d4:	b922      	cbnz	r2, 80070e0 <_realloc_r+0x20>
 80070d6:	f7ff ff49 	bl	8006f6c <_free_r>
 80070da:	4625      	mov	r5, r4
 80070dc:	4628      	mov	r0, r5
 80070de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e0:	f000 f830 	bl	8007144 <_malloc_usable_size_r>
 80070e4:	42a0      	cmp	r0, r4
 80070e6:	d20f      	bcs.n	8007108 <_realloc_r+0x48>
 80070e8:	4621      	mov	r1, r4
 80070ea:	4638      	mov	r0, r7
 80070ec:	f7ff ff8e 	bl	800700c <_malloc_r>
 80070f0:	4605      	mov	r5, r0
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d0f2      	beq.n	80070dc <_realloc_r+0x1c>
 80070f6:	4631      	mov	r1, r6
 80070f8:	4622      	mov	r2, r4
 80070fa:	f7ff fbb1 	bl	8006860 <memcpy>
 80070fe:	4631      	mov	r1, r6
 8007100:	4638      	mov	r0, r7
 8007102:	f7ff ff33 	bl	8006f6c <_free_r>
 8007106:	e7e9      	b.n	80070dc <_realloc_r+0x1c>
 8007108:	4635      	mov	r5, r6
 800710a:	e7e7      	b.n	80070dc <_realloc_r+0x1c>

0800710c <_sbrk_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d06      	ldr	r5, [pc, #24]	; (8007128 <_sbrk_r+0x1c>)
 8007110:	2300      	movs	r3, #0
 8007112:	4604      	mov	r4, r0
 8007114:	4608      	mov	r0, r1
 8007116:	602b      	str	r3, [r5, #0]
 8007118:	f7fb fe2c 	bl	8002d74 <_sbrk>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_sbrk_r+0x1a>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_sbrk_r+0x1a>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	20000668 	.word	0x20000668

0800712c <__malloc_lock>:
 800712c:	4801      	ldr	r0, [pc, #4]	; (8007134 <__malloc_lock+0x8>)
 800712e:	f000 b811 	b.w	8007154 <__retarget_lock_acquire_recursive>
 8007132:	bf00      	nop
 8007134:	20000670 	.word	0x20000670

08007138 <__malloc_unlock>:
 8007138:	4801      	ldr	r0, [pc, #4]	; (8007140 <__malloc_unlock+0x8>)
 800713a:	f000 b80c 	b.w	8007156 <__retarget_lock_release_recursive>
 800713e:	bf00      	nop
 8007140:	20000670 	.word	0x20000670

08007144 <_malloc_usable_size_r>:
 8007144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007148:	1f18      	subs	r0, r3, #4
 800714a:	2b00      	cmp	r3, #0
 800714c:	bfbc      	itt	lt
 800714e:	580b      	ldrlt	r3, [r1, r0]
 8007150:	18c0      	addlt	r0, r0, r3
 8007152:	4770      	bx	lr

08007154 <__retarget_lock_acquire_recursive>:
 8007154:	4770      	bx	lr

08007156 <__retarget_lock_release_recursive>:
 8007156:	4770      	bx	lr

08007158 <_init>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr

08007164 <_fini>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	bf00      	nop
 8007168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716a:	bc08      	pop	{r3}
 800716c:	469e      	mov	lr, r3
 800716e:	4770      	bx	lr
